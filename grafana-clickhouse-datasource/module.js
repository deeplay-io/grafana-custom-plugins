/* [create-plugin] version: 5.5.1 */
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
define(["@emotion/css","@grafana/data","@grafana/runtime","@grafana/ui","lodash","module","react","rxjs"], (__WEBPACK_EXTERNAL_MODULE__emotion_css__, __WEBPACK_EXTERNAL_MODULE__grafana_data__, __WEBPACK_EXTERNAL_MODULE__grafana_runtime__, __WEBPACK_EXTERNAL_MODULE__grafana_ui__, __WEBPACK_EXTERNAL_MODULE_lodash__, __WEBPACK_EXTERNAL_MODULE_amd_module__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_rxjs__) => { return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../node_modules/@grafana/schema/dist/esm/common/common.gen.js":
/*!*********************************************************************!*\
  !*** ../node_modules/@grafana/schema/dist/esm/common/common.gen.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AxisColorMode: () => (/* binding */ AxisColorMode),\n/* harmony export */   AxisPlacement: () => (/* binding */ AxisPlacement),\n/* harmony export */   BarAlignment: () => (/* binding */ BarAlignment),\n/* harmony export */   BarGaugeDisplayMode: () => (/* binding */ BarGaugeDisplayMode),\n/* harmony export */   BarGaugeNamePlacement: () => (/* binding */ BarGaugeNamePlacement),\n/* harmony export */   BarGaugeSizing: () => (/* binding */ BarGaugeSizing),\n/* harmony export */   BarGaugeValueMode: () => (/* binding */ BarGaugeValueMode),\n/* harmony export */   BigValueColorMode: () => (/* binding */ BigValueColorMode),\n/* harmony export */   BigValueGraphMode: () => (/* binding */ BigValueGraphMode),\n/* harmony export */   BigValueJustifyMode: () => (/* binding */ BigValueJustifyMode),\n/* harmony export */   BigValueTextMode: () => (/* binding */ BigValueTextMode),\n/* harmony export */   ComparisonOperation: () => (/* binding */ ComparisonOperation),\n/* harmony export */   DataTopic: () => (/* binding */ DataTopic),\n/* harmony export */   FrameGeometrySourceMode: () => (/* binding */ FrameGeometrySourceMode),\n/* harmony export */   GraphDrawStyle: () => (/* binding */ GraphDrawStyle),\n/* harmony export */   GraphGradientMode: () => (/* binding */ GraphGradientMode),\n/* harmony export */   GraphThresholdsStyleMode: () => (/* binding */ GraphThresholdsStyleMode),\n/* harmony export */   GraphTransform: () => (/* binding */ GraphTransform),\n/* harmony export */   HeatmapCalculationMode: () => (/* binding */ HeatmapCalculationMode),\n/* harmony export */   HeatmapCellLayout: () => (/* binding */ HeatmapCellLayout),\n/* harmony export */   LegendDisplayMode: () => (/* binding */ LegendDisplayMode),\n/* harmony export */   LineInterpolation: () => (/* binding */ LineInterpolation),\n/* harmony export */   LogsDedupStrategy: () => (/* binding */ LogsDedupStrategy),\n/* harmony export */   LogsSortOrder: () => (/* binding */ LogsSortOrder),\n/* harmony export */   PercentChangeColorMode: () => (/* binding */ PercentChangeColorMode),\n/* harmony export */   ResourceDimensionMode: () => (/* binding */ ResourceDimensionMode),\n/* harmony export */   ScalarDimensionMode: () => (/* binding */ ScalarDimensionMode),\n/* harmony export */   ScaleDimensionMode: () => (/* binding */ ScaleDimensionMode),\n/* harmony export */   ScaleDirection: () => (/* binding */ ScaleDirection),\n/* harmony export */   ScaleDistribution: () => (/* binding */ ScaleDistribution),\n/* harmony export */   ScaleOrientation: () => (/* binding */ ScaleOrientation),\n/* harmony export */   SortOrder: () => (/* binding */ SortOrder),\n/* harmony export */   StackingMode: () => (/* binding */ StackingMode),\n/* harmony export */   TableCellBackgroundDisplayMode: () => (/* binding */ TableCellBackgroundDisplayMode),\n/* harmony export */   TableCellDisplayMode: () => (/* binding */ TableCellDisplayMode),\n/* harmony export */   TableCellHeight: () => (/* binding */ TableCellHeight),\n/* harmony export */   TextDimensionMode: () => (/* binding */ TextDimensionMode),\n/* harmony export */   TooltipDisplayMode: () => (/* binding */ TooltipDisplayMode),\n/* harmony export */   VariableFormatID: () => (/* binding */ VariableFormatID),\n/* harmony export */   VisibilityMode: () => (/* binding */ VisibilityMode),\n/* harmony export */   VizOrientation: () => (/* binding */ VizOrientation),\n/* harmony export */   defaultLineStyle: () => (/* binding */ defaultLineStyle),\n/* harmony export */   defaultOptionsWithTimezones: () => (/* binding */ defaultOptionsWithTimezones),\n/* harmony export */   defaultReduceDataOptions: () => (/* binding */ defaultReduceDataOptions),\n/* harmony export */   defaultTableFooterOptions: () => (/* binding */ defaultTableFooterOptions),\n/* harmony export */   defaultTimeZone: () => (/* binding */ defaultTimeZone),\n/* harmony export */   defaultVizLegendOptions: () => (/* binding */ defaultVizLegendOptions)\n/* harmony export */ });\nvar DataTopic = /* @__PURE__ */ ((DataTopic2) => {\n  DataTopic2[\"AlertStates\"] = \"alertStates\";\n  DataTopic2[\"Annotations\"] = \"annotations\";\n  DataTopic2[\"Series\"] = \"series\";\n  return DataTopic2;\n})(DataTopic || {});\nvar ScaleDimensionMode = /* @__PURE__ */ ((ScaleDimensionMode2) => {\n  ScaleDimensionMode2[\"Linear\"] = \"linear\";\n  ScaleDimensionMode2[\"Quad\"] = \"quad\";\n  return ScaleDimensionMode2;\n})(ScaleDimensionMode || {});\nvar ScalarDimensionMode = /* @__PURE__ */ ((ScalarDimensionMode2) => {\n  ScalarDimensionMode2[\"Clamped\"] = \"clamped\";\n  ScalarDimensionMode2[\"Mod\"] = \"mod\";\n  return ScalarDimensionMode2;\n})(ScalarDimensionMode || {});\nvar TextDimensionMode = /* @__PURE__ */ ((TextDimensionMode2) => {\n  TextDimensionMode2[\"Field\"] = \"field\";\n  TextDimensionMode2[\"Fixed\"] = \"fixed\";\n  TextDimensionMode2[\"Template\"] = \"template\";\n  return TextDimensionMode2;\n})(TextDimensionMode || {});\nvar ResourceDimensionMode = /* @__PURE__ */ ((ResourceDimensionMode2) => {\n  ResourceDimensionMode2[\"Field\"] = \"field\";\n  ResourceDimensionMode2[\"Fixed\"] = \"fixed\";\n  ResourceDimensionMode2[\"Mapping\"] = \"mapping\";\n  return ResourceDimensionMode2;\n})(ResourceDimensionMode || {});\nvar FrameGeometrySourceMode = /* @__PURE__ */ ((FrameGeometrySourceMode2) => {\n  FrameGeometrySourceMode2[\"Auto\"] = \"auto\";\n  FrameGeometrySourceMode2[\"Coords\"] = \"coords\";\n  FrameGeometrySourceMode2[\"Geohash\"] = \"geohash\";\n  FrameGeometrySourceMode2[\"Lookup\"] = \"lookup\";\n  return FrameGeometrySourceMode2;\n})(FrameGeometrySourceMode || {});\nvar HeatmapCalculationMode = /* @__PURE__ */ ((HeatmapCalculationMode2) => {\n  HeatmapCalculationMode2[\"Count\"] = \"count\";\n  HeatmapCalculationMode2[\"Size\"] = \"size\";\n  return HeatmapCalculationMode2;\n})(HeatmapCalculationMode || {});\nvar HeatmapCellLayout = /* @__PURE__ */ ((HeatmapCellLayout2) => {\n  HeatmapCellLayout2[\"auto\"] = \"auto\";\n  HeatmapCellLayout2[\"ge\"] = \"ge\";\n  HeatmapCellLayout2[\"le\"] = \"le\";\n  HeatmapCellLayout2[\"unknown\"] = \"unknown\";\n  return HeatmapCellLayout2;\n})(HeatmapCellLayout || {});\nvar LogsSortOrder = /* @__PURE__ */ ((LogsSortOrder2) => {\n  LogsSortOrder2[\"Ascending\"] = \"Ascending\";\n  LogsSortOrder2[\"Descending\"] = \"Descending\";\n  return LogsSortOrder2;\n})(LogsSortOrder || {});\nvar AxisPlacement = /* @__PURE__ */ ((AxisPlacement2) => {\n  AxisPlacement2[\"Auto\"] = \"auto\";\n  AxisPlacement2[\"Bottom\"] = \"bottom\";\n  AxisPlacement2[\"Hidden\"] = \"hidden\";\n  AxisPlacement2[\"Left\"] = \"left\";\n  AxisPlacement2[\"Right\"] = \"right\";\n  AxisPlacement2[\"Top\"] = \"top\";\n  return AxisPlacement2;\n})(AxisPlacement || {});\nvar AxisColorMode = /* @__PURE__ */ ((AxisColorMode2) => {\n  AxisColorMode2[\"Series\"] = \"series\";\n  AxisColorMode2[\"Text\"] = \"text\";\n  return AxisColorMode2;\n})(AxisColorMode || {});\nvar VisibilityMode = /* @__PURE__ */ ((VisibilityMode2) => {\n  VisibilityMode2[\"Always\"] = \"always\";\n  VisibilityMode2[\"Auto\"] = \"auto\";\n  VisibilityMode2[\"Never\"] = \"never\";\n  return VisibilityMode2;\n})(VisibilityMode || {});\nvar GraphDrawStyle = /* @__PURE__ */ ((GraphDrawStyle2) => {\n  GraphDrawStyle2[\"Bars\"] = \"bars\";\n  GraphDrawStyle2[\"Line\"] = \"line\";\n  GraphDrawStyle2[\"Points\"] = \"points\";\n  return GraphDrawStyle2;\n})(GraphDrawStyle || {});\nvar GraphTransform = /* @__PURE__ */ ((GraphTransform2) => {\n  GraphTransform2[\"Constant\"] = \"constant\";\n  GraphTransform2[\"NegativeY\"] = \"negative-Y\";\n  return GraphTransform2;\n})(GraphTransform || {});\nvar LineInterpolation = /* @__PURE__ */ ((LineInterpolation2) => {\n  LineInterpolation2[\"Linear\"] = \"linear\";\n  LineInterpolation2[\"Smooth\"] = \"smooth\";\n  LineInterpolation2[\"StepAfter\"] = \"stepAfter\";\n  LineInterpolation2[\"StepBefore\"] = \"stepBefore\";\n  return LineInterpolation2;\n})(LineInterpolation || {});\nvar ScaleDistribution = /* @__PURE__ */ ((ScaleDistribution2) => {\n  ScaleDistribution2[\"Linear\"] = \"linear\";\n  ScaleDistribution2[\"Log\"] = \"log\";\n  ScaleDistribution2[\"Ordinal\"] = \"ordinal\";\n  ScaleDistribution2[\"Symlog\"] = \"symlog\";\n  return ScaleDistribution2;\n})(ScaleDistribution || {});\nvar GraphGradientMode = /* @__PURE__ */ ((GraphGradientMode2) => {\n  GraphGradientMode2[\"Hue\"] = \"hue\";\n  GraphGradientMode2[\"None\"] = \"none\";\n  GraphGradientMode2[\"Opacity\"] = \"opacity\";\n  GraphGradientMode2[\"Scheme\"] = \"scheme\";\n  return GraphGradientMode2;\n})(GraphGradientMode || {});\nvar StackingMode = /* @__PURE__ */ ((StackingMode2) => {\n  StackingMode2[\"None\"] = \"none\";\n  StackingMode2[\"Normal\"] = \"normal\";\n  StackingMode2[\"Percent\"] = \"percent\";\n  return StackingMode2;\n})(StackingMode || {});\nvar BarAlignment = /* @__PURE__ */ ((BarAlignment2) => {\n  BarAlignment2[BarAlignment2[\"After\"] = 1] = \"After\";\n  BarAlignment2[BarAlignment2[\"Before\"] = -1] = \"Before\";\n  BarAlignment2[BarAlignment2[\"Center\"] = 0] = \"Center\";\n  return BarAlignment2;\n})(BarAlignment || {});\nvar ScaleOrientation = /* @__PURE__ */ ((ScaleOrientation2) => {\n  ScaleOrientation2[ScaleOrientation2[\"Horizontal\"] = 0] = \"Horizontal\";\n  ScaleOrientation2[ScaleOrientation2[\"Vertical\"] = 1] = \"Vertical\";\n  return ScaleOrientation2;\n})(ScaleOrientation || {});\nvar ScaleDirection = /* @__PURE__ */ ((ScaleDirection2) => {\n  ScaleDirection2[ScaleDirection2[\"Down\"] = -1] = \"Down\";\n  ScaleDirection2[ScaleDirection2[\"Left\"] = -1] = \"Left\";\n  ScaleDirection2[ScaleDirection2[\"Right\"] = 1] = \"Right\";\n  ScaleDirection2[ScaleDirection2[\"Up\"] = 1] = \"Up\";\n  return ScaleDirection2;\n})(ScaleDirection || {});\nconst defaultLineStyle = {\n  dash: []\n};\nvar GraphThresholdsStyleMode = /* @__PURE__ */ ((GraphThresholdsStyleMode2) => {\n  GraphThresholdsStyleMode2[\"Area\"] = \"area\";\n  GraphThresholdsStyleMode2[\"Dashed\"] = \"dashed\";\n  GraphThresholdsStyleMode2[\"DashedAndArea\"] = \"dashed+area\";\n  GraphThresholdsStyleMode2[\"Line\"] = \"line\";\n  GraphThresholdsStyleMode2[\"LineAndArea\"] = \"line+area\";\n  GraphThresholdsStyleMode2[\"Off\"] = \"off\";\n  GraphThresholdsStyleMode2[\"Series\"] = \"series\";\n  return GraphThresholdsStyleMode2;\n})(GraphThresholdsStyleMode || {});\nvar LegendDisplayMode = /* @__PURE__ */ ((LegendDisplayMode2) => {\n  LegendDisplayMode2[\"Hidden\"] = \"hidden\";\n  LegendDisplayMode2[\"List\"] = \"list\";\n  LegendDisplayMode2[\"Table\"] = \"table\";\n  return LegendDisplayMode2;\n})(LegendDisplayMode || {});\nconst defaultReduceDataOptions = {\n  calcs: []\n};\nvar VizOrientation = /* @__PURE__ */ ((VizOrientation2) => {\n  VizOrientation2[\"Auto\"] = \"auto\";\n  VizOrientation2[\"Horizontal\"] = \"horizontal\";\n  VizOrientation2[\"Vertical\"] = \"vertical\";\n  return VizOrientation2;\n})(VizOrientation || {});\nconst defaultOptionsWithTimezones = {\n  timezone: []\n};\nvar BigValueColorMode = /* @__PURE__ */ ((BigValueColorMode2) => {\n  BigValueColorMode2[\"Background\"] = \"background\";\n  BigValueColorMode2[\"BackgroundSolid\"] = \"background_solid\";\n  BigValueColorMode2[\"None\"] = \"none\";\n  BigValueColorMode2[\"Value\"] = \"value\";\n  return BigValueColorMode2;\n})(BigValueColorMode || {});\nvar BigValueGraphMode = /* @__PURE__ */ ((BigValueGraphMode2) => {\n  BigValueGraphMode2[\"Area\"] = \"area\";\n  BigValueGraphMode2[\"Line\"] = \"line\";\n  BigValueGraphMode2[\"None\"] = \"none\";\n  return BigValueGraphMode2;\n})(BigValueGraphMode || {});\nvar BigValueJustifyMode = /* @__PURE__ */ ((BigValueJustifyMode2) => {\n  BigValueJustifyMode2[\"Auto\"] = \"auto\";\n  BigValueJustifyMode2[\"Center\"] = \"center\";\n  return BigValueJustifyMode2;\n})(BigValueJustifyMode || {});\nvar BigValueTextMode = /* @__PURE__ */ ((BigValueTextMode2) => {\n  BigValueTextMode2[\"Auto\"] = \"auto\";\n  BigValueTextMode2[\"Name\"] = \"name\";\n  BigValueTextMode2[\"None\"] = \"none\";\n  BigValueTextMode2[\"Value\"] = \"value\";\n  BigValueTextMode2[\"ValueAndName\"] = \"value_and_name\";\n  return BigValueTextMode2;\n})(BigValueTextMode || {});\nvar PercentChangeColorMode = /* @__PURE__ */ ((PercentChangeColorMode2) => {\n  PercentChangeColorMode2[\"Inverted\"] = \"inverted\";\n  PercentChangeColorMode2[\"SameAsValue\"] = \"same_as_value\";\n  PercentChangeColorMode2[\"Standard\"] = \"standard\";\n  return PercentChangeColorMode2;\n})(PercentChangeColorMode || {});\nvar TooltipDisplayMode = /* @__PURE__ */ ((TooltipDisplayMode2) => {\n  TooltipDisplayMode2[\"Multi\"] = \"multi\";\n  TooltipDisplayMode2[\"None\"] = \"none\";\n  TooltipDisplayMode2[\"Single\"] = \"single\";\n  return TooltipDisplayMode2;\n})(TooltipDisplayMode || {});\nvar SortOrder = /* @__PURE__ */ ((SortOrder2) => {\n  SortOrder2[\"Ascending\"] = \"asc\";\n  SortOrder2[\"Descending\"] = \"desc\";\n  SortOrder2[\"None\"] = \"none\";\n  return SortOrder2;\n})(SortOrder || {});\nconst defaultVizLegendOptions = {\n  calcs: []\n};\nvar BarGaugeDisplayMode = /* @__PURE__ */ ((BarGaugeDisplayMode2) => {\n  BarGaugeDisplayMode2[\"Basic\"] = \"basic\";\n  BarGaugeDisplayMode2[\"Gradient\"] = \"gradient\";\n  BarGaugeDisplayMode2[\"Lcd\"] = \"lcd\";\n  return BarGaugeDisplayMode2;\n})(BarGaugeDisplayMode || {});\nvar BarGaugeValueMode = /* @__PURE__ */ ((BarGaugeValueMode2) => {\n  BarGaugeValueMode2[\"Color\"] = \"color\";\n  BarGaugeValueMode2[\"Hidden\"] = \"hidden\";\n  BarGaugeValueMode2[\"Text\"] = \"text\";\n  return BarGaugeValueMode2;\n})(BarGaugeValueMode || {});\nvar BarGaugeNamePlacement = /* @__PURE__ */ ((BarGaugeNamePlacement2) => {\n  BarGaugeNamePlacement2[\"Auto\"] = \"auto\";\n  BarGaugeNamePlacement2[\"Hidden\"] = \"hidden\";\n  BarGaugeNamePlacement2[\"Left\"] = \"left\";\n  BarGaugeNamePlacement2[\"Top\"] = \"top\";\n  return BarGaugeNamePlacement2;\n})(BarGaugeNamePlacement || {});\nvar BarGaugeSizing = /* @__PURE__ */ ((BarGaugeSizing2) => {\n  BarGaugeSizing2[\"Auto\"] = \"auto\";\n  BarGaugeSizing2[\"Manual\"] = \"manual\";\n  return BarGaugeSizing2;\n})(BarGaugeSizing || {});\nvar TableCellDisplayMode = /* @__PURE__ */ ((TableCellDisplayMode2) => {\n  TableCellDisplayMode2[\"Auto\"] = \"auto\";\n  TableCellDisplayMode2[\"BasicGauge\"] = \"basic\";\n  TableCellDisplayMode2[\"ColorBackground\"] = \"color-background\";\n  TableCellDisplayMode2[\"ColorBackgroundSolid\"] = \"color-background-solid\";\n  TableCellDisplayMode2[\"ColorText\"] = \"color-text\";\n  TableCellDisplayMode2[\"Custom\"] = \"custom\";\n  TableCellDisplayMode2[\"DataLinks\"] = \"data-links\";\n  TableCellDisplayMode2[\"Gauge\"] = \"gauge\";\n  TableCellDisplayMode2[\"GradientGauge\"] = \"gradient-gauge\";\n  TableCellDisplayMode2[\"Image\"] = \"image\";\n  TableCellDisplayMode2[\"JSONView\"] = \"json-view\";\n  TableCellDisplayMode2[\"LcdGauge\"] = \"lcd-gauge\";\n  TableCellDisplayMode2[\"Sparkline\"] = \"sparkline\";\n  return TableCellDisplayMode2;\n})(TableCellDisplayMode || {});\nvar TableCellBackgroundDisplayMode = /* @__PURE__ */ ((TableCellBackgroundDisplayMode2) => {\n  TableCellBackgroundDisplayMode2[\"Basic\"] = \"basic\";\n  TableCellBackgroundDisplayMode2[\"Gradient\"] = \"gradient\";\n  return TableCellBackgroundDisplayMode2;\n})(TableCellBackgroundDisplayMode || {});\nconst defaultTableFooterOptions = {\n  fields: [],\n  reducer: []\n};\nvar TableCellHeight = /* @__PURE__ */ ((TableCellHeight2) => {\n  TableCellHeight2[\"Auto\"] = \"auto\";\n  TableCellHeight2[\"Lg\"] = \"lg\";\n  TableCellHeight2[\"Md\"] = \"md\";\n  TableCellHeight2[\"Sm\"] = \"sm\";\n  return TableCellHeight2;\n})(TableCellHeight || {});\nvar VariableFormatID = /* @__PURE__ */ ((VariableFormatID2) => {\n  VariableFormatID2[\"CSV\"] = \"csv\";\n  VariableFormatID2[\"Date\"] = \"date\";\n  VariableFormatID2[\"Distributed\"] = \"distributed\";\n  VariableFormatID2[\"DoubleQuote\"] = \"doublequote\";\n  VariableFormatID2[\"Glob\"] = \"glob\";\n  VariableFormatID2[\"HTML\"] = \"html\";\n  VariableFormatID2[\"JSON\"] = \"json\";\n  VariableFormatID2[\"Lucene\"] = \"lucene\";\n  VariableFormatID2[\"PercentEncode\"] = \"percentencode\";\n  VariableFormatID2[\"Pipe\"] = \"pipe\";\n  VariableFormatID2[\"QueryParam\"] = \"queryparam\";\n  VariableFormatID2[\"Raw\"] = \"raw\";\n  VariableFormatID2[\"Regex\"] = \"regex\";\n  VariableFormatID2[\"SQLString\"] = \"sqlstring\";\n  VariableFormatID2[\"SingleQuote\"] = \"singlequote\";\n  VariableFormatID2[\"Text\"] = \"text\";\n  VariableFormatID2[\"UriEncode\"] = \"uriencode\";\n  return VariableFormatID2;\n})(VariableFormatID || {});\nvar LogsDedupStrategy = /* @__PURE__ */ ((LogsDedupStrategy2) => {\n  LogsDedupStrategy2[\"exact\"] = \"exact\";\n  LogsDedupStrategy2[\"none\"] = \"none\";\n  LogsDedupStrategy2[\"numbers\"] = \"numbers\";\n  LogsDedupStrategy2[\"signature\"] = \"signature\";\n  return LogsDedupStrategy2;\n})(LogsDedupStrategy || {});\nvar ComparisonOperation = /* @__PURE__ */ ((ComparisonOperation2) => {\n  ComparisonOperation2[\"EQ\"] = \"eq\";\n  ComparisonOperation2[\"GT\"] = \"gt\";\n  ComparisonOperation2[\"GTE\"] = \"gte\";\n  ComparisonOperation2[\"LT\"] = \"lt\";\n  ComparisonOperation2[\"LTE\"] = \"lte\";\n  ComparisonOperation2[\"NEQ\"] = \"neq\";\n  return ComparisonOperation2;\n})(ComparisonOperation || {});\nconst defaultTimeZone = \"browser\";\n\n\n//# sourceMappingURL=common.gen.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/@grafana/schema/dist/esm/common/common.gen.js\n");

/***/ }),

/***/ "./module.ts":
/*!*******************!*\
  !*** ./module.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   plugin: () => (/* binding */ plugin)\n/* harmony export */ });\n/* harmony import */ var grafana_public_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! grafana-public-path */ \"./node_modules/grafana-public-path.js\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/data */ \"@grafana/data\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_data__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _data_CHDatasource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data/CHDatasource */ \"./data/CHDatasource.ts\");\n/* harmony import */ var _views_CHConfigEditor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/CHConfigEditor */ \"./views/CHConfigEditor.tsx\");\n/* harmony import */ var _views_CHQueryEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./views/CHQueryEditor */ \"./views/CHQueryEditor.tsx\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _tracking__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tracking */ \"./tracking.ts\");\n/* harmony import */ var _plugin_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin.json */ \"./plugin.json\");\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../package.json */ \"../package.json\");\n/*** IMPORTS FROM imports-loader ***/\n\n\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\n\nconst plugin = new _grafana_data__WEBPACK_IMPORTED_MODULE_1__.DataSourcePlugin(_data_CHDatasource__WEBPACK_IMPORTED_MODULE_2__.Datasource).setConfigEditor(_views_CHConfigEditor__WEBPACK_IMPORTED_MODULE_3__.ConfigEditor).setQueryEditor(_views_CHQueryEditor__WEBPACK_IMPORTED_MODULE_4__.CHQueryEditor);\n// Track dashboard loads to RudderStack\n(0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_5__.getAppEvents)().subscribe(_grafana_data__WEBPACK_IMPORTED_MODULE_1__.DashboardLoadedEvent, ({ payload: { dashboardId, orgId, grafanaVersion, queries } })=>{\n    var _queries_pluginJson_id;\n    const clickhouseQueries = (_queries_pluginJson_id = queries[_plugin_json__WEBPACK_IMPORTED_MODULE_7__.id]) === null || _queries_pluginJson_id === void 0 ? void 0 : _queries_pluginJson_id.filter((q)=>!q.hide);\n    if (!(clickhouseQueries === null || clickhouseQueries === void 0 ? void 0 : clickhouseQueries.length)) {\n        return;\n    }\n    (0,_tracking__WEBPACK_IMPORTED_MODULE_6__.trackClickhouseDashboardLoaded)(_object_spread({\n        clickhouse_plugin_version: _package_json__WEBPACK_IMPORTED_MODULE_8__.version,\n        grafana_version: grafanaVersion,\n        dashboard_id: dashboardId,\n        org_id: orgId\n    }, (0,_tracking__WEBPACK_IMPORTED_MODULE_6__.analyzeQueries)(clickhouseQueries)));\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9tb2R1bGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1RTtBQUN0QjtBQUNLO0FBQ0E7QUFHTjtBQUMwQjtBQUNuQztBQUNTO0FBRXpDLE1BQU1VLFNBQVMsSUFBSVYsMkRBQWdCQSxDQUFnQ0UsMERBQVVBLEVBQ2pGUyxlQUFlLENBQUNSLCtEQUFZQSxFQUM1QlMsY0FBYyxDQUFDUiwrREFBYUEsRUFBRTtBQUVqQyx1Q0FBdUM7QUFDdkNDLDhEQUFZQSxHQUFHUSxTQUFTLENBQ3RCWiwrREFBb0JBLEVBQ3BCLENBQUMsRUFBRWEsU0FBUyxFQUFFQyxXQUFXLEVBQUVDLEtBQUssRUFBRUMsY0FBYyxFQUFFQyxPQUFPLEVBQUUsRUFBRTtRQUNqQ0E7SUFBMUIsTUFBTUMscUJBQW9CRCxnQ0FBTyxDQUFDViw0Q0FBYSxDQUFDLGNBQXRCVSxvRUFBd0JHLE1BQU0sQ0FBQyxDQUFDQyxJQUFNLENBQUNBLEVBQUVDLElBQUk7SUFDdkUsSUFBSSxFQUFDSix3RkFBbUJLLE1BQU0sR0FBRTtRQUM5QjtJQUNGO0lBRUFqQix5RUFBOEJBLENBQUM7UUFDN0JrQiwyQkFBMkJoQixrREFBeUI7UUFDcERrQixpQkFBaUJWO1FBQ2pCVyxjQUFjYjtRQUNkYyxRQUFRYjtPQUNMVix5REFBY0EsQ0FBQ2E7QUFFdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL21vZHVsZS50cz9jMjE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2VQbHVnaW4sIERhc2hib2FyZExvYWRlZEV2ZW50IH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBEYXRhc291cmNlIH0gZnJvbSAnLi9kYXRhL0NIRGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBDb25maWdFZGl0b3IgfSBmcm9tICcuL3ZpZXdzL0NIQ29uZmlnRWRpdG9yJztcbmltcG9ydCB7IENIUXVlcnlFZGl0b3IgfSBmcm9tICcuL3ZpZXdzL0NIUXVlcnlFZGl0b3InO1xuaW1wb3J0IHsgQ0hDb25maWcgfSBmcm9tICd0eXBlcy9jb25maWcnO1xuaW1wb3J0IHsgQ0hRdWVyeSB9IGZyb20gJ3R5cGVzL3NxbCc7XG5pbXBvcnQgeyBnZXRBcHBFdmVudHMgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcbmltcG9ydCB7IGFuYWx5emVRdWVyaWVzLCB0cmFja0NsaWNraG91c2VEYXNoYm9hcmRMb2FkZWQgfSBmcm9tICd0cmFja2luZyc7XG5pbXBvcnQgcGx1Z2luSnNvbiBmcm9tICcuL3BsdWdpbi5qc29uJztcbmltcG9ydCBjbGlja2hvdXNlVmVyc2lvbiBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuXG5leHBvcnQgY29uc3QgcGx1Z2luID0gbmV3IERhdGFTb3VyY2VQbHVnaW48RGF0YXNvdXJjZSwgQ0hRdWVyeSwgQ0hDb25maWc+KERhdGFzb3VyY2UpXG4gIC5zZXRDb25maWdFZGl0b3IoQ29uZmlnRWRpdG9yKVxuICAuc2V0UXVlcnlFZGl0b3IoQ0hRdWVyeUVkaXRvcik7XG5cbi8vIFRyYWNrIGRhc2hib2FyZCBsb2FkcyB0byBSdWRkZXJTdGFja1xuZ2V0QXBwRXZlbnRzKCkuc3Vic2NyaWJlPERhc2hib2FyZExvYWRlZEV2ZW50PENIUXVlcnk+PihcbiAgRGFzaGJvYXJkTG9hZGVkRXZlbnQsXG4gICh7IHBheWxvYWQ6IHsgZGFzaGJvYXJkSWQsIG9yZ0lkLCBncmFmYW5hVmVyc2lvbiwgcXVlcmllcyB9IH0pID0+IHtcbiAgICBjb25zdCBjbGlja2hvdXNlUXVlcmllcyA9IHF1ZXJpZXNbcGx1Z2luSnNvbi5pZF0/LmZpbHRlcigocSkgPT4gIXEuaGlkZSk7XG4gICAgaWYgKCFjbGlja2hvdXNlUXVlcmllcz8ubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJhY2tDbGlja2hvdXNlRGFzaGJvYXJkTG9hZGVkKHtcbiAgICAgIGNsaWNraG91c2VfcGx1Z2luX3ZlcnNpb246IGNsaWNraG91c2VWZXJzaW9uLnZlcnNpb24sXG4gICAgICBncmFmYW5hX3ZlcnNpb246IGdyYWZhbmFWZXJzaW9uLFxuICAgICAgZGFzaGJvYXJkX2lkOiBkYXNoYm9hcmRJZCxcbiAgICAgIG9yZ19pZDogb3JnSWQsXG4gICAgICAuLi5hbmFseXplUXVlcmllcyhjbGlja2hvdXNlUXVlcmllcyksXG4gICAgfSk7XG4gIH1cbik7XG4iXSwibmFtZXMiOlsiRGF0YVNvdXJjZVBsdWdpbiIsIkRhc2hib2FyZExvYWRlZEV2ZW50IiwiRGF0YXNvdXJjZSIsIkNvbmZpZ0VkaXRvciIsIkNIUXVlcnlFZGl0b3IiLCJnZXRBcHBFdmVudHMiLCJhbmFseXplUXVlcmllcyIsInRyYWNrQ2xpY2tob3VzZURhc2hib2FyZExvYWRlZCIsInBsdWdpbkpzb24iLCJjbGlja2hvdXNlVmVyc2lvbiIsInBsdWdpbiIsInNldENvbmZpZ0VkaXRvciIsInNldFF1ZXJ5RWRpdG9yIiwic3Vic2NyaWJlIiwicGF5bG9hZCIsImRhc2hib2FyZElkIiwib3JnSWQiLCJncmFmYW5hVmVyc2lvbiIsInF1ZXJpZXMiLCJjbGlja2hvdXNlUXVlcmllcyIsImlkIiwiZmlsdGVyIiwicSIsImhpZGUiLCJsZW5ndGgiLCJjbGlja2hvdXNlX3BsdWdpbl92ZXJzaW9uIiwidmVyc2lvbiIsImdyYWZhbmFfdmVyc2lvbiIsImRhc2hib2FyZF9pZCIsIm9yZ19pZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./module.ts\n");

/***/ }),

/***/ "../node_modules/js-sql-parser/dist/parser/sqlParser.js":
/*!**************************************************************!*\
  !*** ../node_modules/js-sql-parser/dist/parser/sqlParser.js ***!
  \**************************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar sqlParser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,4],$V2=[2,4],$V3=[1,11],$V4=[1,10],$V5=[2,16],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[6,8],$Va=[2,146],$Vb=[1,19],$Vc=[1,20],$Vd=[16,33,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Ve=[16,18,32,33,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Vf=[2,160],$Vg=[1,29],$Vh=[6,8,14,17,146,150,152,154],$Vi=[1,42],$Vj=[1,60],$Vk=[1,52],$Vl=[1,59],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,58],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,43],$Vy=[1,44],$Vz=[1,45],$VA=[1,34],$VB=[1,66],$VC=[16,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$VD=[6,8,14,17,150,152,154],$VE=[2,143],$VF=[1,75],$VG=[1,76],$VH=[6,8,14,17,43,133,138,144,146,150,152,154],$VI=[1,81],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,82],$VN=[6,8,14,17,36,43,49,50,51,71,72,74,77,89,107,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$VO=[6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,107,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$VP=[1,103],$VQ=[1,101],$VR=[1,102],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[1,104],$VX=[1,105],$VY=[1,106],$VZ=[1,107],$V_=[1,108],$V$=[1,109],$V01=[2,103],$V11=[6,8,14,17,34,36,43,45,49,50,51,71,72,74,77,79,81,89,91,92,93,94,95,96,97,98,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$V21=[6,8,14,17,34,36,43,45,49,50,51,71,72,74,77,79,81,89,91,92,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$V31=[1,110],$V41=[1,117],$V51=[2,64],$V61=[1,118],$V71=[16,35,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$V81=[16,29,35,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,119,195],$V91=[1,164],$Va1=[17,43],$Vb1=[2,59],$Vc1=[1,173],$Vd1=[1,171],$Ve1=[1,172],$Vf1=[6,8,138,146],$Vg1=[16,35,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Vh1=[6,8,14,17,138,144,146,150,152,154],$Vi1=[6,8,14,17,36,43,49,50,51,71,72,74,77,89,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$Vj1=[6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,91,92,93,94,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$Vk1=[6,8,14,17,34,36,43,49,50,51,71,72,74,77,79,81,89,91,92,93,94,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],$Vl1=[16,35,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Vm1=[16,35,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Vn1=[16,35,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Vo1=[71,74,77],$Vp1=[16,35,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$Vq1=[1,233],$Vr1=[1,234],$Vs1=[6,8,14,17],$Vt1=[6,8,14,17,43,157],$Vu1=[1,251],$Vv1=[1,247],$Vw1=[2,197],$Vx1=[1,256],$Vy1=[1,257],$Vz1=[6,8,14,17,43,129,135,138,144,146,150,152,154,182],$VA1=[1,259],$VB1=[1,262],$VC1=[1,263],$VD1=[1,264],$VE1=[1,265],$VF1=[2,174],$VG1=[1,261],$VH1=[6,8,14,17,36,43,89,129,135,138,144,146,150,152,154,164,165,167,168,173,177,179,180,182],$VI1=[6,8,14,17,36,43,89,129,135,138,144,146,150,152,154,164,165,167,168,173,177,179,180,182,192,193,194],$VJ1=[2,199],$VK1=[1,271],$VL1=[6,8,14,17,135,138,144,146,150,152,154],$VM1=[1,280],$VN1=[2,179],$VO1=[170,173],$VP1=[2,210],$VQ1=[1,290],$VR1=[1,291],$VS1=[1,292],$VT1=[1,302],$VU1=[1,311],$VV1=[1,312],$VW1=[6,8,14,17,138,146,150,152,154],$VX1=[1,322],$VY1=[2,204],$VZ1=[1,328],$V_1=[16,152],$V$1=[6,8,14,17,152,154],$V02=[1,354];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"main\":3,\"selectClause\":4,\"semicolonOpt\":5,\"EOF\":6,\"unionClause\":7,\";\":8,\"unionClauseNotParenthesized\":9,\"unionClauseParenthesized\":10,\"order_by_opt\":11,\"limit_opt\":12,\"selectClauseParenthesized\":13,\"UNION\":14,\"distinctOpt\":15,\"(\":16,\")\":17,\"SELECT\":18,\"highPriorityOpt\":19,\"maxStateMentTimeOpt\":20,\"straightJoinOpt\":21,\"sqlSmallResultOpt\":22,\"sqlBigResultOpt\":23,\"sqlBufferResultOpt\":24,\"sqlCacheOpt\":25,\"sqlCalcFoundRowsOpt\":26,\"selectExprList\":27,\"selectDataSetOpt\":28,\"ALL\":29,\"DISTINCT\":30,\"DISTINCTROW\":31,\"HIGH_PRIORITY\":32,\"MAX_STATEMENT_TIME\":33,\"=\":34,\"NUMERIC\":35,\"STRAIGHT_JOIN\":36,\"SQL_SMALL_RESULT\":37,\"SQL_BIG_RESULT\":38,\"SQL_BUFFER_RESULT\":39,\"SQL_CACHE\":40,\"SQL_NO_CACHE\":41,\"SQL_CALC_FOUND_ROWS\":42,\",\":43,\"selectExpr\":44,\"*\":45,\"SELECT_EXPR_STAR\":46,\"expr\":47,\"selectExprAliasOpt\":48,\"AS\":49,\"IDENTIFIER\":50,\"STRING\":51,\"string\":52,\"number\":53,\"EXPONENT_NUMERIC\":54,\"HEX_NUMERIC\":55,\"boolean\":56,\"TRUE\":57,\"FALSE\":58,\"null\":59,\"NULL\":60,\"literal\":61,\"place_holder\":62,\"function_call\":63,\"function_call_param_list\":64,\"function_call_param\":65,\"identifier\":66,\"DOT\":67,\"identifier_list\":68,\"case_expr_opt\":69,\"when_then_list\":70,\"WHEN\":71,\"THEN\":72,\"case_when_else\":73,\"ELSE\":74,\"case_when\":75,\"CASE\":76,\"END\":77,\"simple_expr_prefix\":78,\"+\":79,\"simple_expr\":80,\"-\":81,\"~\":82,\"!\":83,\"BINARY\":84,\"expr_list\":85,\"ROW\":86,\"EXISTS\":87,\"{\":88,\"}\":89,\"bit_expr\":90,\"|\":91,\"&\":92,\"<<\":93,\">>\":94,\"/\":95,\"DIV\":96,\"MOD\":97,\"%\":98,\"^\":99,\"not_opt\":100,\"NOT\":101,\"escape_opt\":102,\"ESCAPE\":103,\"predicate\":104,\"IN\":105,\"BETWEEN\":106,\"AND\":107,\"SOUNDS\":108,\"LIKE\":109,\"REGEXP\":110,\"comparison_operator\":111,\">=\":112,\">\":113,\"<=\":114,\"<\":115,\"<>\":116,\"!=\":117,\"sub_query_data_set_opt\":118,\"ANY\":119,\"boolean_primary\":120,\"IS\":121,\"boolean_extra\":122,\"UNKNOWN\":123,\"&&\":124,\"||\":125,\"OR\":126,\"XOR\":127,\"where_opt\":128,\"WHERE\":129,\"group_by_opt\":130,\"group_by\":131,\"roll_up_opt\":132,\"WITH\":133,\"ROLLUP\":134,\"GROUP_BY\":135,\"group_by_order_by_item_list\":136,\"order_by\":137,\"ORDER_BY\":138,\"group_by_order_by_item\":139,\"sort_opt\":140,\"ASC\":141,\"DESC\":142,\"having_opt\":143,\"HAVING\":144,\"limit\":145,\"LIMIT\":146,\"OFFSET\":147,\"procedure_opt\":148,\"procedure\":149,\"PROCEDURE\":150,\"for_update_lock_in_share_mode_opt\":151,\"FOR\":152,\"UPDATE\":153,\"LOCK\":154,\"SHARE\":155,\"MODE\":156,\"FROM\":157,\"table_references\":158,\"partitionOpt\":159,\"escaped_table_reference\":160,\"table_reference\":161,\"OJ\":162,\"join_inner_cross\":163,\"INNER\":164,\"CROSS\":165,\"left_right\":166,\"LEFT\":167,\"RIGHT\":168,\"out_opt\":169,\"OUTER\":170,\"left_right_out_opt\":171,\"join_table\":172,\"JOIN\":173,\"table_factor\":174,\"join_condition\":175,\"on_join_condition\":176,\"NATURAL\":177,\"join_condition_opt\":178,\"ON\":179,\"USING\":180,\"partition_names\":181,\"PARTITION\":182,\"aliasOpt\":183,\"index_or_key\":184,\"INDEX\":185,\"KEY\":186,\"for_opt\":187,\"identifier_list_opt\":188,\"index_hint_list_opt\":189,\"index_hint_list\":190,\"index_hint\":191,\"USE\":192,\"IGNORE\":193,\"FORCE\":194,\"PLACE_HOLDER\":195,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",6:\"EOF\",8:\";\",14:\"UNION\",16:\"(\",17:\")\",18:\"SELECT\",29:\"ALL\",30:\"DISTINCT\",31:\"DISTINCTROW\",32:\"HIGH_PRIORITY\",33:\"MAX_STATEMENT_TIME\",34:\"=\",35:\"NUMERIC\",36:\"STRAIGHT_JOIN\",37:\"SQL_SMALL_RESULT\",38:\"SQL_BIG_RESULT\",39:\"SQL_BUFFER_RESULT\",40:\"SQL_CACHE\",41:\"SQL_NO_CACHE\",42:\"SQL_CALC_FOUND_ROWS\",43:\",\",45:\"*\",46:\"SELECT_EXPR_STAR\",49:\"AS\",50:\"IDENTIFIER\",51:\"STRING\",54:\"EXPONENT_NUMERIC\",55:\"HEX_NUMERIC\",57:\"TRUE\",58:\"FALSE\",60:\"NULL\",67:\"DOT\",71:\"WHEN\",72:\"THEN\",74:\"ELSE\",76:\"CASE\",77:\"END\",79:\"+\",81:\"-\",82:\"~\",83:\"!\",84:\"BINARY\",86:\"ROW\",87:\"EXISTS\",88:\"{\",89:\"}\",91:\"|\",92:\"&\",93:\"<<\",94:\">>\",95:\"/\",96:\"DIV\",97:\"MOD\",98:\"%\",99:\"^\",101:\"NOT\",103:\"ESCAPE\",105:\"IN\",106:\"BETWEEN\",107:\"AND\",108:\"SOUNDS\",109:\"LIKE\",110:\"REGEXP\",112:\">=\",113:\">\",114:\"<=\",115:\"<\",116:\"<>\",117:\"!=\",119:\"ANY\",121:\"IS\",123:\"UNKNOWN\",124:\"&&\",125:\"||\",126:\"OR\",127:\"XOR\",129:\"WHERE\",133:\"WITH\",134:\"ROLLUP\",135:\"GROUP_BY\",138:\"ORDER_BY\",141:\"ASC\",142:\"DESC\",144:\"HAVING\",146:\"LIMIT\",147:\"OFFSET\",150:\"PROCEDURE\",152:\"FOR\",153:\"UPDATE\",154:\"LOCK\",155:\"SHARE\",156:\"MODE\",157:\"FROM\",162:\"OJ\",164:\"INNER\",165:\"CROSS\",167:\"LEFT\",168:\"RIGHT\",170:\"OUTER\",173:\"JOIN\",177:\"NATURAL\",179:\"ON\",180:\"USING\",182:\"PARTITION\",185:\"INDEX\",186:\"KEY\",192:\"USE\",193:\"IGNORE\",194:\"FORCE\",195:\"PLACE_HOLDER\"},\nproductions_: [0,[3,3],[3,3],[5,1],[5,0],[7,1],[7,3],[10,4],[10,4],[13,3],[9,4],[9,4],[4,12],[15,1],[15,1],[15,1],[15,0],[19,1],[19,0],[20,3],[20,0],[21,1],[21,0],[22,1],[22,0],[23,1],[23,0],[24,1],[24,0],[25,0],[25,1],[25,1],[26,1],[26,0],[27,3],[27,1],[44,1],[44,1],[44,2],[48,0],[48,2],[48,1],[48,2],[48,1],[52,1],[53,1],[53,1],[53,1],[56,1],[56,1],[59,1],[61,1],[61,1],[61,1],[61,1],[61,1],[63,4],[64,3],[64,1],[65,0],[65,1],[65,1],[65,2],[65,1],[66,1],[66,3],[68,1],[68,3],[69,0],[69,1],[70,4],[70,5],[73,0],[73,2],[75,5],[78,2],[78,2],[78,2],[78,2],[78,2],[80,1],[80,1],[80,1],[80,1],[80,3],[80,4],[80,3],[80,4],[80,4],[80,1],[90,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[100,0],[100,1],[102,0],[102,2],[104,1],[104,6],[104,6],[104,6],[104,4],[104,5],[104,4],[111,1],[111,1],[111,1],[111,1],[111,1],[111,1],[111,1],[118,1],[118,1],[120,1],[120,4],[120,3],[120,6],[122,1],[122,1],[47,1],[47,4],[47,2],[47,3],[47,3],[47,3],[47,3],[47,3],[85,1],[85,3],[128,0],[128,2],[130,0],[130,1],[132,0],[132,2],[131,3],[11,0],[11,1],[137,3],[136,1],[136,3],[139,2],[140,0],[140,1],[140,1],[143,0],[143,2],[145,2],[145,4],[145,4],[12,0],[12,1],[148,0],[148,1],[149,2],[151,0],[151,2],[151,4],[28,0],[28,10],[158,1],[158,3],[160,1],[160,4],[163,0],[163,1],[163,1],[166,1],[166,1],[169,0],[169,1],[171,0],[171,2],[172,4],[172,5],[172,4],[172,6],[172,5],[178,0],[178,1],[176,2],[175,1],[175,4],[161,1],[161,1],[181,1],[181,3],[159,0],[159,4],[183,0],[183,2],[183,1],[184,1],[184,1],[187,0],[187,2],[187,2],[187,2],[188,0],[188,1],[189,0],[189,1],[190,1],[190,3],[191,6],[191,6],[191,6],[174,4],[174,4],[174,3],[174,3],[62,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: case 2:\n return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: $$[$0-1]}; \nbreak;\ncase 3: case 144:\n this.$ = true \nbreak;\ncase 4:\n this.$ = false \nbreak;\ncase 5: case 13: case 14: case 15: case 17: case 19: case 21: case 23: case 25: case 27: case 30: case 31: case 32: case 51: case 52: case 53: case 54: case 55: case 60: case 61: case 63: case 69: case 73: case 80: case 81: case 82: case 83: case 89: case 90: case 104: case 106: case 107: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 127: case 129: case 140: case 142: case 147: case 153: case 154: case 156: case 161: case 163: case 164: case 175: case 176: case 177: case 178: case 180: case 189: case 191: case 193: case 194: case 202: case 203: case 209: case 211:\n this.$ = $$[$0] \nbreak;\ncase 6:\n this.$ = $$[$0-2], this.$.orderBy = $$[$0-1], this.$.limit = $$[$0]; \nbreak;\ncase 7: case 8:\n this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; \nbreak;\ncase 9:\n this.$ = { type: 'SelectParenthesized', value: $$[$0-1] }; \nbreak;\ncase 10: case 11:\n this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } \nbreak;\ncase 12:\n\n        this.$ = {\n          type: 'Select',\n          distinctOpt: $$[$0-10],\n          highPriorityOpt: $$[$0-9],\n          maxStateMentTimeOpt: $$[$0-8],\n          straightJoinOpt: $$[$0-7],\n          sqlSmallResultOpt: $$[$0-6],\n          sqlBigResultOpt: $$[$0-5],\n          sqlBufferResultOpt: $$[$0-4],\n          sqlCacheOpt: $$[$0-3],\n          sqlCalcFoundRowsOpt: $$[$0-2],\n          selectItems: $$[$0-1],\n          from: $$[$0].from,\n          partition: $$[$0].partition,\n          where: $$[$0].where,\n          groupBy: $$[$0].groupBy,\n          having: $$[$0].having,\n          orderBy: $$[$0].orderBy,\n          limit: $$[$0].limit,\n          procedure: $$[$0].procedure,\n          updateLockMode: $$[$0].updateLockMode\n        }\n      \nbreak;\ncase 16: case 18: case 20: case 22: case 24: case 26: case 28: case 29: case 33: case 59: case 68: case 72: case 103: case 105: case 139: case 141: case 143: case 146: case 152: case 155: case 160: case 162: case 165: case 174: case 179: case 188: case 197: case 204: case 208: case 210:\n this.$ = null \nbreak;\ncase 34:\n $$[$0-2].value.push($$[$0]); \nbreak;\ncase 35:\n this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } \nbreak;\ncase 36: case 37: case 64:\n this.$ = { type: 'Identifier', value: $$[$0] } \nbreak;\ncase 38:\n this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; \nbreak;\ncase 39: case 199:\n this.$ = {alias: null, hasAs: null} \nbreak;\ncase 40: case 42:\n this.$ = {alias: $$[$0], hasAs: true} \nbreak;\ncase 41:\n this.$ = {alias: $$[$0], hasAs: false} \nbreak;\ncase 43:\n this.$ = {alias: $$[$01], hasAs: false} \nbreak;\ncase 44:\n this.$ = { type: 'String', value: $$[$0] } \nbreak;\ncase 45: case 46: case 47:\n this.$ = { type: 'Number', value: $$[$0] } \nbreak;\ncase 48:\n this.$ = { type: 'Boolean', value: 'TRUE' } \nbreak;\ncase 49:\n this.$ = { type: 'Boolean', value: 'FALSE' } \nbreak;\ncase 50:\n this.$ = { type: 'Null', value: 'null' } \nbreak;\ncase 56:\n this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} \nbreak;\ncase 57:\n $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; \nbreak;\ncase 58:\n this.$ = [$$[$0]]; \nbreak;\ncase 62:\n this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } \nbreak;\ncase 65:\n this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] \nbreak;\ncase 66:\n this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } \nbreak;\ncase 67: case 171:\n this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); \nbreak;\ncase 70:\n this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; \nbreak;\ncase 71:\n this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); \nbreak;\ncase 74:\n this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } \nbreak;\ncase 75: case 76: case 77: case 78: case 79:\n this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } \nbreak;\ncase 84:\n this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } \nbreak;\ncase 85:\n this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } \nbreak;\ncase 86:\n this.$ = { type: 'SubQuery', value: $$[$0-1] } \nbreak;\ncase 87:\n this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } \nbreak;\ncase 88:\n this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } \nbreak;\ncase 91:\n this.$ = { type: 'BitExpression', operator: '|', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 92:\n this.$ = { type: 'BitExpression', operator: '&', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 93:\n this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 94:\n this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 95:\n this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 96:\n this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 97:\n this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 98:\n this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 99:\n this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 100:\n this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 101:\n this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 102:\n this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 108:\n this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } \nbreak;\ncase 109:\n this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } \nbreak;\ncase 110:\n this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } \nbreak;\ncase 111:\n this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } \nbreak;\ncase 112:\n this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } \nbreak;\ncase 113:\n this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } \nbreak;\ncase 124:\n this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } \nbreak;\ncase 125:\n this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } \nbreak;\ncase 126:\n this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } \nbreak;\ncase 128:\n this.$ = { type: 'BooleanExtra', value: $$[$0] } \nbreak;\ncase 130:\n this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } \nbreak;\ncase 131:\n this.$ = { type: 'NotExpression', value: $$[$0] } \nbreak;\ncase 132: case 135:\n this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 133: case 134:\n this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 136:\n this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } \nbreak;\ncase 137:\n this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } \nbreak;\ncase 138: case 213:\n this.$ = $$[$0-2]; this.$.value.push($$[$0]); \nbreak;\ncase 145:\n this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } \nbreak;\ncase 148:\n this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } \nbreak;\ncase 149: case 195:\n this.$ = [ $$[$0] ] \nbreak;\ncase 150:\n this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); \nbreak;\ncase 151:\n this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } \nbreak;\ncase 157:\n this.$ = { type: 'Limit', value: [ $$[$0] ] } \nbreak;\ncase 158:\n this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } \nbreak;\ncase 159:\n this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } \nbreak;\ncase 166:\n this.$ = $$[$0-1] + ' ' + $$[$0] \nbreak;\ncase 167:\n this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] \nbreak;\ncase 168:\n this.$ = {} \nbreak;\ncase 169:\n this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } \nbreak;\ncase 170:\n this.$ = { type: 'TableReferences', value: [ $$[$0] ] } \nbreak;\ncase 172:\n this.$ = { type: 'TableReference', value: $$[$0] } \nbreak;\ncase 173:\n this.$ = { type: 'TableReference', hasOj: true, value: $$[$0-1] } \nbreak;\ncase 181:\n this.$ = { leftRight: null, outOpt: null } \nbreak;\ncase 182:\n this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } \nbreak;\ncase 183:\n this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } \nbreak;\ncase 184:\n this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } \nbreak;\ncase 185:\n this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } \nbreak;\ncase 186:\n this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } \nbreak;\ncase 187:\n this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } \nbreak;\ncase 190:\n this.$ = { type: 'OnJoinCondition', value: $$[$0] } \nbreak;\ncase 192:\n this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } \nbreak;\ncase 196:\n this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) \nbreak;\ncase 198:\n this.$ = { type: 'Partitions', value: $$[$0-1] } \nbreak;\ncase 200:\n this.$ = { hasAs: true, alias: $$[$0] } \nbreak;\ncase 201:\n this.$ = { hasAs: false, alias: $$[$0] } \nbreak;\ncase 205: case 206: case 207:\n this.$ = { type: 'ForOptIndexHint', value: $$[$0] } \nbreak;\ncase 212:\n this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } \nbreak;\ncase 214:\n this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } \nbreak;\ncase 215:\n this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } \nbreak;\ncase 216:\n this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } \nbreak;\ncase 217:\n this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } \nbreak;\ncase 218:\n this.$ = { type: 'TableFactor', value: { type: 'SubQuery', value: $$[$0-2] }, alias: $$[$0].alias, hasAs: $$[$0].hasAs} \nbreak;\ncase 219:\n this.$ = $$[$0-1]; this.$.hasParentheses = true \nbreak;\ncase 220:\n this.$ = { type: 'TableFactor', value: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } \nbreak;\ncase 221:\n this.$ = { type: 'PlaceHolder', value: $$[$0], param: $$[$0].slice(2, -1)} \nbreak;\n}\n},\ntable: [{3:1,4:2,7:3,9:5,10:6,13:7,16:$V0,18:$V1},{1:[3]},{5:9,6:$V2,8:$V3,14:$V4},{5:12,6:$V2,8:$V3},o([16,32,33,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,101,195],$V5,{15:13,29:$V6,30:$V7,31:$V8}),o($V9,[2,5]),o([6,8,146],$Va,{11:17,137:18,138:$Vb}),{14:$Vc},{4:21,18:$V1},{6:[1,22]},{15:23,18:$V5,29:$V6,30:$V7,31:$V8},{6:[2,3]},{6:[1,24]},o($Vd,[2,18],{19:25,32:[1,26]}),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($V9,$Vf,{12:27,145:28,146:$Vg}),o($Vh,[2,147]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,136:30,139:31,195:$VB},{15:67,16:$V5,29:$V6,30:$V7,31:$V8},{17:[1,68]},{1:[2,1]},{4:69,9:70,18:$V1},{1:[2,2]},o($VC,[2,20],{20:71,33:[1,72]}),o($Vd,[2,17]),o($V9,[2,6]),o($VD,[2,161]),{35:[1,73]},o($Vh,$VE,{132:74,43:$VF,133:$VG}),o($VH,[2,149]),o($VH,[2,152],{140:77,107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM,141:[1,83],142:[1,84]}),o($VN,[2,129],{111:86,34:[1,87],112:[1,88],113:[1,89],114:[1,90],115:[1,91],116:[1,92],117:[1,93],121:[1,85]}),{16:$Vi,35:$Vj,47:94,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($VO,[2,123]),o($VO,[2,107],{100:95,45:$VP,79:$VQ,81:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,101:$V$,105:$V01,106:$V01,109:$V01,110:$V01,108:[1,96]}),o($V11,[2,90]),o($V21,[2,80]),o($V21,[2,81],{67:$V31}),o($V21,[2,82]),o($V21,[2,83]),{4:112,16:$Vi,18:$V1,35:$Vj,47:113,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:111,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:[1,114]},{16:[1,115]},{50:$V41,66:116},o($V21,[2,89]),o($V21,[2,51]),o($V21,[2,52]),o($V21,[2,53]),o($V21,[2,54]),o($V21,[2,55]),o([6,8,14,17,34,36,43,45,49,50,51,67,71,72,74,77,79,81,89,91,92,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182,192,193,194],$V51,{16:$V61}),{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:119,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:120,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:121,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:122,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:123,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},{16:$Vi,35:$Vj,47:125,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,69:124,71:[2,68],75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($V21,[2,44]),o($V21,[2,45]),o($V21,[2,46]),o($V21,[2,47]),o($V21,[2,48]),o($V21,[2,49]),o($V21,[2,50]),o($V21,[2,221]),{10:127,13:126,16:$V0},o([6,8,14,138,146],[2,9]),o($V9,[2,10],{14:$V4}),o($V9,[2,11]),o($V71,[2,22],{21:128,36:[1,129]}),{34:[1,130]},o($VD,[2,157],{43:[1,131],147:[1,132]}),o($Vh,[2,148]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,139:133,195:$VB},{134:[1,134]},o($VH,[2,151]),{16:$Vi,35:$Vj,47:135,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vi,35:$Vj,47:136,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vi,35:$Vj,47:137,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vi,35:$Vj,47:138,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vi,35:$Vj,47:139,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($VH,[2,153]),o($VH,[2,154]),o([57,58,60,123],$V01,{100:140,101:$V$}),{16:$Vi,29:[1,143],35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,104:141,118:142,119:[1,144],195:$VB},o($V81,[2,114]),o($V81,[2,115]),o($V81,[2,116]),o($V81,[2,117]),o($V81,[2,118]),o($V81,[2,119]),o($V81,[2,120]),o($VN,[2,131]),{105:[1,145],106:[1,146],109:[1,147],110:[1,148]},{109:[1,149]},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:150,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:151,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:152,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:153,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:154,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:155,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:156,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:157,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:158,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:159,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:160,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:161,195:$VB},o([57,58,60,105,106,109,110,123],[2,104]),{50:[1,162]},{17:[1,163],43:$V91},{17:[1,165]},o($Va1,[2,137],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),{16:$Vi,35:$Vj,47:113,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:166,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{4:167,18:$V1},{16:$Vi,35:$Vj,47:168,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,67:$V31,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o([6,8,14,16,17,35,36,43,50,51,54,55,57,58,60,67,76,79,81,82,83,84,86,87,88,89,101,129,135,138,144,146,150,152,154,164,165,167,168,173,177,179,180,182,192,193,194,195],$V51),o($Va1,$Vb1,{120:33,104:35,90:36,80:37,61:38,66:39,63:40,78:41,75:46,52:47,53:48,56:49,59:50,62:51,64:169,65:170,47:174,16:$Vi,30:$Vc1,35:$Vj,45:$Vd1,46:$Ve1,50:$Vk,51:$Vl,54:$Vm,55:$Vn,57:$Vo,58:$Vp,60:$Vq,76:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,101:$VA,195:$VB}),o($V21,[2,75]),o($V21,[2,76]),o($V21,[2,77]),o($V21,[2,78]),o($V21,[2,79]),{70:175,71:[1,176]},{71:[2,69],107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM},o($Vf1,[2,7],{14:$Vc}),o($Vf1,[2,8]),o($Vg1,[2,24],{22:177,37:[1,178]}),o($V71,[2,21]),{35:[1,179]},{35:[1,180]},{35:[1,181]},o($VH,[2,150]),o($Vh1,[2,144]),o($VN,[2,132]),o($Vi1,[2,133],{107:$VI,124:$VJ}),o($Vi1,[2,134],{107:$VI,124:$VJ}),o($VN,[2,135]),o($Vi1,[2,136],{107:$VI,124:$VJ}),{56:184,57:$Vo,58:$Vp,60:[1,183],122:182,123:[1,185]},o($VO,[2,125]),{16:[1,186]},{16:[2,121]},{16:[2,122]},{16:[1,187]},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:188,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:189,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:190,195:$VB},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:191,195:$VB},o([6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,91,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],[2,91],{45:$VP,79:$VQ,81:$VR,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_}),o([6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,91,92,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],[2,92],{45:$VP,79:$VQ,81:$VR,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vj1,[2,93],{45:$VP,79:$VQ,81:$VR,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vj1,[2,94],{45:$VP,79:$VQ,81:$VR,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vk1,[2,95],{45:$VP,95:$VW,96:$VX,97:$VY,98:$VZ}),o($Vk1,[2,96],{45:$VP,95:$VW,96:$VX,97:$VY,98:$VZ}),o($V11,[2,97]),o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,100]),o($V11,[2,101]),o([6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,91,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182],[2,102],{45:$VP,79:$VQ,81:$VR,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ}),o([6,8,14,16,17,34,35,36,43,45,49,50,51,54,55,57,58,60,67,71,72,74,76,77,79,81,82,83,84,86,87,88,89,91,92,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182,192,193,194,195],[2,65]),o($V21,[2,84]),{16:$Vi,35:$Vj,47:192,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($V21,[2,86]),{17:[1,193],43:$V91},{17:[1,194]},{89:[1,195],107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM},{17:[1,196],43:[1,197]},o($Va1,[2,58]),o($Va1,[2,60]),o($Va1,[2,61]),{16:$Vi,35:$Vj,47:198,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Va1,[2,63],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),{71:[1,200],73:199,74:[1,201],77:[2,72]},{16:$Vi,35:$Vj,47:202,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Vl1,[2,26],{23:203,38:[1,204]}),o($Vg1,[2,23]),o($VC,[2,19]),o($VD,[2,158]),o($VD,[2,159]),o($VN,[2,130]),o($VO,[2,124]),o($VN,[2,127]),o($VN,[2,128]),{4:205,18:$V1},{4:206,16:$Vi,18:$V1,35:$Vj,47:113,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:207,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{45:$VP,79:$VQ,81:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_,107:[1,208]},o($VO,[2,105],{102:209,103:[1,210]}),o($VO,[2,113],{45:$VP,79:$VQ,81:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_}),o($VO,[2,111],{45:$VP,79:$VQ,81:$VR,91:$VS,92:$VT,93:$VU,94:$VV,95:$VW,96:$VX,97:$VY,98:$VZ,99:$V_}),o($Va1,[2,138],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),o($V21,[2,85]),o($V21,[2,87]),o($V21,[2,88]),o([6,8,14,17,34,36,43,45,49,50,51,71,72,74,77,79,81,89,91,92,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,126,127,129,133,135,138,141,142,144,146,150,152,154,157,164,165,167,168,173,177,179,180,182,192,193,194],[2,56]),o($Va1,$Vb1,{120:33,104:35,90:36,80:37,61:38,66:39,63:40,78:41,75:46,52:47,53:48,56:49,59:50,62:51,47:174,65:211,16:$Vi,30:$Vc1,35:$Vj,45:$Vd1,46:$Ve1,50:$Vk,51:$Vl,54:$Vm,55:$Vn,57:$Vo,58:$Vp,60:$Vq,76:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,101:$VA,195:$VB}),o($Va1,[2,62],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),{77:[1,212]},{16:$Vi,35:$Vj,47:213,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vi,35:$Vj,47:214,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{72:[1,215],107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM},o($Vm1,[2,28],{24:216,39:[1,217]}),o($Vl1,[2,25]),{17:[1,218]},{17:[1,219]},{17:[1,220],43:$V91},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,104:221,195:$VB},o($VO,[2,112]),{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:222,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,195:$VB},o($Va1,[2,57]),o($V21,[2,74]),{72:[1,223],107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM},{77:[2,73],107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM},{16:$Vi,35:$Vj,47:224,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Vn1,[2,29],{25:225,40:[1,226],41:[1,227]}),o($Vm1,[2,27]),o($VO,[2,126]),o($VO,[2,108]),o($VO,[2,109]),o($VO,[2,110]),o($VO,[2,106]),{16:$Vi,35:$Vj,47:228,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Vo1,[2,70],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),o($Vp1,[2,33],{26:229,42:[1,230]}),o($Vn1,[2,30]),o($Vn1,[2,31]),o($Vo1,[2,71],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),{16:$Vi,27:231,35:$Vj,44:232,45:$Vq1,46:$Vr1,47:235,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Vp1,[2,32]),o($Vs1,[2,168],{28:236,43:[1,237],157:[1,238]}),o($Vt1,[2,35]),o($Vt1,[2,36]),o($Vt1,[2,37]),o($Vt1,[2,39],{48:239,49:[1,240],50:[1,241],51:[1,242],107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),o($Vs1,[2,12]),{16:$Vi,35:$Vj,44:243,45:$Vq1,46:$Vr1,47:235,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vu1,50:$Vk,63:252,66:250,88:$Vv1,158:244,160:245,161:246,172:249,174:248},o($Vt1,[2,38]),{50:[1,253],51:[1,254]},o($Vt1,[2,41]),o($Vt1,[2,43]),o($Vt1,[2,34]),o([6,8,14,17,129,135,138,144,146,150,152,154],$Vw1,{159:255,43:$Vx1,182:$Vy1}),o($Vz1,[2,170]),o($Vz1,[2,172],{163:258,166:260,36:$VA1,164:$VB1,165:$VC1,167:$VD1,168:$VE1,173:$VF1,177:$VG1}),{162:[1,266]},o($VH1,[2,193]),o($VH1,[2,194]),o([6,8,14,17,36,43,49,50,89,129,135,138,144,146,150,152,154,164,165,167,168,173,177,179,180,192,193,194],$Vw1,{159:267,67:$V31,182:$Vy1}),{4:268,16:$Vu1,18:$V1,50:$Vk,63:252,66:250,88:$Vv1,158:269,160:245,161:246,172:249,174:248},o($VI1,$VJ1,{183:270,66:272,49:$VK1,50:$V41}),o($Vt1,[2,40]),o($Vt1,[2,42]),o($VL1,[2,139],{128:273,129:[1,274]}),{16:$Vu1,50:$Vk,63:252,66:250,88:$Vv1,160:275,161:246,172:249,174:248},{16:[1,276]},{173:[1,277]},{16:$Vu1,50:$Vk,63:252,66:250,174:278},{169:279,170:$VM1,173:$VN1},{166:282,167:$VD1,168:$VE1,171:281,173:[2,181]},{173:[2,175]},{173:[2,176]},o($VO1,[2,177]),o($VO1,[2,178]),{16:$Vu1,50:$Vk,63:252,66:250,161:283,172:249,174:248},o($VI1,$VJ1,{66:272,183:284,49:$VK1,50:$V41}),{17:[1,285]},{17:[1,286],43:$Vx1},o($VH1,$VP1,{189:287,190:288,191:289,192:$VQ1,193:$VR1,194:$VS1}),{50:$V41,66:293},o($VI1,[2,201],{67:$V31}),o($Vh1,[2,141],{130:294,131:295,135:[1,296]}),{16:$Vi,35:$Vj,47:297,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Vz1,[2,171]),{50:$V41,66:299,181:298},{16:$Vu1,50:$Vk,63:252,66:250,174:300},{176:301,179:$VT1},{173:[1,303]},{173:[2,180]},{173:[1,304]},{169:305,170:$VM1,173:$VN1},{36:$VA1,89:[1,306],163:258,164:$VB1,165:$VC1,166:260,167:$VD1,168:$VE1,173:$VF1,177:$VG1},o($VH1,$VP1,{190:288,191:289,189:307,192:$VQ1,193:$VR1,194:$VS1}),o($VH1,$VJ1,{66:272,183:308,49:$VK1,50:$V41}),o($VH1,[2,219]),o($VH1,[2,220]),o($VH1,[2,211]),o($VH1,[2,212]),{184:310,185:$VU1,186:$VV1},{184:313,185:$VU1,186:$VV1},{184:314,185:$VU1,186:$VV1},o($VI1,[2,200],{67:$V31}),o($VW1,[2,155],{143:315,144:[1,316]}),o($Vh1,[2,142]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,136:317,139:31,195:$VB},o($VL1,[2,140],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),{17:[1,318],43:[1,319]},o($Va1,[2,195],{67:$V31}),o([6,8,14,17,36,43,89,129,135,138,144,146,150,152,154,164,165,167,168,173,177,182],[2,183],{175:320,176:321,179:$VT1,180:$VX1}),o($VH1,[2,185]),{16:$Vi,35:$Vj,47:323,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},{16:$Vu1,50:$Vk,63:252,66:250,161:324,172:249,174:248},{16:$Vu1,50:$Vk,63:252,66:250,174:325},{173:[2,182]},o($Vz1,[2,173]),o($VH1,[2,217]),o($VH1,[2,218]),{191:326,192:$VQ1,193:$VR1,194:$VS1},{16:$VY1,152:$VZ1,187:327},o($V_1,[2,202]),o($V_1,[2,203]),{16:$VY1,152:$VZ1,187:329},{16:$VY1,152:$VZ1,187:330},o($Vh,$Va,{137:18,11:331,138:$Vb}),{16:$Vi,35:$Vj,47:332,50:$Vk,51:$Vl,52:47,53:48,54:$Vm,55:$Vn,56:49,57:$Vo,58:$Vp,59:50,60:$Vq,61:38,62:51,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,90:36,101:$VA,104:35,120:33,195:$VB},o($Vh1,$VE,{132:333,43:$VF,133:$VG}),o([6,8,14,17,36,43,49,50,89,129,135,138,144,146,150,152,154,164,165,167,168,173,177,179,180,182,192,193,194],[2,198]),{50:$V41,66:334},o($VH1,[2,184]),o($VH1,[2,191]),{16:[1,335]},o($VH1,[2,190],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),{36:$VA1,163:258,164:$VB1,165:$VC1,166:260,167:$VD1,168:$VE1,173:$VF1,175:336,176:321,177:$VG1,179:$VT1,180:$VX1},o($VH1,[2,187]),o($VH1,[2,213]),{16:[1,337]},{135:[1,340],138:[1,339],173:[1,338]},{16:[1,341]},{16:[1,342]},o($VD,$Vf,{145:28,12:343,146:$Vg}),o($VW1,[2,156],{107:$VI,124:$VJ,125:$VK,126:$VL,127:$VM}),o($Vh1,[2,145]),o($Va1,[2,196],{67:$V31}),{50:$V41,66:345,68:344},o($VH1,[2,186]),{17:[2,208],50:$V41,66:345,68:347,188:346},{16:[2,205]},{16:[2,206]},{16:[2,207]},{50:$V41,66:345,68:348},{50:$V41,66:345,68:349},o($V$1,[2,162],{148:350,149:351,150:[1,352]}),{17:[1,353],43:$V02},o($Va1,[2,66],{67:$V31}),{17:[1,355]},{17:[2,209],43:$V02},{17:[1,356],43:$V02},{17:[1,357],43:$V02},o($Vs1,[2,165],{151:358,152:[1,359],154:[1,360]}),o($V$1,[2,163]),{50:[1,362],63:361},o($VH1,[2,192]),{50:$V41,66:363},o($VH1,[2,214]),o($VH1,[2,215]),o($VH1,[2,216]),o($Vs1,[2,169]),{153:[1,364]},{105:[1,365]},o($V$1,[2,164]),{16:$V61},o($Va1,[2,67],{67:$V31}),o($Vs1,[2,166]),{155:[1,366]},{156:[1,367]},o($Vs1,[2,167])],\ndefaultActions: {11:[2,3],22:[2,1],24:[2,2],143:[2,121],144:[2,122],262:[2,175],263:[2,176],280:[2,180],305:[2,182],338:[2,205],339:[2,206],340:[2,207]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip comments */\nbreak;\ncase 1:/* skip sql comments */\nbreak;\ncase 2:/* skip sql comments */\nbreak;\ncase 3:/* skip whitespace */\nbreak;\ncase 4:return 195\nbreak;\ncase 5:return 50\nbreak;\ncase 6:return 50\nbreak;\ncase 7:return 50\nbreak;\ncase 8:return 18\nbreak;\ncase 9:return 29\nbreak;\ncase 10:return 119\nbreak;\ncase 11:return 30\nbreak;\ncase 12:return 31\nbreak;\ncase 13:return 32\nbreak;\ncase 14:return 33\nbreak;\ncase 15:return 36\nbreak;\ncase 16:return 37\nbreak;\ncase 17:return 38\nbreak;\ncase 18:return 39\nbreak;\ncase 19:return 40\nbreak;\ncase 20:return 41\nbreak;\ncase 21:return 42\nbreak;\ncase 22:return 46\nbreak;\ncase 23:return 49\nbreak;\ncase 24:return 57\nbreak;\ncase 25:return 58\nbreak;\ncase 26:return 60\nbreak;\ncase 27:return 'COLLATE'\nbreak;\ncase 28:return 84\nbreak;\ncase 29:return 86\nbreak;\ncase 30:return 87\nbreak;\ncase 31:return 76\nbreak;\ncase 32:return 71\nbreak;\ncase 33:return 72\nbreak;\ncase 34:return 74\nbreak;\ncase 35:return 77\nbreak;\ncase 36:return 96\nbreak;\ncase 37:return 97\nbreak;\ncase 38:return 101\nbreak;\ncase 39:return 106\nbreak;\ncase 40:return 105\nbreak;\ncase 41:return 108\nbreak;\ncase 42:return 109\nbreak;\ncase 43:return 103\nbreak;\ncase 44:return 110\nbreak;\ncase 45:return 121\nbreak;\ncase 46:return 123\nbreak;\ncase 47:return 107\nbreak;\ncase 48:return 126\nbreak;\ncase 49:return 127\nbreak;\ncase 50:return 157\nbreak;\ncase 51:return 182\nbreak;\ncase 52:return 192\nbreak;\ncase 53:return 185\nbreak;\ncase 54:return 186\nbreak;\ncase 55:return 152\nbreak;\ncase 56:return 173\nbreak;\ncase 57:return 138\nbreak;\ncase 58:return 135\nbreak;\ncase 59:return 193\nbreak;\ncase 60:return 194\nbreak;\ncase 61:return 164\nbreak;\ncase 62:return 165\nbreak;\ncase 63:return 179\nbreak;\ncase 64:return 180\nbreak;\ncase 65:return 167\nbreak;\ncase 66:return 168\nbreak;\ncase 67:return 170\nbreak;\ncase 68:return 177\nbreak;\ncase 69:return 129\nbreak;\ncase 70:return 141\nbreak;\ncase 71:return 142\nbreak;\ncase 72:return 133\nbreak;\ncase 73:return 134\nbreak;\ncase 74:return 144\nbreak;\ncase 75:return 147\nbreak;\ncase 76:return 150\nbreak;\ncase 77:return 153\nbreak;\ncase 78:return 154\nbreak;\ncase 79:return 155\nbreak;\ncase 80:return 156\nbreak;\ncase 81:return 162\nbreak;\ncase 82:return 146\nbreak;\ncase 83:return 14\nbreak;\ncase 84:return 43\nbreak;\ncase 85:return 34\nbreak;\ncase 86:return 16\nbreak;\ncase 87:return 17\nbreak;\ncase 88:return 82\nbreak;\ncase 89:return 117\nbreak;\ncase 90:return 83\nbreak;\ncase 91:return 91\nbreak;\ncase 92:return 92\nbreak;\ncase 93:return 79\nbreak;\ncase 94:return 81\nbreak;\ncase 95:return 45\nbreak;\ncase 96:return 95\nbreak;\ncase 97:return 98\nbreak;\ncase 98:return 99\nbreak;\ncase 99:return 94\nbreak;\ncase 100:return 112\nbreak;\ncase 101:return 113\nbreak;\ncase 102:return 93\nbreak;\ncase 103:return '<=>'\nbreak;\ncase 104:return 114\nbreak;\ncase 105:return 116\nbreak;\ncase 106:return 115\nbreak;\ncase 107:return 88\nbreak;\ncase 108:return 89\nbreak;\ncase 109:return 8\nbreak;\ncase 110:return 51\nbreak;\ncase 111:return 51\nbreak;\ncase 112:return 55\nbreak;\ncase 113:return 35\nbreak;\ncase 114:return 54\nbreak;\ncase 115:return 50\nbreak;\ncase 116:return 67\nbreak;\ncase 117:return 51\nbreak;\ncase 118:return 51\nbreak;\ncase 119:return 50\nbreak;\ncase 120:return 6\nbreak;\ncase 121:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:[/][*](.|\\n)*?[*][/])/i,/^(?:[-][-]\\s.*\\n)/i,/^(?:[#]\\s.*\\n)/i,/^(?:\\s+)/i,/^(?:[$][{](.+?)[}])/i,/^(?:[`][a-zA-Z0-9_\\u0080-\\uFFFF]*[`])/i,/^(?:[\\w]+[\\u0080-\\uFFFF]+[0-9a-zA-Z_\\u0080-\\uFFFF]*)/i,/^(?:[\\u0080-\\uFFFF][0-9a-zA-Z_\\u0080-\\uFFFF]*)/i,/^(?:SELECT\\b)/i,/^(?:ALL\\b)/i,/^(?:ANY\\b)/i,/^(?:DISTINCT\\b)/i,/^(?:DISTINCTROW\\b)/i,/^(?:HIGH_PRIORITY\\b)/i,/^(?:MAX_STATEMENT_TIME\\b)/i,/^(?:STRAIGHT_JOIN\\b)/i,/^(?:SQL_SMALL_RESULT\\b)/i,/^(?:SQL_BIG_RESULT\\b)/i,/^(?:SQL_BUFFER_RESULT\\b)/i,/^(?:SQL_CACHE\\b)/i,/^(?:SQL_NO_CACHE\\b)/i,/^(?:SQL_CALC_FOUND_ROWS\\b)/i,/^(?:([a-zA-Z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*\\.){1,2}\\*)/i,/^(?:AS\\b)/i,/^(?:TRUE\\b)/i,/^(?:FALSE\\b)/i,/^(?:NULL\\b)/i,/^(?:COLLATE\\b)/i,/^(?:BINARY\\b)/i,/^(?:ROW\\b)/i,/^(?:EXISTS\\b)/i,/^(?:CASE\\b)/i,/^(?:WHEN\\b)/i,/^(?:THEN\\b)/i,/^(?:ELSE\\b)/i,/^(?:END\\b)/i,/^(?:DIV\\b)/i,/^(?:MOD\\b)/i,/^(?:NOT\\b)/i,/^(?:BETWEEN\\b)/i,/^(?:IN\\b)/i,/^(?:SOUNDS\\b)/i,/^(?:LIKE\\b)/i,/^(?:ESCAPE\\b)/i,/^(?:REGEXP\\b)/i,/^(?:IS\\b)/i,/^(?:UNKNOWN\\b)/i,/^(?:AND\\b)/i,/^(?:OR\\b)/i,/^(?:XOR\\b)/i,/^(?:FROM\\b)/i,/^(?:PARTITION\\b)/i,/^(?:USE\\b)/i,/^(?:INDEX\\b)/i,/^(?:KEY\\b)/i,/^(?:FOR\\b)/i,/^(?:JOIN\\b)/i,/^(?:ORDER\\s+BY\\b)/i,/^(?:GROUP\\s+BY\\b)/i,/^(?:IGNORE\\b)/i,/^(?:FORCE\\b)/i,/^(?:INNER\\b)/i,/^(?:CROSS\\b)/i,/^(?:ON\\b)/i,/^(?:USING\\b)/i,/^(?:LEFT\\b)/i,/^(?:RIGHT\\b)/i,/^(?:OUTER\\b)/i,/^(?:NATURAL\\b)/i,/^(?:WHERE\\b)/i,/^(?:ASC\\b)/i,/^(?:DESC\\b)/i,/^(?:WITH\\b)/i,/^(?:ROLLUP\\b)/i,/^(?:HAVING\\b)/i,/^(?:OFFSET\\b)/i,/^(?:PROCEDURE\\b)/i,/^(?:UPDATE\\b)/i,/^(?:LOCK\\b)/i,/^(?:SHARE\\b)/i,/^(?:MODE\\b)/i,/^(?:OJ\\b)/i,/^(?:LIMIT\\b)/i,/^(?:UNION\\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\\|)/i,/^(?:&)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:\\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:;)/i,/^(?:['](\\\\.|[^'])*['])/i,/^(?:[\"](\\\\.|[^\"])*[\"])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\\.[0-9]+)?[eE][-][0-9]+(\\.[0-9]+)?)/i,/^(?:[a-zA-Z_\\u0080-\\uFFFF][a-zA-Z0-9_\\u0080-\\uFFFF]*)/i,/^(?:\\.)/i,/^(?:[\"][a-zA-Z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*[\"])/i,/^(?:['][a-zA-Z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*['])/i,/^(?:([`])(?:(?=(\\\\?))\\2.)*?\\1)/i,/^(?:$)/i,/^(?:.)/i],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();if (!sqlParser) {\n  sqlParser = {};\n}\n\nfunction Sql() {\n  this.buffer = '';\n}\n\nsqlParser.stringify = function(ast) {\n  var sql = new Sql();\n  sql.travelMain(ast);\n  return sql.buffer;\n};\n\nSql.prototype.travel = function(ast) {\n  if (!ast) return;\n\n  if (typeof ast === 'string') {\n    return this.append(ast);\n  }\n\n  var processor = this['travel' + ast.type];\n  processor.call(this, ast);\n};\n\nvar noSuffixFlag = false;\nSql.prototype.appendKeyword = function(keyword, noPrefix, noSuffix) {\n  if (noSuffixFlag) {\n    noPrefix = true;\n    noSuffixFlag = false;\n  }\n  if (noPrefix) {\n    this.buffer += keyword.toUpperCase();\n  } else {\n    this.buffer += ' ' + keyword.toUpperCase();\n  }\n\n  if (noSuffix) {\n    noSuffixFlag = true;\n  }\n};\nSql.prototype.append = function(word, noPrefix, noSuffix) {\n  if (noSuffixFlag) {\n    noPrefix = true;\n    noSuffixFlag = false;\n  }\n  if (noPrefix) {\n    this.buffer += word;\n  } else {\n    this.buffer += ' ' + word;\n  }\n\n  if (noSuffix) {\n    noSuffixFlag = true;\n  }\n};\nSql.prototype.travelMain = function(ast) {\n  this.travel(ast.value);\n  if (ast.hasSemicolon) {\n    this.append(';', true);\n  }\n};\nSql.prototype.travelSelect = function(ast) {\n  this.appendKeyword('select');\n  if (ast.distinctOpt) {\n    this.appendKeyword(ast.distinctOpt);\n  }\n  if (ast.highPriorityOpt) {\n    this.appendKeyword(ast.highPriorityOpt);\n  }\n  if (ast.maxStateMentTimeOpt) {\n    this.append('MAX_STATEMENT_TIME = ' + ast.maxStateMentTimeOpt);\n  }\n  if (ast.straightJoinOpt) {\n    this.appendKeyword(ast.straightJoinOpt);\n  }\n  if (ast.sqlSmallResultOpt) {\n    this.appendKeyword(ast.sqlSmallResultOpt);\n  }\n  if (ast.sqlBigResultOpt) {\n    this.appendKeyword(ast.sqlBigResultOpt);\n  }\n  if (ast.sqlBufferResultOpt) {\n    this.appendKeyword(ast.sqlBufferResultOpt);\n  }\n  if (ast.sqlCacheOpt) {\n    this.appendKeyword(ast.sqlCacheOpt);\n  }\n  if (ast.sqlCalcFoundRowsOpt) {\n    this.appendKeyword(ast.sqlCalcFoundRowsOpt);\n  }\n  if (ast.selectItems) {\n    this.travelSelectExpr(ast.selectItems);\n  }\n  if (ast.from) {\n    this.appendKeyword('from');\n    this.travel(ast.from);\n  }\n  if (ast.partition) {\n    this.travel(ast.partition);\n  }\n  if (ast.where) {\n    this.appendKeyword('where');\n    this.travel(ast.where);\n  }\n  if (ast.groupBy) {\n    this.travel(ast.groupBy);\n  }\n  if (ast.having) {\n    this.appendKeyword('having');\n    this.travel(ast.having);\n  }\n  if (ast.orderBy) {\n    this.travel(ast.orderBy);\n  }\n  if (ast.limit) {\n    this.travel(ast.limit);\n  }\n  if (ast.procedure) {\n    this.appendKeyword('procedure');\n    this.travel(ast.procedure);\n  }\n  if (ast.updateLockMode) {\n    this.appendKeyword(ast.updateLockMode);\n  }\n};\nSql.prototype.travelSelectExpr = function(ast) {\n  var exprList = ast.value;\n  for (var i = 0; i < exprList.length; i++) {\n    if (typeof ast === 'string') {\n      this.append(exprList[i]);\n    } else {\n      this.travel(exprList[i]);\n      if (exprList[i].alias) {\n        if (exprList[i].hasAs) {\n          this.appendKeyword('as');\n        }\n        this.travel(exprList[i].alias);\n      }\n    }\n    if (i !== exprList.length - 1) {\n      this.append(',', true);\n    }\n  }\n};\nSql.prototype.travelIsExpression = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword('in');\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.append(ast.right);\n};\nSql.prototype.travelNotExpression = function(ast) {\n  this.appendKeyword('not');\n  this.travel(ast.value);\n};\nSql.prototype.travelOrExpression = Sql.prototype.travelAndExpression = Sql.prototype.travelXORExpression = function(\n  ast\n) {\n  this.travel(ast.left);\n  this.appendKeyword(ast.operator);\n  this.travel(ast.right);\n};\nSql.prototype.travelNull = Sql.prototype.travelBoolean = Sql.prototype.travelBooleanExtra = function(\n  ast\n) {\n  this.appendKeyword(ast.value);\n};\nSql.prototype.travelNumber = function(ast) {\n  this.append(ast.value);\n};\nSql.prototype.travelString = function(ast) {\n  this.append(ast.value);\n};\nSql.prototype.travelFunctionCall = function(ast) {\n  this.append(ast.name);\n  this.append('(', true, true);\n  var params = ast.params;\n  for (var i = 0; i < params.length; i++) {\n    var param = params[i];\n    this.travel(param);\n    if (i !== params.length - 1) {\n      this.append(',', true);\n    }\n  }\n  this.append(')', true);\n};\nSql.prototype.travelFunctionCallParam = function(ast) {\n  if (ast.distinctOpt) {\n    this.appendKeyword(ast.distinctOpt);\n  }\n  this.travel(ast.value);\n};\nSql.prototype.travelIdentifier = function(ast) {\n  this.append(ast.value);\n};\nSql.prototype.travelIdentifierList = function(ast) {\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n};\nSql.prototype.travelWhenThenList = function(ast) {\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.appendKeyword('when');\n    this.travel(list[i].when);\n    this.appendKeyword('then');\n    this.travel(list[i].then);\n  }\n};\nSql.prototype.travelCaseWhen = function(ast) {\n  this.appendKeyword('case');\n  if (ast.caseExprOpt) {\n    this.travel(ast.caseExprOpt);\n  }\n  this.travel(ast.whenThenList);\n  if (ast.else) {\n    this.appendKeyword('else');\n    this.travel(ast.else);\n  }\n  this.appendKeyword('end');\n};\nSql.prototype.travelPrefix = function(ast) {\n  this.appendKeyword(ast.prefix);\n  this.travel(ast.value);\n};\nSql.prototype.travelSimpleExprParentheses = function(ast) {\n  if (ast.hasRow) {\n    this.appendKeyword('row');\n  }\n  this.append('(', false, true);\n  this.travel(ast.value);\n  this.append(')', true);\n};\nSql.prototype.travelSubQuery = function(ast) {\n  if (ast.hasExists) {\n    this.appendKeyword('exists');\n  }\n  this.append('(', false, true);\n  this.travel(ast.value);\n  this.append(')', true);\n};\nSql.prototype.travelIdentifierExpr = function(ast) {\n  this.append('{');\n  this.travel(ast.identifier);\n  this.travel(ast.value);\n  this.append('}');\n};\nSql.prototype.travelBitExpression = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword(ast.operator);\n  this.travel(ast.right);\n};\nSql.prototype.travelInSubQueryPredicate = function(ast) {\n  this.travel(ast.left);\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.appendKeyword('in');\n  this.append('(', false, true);\n  this.travel(ast.right);\n  this.append(')');\n};\nSql.prototype.travelInExpressionListPredicate = function(ast) {\n  this.travel(ast.left);\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.appendKeyword('in');\n  this.append('(', false, true);\n  this.travel(ast.right);\n  this.append(')');\n};\nSql.prototype.travelBetweenPredicate = function(ast) {\n  this.travel(ast.left);\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.appendKeyword('between');\n  this.travel(ast.right.left);\n  this.appendKeyword('and');\n  this.travel(ast.right.right);\n};\nSql.prototype.travelSoundsLikePredicate = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword('sounds');\n  this.appendKeyword('like');\n  this.travel(ast.right);\n};\nSql.prototype.travelLikePredicate = function(ast) {\n  this.travel(ast.left);\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.appendKeyword('like');\n  this.travel(ast.right);\n  if (ast.escape) {\n    this.appendKeyword('escape');\n    this.travel(ast.escape);\n  }\n};\nSql.prototype.travelRegexpPredicate = function(ast) {\n  this.travel(ast.left);\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.appendKeyword('regexp');\n  this.travel(ast.right);\n};\nSql.prototype.travelIsNullBooleanPrimary = function(ast) {\n  this.travel(ast.value);\n  this.appendKeyword('is');\n  if (ast.hasNot) {\n    this.appendKeyword('not');\n  }\n  this.appendKeyword('null');\n};\nSql.prototype.travelComparisonBooleanPrimary = function(ast) {\n  this.travel(ast.left);\n  this.append(ast.operator);\n  this.travel(ast.right);\n};\nSql.prototype.travelComparisonSubQueryBooleanPrimary = function(ast) {\n  this.travel(ast.left);\n  this.append(ast.operator);\n  this.appendKeyword(ast.subQueryOpt);\n  this.append('(', false, true);\n  this.travel(ast.right);\n  this.append(')');\n};\nSql.prototype.travelExpressionList = function(ast) {\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n};\nSql.prototype.travelGroupBy = function(ast) {\n  this.appendKeyword('group by');\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n};\nSql.prototype.travelOrderBy = function(ast) {\n  this.appendKeyword('order by');\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n  if (ast.rollUp) {\n    this.appendKeyword('with rollup');\n  }\n};\nSql.prototype.travelGroupByOrderByItem = function(ast) {\n  this.travel(ast.value);\n  if (ast.sortOpt) {\n    this.appendKeyword(ast.sortOpt);\n  }\n};\nSql.prototype.travelLimit = function(ast) {\n  this.appendKeyword('limit');\n  var list = ast.value;\n  if (list.length === 1) {\n    this.append(list[0]);\n  } else if (list.length === 2) {\n    if (ast.offsetMode) {\n      this.append(list[1]);\n      this.append('offset');\n      this.append(list[0]);\n    } else {\n      this.append(list[0]);\n      this.append(',', true);\n      this.append(list[1]);\n    }\n  }\n};\nSql.prototype.travelTableReferences = function(ast) {\n  var list = ast.value;\n  if (ast.TableReferences) {\n    this.append('(', false, true);\n  }\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n  if (ast.TableReferences) {\n    this.append(')');\n  }\n};\nSql.prototype.travelTableReference = function(ast) {\n  if (ast.hasOj) {\n    this.append('{');\n    this.appendKeyword('oj');\n    this.travel(ast.value);\n    this.append('}');\n  } else {\n    this.travel(ast.value);\n  }\n};\nSql.prototype.travelInnerCrossJoinTable = function(ast) {\n  this.travel(ast.left);\n  if (ast.innerCrossOpt) {\n    this.appendKeyword(ast.innerCrossOpt);\n  }\n  this.appendKeyword('join');\n  this.travel(ast.right);\n  if (ast.condition) {\n    this.travel(ast.condition);\n  }\n};\nSql.prototype.travelStraightJoinTable = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword('straight_join');\n  this.travel(ast.right);\n  this.travel(ast.condition);\n};\nSql.prototype.travelLeftRightJoinTable = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword(ast.leftRight);\n  if (ast.outOpt) {\n    this.appendKeyword(ast.outOpt);\n  }\n  this.appendKeyword('join');\n  this.travel(ast.right);\n  this.travel(ast.condition);\n};\nSql.prototype.travelNaturalJoinTable = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword('natural');\n  if (ast.leftRight) {\n    this.appendKeyword(ast.leftRight);\n  }\n  if (ast.outOpt) {\n    this.appendKeyword(ast.outOpt);\n  }\n  this.appendKeyword('join');\n  this.travel(ast.right);\n};\nSql.prototype.travelOnJoinCondition = function(ast) {\n  this.appendKeyword('on');\n  this.travel(ast.value);\n};\nSql.prototype.travelUsingJoinCondition = function(ast) {\n  this.appendKeyword('using');\n  this.appendKeyword('(', false, true);\n  this.travel(ast.value);\n  this.appendKeyword(')');\n};\nSql.prototype.travelPartitions = function(ast) {\n  this.appendKeyword('partition');\n  this.appendKeyword('(', false, true);\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n  this.appendKeyword(')');\n};\nSql.prototype.travelForOptIndexHint = function(ast) {\n  this.appendKeyword('for');\n  this.appendKeyword(ast.value);\n};\nSql.prototype.travelIndexList = function(ast) {\n  var list = ast.value;\n  for (var i = 0; i < list.length; i++) {\n    this.travel(list[i]);\n    if (i !== list.length - 1) {\n      this.append(',', true);\n    }\n  }\n};\nSql.prototype.travelUseIndexHint = function(ast) {\n  this.appendKeyword('use');\n  this.appendKeyword(ast.indexOrKey);\n  if (ast.forOpt) {\n    this.travel(ast.forOpt);\n  }\n  this.appendKeyword('(', false, true);\n  if (ast.value) {\n    this.travel(ast.value);\n  }\n  this.appendKeyword(')');\n};\nSql.prototype.travelIgnoreIndexHint = function(ast) {\n  this.appendKeyword('ignore');\n  this.appendKeyword(ast.indexOrKey);\n  if (ast.forOpt) {\n    this.travel(ast.forOpt);\n  }\n  this.appendKeyword('(', false, true);\n  if (ast.value) {\n    this.travel(ast.value);\n  }\n  this.appendKeyword(')');\n};\nSql.prototype.travelForceIndexHint = function(ast) {\n  this.appendKeyword('force');\n  this.appendKeyword(ast.indexOrKey);\n  if (ast.forOpt) {\n    this.travel(ast.forOpt);\n  }\n  this.appendKeyword('(', false, true);\n  if (ast.value) {\n    this.travel(ast.value);\n  }\n  this.appendKeyword(')');\n};\nSql.prototype.travelTableFactor = function(ast) {\n  this.travel(ast.value);\n  if (ast.partition) {\n    this.travel(ast.partition);\n  }\n  if (ast.alias) {\n    if (ast.hasAs) {\n      this.appendKeyword('as');\n    }\n    this.travel(ast.alias);\n  }\n  if (ast.indexHintOpt) {\n    this.travel(ast.indexHintOpt);\n  }\n};\nSql.prototype.travelUnion = function(ast) {\n  this.travel(ast.left);\n  this.appendKeyword('UNION');\n  if (ast.distinctOpt) {\n    this.appendKeyword(ast.distinctOpt);\n  }\n  this.travel(ast.right);\n};\nSql.prototype.travelSelectParenthesized = function(ast) {\n  this.appendKeyword('(');\n  this.travel(ast.value);\n  this.appendKeyword(')');\n};\nSql.prototype.travelPlaceHolder = function (ast) {\n  if (ast.value) {\n    this.travel(ast.value);\n  }\n};var root = this\n// AMD / RequireJS\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return sqlParser;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n// Node.js\nelse {}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/js-sql-parser/dist/parser/sqlParser.js\n");

/***/ }),

/***/ "../node_modules/moo/moo.js":
/*!**********************************!*\
  !*** ../node_modules/moo/moo.js ***!
  \**********************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) /* global define */\n  } else {}\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n  var toString = Object.prototype.toString\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && toString.call(o) === '[object RegExp]' }\n  function isObject(o) { return o && typeof o === 'object' && !isRegExp(o) && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    if (!regexps.length) return '(?!)'\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) throw new Error('RegExp /i flag not allowed')\n      if (obj.global) throw new Error('RegExp /g flag is implied')\n      if (obj.sticky) throw new Error('RegExp /y flag is implied')\n      if (obj.multiline) throw new Error('RegExp /m flag is implied')\n      return obj.source\n\n    } else {\n      throw new Error('Not a pattern: ' + obj)\n    }\n  }\n\n  function pad(s, length) {\n    if (s.length > length) {\n      return s\n    }\n    return Array(length - s.length + 1).join(\" \") + s\n  }\n\n  function lastNLines(string, numLines) {\n    var position = string.length\n    var lineBreaks = 0;\n    while (true) {\n      var idx = string.lastIndexOf(\"\\n\", position - 1)\n      if (idx === -1) {\n        break;\n      } else {\n        lineBreaks++\n      }\n      position = idx\n      if (lineBreaks === numLines) {\n        break;\n      }\n      if (position === 0) {\n        break;\n      }\n    }\n    var startPosition = \n      lineBreaks < numLines ?\n      0 : \n      position + 1\n    return string.substring(startPosition).split(\"\\n\")\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = [].concat(thing)\n      if (key === 'include') {\n        for (var j = 0; j < rules.length; j++) {\n          result.push({include: rules[j]})\n        }\n        continue\n      }\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i = 0; i < array.length; i++) {\n      var obj = array[i]\n      if (obj.include) {\n        var include = [].concat(obj.include)\n        for (var j = 0; j < include.length; j++) {\n          result.push({include: include[j]})\n        }\n        continue\n      }\n      if (!obj.type) {\n        throw new Error('Rule has no type: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.type, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(type, obj) {\n    if (!isObject(obj)) {\n      obj = { match: obj }\n    }\n    if (obj.include) {\n      throw new Error('Matching rules cannot also include states')\n    }\n\n    // nb. error and fallback imply lineBreaks\n    var options = {\n      defaultType: type,\n      lineBreaks: !!obj.error || !!obj.fallback,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      fallback: false,\n      value: null,\n      type: null,\n      shouldThrow: false,\n    }\n\n    // Avoid Object.assign(), so we support IE9+\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        options[key] = obj[key]\n      }\n    }\n\n    // type transform cannot be a string\n    if (typeof options.type === 'string' && type !== options.type) {\n      throw new Error(\"Type transform cannot be a string (type '\" + options.type + \"' for token '\" + type + \"')\")\n    }\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    return options\n  }\n\n  function toRules(spec) {\n    return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec)\n  }\n\n  var defaultErrorRule = ruleOptions('error', {lineBreaks: true, shouldThrow: true})\n  function compileRules(rules, hasStates) {\n    var errorRule = null\n    var fast = Object.create(null)\n    var fastAllowed = true\n    var unicodeFlag = null\n    var groups = []\n    var parts = []\n\n    // If there is a fallback rule, then disable fast matching\n    for (var i = 0; i < rules.length; i++) {\n      if (rules[i].fallback) {\n        fastAllowed = false\n      }\n    }\n\n    for (var i = 0; i < rules.length; i++) {\n      var options = rules[i]\n\n      if (options.include) {\n        // all valid inclusions are removed by states() preprocessor\n        throw new Error('Inheritance is not allowed in stateless lexers')\n      }\n\n      if (options.error || options.fallback) {\n        // errorRule can only be set once\n        if (errorRule) {\n          if (!options.fallback === !errorRule.fallback) {\n            throw new Error(\"Multiple \" + (options.fallback ? \"fallback\" : \"error\") + \" rules not allowed (for token '\" + options.defaultType + \"')\")\n          } else {\n            throw new Error(\"fallback and error are mutually exclusive (for token '\" + options.defaultType + \"')\")\n          }\n        }\n        errorRule = options\n      }\n\n      var match = options.match.slice()\n      if (fastAllowed) {\n        while (match.length && typeof match[0] === 'string' && match[0].length === 1) {\n          var word = match.shift()\n          fast[word.charCodeAt(0)] = options\n        }\n      }\n\n      // Warn about inappropriate state-switching options\n      if (options.pop || options.push || options.next) {\n        if (!hasStates) {\n          throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.defaultType + \"')\")\n        }\n        if (options.fallback) {\n          throw new Error(\"State-switching options are not allowed on fallback tokens (for token '\" + options.defaultType + \"')\")\n        }\n      }\n\n      // Only rules with a .match are included in the RegExp\n      if (match.length === 0) {\n        continue\n      }\n      fastAllowed = false\n\n      groups.push(options)\n\n      // Check unicode flag is used everywhere or nowhere\n      for (var j = 0; j < match.length; j++) {\n        var obj = match[j]\n        if (!isRegExp(obj)) {\n          continue\n        }\n\n        if (unicodeFlag === null) {\n          unicodeFlag = obj.unicode\n        } else if (unicodeFlag !== obj.unicode && options.fallback === false) {\n          throw new Error('If one rule is /u then all must be')\n        }\n      }\n\n      // convert to RegExp\n      var pat = reUnion(match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: … ) instead\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n\n    // If there's no fallback rule, use the sticky flag so we only look for\n    // matches at the current index.\n    //\n    // If we don't support the sticky flag, then fake it using an irrefutable\n    // match (i.e. an empty pattern).\n    var fallbackRule = errorRule && errorRule.fallback\n    var flags = hasSticky && !fallbackRule ? 'ym' : 'gm'\n    var suffix = hasSticky || fallbackRule ? '' : '|'\n\n    if (unicodeFlag === true) flags += \"u\"\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n    return {regexp: combined, groups: groups, fast: fast, error: errorRule || defaultErrorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(toRules(rules))\n    return new Lexer({start: result}, 'start')\n  }\n\n  function checkStateGroup(g, name, map) {\n    var state = g && (g.push || g.next)\n    if (state && !map[state]) {\n      throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n    if (g && g.pop && +g.pop !== 1) {\n      throw new Error(\"pop must be 1 (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n  }\n  function compileStates(states, start) {\n    var all = states.$all ? toRules(states.$all) : []\n    delete states.$all\n\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var ruleMap = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      ruleMap[key] = toRules(states[key]).concat(all)\n    }\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var rules = ruleMap[key]\n      var included = Object.create(null)\n      for (var j = 0; j < rules.length; j++) {\n        var rule = rules[j]\n        if (!rule.include) continue\n        var splice = [j, 1]\n        if (rule.include !== key && !included[rule.include]) {\n          included[rule.include] = true\n          var newRules = ruleMap[rule.include]\n          if (!newRules) {\n            throw new Error(\"Cannot include nonexistent state '\" + rule.include + \"' (in state '\" + key + \"')\")\n          }\n          for (var k = 0; k < newRules.length; k++) {\n            var newRule = newRules[k]\n            if (rules.indexOf(newRule) !== -1) continue\n            splice.push(newRule)\n          }\n        }\n        rules.splice.apply(rules, splice)\n        j--\n      }\n    }\n\n    var map = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(ruleMap[key], true)\n    }\n\n    for (var i = 0; i < keys.length; i++) {\n      var name = keys[i]\n      var state = map[name]\n      var groups = state.groups\n      for (var j = 0; j < groups.length; j++) {\n        checkStateGroup(groups[j], name, map)\n      }\n      var fastKeys = Object.getOwnPropertyNames(state.fast)\n      for (var j = 0; j < fastKeys.length; j++) {\n        checkStateGroup(state.fast[fastKeys[j]], name, map)\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n\n    // Use a JavaScript Map to map keywords to their corresponding token type\n    // unless Map is unsupported, then fall back to using an Object:\n    var isMap = typeof Map !== 'undefined'\n    var reverseMap = isMap ? new Map : Object.create(null)\n\n    var types = Object.getOwnPropertyNames(map)\n    for (var i = 0; i < types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        if (isMap) {\n          reverseMap.set(keyword, tokenType)\n        } else {\n          reverseMap[keyword] = tokenType\n        }\n      })\n    }\n    return function(k) {\n      return isMap ? reverseMap.get(k) : reverseMap[k]\n    }\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.queuedToken = info ? info.queuedToken : null\n    this.queuedText = info ? info.queuedText: \"\";\n    this.queuedThrow = info ? info.queuedThrow : null\n    this.setState(info ? info.state : this.startState)\n    this.stack = info && info.stack ? info.stack.slice() : []\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n      stack: this.stack.slice(),\n      queuedToken: this.queuedToken,\n      queuedText: this.queuedText,\n      queuedThrow: this.queuedThrow,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error\n    this.re = info.regexp\n    this.fast = info.fast\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  var eat = hasSticky ? function(re, buffer) { // assume re is /y\n    return re.exec(buffer)\n  } : function(re, buffer) { // assume re is /g\n    var match = re.exec(buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return this.groups[i]\n      }\n    }\n    throw new Error('Cannot find token type for matched text')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var index = this.index\n\n    // If a fallback token matched, we don't need to re-run the RegExp\n    if (this.queuedGroup) {\n      var token = this._token(this.queuedGroup, this.queuedText, index)\n      this.queuedGroup = null\n      this.queuedText = \"\"\n      return token\n    }\n\n    var buffer = this.buffer\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    // Fast matching for single characters\n    var group = this.fast[buffer.charCodeAt(index)]\n    if (group) {\n      return this._token(group, buffer.charAt(index), index)\n    }\n\n    // Execute RegExp\n    var re = this.re\n    re.lastIndex = index\n    var match = eat(re, buffer)\n\n    // Error tokens match the remaining buffer\n    var error = this.error\n    if (match == null) {\n      return this._token(error, buffer.slice(index, buffer.length), index)\n    }\n\n    var group = this._getGroup(match)\n    var text = match[0]\n\n    if (error.fallback && match.index !== index) {\n      this.queuedGroup = group\n      this.queuedText = text\n\n      // Fallback tokens contain the unmatched portion of the buffer\n      return this._token(error, buffer.slice(index, match.index), index)\n    }\n\n    return this._token(group, text, index)\n  }\n\n  Lexer.prototype._token = function(group, text, offset) {\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (typeof group.type === 'function' && group.type(text)) || group.defaultType,\n      value: typeof group.value === 'function' ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: offset,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      var err = new Error(this.formatError(token, \"invalid syntax\"))\n      throw err;\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    if (token == null) {\n      // An undefined token indicates EOF\n      var text = this.buffer.slice(this.index)\n      var token = {\n        text: text,\n        offset: this.index,\n        lineBreaks: text.indexOf('\\n') === -1 ? 0 : 1,\n        line: this.line,\n        col: this.col,\n      }\n    }\n    \n    var numLinesAround = 2\n    var firstDisplayedLine = Math.max(token.line - numLinesAround, 1)\n    var lastDisplayedLine = token.line + numLinesAround\n    var lastLineDigits = String(lastDisplayedLine).length\n    var displayedLines = lastNLines(\n        this.buffer, \n        (this.line - token.line) + numLinesAround + 1\n      )\n      .slice(0, 5)\n    var errorLines = []\n    errorLines.push(message + \" at line \" + token.line + \" col \" + token.col + \":\")\n    errorLines.push(\"\")\n    for (var i = 0; i < displayedLines.length; i++) {\n      var line = displayedLines[i]\n      var lineNo = firstDisplayedLine + i\n      errorLines.push(pad(String(lineNo), lastLineDigits) + \"  \" + line);\n      if (lineNo === token.line) {\n        errorLines.push(pad(\"\", lastLineDigits + token.col + 1) + \"^\")\n      }\n    }\n    return errorLines.join(\"\\n\")\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    return true\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n    fallback: Object.freeze({fallback: true}),\n    keywords: keywordTransform,\n  }\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/moo/moo.js\n");

/***/ }),

/***/ "../node_modules/nearley/lib/nearley.js":
/*!**********************************************!*\
  !*** ../node_modules/nearley/lib/nearley.js ***!
  \**********************************************/
/***/ (function(module) {

eval("(function(root, factory) {\n    if ( true && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(getSymbolShortDisplay).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n            // Having right set here will prevent the right state and its children\n            // form being garbage collected\n            state.right = undefined;\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var lines = buffer\n                .split(\"\\n\")\n                .slice(\n                    Math.max(0, this.line - 5), \n                    this.line\n                );\n\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var col = this.index - this.lastLineBreak;\n            var lastLineDigits = String(this.line).length;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += lines\n                .map(function(line, i) {\n                    return pad(this.line - lines.length + i + 1, lastLineDigits) + \" \" + line;\n                }, this)\n                .join(\"\\n\");\n            message += \"\\n\" + pad(\"\", lastLineDigits + col) + \"^\\n\";\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n\n        function pad(n, length) {\n            var s = String(n);\n            return Array(length - s.length + 1).join(\" \") + s;\n        }\n    }\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (true) {\n            try {\n                token = lexer.next();\n                if (!token) {\n                    break;\n                }\n            } catch (e) {\n                // Create the next column so that the error reporter\n                // can display the correctly predicted states.\n                var nextColumn = new Column(this.grammar, this.current + 1);\n                this.table.push(nextColumn);\n                var err = new Error(this.reportLexerError(e));\n                err.offset = this.current;\n                err.token = e.token;\n                throw err;\n            }\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.reportLexerError = function(lexerError) {\n        var tokenDisplay, lexerMessage;\n        // Planning to add a token property to moo's thrown error\n        // even on erroring tokens to be used in error display below\n        var token = lexerError.token;\n        if (token) {\n            tokenDisplay = \"input \" + JSON.stringify(token.text[0]) + \" (lexer error)\";\n            lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        } else {\n            tokenDisplay = \"input (lexer error)\";\n            lexerMessage = lexerError.message;\n        }\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var tokenDisplay = (token.type ? token.type + \" token: \" : \"\") + JSON.stringify(token.value !== undefined ? token.value : token);\n        var lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {\n        var lines = [];\n        lines.push(lexerMessage);\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== \"string\";\n            });\n\n        if (expectantStates.length === 0) {\n            lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\\n');\n            this.displayStateStack(lastColumn.states, lines);\n        } else {\n            lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\\n');\n            // Display a \"state stack\" for each expectant state\n            // - which shows you how this state came to be, step by step.\n            // If there is more than one derivation, we only display the first one.\n            var stateStacks = expectantStates\n                .map(function(state) {\n                    return this.buildFirstStateStack(state, []) || [state];\n                }, this);\n            // Display each state that is expecting a terminal symbol next.\n            stateStacks.forEach(function(stateStack) {\n                var state = stateStack[0];\n                var nextSymbol = state.rule.symbols[state.dot];\n                var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n                lines.push('A ' + symbolDisplay + ' based on:');\n                this.displayStateStack(stateStack, lines);\n            }, this);\n        }\n        lines.push(\"\");\n        return lines.join(\"\\n\");\n    }\n    \n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');\n                }\n                sameDisplayCount = 0;\n                lines.push('    ' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        return getSymbolLongDisplay(symbol);\n    };\n\n    /*\n    Builds a the first state stack. You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a\n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n\n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an single state stack.\n\n    */\n    Parser.prototype.buildFirstStateStack = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return null\n            // to eliminate this path from the results, because\n            // we don't know how to display it meaningfully\n            return null;\n        }\n        if (state.wantedBy.length === 0) {\n            return [state];\n        }\n        var prevState = state.wantedBy[0];\n        var childVisited = [state].concat(visited);\n        var childResult = this.buildFirstStateStack(prevState, childVisited);\n        if (childResult === null) {\n            return null;\n        }\n        return [state].concat(childResult);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    function getSymbolLongDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return 'character matching ' + symbol;\n            } else if (symbol.type) {\n                return symbol.type + ' token';\n            } else if (symbol.test) {\n                return 'token matching ' + String(symbol.test);\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    function getSymbolShortDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return symbol.toString();\n            } else if (symbol.type) {\n                return '%' + symbol.type;\n            } else if (symbol.test) {\n                return '<' + String(symbol.test) + '>';\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/nearley/lib/nearley.js\n");

/***/ }),

/***/ "../node_modules/pgsql-ast-parser/index.js":
/*!*************************************************!*\
  !*** ../node_modules/pgsql-ast-parser/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_228__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_228__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_228__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_228__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_228__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_228__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_228__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_228__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_228__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_228__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_228__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_228__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_228__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_228__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_228__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_228__(__nested_webpack_require_228__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! moo */ \"../node_modules/moo/moo.js\");\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_3780__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unbox = exports.doubleQuoted = exports.box = exports.track = exports.tracking = exports.trackingComments = exports.lexerAny = exports.lexer = void 0;\nconst moo_1 = __nested_webpack_require_3780__(0);\nconst keywords_1 = __nested_webpack_require_3780__(3);\n// build keywords\nconst keywordsMap = {};\nfor (const k of keywords_1.sqlKeywords) {\n    keywordsMap['kw_' + k.toLowerCase()] = k;\n}\nconst caseInsensitiveKeywords = (map) => {\n    const transform = (0, moo_1.keywords)(map);\n    return (text) => transform(text.toUpperCase());\n};\n// build lexer\nexports.lexer = (0, moo_1.compile)({\n    word: {\n        match: /[eE](?!')[A-Za-z0-9_]*|[a-df-zA-DF-Z_][A-Za-z0-9_]*/,\n        type: caseInsensitiveKeywords(keywordsMap),\n        value: x => x.toLowerCase(),\n    },\n    wordQuoted: {\n        match: /\"(?:[^\"\\*]|\"\")+\"/,\n        type: () => 'quoted_word',\n        value: x => x.substring(1, x.length - 1),\n    },\n    string: {\n        match: /'(?:[^']|\\'\\')*'/,\n        value: x => {\n            return x.substring(1, x.length - 1)\n                .replace(/''/g, '\\'');\n        },\n    },\n    eString: {\n        match: /\\b(?:e|E)'(?:[^'\\\\]|[\\r\\n\\s]|(?:\\\\\\s)|(?:\\\\\\n)|(?:\\\\.)|(?:\\'\\'))+'/,\n        value: x => {\n            return x.substring(2, x.length - 1)\n                .replace(/''/g, '\\'')\n                .replace(/\\\\([\\s\\n])/g, (_, x) => x)\n                .replace(/\\\\./g, m => JSON.parse('\"' + m + '\"'));\n        },\n    },\n    qparam: {\n        match: /\\$\\d+/,\n    },\n    commentLine: /\\-\\-.*?$[\\s\\r\\n]*/,\n    commentFullOpen: /\\/\\*/,\n    commentFullClose: /\\*\\/[\\s\\r\\n]*/,\n    star: '*',\n    comma: ',',\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    int: /\\-?\\d+(?![\\.\\d])/,\n    float: /\\-?(?:(?:\\d*\\.\\d+)|(?:\\d+\\.\\d*))/,\n    // word: /[a-zA-Z][A-Za-z0-9_\\-]*/,\n    lparen: '(',\n    rparen: ')',\n    lbracket: '[',\n    rbracket: ']',\n    semicolon: ';',\n    dot: /\\.(?!\\d)/,\n    op_cast: '::',\n    op_colon: ':',\n    op_plus: '+',\n    op_eq: '=',\n    op_neq: {\n        match: /(?:!=)|(?:\\<\\>)/,\n        value: () => '!=',\n    },\n    op_membertext: '->>',\n    op_member: '->',\n    op_minus: '-',\n    op_div: /\\//,\n    op_not_ilike: /\\!~~\\*/,\n    op_not_like: /\\!~~/,\n    op_ilike: /~~\\*/,\n    op_like: /~~/,\n    op_mod: '%',\n    op_exp: '^',\n    op_additive: {\n        // group other additive operators\n        match: ['||', '-', '#-', '&&'],\n    },\n    op_compare: {\n        // group other comparison operators\n        // ... to add: \"IN\" and \"NOT IN\" that are matched by keywords\n        match: ['>', '>=', '<', '<=', '@>', '<@', '?', '?|', '?&', '#>>', '>>', '<<', '~', '~*', '!~', '!~*', '@@'],\n    },\n    ops_others: {\n        // referenced as (any other operator) in https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-PRECEDENCE\n        // see also https://www.postgresql.org/docs/9.0/functions-math.html\n        match: ['|', '&', '^', '#'],\n    },\n    codeblock: {\n        match: /\\$\\$(?:.|[\\s\\t\\n\\v\\f\\r])*?\\$\\$/s,\n        lineBreaks: true,\n        value: (x) => x.substring(2, x.length - 2),\n    },\n});\nexports.lexer.next = (next => () => {\n    let tok;\n    let commentFull = null;\n    while (tok = next.call(exports.lexer)) {\n        // js regex can't be recursive, so we'll keep track of nested opens (/*) and closes (*/).\n        if (tok.type === 'commentFullOpen') {\n            if (commentFull === null) { // initial open - start collecting content\n                commentFull = {\n                    nested: 0,\n                    offset: tok.offset,\n                    text: tok.text\n                };\n                continue;\n            }\n            commentFull.nested++;\n        }\n        if (commentFull != null) {\n            // collect comment content\n            commentFull.text += tok.text;\n            if (tok.type === 'commentFullClose') {\n                if (commentFull.nested === 0) { // finish comment, if not nested\n                    comments === null || comments === void 0 ? void 0 : comments.push(makeComment(commentFull));\n                    commentFull = null;\n                    continue;\n                }\n                commentFull.nested--;\n            }\n            continue;\n        }\n        if (tok.type === 'space') {\n            continue;\n        }\n        if (tok.type === 'commentLine') {\n            comments === null || comments === void 0 ? void 0 : comments.push(makeComment(tok));\n            continue;\n        }\n        break;\n    }\n    if (trackingLoc && tok) {\n        const start = tok.offset;\n        const loc = {\n            start,\n            end: start + tok.text.length,\n        };\n        tok._location = loc;\n    }\n    return tok;\n})(exports.lexer.next);\nexports.lexerAny = exports.lexer;\nlet comments = null;\nconst makeComment = ({ offset, text }) => ({\n    _location: { start: offset, end: offset + text.length },\n    comment: text,\n});\nfunction trackingComments(act) {\n    if (comments) {\n        throw new Error('WAT ? Recursive comments tracking 🤔🤨 ?');\n    }\n    try {\n        comments = [];\n        const ast = act();\n        return { comments, ast };\n    }\n    finally {\n        comments = null;\n    }\n}\nexports.trackingComments = trackingComments;\nlet trackingLoc = false;\nfunction tracking(act) {\n    if (trackingLoc) {\n        return act();\n    }\n    try {\n        trackingLoc = true;\n        return act();\n    }\n    finally {\n        trackingLoc = false;\n    }\n}\nexports.tracking = tracking;\nfunction track(xs, ret) {\n    if (!trackingLoc || !ret || typeof ret !== 'object') {\n        return ret;\n    }\n    const start = seek(xs, true);\n    const end = seek(xs, false);\n    if (!start || !end) {\n        return ret;\n    }\n    if (start === end) {\n        ret._location = start;\n    }\n    else {\n        const loc = {\n            start: start.start,\n            end: end.end,\n        };\n        ret._location = loc;\n    }\n    return ret;\n}\nexports.track = track;\nconst literal = Symbol('_literal');\nconst doubleQuotedSym = Symbol('_doublequoted');\nfunction box(xs, value, doubleQuoted) {\n    if (!trackingLoc && !doubleQuoted) {\n        return value;\n    }\n    return track(xs, { [literal]: value, [doubleQuotedSym]: doubleQuoted });\n}\nexports.box = box;\nfunction unwrapNoBox(e) {\n    if (Array.isArray(e) && e.length === 1) {\n        e = unwrapNoBox(e[0]);\n    }\n    if (Array.isArray(e) && !e.length) {\n        return null;\n    }\n    return e;\n}\nfunction doubleQuoted(value) {\n    const uw = unwrapNoBox(value);\n    if (typeof value === 'object' && (uw === null || uw === void 0 ? void 0 : uw[doubleQuotedSym])) {\n        return { doubleQuoted: true };\n    }\n    return undefined;\n}\nexports.doubleQuoted = doubleQuoted;\nfunction unbox(value) {\n    var _a;\n    if (typeof value === 'object') {\n        return (_a = value === null || value === void 0 ? void 0 : value[literal]) !== null && _a !== void 0 ? _a : value;\n    }\n    return value;\n}\nexports.unbox = unbox;\nfunction seek(xs, start) {\n    if (!xs) {\n        return null;\n    }\n    if (Array.isArray(xs)) {\n        const diff = start ? 1 : -1;\n        for (let i = start ? 0 : xs.length - 1; i >= 0 && i < xs.length; i += diff) {\n            const v = seek(xs[i], start);\n            if (v) {\n                return v;\n            }\n        }\n        return null;\n    }\n    if (typeof xs !== 'object') {\n        return null;\n    }\n    return xs._location;\n}\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __nested_webpack_require_11258__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AstDefaultMapper = exports.arrayNilMap = exports.assignChanged = exports.astMapper = void 0;\nconst utils_1 = __nested_webpack_require_11258__(6);\n/**\n * Builds an AST modifier based on the default implementation, merged with the one you provide.\n *\n * Example of a modifier that renames all reference to columns 'foo' to 'bar'\n * ```ts\n *  const mapper = astMapper(b => ({\n *       ref: a => assignChanged(a, {\n *           name: a.name === 'foo'\n *               ? 'bar'\n *               : a.name\n *       })\n *   }));\n *\n * const modified = mapper.statement(myStatementToModify);\n * ```\n */\nfunction astMapper(modifierBuilder) {\n    const instance = new AstDefaultMapper();\n    instance.wrapped = modifierBuilder(instance);\n    return instance;\n}\nexports.astMapper = astMapper;\n/**\n * An helper function that returns a copy of an object with modified properties\n * (similar to Object.assign()), but ONLY if thos properties have changed.\n * Will return the original object if not.\n */\nfunction assignChanged(orig, assign) {\n    if (!orig) {\n        return orig;\n    }\n    let changed = false;\n    for (const k of Object.keys(assign)) {\n        if (orig[k] !== assign[k]) {\n            changed = true;\n            break;\n        }\n    }\n    if (!changed) {\n        return orig;\n    }\n    return (0, utils_1.trimNullish)({\n        ...orig,\n        ...assign,\n    }, 0);\n}\nexports.assignChanged = assignChanged;\n/**\n * An helper function that returns a map of an array, but:\n * - It will return the original array if it is null-ish\n * - It will remove all null-ish entries\n * - It will return the original array if nothing has changed\n */\nfunction arrayNilMap(collection, mapper) {\n    if (!(collection === null || collection === void 0 ? void 0 : collection.length)) {\n        return collection;\n    }\n    let changed = false;\n    let ret = collection;\n    for (let i = 0; i < collection.length; i++) {\n        const orig = collection[i];\n        const val = mapper(orig);\n        if (!changed && (!val || val !== orig)) {\n            changed = true;\n            ret = collection.slice(0, i);\n        }\n        if (!val) {\n            continue;\n        }\n        if (changed) {\n            ret.push(val);\n        }\n    }\n    return ret;\n}\nexports.arrayNilMap = arrayNilMap;\nfunction withAccepts(val) {\n    switch (val === null || val === void 0 ? void 0 : val.type) {\n        case 'select':\n        case 'delete':\n        case 'insert':\n        case 'update':\n        case 'union':\n        case 'union all':\n        case 'with':\n            return true;\n        default:\n            return false;\n    }\n}\n/**\n * Can be used to modify an AST.\n *\n * You will have to override functions that you're interested in to use this class.\n *\n * Example: Will remove all references in\n */\nclass AstDefaultMapper {\n    super() {\n        return new SkipModifier(this);\n    }\n    statement(val) {\n        switch (val.type) {\n            case 'alter table':\n                return this.alterTable(val);\n            case 'alter index':\n                return this.alterIndex(val);\n            case 'commit':\n            case 'start transaction':\n            case 'rollback':\n                return this.transaction(val);\n            case 'create index':\n                return this.createIndex(val);\n            case 'create table':\n                return this.createTable(val);\n            case 'truncate table':\n                return this.truncateTable(val);\n            case 'delete':\n                return this.delete(val);\n            case 'insert':\n                return this.insert(val);\n            case 'with':\n                return this.with(val);\n            case 'with recursive':\n                return this.withRecursive(val);\n            case 'select':\n                return this.selection(val);\n            case 'update':\n                return this.update(val);\n            case 'create extension':\n                return this.createExtension(val);\n            case 'tablespace':\n                return this.tablespace(val);\n            case 'set':\n                return this.setGlobal(val);\n            case 'set timezone':\n                return this.setTimezone(val);\n            case 'set names':\n                return this.setNames(val);\n            case 'create sequence':\n                return this.createSequence(val);\n            case 'alter sequence':\n                return this.alterSequence(val);\n            case 'begin':\n                return this.begin(val);\n            case 'drop table':\n            case 'drop index':\n            case 'drop sequence':\n            case 'drop type':\n            case 'drop trigger':\n                return this.drop(val);\n            case 'create enum':\n                return this.createEnum(val);\n            case 'alter enum':\n                return this.alterEnum(val);\n            case 'create composite type':\n                return this.createCompositeType(val);\n            case 'union':\n            case 'union all':\n                return this.union(val);\n            case 'show':\n                return this.show(val);\n            case 'prepare':\n                return this.prepare(val);\n            case 'deallocate':\n                return this.deallocate(val);\n            case 'create view':\n                return this.createView(val);\n            case 'create materialized view':\n                return this.createMaterializedView(val);\n            case 'refresh materialized view':\n                return this.refreshMaterializedView(val);\n            case 'create schema':\n                return this.createSchema(val);\n            case 'raise':\n                return this.raise(val);\n            case 'comment':\n                return this.comment(val);\n            case 'do':\n                return this.do(val);\n            case 'create function':\n                return this.createFunction(val);\n            case 'drop function':\n                return this.dropFunction(val);\n            case 'values':\n                return this.values(val);\n            default:\n                throw utils_1.NotSupported.never(val);\n        }\n    }\n    comment(val) {\n        // not really supported :/\n        return val;\n    }\n    createView(val) {\n        const query = this.select(val.query);\n        if (!query) {\n            return null;\n        }\n        const ref = this.tableRef(val.name);\n        if (!ref) {\n            return null;\n        }\n        return assignChanged(val, {\n            query,\n            name: ref,\n        });\n    }\n    createMaterializedView(val) {\n        const query = this.select(val.query);\n        if (!query) {\n            return null;\n        }\n        const ref = this.tableRef(val.name);\n        if (!ref) {\n            return null;\n        }\n        return assignChanged(val, {\n            query,\n            name: ref,\n        });\n    }\n    refreshMaterializedView(val) {\n        return val;\n    }\n    do(val) {\n        return val;\n    }\n    createFunction(val) {\n        // process arguments\n        const args = arrayNilMap(val.arguments, a => {\n            const type = this.dataType(a.type);\n            return assignChanged(a, { type });\n        });\n        // process return type\n        let returns;\n        if (val.returns) {\n            switch (val.returns.kind) {\n                case 'table':\n                    returns = assignChanged(val.returns, {\n                        columns: arrayNilMap(val.returns.columns, v => {\n                            const type = this.dataType(v.type);\n                            return type && assignChanged(v, { type });\n                        })\n                    });\n                    break;\n                case undefined:\n                case null:\n                case 'array':\n                    returns = this.dataType(val.returns);\n                    break;\n                default:\n                    throw utils_1.NotSupported.never(val.returns);\n            }\n        }\n        return assignChanged(val, {\n            returns,\n            arguments: args,\n        });\n    }\n    dropFunction(val) {\n        const args = arrayNilMap(val.arguments, a => {\n            const type = this.dataType(a.type);\n            return assignChanged(a, { type });\n        });\n        return assignChanged(val, {\n            arguments: args,\n        });\n    }\n    show(val) {\n        return val;\n    }\n    createEnum(val) {\n        return val;\n    }\n    alterEnum(val) {\n        return val;\n    }\n    createCompositeType(val) {\n        const attributes = arrayNilMap(val.attributes, a => assignChanged(a, {\n            dataType: this.dataType(a.dataType),\n        }));\n        return assignChanged(val, { attributes });\n    }\n    drop(val) {\n        return val;\n    }\n    alterSequence(seq) {\n        if (seq.change.type === 'set options') {\n            if (seq.change.as) {\n                this.dataType(seq.change.as);\n            }\n        }\n        return seq;\n    }\n    begin(begin) {\n        return begin;\n    }\n    createSequence(seq) {\n        if (seq.options.as) {\n            this.dataType(seq.options.as);\n        }\n        return seq;\n    }\n    tablespace(val) {\n        return val;\n    }\n    setGlobal(val) {\n        return val;\n    }\n    setTimezone(val) {\n        return val;\n    }\n    setNames(val) {\n        return val;\n    }\n    update(val) {\n        if (!val) {\n            return val;\n        }\n        const table = this.tableRef(val.table);\n        if (!table) {\n            return null; // nothing to update\n        }\n        const from = val.from && this.from(val.from);\n        const where = val.where && this.expr(val.where);\n        const sets = arrayNilMap(val.sets, x => this.set(x));\n        if (!(sets === null || sets === void 0 ? void 0 : sets.length)) {\n            return null; // nothing to update\n        }\n        const returning = arrayNilMap(val.returning, c => this.selectionColumn(c));\n        return assignChanged(val, {\n            table,\n            where,\n            sets,\n            from,\n            returning,\n        });\n    }\n    insert(val) {\n        var _a, _b;\n        const into = this.tableRef(val.into);\n        if (!into) {\n            return null; // nowhere to insert into\n        }\n        const select = val.insert && this.select(val.insert);\n        if (!select) {\n            // nothing to insert\n            return null;\n        }\n        const returning = arrayNilMap(val.returning, c => this.selectionColumn(c));\n        let on = (_a = val.onConflict) === null || _a === void 0 ? void 0 : _a.on;\n        switch (on === null || on === void 0 ? void 0 : on.type) {\n            case 'on constraint':\n                // nothing to do\n                break;\n            case 'on expr':\n                on = assignChanged(on, {\n                    exprs: arrayNilMap(on.exprs, e => this.expr(e)),\n                });\n                break;\n            case null:\n            case undefined:\n                break;\n            default:\n                throw utils_1.NotSupported.never(on);\n        }\n        let ocdo = (_b = val.onConflict) === null || _b === void 0 ? void 0 : _b.do;\n        if (ocdo && ocdo !== 'do nothing') {\n            const sets = arrayNilMap(ocdo.sets, x => this.set(x));\n            if (!(sets === null || sets === void 0 ? void 0 : sets.length)) {\n                ocdo = 'do nothing';\n            }\n            else if (ocdo.sets !== sets) {\n                ocdo = { sets };\n            }\n        }\n        return assignChanged(val, {\n            into,\n            insert: select,\n            returning,\n            onConflict: !ocdo ? val.onConflict : assignChanged(val.onConflict, {\n                do: ocdo,\n                on,\n            }),\n        });\n    }\n    raise(val) {\n        return assignChanged(val, {\n            formatExprs: val.formatExprs && arrayNilMap(val.formatExprs, x => this.expr(x)),\n            using: val.using && arrayNilMap(val.using, u => {\n                return assignChanged(u, {\n                    value: this.expr(u.value),\n                });\n            }),\n        });\n    }\n    delete(val) {\n        const from = this.tableRef(val.from);\n        if (!from) {\n            return null; // nothing to delete\n        }\n        const where = val.where && this.expr(val.where);\n        const returning = arrayNilMap(val.returning, c => this.selectionColumn(c));\n        return assignChanged(val, {\n            where,\n            returning,\n            from,\n        });\n    }\n    createSchema(val) {\n        return val;\n    }\n    createTable(val) {\n        const columns = arrayNilMap(val.columns, col => {\n            switch (col.kind) {\n                case 'column':\n                    return this.createColumn(col);\n                case 'like table':\n                    return this.likeTable(col);\n                default:\n                    throw utils_1.NotSupported.never(col);\n            }\n        });\n        if (!(columns === null || columns === void 0 ? void 0 : columns.length)) {\n            return null; // no column to create\n        }\n        return assignChanged(val, {\n            columns,\n        });\n    }\n    likeTable(col) {\n        const like = this.tableRef(col.like);\n        if (!like) {\n            return null;\n        }\n        return assignChanged(col, { like });\n    }\n    truncateTable(val) {\n        return val;\n    }\n    constraint(c) {\n        switch (c.type) {\n            case 'not null':\n            case 'null':\n            case 'primary key':\n            case 'unique':\n            case 'add generated':\n                return c;\n            case 'default': {\n                const def = this.expr(c.default);\n                if (!def) {\n                    return null;\n                }\n                return assignChanged(c, {\n                    default: def,\n                });\n            }\n            case 'check': {\n                const def = this.expr(c.expr);\n                if (!def) {\n                    return null;\n                }\n                return assignChanged(c, {\n                    expr: def,\n                });\n            }\n            case 'reference': {\n                const foreignTable = this.tableRef(c.foreignTable);\n                if (!foreignTable) {\n                    return null;\n                }\n                return assignChanged(c, {\n                    foreignTable,\n                });\n            }\n            default:\n                throw utils_1.NotSupported.never(c);\n        }\n    }\n    set(st) {\n        const value = this.expr(st.value);\n        if (!value) {\n            return null;\n        }\n        return assignChanged(st, {\n            value,\n        });\n    }\n    // =========================================\n    // ================ STUFF ==================\n    // =========================================\n    /** Called when a data type definition is encountered */\n    dataType(dataType) {\n        return dataType;\n    }\n    /** Called when an alias of a table is created */\n    tableRef(st) {\n        return st;\n    }\n    transaction(val) {\n        return val;\n    }\n    createExtension(val) {\n        return val;\n    }\n    createIndex(val) {\n        const expressions = arrayNilMap(val.expressions, e => {\n            const expression = this.expr(e.expression);\n            if (expression === e.expression) {\n                return e;\n            }\n            if (!expression) {\n                return null; // no more index expression\n            }\n            return {\n                ...e,\n                expression,\n            };\n        });\n        if (!(expressions === null || expressions === void 0 ? void 0 : expressions.length)) {\n            return null; // no columns to create index on\n        }\n        return assignChanged(val, {\n            expressions,\n        });\n    }\n    prepare(st) {\n        const statement = this.statement(st.statement);\n        if (!statement) {\n            return null;\n        }\n        return assignChanged(st, {\n            args: arrayNilMap(st.args, a => this.dataType(a)),\n            statement,\n        });\n    }\n    deallocate(st) {\n        return st;\n    }\n    // =========================================\n    // ============== ALTER INDEX ==============\n    // =========================================\n    alterIndex(st) {\n        // not much as of today...might improve this in the future\n        return st;\n    }\n    // =========================================\n    // ============== ALTER TABLE ==============\n    // =========================================\n    alterTable(st) {\n        var _a;\n        const table = this.tableRef(st.table);\n        if (!table) {\n            return null; // no table\n        }\n        let changes = [];\n        let hasChanged = false;\n        for (let i = 0; i < (((_a = st.changes) === null || _a === void 0 ? void 0 : _a.length) || 0); i++) {\n            const currentChange = st.changes[i];\n            const change = this.tableAlteration(currentChange, st.table);\n            hasChanged = hasChanged || (change != currentChange);\n            if (!!change) {\n                changes.push(change);\n            }\n        }\n        if (!changes.length) {\n            return null; // no change left\n        }\n        if (!hasChanged) {\n            return st;\n        }\n        return assignChanged(st, {\n            table,\n            changes,\n        });\n    }\n    tableAlteration(change, table) {\n        switch (change.type) {\n            case 'add column':\n                return this.addColumn(change, table);\n            case 'add constraint':\n                return this.addConstraint(change, table);\n            case 'alter column':\n                return this.alterColumn(change, table);\n            case 'rename':\n                return this.renameTable(change, table);\n            case 'rename column':\n                return this.renameColumn(change, table);\n            case 'rename constraint':\n                return this.renameConstraint(change, table);\n            case 'drop column':\n                return this.dropColumn(change, table);\n            case 'drop constraint':\n                return this.dropConstraint(change, table);\n            case 'owner':\n                return this.setTableOwner(change, table);\n            default:\n                throw utils_1.NotSupported.never(change);\n        }\n    }\n    dropColumn(change, table) {\n        return change;\n    }\n    dropConstraint(change, table) {\n        return change;\n    }\n    setTableOwner(change, table) {\n        return change;\n    }\n    renameConstraint(change, table) {\n        return change;\n    }\n    renameColumn(change, table) {\n        return change;\n    }\n    renameTable(change, table) {\n        return change;\n    }\n    alterColumn(change, inTable) {\n        let alter;\n        switch (change.alter.type) {\n            case 'set default':\n                alter = this.setColumnDefault(change.alter, inTable, change.column);\n                break;\n            case 'set type':\n                alter = this.setColumnType(change.alter, inTable, change.column);\n                break;\n            case 'drop default':\n            case 'set not null':\n            case 'drop not null':\n                alter = this.alterColumnSimple(change.alter, inTable, change.column);\n                break;\n            case 'add generated':\n                alter = this.alterColumnAddGenerated(change.alter, inTable, change.column);\n                break;\n            default:\n                throw utils_1.NotSupported.never(change.alter);\n        }\n        if (!alter) {\n            return null; // no more alter\n        }\n        return assignChanged(change, {\n            alter,\n        });\n    }\n    setColumnType(alter, inTable, inColumn) {\n        const dataType = this.dataType(alter.dataType);\n        return assignChanged(alter, {\n            dataType,\n        });\n    }\n    alterColumnAddGenerated(alter, inTable, inColumn) {\n        return alter;\n    }\n    alterColumnSimple(alter, inTable, inColumn) {\n        return alter;\n    }\n    setColumnDefault(alter, inTable, inColumn) {\n        const def = this.expr(alter.default);\n        if (!def) {\n            return null; // no more default to set\n        }\n        return assignChanged(alter, {\n            default: def,\n        });\n    }\n    addConstraint(change, inTable) {\n        return change;\n    }\n    addColumn(change, inTable) {\n        const column = this.createColumn(change.column);\n        if (!column) {\n            return null; // no more column to add\n        }\n        return assignChanged(change, {\n            column,\n        });\n    }\n    createColumn(col) {\n        var _a;\n        // to be overriden\n        const dataType = this.dataType(col.dataType);\n        if (!dataType) {\n            return null; // no data type => remove column\n        }\n        const constraints = (_a = arrayNilMap(col.constraints, m => this.constraint(m))) !== null && _a !== void 0 ? _a : undefined;\n        return assignChanged(col, {\n            dataType,\n            constraints,\n        });\n    }\n    // =========================================\n    // ============== SELECTIONS ==============\n    // =========================================\n    select(val) {\n        switch (val.type) {\n            case 'select':\n                return this.selection(val);\n            case 'union':\n            case 'union all':\n                return this.union(val);\n            case 'with':\n                return this.with(val);\n            case 'values':\n                return this.values(val);\n            case 'with recursive':\n                return this.withRecursive(val);\n            default:\n                throw utils_1.NotSupported.never(val);\n        }\n    }\n    selection(val) {\n        var _a, _b;\n        const from = arrayNilMap(val.from, c => this.from(c));\n        const columns = arrayNilMap(val.columns, c => this.selectionColumn(c));\n        const where = val.where && this.expr(val.where);\n        const groupBy = arrayNilMap(val.groupBy, c => this.expr(c));\n        const having = val.having && this.expr(val.having);\n        const orderBy = this.orderBy(val.orderBy);\n        const limit = assignChanged(val.limit, {\n            limit: this.expr((_a = val.limit) === null || _a === void 0 ? void 0 : _a.limit),\n            offset: this.expr((_b = val.limit) === null || _b === void 0 ? void 0 : _b.offset),\n        });\n        return assignChanged(val, {\n            from,\n            columns,\n            where,\n            groupBy,\n            having,\n            orderBy,\n            limit,\n        });\n    }\n    orderBy(orderBy) {\n        return arrayNilMap(orderBy, c => {\n            const by = this.expr(c.by);\n            if (!by) {\n                return null;\n            }\n            if (by === c.by) {\n                return c;\n            }\n            return {\n                ...c,\n                by,\n            };\n        });\n    }\n    union(val) {\n        const left = this.select(val.left);\n        const right = this.select(val.right);\n        if (!left || !right) {\n            return left !== null && left !== void 0 ? left : right;\n        }\n        return assignChanged(val, {\n            left,\n            right\n        });\n    }\n    with(val) {\n        const bind = arrayNilMap(val.bind, s => {\n            const statement = this.statement(s.statement);\n            return withAccepts(statement)\n                ? assignChanged(s, { statement })\n                : null;\n        });\n        // no bindngs\n        if (!bind) {\n            return null;\n        }\n        const _in = this.statement(val.in);\n        if (!withAccepts(_in)) {\n            return null;\n        }\n        return assignChanged(val, {\n            bind,\n            in: _in,\n        });\n    }\n    withRecursive(val) {\n        const statement = this.union(val.bind);\n        if (!statement) {\n            return null;\n        }\n        // 'with recursive' only accepts unions\n        if (statement.type !== 'union' && statement.type !== 'union all') {\n            return null;\n        }\n        const _in = this.statement(val.in);\n        if (!withAccepts(_in)) {\n            return null;\n        }\n        return assignChanged(val, {\n            bind: statement,\n            in: _in,\n        });\n    }\n    from(from) {\n        switch (from.type) {\n            case 'table':\n                return this.fromTable(from);\n            case 'statement':\n                return this.fromStatement(from);\n            case 'call':\n                return this.fromCall(from);\n            default:\n                throw utils_1.NotSupported.never(from);\n        }\n    }\n    fromCall(from) {\n        const call = this.call(from);\n        if (!call || call.type !== 'call') {\n            return null;\n        }\n        return assignChanged(from, call);\n    }\n    fromStatement(from) {\n        const statement = this.select(from.statement);\n        if (!statement) {\n            return null; // nothing to select from\n        }\n        const join = from.join && this.join(from.join);\n        return assignChanged(from, {\n            statement,\n            join,\n        });\n    }\n    values(from) {\n        const values = arrayNilMap(from.values, x => arrayNilMap(x, y => this.expr(y)));\n        if (!(values === null || values === void 0 ? void 0 : values.length)) {\n            return null; // nothing to select from\n        }\n        return assignChanged(from, {\n            values,\n        });\n    }\n    join(join) {\n        const on = join.on && this.expr(join.on);\n        if (!on && !join.using) {\n            return join;\n        }\n        return assignChanged(join, {\n            on,\n        });\n    }\n    fromTable(from) {\n        const nfrom = this.tableRef(from.name);\n        if (!nfrom) {\n            return null; // nothing to select from\n        }\n        const join = from.join && this.join(from.join);\n        return assignChanged(from, {\n            name: nfrom,\n            join,\n        });\n    }\n    selectionColumn(val) {\n        const expr = this.expr(val.expr);\n        if (!expr) {\n            return null; // not selected anymore\n        }\n        return assignChanged(val, {\n            expr,\n        });\n    }\n    // =========================================\n    // ============== EXPRESSIONS ==============\n    // =========================================\n    expr(val) {\n        if (!val) {\n            return val;\n        }\n        switch (val.type) {\n            case 'binary':\n                return this.binary(val);\n            case 'unary':\n                return this.unary(val);\n            case 'ref':\n                return this.ref(val);\n            case 'string':\n            case 'numeric':\n            case 'integer':\n            case 'boolean':\n            case 'constant':\n            case 'null':\n                return this.constant(val);\n            case 'list':\n            case 'array':\n                return this.array(val);\n            case 'array select':\n                return this.arraySelect(val);\n            case 'call':\n                return this.call(val);\n            case 'cast':\n                return this.cast(val);\n            case 'case':\n                return this.case(val);\n            case 'member':\n                return this.member(val);\n            case 'arrayIndex':\n                return this.arrayIndex(val);\n            case 'ternary':\n                return this.ternary(val);\n            case 'select':\n            case 'union':\n            case 'union all':\n            case 'with':\n            case 'with recursive':\n                return this.select(val);\n            case 'keyword':\n                return this.valueKeyword(val);\n            case 'parameter':\n                return this.parameter(val);\n            case 'extract':\n                return this.extract(val);\n            case 'overlay':\n                return this.callOverlay(val);\n            case 'substring':\n                return this.callSubstring(val);\n            case 'values':\n                return this.values(val);\n            case 'default':\n                return this.default(val);\n            default:\n                throw utils_1.NotSupported.never(val);\n        }\n    }\n    arraySelect(val) {\n        const select = this.select(val.select);\n        if (!select) {\n            return null;\n        }\n        return assignChanged(val, { select });\n    }\n    extract(st) {\n        const from = this.expr(st.from);\n        if (!from) {\n            return null;\n        }\n        return assignChanged(st, { from });\n    }\n    valueKeyword(val) {\n        return val;\n    }\n    ternary(val) {\n        const value = this.expr(val.value);\n        const lo = this.expr(val.lo);\n        const hi = this.expr(val.hi);\n        if (!value || !lo || !hi) {\n            return null; // missing a branch\n        }\n        return assignChanged(val, {\n            value,\n            lo,\n            hi,\n        });\n    }\n    parameter(st) {\n        return st;\n    }\n    arrayIndex(val) {\n        const array = this.expr(val.array);\n        const index = this.expr(val.index);\n        if (!array || !index) {\n            return null;\n        }\n        return assignChanged(val, {\n            array,\n            index,\n        });\n    }\n    member(val) {\n        const operand = this.expr(val.operand);\n        if (!operand) {\n            return null;\n        }\n        return assignChanged(val, {\n            operand,\n        });\n    }\n    case(val) {\n        const value = val.value && this.expr(val.value);\n        const whens = arrayNilMap(val.whens, w => {\n            const when = this.expr(w.when);\n            const value = this.expr(w.value);\n            if (!when || !value) {\n                return null;\n            }\n            return assignChanged(w, {\n                value,\n                when,\n            });\n        });\n        if (!(whens === null || whens === void 0 ? void 0 : whens.length)) {\n            return null; // no case\n        }\n        const els = val.else && this.expr(val.else);\n        return assignChanged(val, {\n            value,\n            whens,\n            else: els,\n        });\n    }\n    cast(val) {\n        const operand = this.expr(val.operand);\n        if (!operand) {\n            return null;\n        }\n        return assignChanged(val, {\n            operand,\n        });\n    }\n    call(val) {\n        var _a;\n        const args = arrayNilMap(val.args, a => this.expr(a));\n        if (!args) {\n            return null;\n        }\n        const orderBy = this.orderBy(val.orderBy);\n        const filter = this.expr(val.filter);\n        const withinGroupList = val.withinGroup ? [val.withinGroup] : undefined;\n        const withinGroup = (_a = this.orderBy(withinGroupList)) === null || _a === void 0 ? void 0 : _a[0];\n        return assignChanged(val, {\n            args,\n            orderBy,\n            filter,\n            withinGroup,\n        });\n    }\n    callSubstring(val) {\n        return assignChanged(val, {\n            value: this.expr(val.value),\n            from: this.expr(val.from),\n            for: this.expr(val.for),\n        });\n    }\n    callOverlay(val) {\n        return assignChanged(val, {\n            value: this.expr(val.value),\n            placing: this.expr(val.placing),\n            from: this.expr(val.from),\n            for: this.expr(val.for),\n        });\n    }\n    array(val) {\n        const expressions = arrayNilMap(val.expressions, a => this.expr(a));\n        if (!expressions) {\n            return null;\n        }\n        return assignChanged(val, {\n            expressions,\n        });\n    }\n    constant(value) {\n        return value;\n    }\n    default(value) {\n        return value;\n    }\n    /** Called when a reference is used */\n    ref(val) {\n        return val;\n    }\n    unary(val) {\n        const operand = this.expr(val.operand);\n        if (!operand) {\n            return null;\n        }\n        return assignChanged(val, {\n            operand,\n        });\n    }\n    binary(val) {\n        const left = this.expr(val.left);\n        const right = this.expr(val.right);\n        if (!left || !right) {\n            return null;\n        }\n        return assignChanged(val, {\n            left,\n            right,\n        });\n    }\n}\nexports.AstDefaultMapper = AstDefaultMapper;\n// ====== auto implement the replace mechanism\nconst proto = AstDefaultMapper.prototype;\nfor (const k of Object.getOwnPropertyNames(proto)) {\n    const orig = proto[k];\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(proto, k, {\n        configurable: false,\n        get() {\n            return function (...args) {\n                var _a;\n                if (this.skipNext) {\n                    this.skipNext = false;\n                    return orig.apply(this, args);\n                }\n                const impl = (_a = this.wrapped) === null || _a === void 0 ? void 0 : _a[k];\n                if (!impl) {\n                    return orig.apply(this, args);\n                }\n                return impl.apply(this.wrapped, args);\n            };\n        }\n    });\n}\n// ====== auto implement the skip mechanism\nclass SkipModifier extends AstDefaultMapper {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n    }\n}\nfor (const k of Object.getOwnPropertyNames(proto)) {\n    const orig = proto[k];\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(SkipModifier.prototype, k, {\n        configurable: false,\n        get() {\n            return function (...args) {\n                this.parent.skipNext = true;\n                return orig.apply(this.parent, args);\n            };\n        }\n    });\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sqlKeywords = void 0;\n// https://www.postgresql.org/docs/current/sql-keywords-appendix.html\n// $('table.table').children('tbody').children().toArray().filter(x => { const txt = $($(x).children()[1]).text(); return txt.includes('reserved') && !txt.includes('non-reserved')}).map(x => $($(x).children()[0]).text())\nexports.sqlKeywords = [\n    \"ALL\", \"ANALYSE\", \"ANALYZE\", \"AND\", \"ANY\", \"ARRAY\", \"AS\", \"ASC\", \"ASYMMETRIC\", \"AUTHORIZATION\", \"BINARY\", \"BOTH\", \"CASE\", \"CAST\", \"CHECK\", \"COLLATE\", \"COLLATION\", \"CONCURRENTLY\", \"CONSTRAINT\", \"CREATE\", \"CROSS\", \"CURRENT_CATALOG\", \"CURRENT_DATE\", \"CURRENT_ROLE\", \"CURRENT_SCHEMA\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\", \"CURRENT_USER\", \"DEFAULT\", \"DEFERRABLE\", \"DESC\", \"DISTINCT\", \"DO\", \"ELSE\", \"END\", \"EXCEPT\", \"FALSE\", \"FETCH\", \"FOR\", \"FOREIGN\", \"FREEZE\", \"FROM\", \"FULL\", \"GRANT\", \"GROUP\", \"HAVING\", \"ILIKE\", \"IN\", \"INITIALLY\", \"INNER\", \"INTERSECT\", \"INTO\", \"IS\", \"ISNULL\", \"JOIN\", \"LATERAL\", \"LEADING\", \"LEFT\", \"LIKE\", \"LIMIT\", \"LOCALTIME\", \"LOCALTIMESTAMP\", \"NATURAL\", \"NOT\", \"NOTNULL\", \"NULL\", \"OFFSET\", \"ON\", \"ONLY\", \"OR\", \"ORDER\", \"OUTER\", \"OVERLAPS\", \"PLACING\", \"PRIMARY\", \"REFERENCES\", \"RETURNING\", \"RIGHT\", \"SELECT\", \"SESSION_USER\", \"SIMILAR\", \"SOME\", \"SYMMETRIC\", \"TABLE\", \"TABLESAMPLE\", \"THEN\", \"TO\", \"TRAILING\", \"TRUE\", \"UNION\", \"UNIQUE\", \"USER\", \"USING\", \"VARIADIC\", \"VERBOSE\", \"WHEN\", \"WHERE\", \"WINDOW\", \"WITH\"\n    // added manually\n    ,\n    \"PRECISION\"\n];\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.intervalToString = exports.normalizeInterval = exports.buildInterval = void 0;\nconst types = [\n    ['years', 12],\n    ['months', 30],\n    ['days', 24],\n    ['hours', 60],\n    ['minutes', 60],\n    ['seconds', 1000],\n    ['milliseconds', 0],\n];\nfunction* unwrap(k) {\n    if (typeof k[1] === 'number') {\n        yield k;\n    }\n    else {\n        for (const v of k) {\n            yield* unwrap(v);\n        }\n    }\n}\nfunction buildInterval(orig, vals) {\n    var _a;\n    const ret = {};\n    if (vals === 'invalid') {\n        throw new Error(`invalid input syntax for type interval: \"${orig}\"`);\n    }\n    for (const [k, v] of unwrap(vals)) {\n        ret[k] = ((_a = ret[k]) !== null && _a !== void 0 ? _a : 0) + v;\n    }\n    return ret;\n}\nexports.buildInterval = buildInterval;\n/** Returns a normalized copy of the given interval */\nfunction normalizeInterval(value) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n    const ret = { ...value };\n    // trim non-integers\n    for (let i = 0; i < types.length; i++) {\n        const [k, mul] = types[i];\n        const v = (_a = ret[k]) !== null && _a !== void 0 ? _a : 0;\n        const int = v >= 0\n            ? Math.floor(v)\n            : Math.ceil(v);\n        if (!v || int === v) {\n            continue;\n        }\n        const nk = (_b = types[i + 1]) === null || _b === void 0 ? void 0 : _b[0];\n        if (nk) {\n            ret[nk] = ((_c = ret[nk]) !== null && _c !== void 0 ? _c : 0) + mul * (v - int);\n        }\n        ret[k] = int;\n    }\n    if (ret.months || ret.years) {\n        const m = ((_d = ret.months) !== null && _d !== void 0 ? _d : 0) + ((_e = ret.years) !== null && _e !== void 0 ? _e : 0) * 12;\n        ret.months = m % 12;\n        ret.years = (m - ret.months) / 12;\n    }\n    // normalize time\n    let t = ((_f = ret.hours) !== null && _f !== void 0 ? _f : 0) * 3600\n        + ((_g = ret.minutes) !== null && _g !== void 0 ? _g : 0) * 60\n        + ((_h = ret.seconds) !== null && _h !== void 0 ? _h : 0)\n        + ((_j = ret.milliseconds) !== null && _j !== void 0 ? _j : 0) / 1000;\n    let sign = 1;\n    if (t < 0) {\n        sign = -1;\n        t = -t;\n    }\n    if (t >= 3600) {\n        ret.hours = sign * Math.floor(t / 3600);\n        t -= sign * ret.hours * 3600;\n    }\n    else {\n        delete ret.hours;\n    }\n    if (t >= 60) {\n        ret.minutes = sign * Math.floor(t / 60);\n        t -= sign * ret.minutes * 60;\n    }\n    else {\n        delete ret.minutes;\n    }\n    if (t > 0) {\n        ret.seconds = sign * Math.floor(t);\n        t -= sign * ret.seconds;\n    }\n    else {\n        delete ret.seconds;\n    }\n    if (t > 0) {\n        ret.milliseconds = sign * Math.round(t * 1000);\n    }\n    else {\n        delete ret.milliseconds;\n    }\n    // trim zeros.\n    for (const [k] of types) {\n        if (!ret[k]) {\n            delete ret[k];\n        }\n    }\n    return ret;\n}\nexports.normalizeInterval = normalizeInterval;\n/** Interval value to postgres string representation  */\nfunction intervalToString(value) {\n    var _a, _b, _c;\n    value = normalizeInterval(value);\n    const ret = [];\n    if (value.years) {\n        ret.push(value.years === 1 ? '1 year' : value.years + ' years');\n    }\n    if (value.months) {\n        ret.push(value.months === 1 ? '1 month' : value.months + ' months');\n    }\n    if (value.days) {\n        ret.push(value.days === 1 ? '1 day' : value.days + ' days');\n    }\n    if (value.hours || value.minutes || value.seconds || value.milliseconds) {\n        let time = `${num((_a = value.hours) !== null && _a !== void 0 ? _a : 0)}:${num((_b = value.minutes) !== null && _b !== void 0 ? _b : 0)}:${num((_c = value.seconds) !== null && _c !== void 0 ? _c : 0)}`;\n        if (value.milliseconds) {\n            time = time + (value.milliseconds / 1000).toString().substr(1);\n        }\n        if (neg(value.hours) || neg(value.minutes) || neg(value.seconds) || neg(value.milliseconds)) {\n            time = '-' + time;\n        }\n        ret.push(time);\n    }\n    return ret.join(' ');\n}\nexports.intervalToString = intervalToString;\nfunction num(v) {\n    v = Math.abs(v);\n    return v < 10 ? '0' + v : v.toString();\n}\nfunction neg(v) {\n    return v && v < 0;\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_51063__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.astVisitor = void 0;\nconst ast_mapper_1 = __nested_webpack_require_51063__(2);\nclass Visitor {\n    super() {\n        return new SkipVisitor(this);\n    }\n}\n// =============== auto implement the mapper\nconst mapperProto = ast_mapper_1.AstDefaultMapper.prototype;\nfor (const k of Object.getOwnPropertyNames(mapperProto)) {\n    const orig = mapperProto[k];\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(Visitor.prototype, k, {\n        configurable: false,\n        get() {\n            return function (...args) {\n                const impl = this.visitor[k];\n                if (!impl) {\n                    // just ignore & forward call to mapper\n                    return orig.apply(this, args);\n                }\n                // return first argument\n                // ...which means \"I dont wana change anything\"\n                //    in the ast-modifier language.\n                impl.apply(this.visitor, args);\n                return args[0];\n            };\n        }\n    });\n}\n// ====== auto implement the skip mechanism\nclass SkipVisitor {\n    constructor(parent) {\n        this.parent = parent;\n    }\n}\nfor (const k of Object.getOwnPropertyNames(mapperProto)) {\n    const orig = mapperProto[k];\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    Object.defineProperty(SkipVisitor.prototype, k, {\n        configurable: false,\n        get() {\n            return function (...args) {\n                return orig.apply(this.parent, args);\n            };\n        }\n    });\n}\n/**\n * Builds an AST visitor based on the default implementation, merged with the one you provide.\n *\n * Example of visitor which counts references to a column 'foo':\n *\n * ```ts\n * let cnt = 0;\n * const visitor = astVisitor(v => ({\n *      ref: r => {\n *          if (r.name === 'foo') {\n *              cnt++;\n *          }\n *          v.super().ref(r);\n *      }\n *  }));\n *\n * visitor.statement(myStatementToCount);\n * console.log(`${cnt} references to foo !`);\n * ```\n */\nfunction astVisitor(visitorBuilder) {\n    return (0, ast_mapper_1.astMapper)(m => {\n        const ret = new Visitor();\n        ret.mapper = m;\n        ret.visitor = visitorBuilder(ret);\n        return ret;\n    });\n}\nexports.astVisitor = astVisitor;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trimNullish = exports.NotSupported = void 0;\nclass NotSupported extends Error {\n    constructor(what) {\n        super('Not supported' + (what ? ': ' + what : ''));\n    }\n    static never(value, msg) {\n        return new NotSupported(`${msg !== null && msg !== void 0 ? msg : ''} ${JSON.stringify(value)}`);\n    }\n}\nexports.NotSupported = NotSupported;\nfunction trimNullish(value, depth = 5) {\n    if (depth < 0)\n        return value;\n    if (value instanceof Array) {\n        value.forEach(x => trimNullish(x, depth - 1));\n    }\n    if (typeof value !== 'object' || value instanceof Date)\n        return value;\n    if (!value) {\n        return value;\n    }\n    for (const k of Object.keys(value)) {\n        const val = value[k];\n        if (val === undefined || val === null)\n            delete value[k];\n        else\n            trimNullish(val, depth - 1);\n    }\n    return value;\n}\nexports.trimNullish = trimNullish;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __nested_webpack_require_54638__) {\n\n\"use strict\";\n\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeInterval = exports.intervalToString = exports.toSql = exports.astMapper = exports.assignChanged = exports.arrayNilMap = exports.astVisitor = exports.parseWithComments = exports.parseIntervalLiteral = exports.parseGeometricLiteral = exports.parseArrayLiteral = exports.parseFirst = exports.parse = void 0;\nvar parser_1 = __nested_webpack_require_54638__(8);\nObject.defineProperty(exports, \"parse\", { enumerable: true, get: function () { return parser_1.parse; } });\nObject.defineProperty(exports, \"parseFirst\", { enumerable: true, get: function () { return parser_1.parseFirst; } });\nObject.defineProperty(exports, \"parseArrayLiteral\", { enumerable: true, get: function () { return parser_1.parseArrayLiteral; } });\nObject.defineProperty(exports, \"parseGeometricLiteral\", { enumerable: true, get: function () { return parser_1.parseGeometricLiteral; } });\nObject.defineProperty(exports, \"parseIntervalLiteral\", { enumerable: true, get: function () { return parser_1.parseIntervalLiteral; } });\nObject.defineProperty(exports, \"parseWithComments\", { enumerable: true, get: function () { return parser_1.parseWithComments; } });\nvar ast_visitor_1 = __nested_webpack_require_54638__(5);\nObject.defineProperty(exports, \"astVisitor\", { enumerable: true, get: function () { return ast_visitor_1.astVisitor; } });\nvar ast_mapper_1 = __nested_webpack_require_54638__(2);\nObject.defineProperty(exports, \"arrayNilMap\", { enumerable: true, get: function () { return ast_mapper_1.arrayNilMap; } });\nObject.defineProperty(exports, \"assignChanged\", { enumerable: true, get: function () { return ast_mapper_1.assignChanged; } });\nObject.defineProperty(exports, \"astMapper\", { enumerable: true, get: function () { return ast_mapper_1.astMapper; } });\nvar to_sql_1 = __nested_webpack_require_54638__(19);\nObject.defineProperty(exports, \"toSql\", { enumerable: true, get: function () { return to_sql_1.toSql; } });\n__exportStar(__nested_webpack_require_54638__(21), exports);\nvar interval_builder_1 = __nested_webpack_require_54638__(4);\nObject.defineProperty(exports, \"intervalToString\", { enumerable: true, get: function () { return interval_builder_1.intervalToString; } });\nObject.defineProperty(exports, \"normalizeInterval\", { enumerable: true, get: function () { return interval_builder_1.normalizeInterval; } });\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __nested_webpack_require_57711__) {\n\n\"use strict\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseGeometricLiteral = exports.parseIntervalLiteral = exports.parseArrayLiteral = exports.parse = exports.parseWithComments = exports.parseFirst = void 0;\nconst nearley_1 = __nested_webpack_require_57711__(9);\nconst main_ne_1 = __importDefault(__nested_webpack_require_57711__(10));\nconst array_ne_1 = __importDefault(__nested_webpack_require_57711__(11));\nconst geometric_ne_1 = __importDefault(__nested_webpack_require_57711__(13));\nconst interval_ne_1 = __importDefault(__nested_webpack_require_57711__(15));\nconst interval_iso_ne_1 = __importDefault(__nested_webpack_require_57711__(17));\nconst interval_builder_1 = __nested_webpack_require_57711__(4);\nconst lexer_1 = __nested_webpack_require_57711__(1);\nlet sqlCompiled;\nlet arrayCompiled;\nlet geometricCompiled;\nlet intervalTextCompiled;\nlet intervalIsoCompiled;\n/** Parse the first SQL statement in the given text (discards the rest), and return its AST */\nfunction parseFirst(sql) {\n    const first = parse(sql);\n    return first[0];\n}\nexports.parseFirst = parseFirst;\n/** Parse an AST from SQL, and get the comments */\nfunction parseWithComments(sql, options) {\n    return (0, lexer_1.trackingComments)(() => parse(sql, options));\n}\nexports.parseWithComments = parseWithComments;\nfunction parse(sql, optEntry) {\n    if (!sqlCompiled) {\n        sqlCompiled = nearley_1.Grammar.fromCompiled(main_ne_1.default);\n    }\n    const entry = typeof optEntry === 'string'\n        ? optEntry\n        : optEntry === null || optEntry === void 0 ? void 0 : optEntry.entry;\n    const opts = typeof optEntry === 'string' ? null : optEntry;\n    // parse sql\n    const doParse = () => _parse(sql, sqlCompiled, entry);\n    let parsed = (opts === null || opts === void 0 ? void 0 : opts.locationTracking)\n        ? (0, lexer_1.tracking)(doParse)\n        : doParse();\n    // always return an array of statements.\n    if (typeof optEntry !== 'string' && !Array.isArray(parsed)) {\n        parsed = [parsed];\n    }\n    return parsed;\n}\nexports.parse = parse;\nfunction parseArrayLiteral(sql) {\n    if (!arrayCompiled) {\n        arrayCompiled = nearley_1.Grammar.fromCompiled(array_ne_1.default);\n    }\n    return _parse(sql, arrayCompiled);\n}\nexports.parseArrayLiteral = parseArrayLiteral;\nfunction parseIntervalLiteral(literal) {\n    if (literal.startsWith('P')) {\n        if (!intervalIsoCompiled) {\n            intervalIsoCompiled = nearley_1.Grammar.fromCompiled(interval_iso_ne_1.default);\n        }\n        return (0, interval_builder_1.buildInterval)(literal, _parse(literal, intervalIsoCompiled));\n    }\n    else {\n        if (!intervalTextCompiled) {\n            intervalTextCompiled = nearley_1.Grammar.fromCompiled(interval_ne_1.default);\n        }\n        const low = literal.toLowerCase(); // full text syntax is case insensitive\n        return (0, interval_builder_1.buildInterval)(literal, _parse(low, intervalTextCompiled));\n    }\n}\nexports.parseIntervalLiteral = parseIntervalLiteral;\nfunction parseGeometricLiteral(sql, type) {\n    if (!geometricCompiled) {\n        geometricCompiled = nearley_1.Grammar.fromCompiled(geometric_ne_1.default);\n    }\n    return _parse(sql, geometricCompiled, type);\n}\nexports.parseGeometricLiteral = parseGeometricLiteral;\nfunction _parse(sql, grammar, entry) {\n    try {\n        grammar.start = entry !== null && entry !== void 0 ? entry : 'main';\n        const parser = new nearley_1.Parser(grammar);\n        parser.feed(sql);\n        const asts = parser.finish();\n        if (!asts.length) {\n            throw new Error('Unexpected end of input');\n        }\n        else if (asts.length !== 1) {\n            throw new Error(`💀 Ambiguous SQL syntax: Please file an issue stating the request that has failed at https://github.com/oguimbal/pgsql-ast-parser:\n\n        ${sql}\n\n        `);\n        }\n        return asts[0];\n    }\n    catch (e) {\n        if (typeof (e === null || e === void 0 ? void 0 : e.message) !== 'string') {\n            throw e;\n        }\n        let msg = e.message;\n        // remove all the stack crap of nearley parser\n        let begin = null;\n        const parts = [];\n        const reg = /A (.+) token based on:/g;\n        let m;\n        while (m = reg.exec(msg)) {\n            begin = begin !== null && begin !== void 0 ? begin : msg.substr(0, m.index);\n            parts.push(`    - A \"${m[1]}\" token`);\n        }\n        if (begin) {\n            msg = begin + parts.join('\\n') + '\\n\\n';\n        }\n        e.message = msg;\n        throw e;\n    }\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! nearley */ \"../node_modules/nearley/lib/nearley.js\");\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __nested_webpack_require_62465__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst lexer_1 = __nested_webpack_require_62465__(1);\nconst lexer_2 = __nested_webpack_require_62465__(1);\n// usage ex:  replace track(whatever) with debug(track)(whatever)\nfunction debug(fn) {\n    fn = fn || ((x) => x);\n    return ((x, ...args) => {\n        debugger;\n        return fn(x, ...args);\n    });\n}\nfunction asName(val) {\n    return asNameWithColumns(val, undefined);\n}\nfunction asNameWithColumns(val, columns) {\n    const name = toStr(val);\n    if (!columns || columns.length === 0) {\n        return (0, lexer_2.track)(val, { name });\n    }\n    return (0, lexer_2.track)(val, {\n        name,\n        columns: columns.map(c => ({ name: toStr(c) })),\n    });\n}\nfunction asLit(val) {\n    const value = toStr(val);\n    return (0, lexer_2.track)(val, { value });\n}\nfunction unwrap(e) {\n    if (Array.isArray(e) && e.length === 1) {\n        e = unwrap(e[0]);\n    }\n    if (Array.isArray(e) && !e.length) {\n        return null;\n    }\n    return (0, lexer_2.unbox)(e);\n}\nconst get = (i) => (x) => (0, lexer_2.track)(x, x[i]);\nconst last = (x) => Array.isArray(x) ? (0, lexer_2.track)(x[x.length - 1], x[x.length - 1]) : x;\nconst trim = (x) => x && x.trim();\nconst value = (x) => x && x.value;\nfunction flatten(e) {\n    if (Array.isArray(e)) {\n        const ret = [];\n        for (const i of e) {\n            ret.push(...flatten(i));\n        }\n        return ret;\n    }\n    if (!e) {\n        return [];\n    }\n    return [e];\n}\nfunction asStr(value) {\n    var _a;\n    value = (0, lexer_2.unbox)(value);\n    return (_a = value === null || value === void 0 ? void 0 : value.value) !== null && _a !== void 0 ? _a : value;\n}\nfunction flattenStr(e) {\n    const fl = flatten((0, lexer_2.unbox)(e));\n    return fl.filter(x => !!x)\n        .map(x => asStr(x))\n        .filter(x => typeof x === 'string')\n        .map(x => x.trim())\n        .filter(x => !!x);\n}\nfunction toStr(e, join) {\n    return flattenStr(e).join(join || '');\n}\nfunction fromEntries(vals) {\n    const ret = {};\n    for (const [k, v] of vals) {\n        ret[k] = v;\n    }\n    return ret;\n}\nconst kwSensitivity = { sensitivity: 'accent' };\nconst eqInsensitive = (a, b) => a.localeCompare(b, undefined, kwSensitivity) === 0;\nconst notReservedKw = (kw) => (x, _, rej) => {\n    const val = asStr(x[0]);\n    if (eqInsensitive(val, kw)) {\n        return (0, lexer_2.box)(x, kw);\n    }\n    return rej;\n};\nconst kw = notReservedKw;\nconst anyKw = (...kw) => {\n    const kwSet = new Set(kw);\n    return (x, _, rej) => {\n        const val = typeof x[0] === 'string' ? x[0] : x[0].value;\n        return kwSet.has(val) ? val : rej;\n    };\n};\nfunction setSeqOpts(ret, opts) {\n    const defs = new Set();\n    const unboxed = opts.map(lexer_2.unbox);\n    for (const [k, v] of unboxed) {\n        if (defs.has(k)) {\n            throw new Error('conflicting or redundant options');\n        }\n        defs.add(k);\n        ret[k] = (0, lexer_2.unbox)(v);\n    }\n}\n;\n;\n;\n;\nconst grammar = {\n    Lexer: lexer_1.lexerAny,\n    ParserRules: [\n        { \"name\": \"lparen\", \"symbols\": [(lexer_1.lexerAny.has(\"lparen\") ? { type: \"lparen\" } : lparen)] },\n        { \"name\": \"rparen\", \"symbols\": [(lexer_1.lexerAny.has(\"rparen\") ? { type: \"rparen\" } : rparen)] },\n        { \"name\": \"number$subexpression$1\", \"symbols\": [\"float\"] },\n        { \"name\": \"number$subexpression$1\", \"symbols\": [\"int\"] },\n        { \"name\": \"number\", \"symbols\": [\"number$subexpression$1\"], \"postprocess\": unwrap },\n        { \"name\": \"dot\", \"symbols\": [(lexer_1.lexerAny.has(\"dot\") ? { type: \"dot\" } : dot)], \"postprocess\": id },\n        { \"name\": \"float\", \"symbols\": [(lexer_1.lexerAny.has(\"float\") ? { type: \"float\" } : float)], \"postprocess\": x => (0, lexer_2.box)(x, parseFloat(unwrap(x))) },\n        { \"name\": \"int\", \"symbols\": [(lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)], \"postprocess\": x => (0, lexer_2.box)(x, parseInt(unwrap(x), 10)) },\n        { \"name\": \"comma\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"star\", \"symbols\": [(lexer_1.lexerAny.has(\"star\") ? { type: \"star\" } : star)], \"postprocess\": x => (0, lexer_2.box)(x, x[0].value) },\n        { \"name\": \"string$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"string\") ? { type: \"string\" } : string)] },\n        { \"name\": \"string$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"eString\") ? { type: \"eString\" } : eString)] },\n        { \"name\": \"string\", \"symbols\": [\"string$subexpression$1\"], \"postprocess\": x => (0, lexer_2.box)(x, unwrap(x[0]).value) },\n        { \"name\": \"ident\", \"symbols\": [\"word\"], \"postprocess\": get(0) },\n        { \"name\": \"word\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_primary\") ? { type: \"kw_primary\" } : kw_primary)], \"postprocess\": x => (0, lexer_2.box)(x, 'primary') },\n        { \"name\": \"word\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_unique\") ? { type: \"kw_unique\" } : kw_unique)], \"postprocess\": x => (0, lexer_2.box)(x, 'unique') },\n        { \"name\": \"word\", \"symbols\": [(lexer_1.lexerAny.has(\"quoted_word\") ? { type: \"quoted_word\" } : quoted_word)], \"postprocess\": x => (0, lexer_2.box)(x, x[0].value, true) },\n        { \"name\": \"word\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": x => (0, lexer_2.box)(x, x[0].value) },\n        { \"name\": \"collist_paren\", \"symbols\": [\"lparen\", \"collist\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"collist$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"collist$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"collist$ebnf$1\", \"symbols\": [\"collist$ebnf$1\", \"collist$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"collist\", \"symbols\": [\"ident\", \"collist$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"kw_between\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('between') },\n        { \"name\": \"kw_conflict\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('conflict') },\n        { \"name\": \"kw_nothing\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('nothing') },\n        { \"name\": \"kw_begin\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('begin') },\n        { \"name\": \"kw_if\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('if') },\n        { \"name\": \"kw_exists\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('exists') },\n        { \"name\": \"kw_key\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('key') },\n        { \"name\": \"kw_index\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('index') },\n        { \"name\": \"kw_extension\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('extension') },\n        { \"name\": \"kw_schema\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('schema') },\n        { \"name\": \"kw_nulls\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('nulls') },\n        { \"name\": \"kw_first\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('first') },\n        { \"name\": \"kw_last\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('last') },\n        { \"name\": \"kw_start\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('start') },\n        { \"name\": \"kw_restart\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('restart') },\n        { \"name\": \"kw_filter\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('filter') },\n        { \"name\": \"kw_commit\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('commit') },\n        { \"name\": \"kw_tablespace\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('tablespace') },\n        { \"name\": \"kw_transaction\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('transaction') },\n        { \"name\": \"kw_work\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('work') },\n        { \"name\": \"kw_read\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('read') },\n        { \"name\": \"kw_write\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('write') },\n        { \"name\": \"kw_isolation\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('isolation') },\n        { \"name\": \"kw_level\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('level') },\n        { \"name\": \"kw_serializable\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('serializable') },\n        { \"name\": \"kw_rollback\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('rollback') },\n        { \"name\": \"kw_insert\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('insert') },\n        { \"name\": \"kw_value\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('value') },\n        { \"name\": \"kw_values\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('values') },\n        { \"name\": \"kw_update\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('update') },\n        { \"name\": \"kw_column\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('column') },\n        { \"name\": \"kw_set\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('set') },\n        { \"name\": \"kw_version\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('version') },\n        { \"name\": \"kw_alter\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('alter') },\n        { \"name\": \"kw_rename\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('rename') },\n        { \"name\": \"kw_sequence\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('sequence') },\n        { \"name\": \"kw_temp\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('temp') },\n        { \"name\": \"kw_temporary\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('temporary') },\n        { \"name\": \"kw_add\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('add') },\n        { \"name\": \"kw_owner\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('owner') },\n        { \"name\": \"kw_owned\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('owned') },\n        { \"name\": \"kw_including\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('including') },\n        { \"name\": \"kw_excluding\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('excluding') },\n        { \"name\": \"kw_none\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('none') },\n        { \"name\": \"kw_drop\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('drop') },\n        { \"name\": \"kw_operator\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('operator') },\n        { \"name\": \"kw_minvalue\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('minvalue') },\n        { \"name\": \"kw_maxvalue\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('maxvalue') },\n        { \"name\": \"kw_data\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('data') },\n        { \"name\": \"kw_type\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('type') },\n        { \"name\": \"kw_trigger\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('trigger') },\n        { \"name\": \"kw_delete\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('delete') },\n        { \"name\": \"kw_cache\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('cache') },\n        { \"name\": \"kw_cascade\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('cascade') },\n        { \"name\": \"kw_no\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('no') },\n        { \"name\": \"kw_timestamp\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('timestamp') },\n        { \"name\": \"kw_cycle\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('cycle') },\n        { \"name\": \"kw_function\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('function') },\n        { \"name\": \"kw_returns\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('returns') },\n        { \"name\": \"kw_language\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('language') },\n        { \"name\": \"kw_out\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('out') },\n        { \"name\": \"kw_inout\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('inout') },\n        { \"name\": \"kw_variadic\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('variadic') },\n        { \"name\": \"kw_action\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('action') },\n        { \"name\": \"kw_restrict\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('restrict') },\n        { \"name\": \"kw_truncate\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('truncate') },\n        { \"name\": \"kw_increment\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('increment') },\n        { \"name\": \"kw_by\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('by') },\n        { \"name\": \"kw_row\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('row') },\n        { \"name\": \"kw_rows\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('rows') },\n        { \"name\": \"kw_next\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('next') },\n        { \"name\": \"kw_match\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('match') },\n        { \"name\": \"kw_replace\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('replace') },\n        { \"name\": \"kw_recursive\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('recursive') },\n        { \"name\": \"kw_view\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('view') },\n        { \"name\": \"kw_cascaded\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('cascaded') },\n        { \"name\": \"kw_unlogged\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('unlogged') },\n        { \"name\": \"kw_global\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('global') },\n        { \"name\": \"kw_option\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('option') },\n        { \"name\": \"kw_materialized\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('materialized') },\n        { \"name\": \"kw_partial\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('partial') },\n        { \"name\": \"kw_partition\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('partition') },\n        { \"name\": \"kw_simple\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('simple') },\n        { \"name\": \"kw_generated\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('generated') },\n        { \"name\": \"kw_always\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('always') },\n        { \"name\": \"kw_identity\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('identity') },\n        { \"name\": \"kw_name\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('name') },\n        { \"name\": \"kw_enum\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('enum') },\n        { \"name\": \"kw_show\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('show') },\n        { \"name\": \"kw_ordinality\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('ordinality') },\n        { \"name\": \"kw_overriding\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('overriding') },\n        { \"name\": \"kw_over\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('over') },\n        { \"name\": \"kw_system\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('system') },\n        { \"name\": \"kw_comment\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('comment') },\n        { \"name\": \"kw_time\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('time') },\n        { \"name\": \"kw_names\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('names') },\n        { \"name\": \"kw_at\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('at') },\n        { \"name\": \"kw_zone\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('zone') },\n        { \"name\": \"kw_interval\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('interval') },\n        { \"name\": \"kw_hour\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('hour') },\n        { \"name\": \"kw_minute\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('minute') },\n        { \"name\": \"kw_local\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('local') },\n        { \"name\": \"kw_session\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('session') },\n        { \"name\": \"kw_prepare\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('prepare') },\n        { \"name\": \"kw_deallocate\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('deallocate') },\n        { \"name\": \"kw_raise\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('raise') },\n        { \"name\": \"kw_continue\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('continue') },\n        { \"name\": \"kw_share\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('share') },\n        { \"name\": \"kw_refresh\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('refresh') },\n        { \"name\": \"kw_nowait\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('nowait') },\n        { \"name\": \"kw_skip\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('skip') },\n        { \"name\": \"kw_locked\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('locked') },\n        { \"name\": \"kw_within\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": notReservedKw('within') },\n        { \"name\": \"kw_ifnotexists\", \"symbols\": [\"kw_if\", (lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not), \"kw_exists\"] },\n        { \"name\": \"kw_ifexists\", \"symbols\": [\"kw_if\", \"kw_exists\"] },\n        { \"name\": \"kw_withordinality\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"kw_ordinality\"] },\n        { \"name\": \"kw_not_null\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not), (lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null)] },\n        { \"name\": \"kw_primary_key\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_primary\") ? { type: \"kw_primary\" } : kw_primary), \"kw_key\"] },\n        { \"name\": \"data_type$ebnf$1$subexpression$1$macrocall$2\", \"symbols\": [\"int\"] },\n        { \"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"data_type$ebnf$1$subexpression$1$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [\"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\", \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"data_type$ebnf$1$subexpression$1$macrocall$1\", \"symbols\": [\"data_type$ebnf$1$subexpression$1$macrocall$2\", \"data_type$ebnf$1$subexpression$1$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"data_type$ebnf$1$subexpression$1\", \"symbols\": [\"lparen\", \"data_type$ebnf$1$subexpression$1$macrocall$1\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"data_type$ebnf$1\", \"symbols\": [\"data_type$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"data_type$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"data_type$ebnf$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_array\") ? { type: \"kw_array\" } : kw_array)] },\n        { \"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer_1.lexerAny.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)] },\n        { \"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$1\"] },\n        { \"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), (lexer_1.lexerAny.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)] },\n        { \"name\": \"data_type$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"data_type$ebnf$2$subexpression$1$ebnf$1\", \"data_type$ebnf$2$subexpression$1$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"data_type$ebnf$2$subexpression$1\", \"symbols\": [\"data_type$ebnf$2$subexpression$1$ebnf$1\"] },\n        { \"name\": \"data_type$ebnf$2\", \"symbols\": [\"data_type$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"data_type$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"data_type\", \"symbols\": [\"data_type_simple\", \"data_type$ebnf$1\", \"data_type$ebnf$2\"], \"postprocess\": x => {\n                let asArray = x[2];\n                const name = unwrap(x[0]);\n                let ret;\n                ret = {\n                    ...name,\n                    ...Array.isArray(x[1]) && x[1].length ? { config: x[1].map(unwrap) } : {},\n                };\n                if (asArray) {\n                    if (asArray[0].type === 'kw_array') {\n                        asArray = [['array']];\n                    }\n                    for (const _ of asArray[0]) {\n                        ret = {\n                            kind: 'array',\n                            arrayOf: ret,\n                        };\n                    }\n                }\n                return (0, lexer_2.track)(x, ret);\n            } },\n        { \"name\": \"data_type_list$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"data_type_list$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"data_type\"], \"postprocess\": last },\n        { \"name\": \"data_type_list$ebnf$1\", \"symbols\": [\"data_type_list$ebnf$1\", \"data_type_list$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"data_type_list\", \"symbols\": [\"data_type\", \"data_type_list$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"data_type_simple\", \"symbols\": [\"data_type_text\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: toStr(x, ' ') }) },\n        { \"name\": \"data_type_simple\", \"symbols\": [\"data_type_numeric\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: toStr(x, ' ') }) },\n        { \"name\": \"data_type_simple\", \"symbols\": [\"data_type_date\"] },\n        { \"name\": \"data_type_simple\", \"symbols\": [\"qualified_name_mark_quotes\"] },\n        { \"name\": \"data_type_numeric$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('double') },\n        { \"name\": \"data_type_numeric\", \"symbols\": [\"data_type_numeric$subexpression$1\", (lexer_1.lexerAny.has(\"kw_precision\") ? { type: \"kw_precision\" } : kw_precision)] },\n        { \"name\": \"data_type_text$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": anyKw('character', 'bit') },\n        { \"name\": \"data_type_text$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('varying') },\n        { \"name\": \"data_type_text\", \"symbols\": [\"data_type_text$subexpression$1\", \"data_type_text$subexpression$2\"] },\n        { \"name\": \"data_type_date$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": anyKw('timestamp', 'time') },\n        { \"name\": \"data_type_date$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with)] },\n        { \"name\": \"data_type_date$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('without') },\n        { \"name\": \"data_type_date$subexpression$3\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('time') },\n        { \"name\": \"data_type_date$subexpression$4\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('zone') },\n        { \"name\": \"data_type_date\", \"symbols\": [\"data_type_date$subexpression$1\", \"data_type_date$subexpression$2\", \"data_type_date$subexpression$3\", \"data_type_date$subexpression$4\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: toStr(x, ' ') }) },\n        { \"name\": \"data_type_date$subexpression$5\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": anyKw('timestamp', 'time') },\n        { \"name\": \"data_type_date$subexpression$6\", \"symbols\": [\"lparen\", \"int\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"data_type_date$subexpression$7\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with)] },\n        { \"name\": \"data_type_date$subexpression$7\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('without') },\n        { \"name\": \"data_type_date$subexpression$8\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('time') },\n        { \"name\": \"data_type_date$subexpression$9\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": kw('zone') },\n        { \"name\": \"data_type_date\", \"symbols\": [\"data_type_date$subexpression$5\", \"data_type_date$subexpression$6\", \"data_type_date$subexpression$7\", \"data_type_date$subexpression$8\", \"data_type_date$subexpression$9\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: `timestamp ${toStr(x[2])} time zone`, config: [(0, lexer_2.unbox)(x[1])] }) },\n        { \"name\": \"ident_aliased$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"ident\"], \"postprocess\": last },\n        { \"name\": \"ident_aliased\", \"symbols\": [\"ident_aliased$subexpression$1\"] },\n        { \"name\": \"ident_aliased\", \"symbols\": [\"ident\"], \"postprocess\": unwrap },\n        { \"name\": \"table_ref\", \"symbols\": [\"qualified_name\"], \"postprocess\": unwrap },\n        { \"name\": \"qcolumn$ebnf$1$subexpression$1\", \"symbols\": [\"dot\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"qcolumn$ebnf$1\", \"symbols\": [\"qcolumn$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"qcolumn$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"qcolumn\", \"symbols\": [\"ident\", \"dot\", \"ident\", \"qcolumn$ebnf$1\"], \"postprocess\": x => {\n                if (!x[3]) {\n                    return (0, lexer_2.track)(x, {\n                        table: (0, lexer_2.unbox)(x[0]),\n                        column: (0, lexer_2.unbox)(x[2]),\n                    });\n                }\n                return (0, lexer_2.track)(x, {\n                    schema: (0, lexer_2.unbox)(x[0]),\n                    table: (0, lexer_2.unbox)(x[2]),\n                    column: (0, lexer_2.unbox)(x[3]),\n                });\n            } },\n        { \"name\": \"table_ref_aliased$ebnf$1\", \"symbols\": [\"ident_aliased\"], \"postprocess\": id },\n        { \"name\": \"table_ref_aliased$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"table_ref_aliased\", \"symbols\": [\"table_ref\", \"table_ref_aliased$ebnf$1\"], \"postprocess\": x => {\n                const alias = unwrap(x[1]);\n                return (0, lexer_2.track)(x, {\n                    ...unwrap(x[0]),\n                    ...alias ? { alias } : {},\n                });\n            } },\n        { \"name\": \"qualified_name\", \"symbols\": [\"qname_ident\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: toStr(x) }) },\n        { \"name\": \"qualified_name\", \"symbols\": [\"ident\", \"dot\", \"ident_extended\"], \"postprocess\": x => {\n                const schema = toStr(x[0]);\n                const name = toStr(x[2]);\n                return (0, lexer_2.track)(x, { schema, name });\n            } },\n        { \"name\": \"qualified_name\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_schema\") ? { type: \"kw_current_schema\" } : kw_current_schema)], \"postprocess\": x => (0, lexer_2.track)(x, { name: 'current_schema' }) },\n        { \"name\": \"qualified_name_mark_quotes\", \"symbols\": [\"qname_ident\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: toStr(x), ...(0, lexer_2.doubleQuoted)(x) }) },\n        { \"name\": \"qualified_name_mark_quotes\", \"symbols\": [\"ident\", \"dot\", \"ident_extended\"], \"postprocess\": x => {\n                const schema = toStr(x[0]);\n                const name = toStr(x[2]);\n                return (0, lexer_2.track)(x, { schema, name, ...(0, lexer_2.doubleQuoted)(x[2]) });\n            } },\n        { \"name\": \"qualified_name_mark_quotes\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_schema\") ? { type: \"kw_current_schema\" } : kw_current_schema)], \"postprocess\": x => (0, lexer_2.track)(x, { name: 'current_schema' }) },\n        { \"name\": \"qname_ident\", \"symbols\": [\"ident\"] },\n        { \"name\": \"qname_ident\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_precision\") ? { type: \"kw_precision\" } : kw_precision)] },\n        { \"name\": \"qname\", \"symbols\": [\"qualified_name\"], \"postprocess\": unwrap },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_analyse\") ? { type: \"kw_analyse\" } : kw_analyse)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_analyze\") ? { type: \"kw_analyze\" } : kw_analyze)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_and\") ? { type: \"kw_and\" } : kw_and)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_any\") ? { type: \"kw_any\" } : kw_any)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_array\") ? { type: \"kw_array\" } : kw_array)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_asc\") ? { type: \"kw_asc\" } : kw_asc)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_asymmetric\") ? { type: \"kw_asymmetric\" } : kw_asymmetric)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_authorization\") ? { type: \"kw_authorization\" } : kw_authorization)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_binary\") ? { type: \"kw_binary\" } : kw_binary)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_both\") ? { type: \"kw_both\" } : kw_both)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_case\") ? { type: \"kw_case\" } : kw_case)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_cast\") ? { type: \"kw_cast\" } : kw_cast)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_check\") ? { type: \"kw_check\" } : kw_check)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_collate\") ? { type: \"kw_collate\" } : kw_collate)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_collation\") ? { type: \"kw_collation\" } : kw_collation)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_concurrently\") ? { type: \"kw_concurrently\" } : kw_concurrently)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_constraint\") ? { type: \"kw_constraint\" } : kw_constraint)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_cross\") ? { type: \"kw_cross\" } : kw_cross)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_catalog\") ? { type: \"kw_current_catalog\" } : kw_current_catalog)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_date\") ? { type: \"kw_current_date\" } : kw_current_date)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_role\") ? { type: \"kw_current_role\" } : kw_current_role)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_schema\") ? { type: \"kw_current_schema\" } : kw_current_schema)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_time\") ? { type: \"kw_current_time\" } : kw_current_time)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_timestamp\") ? { type: \"kw_current_timestamp\" } : kw_current_timestamp)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_user\") ? { type: \"kw_current_user\" } : kw_current_user)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_deferrable\") ? { type: \"kw_deferrable\" } : kw_deferrable)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_desc\") ? { type: \"kw_desc\" } : kw_desc)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_distinct\") ? { type: \"kw_distinct\" } : kw_distinct)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_do\") ? { type: \"kw_do\" } : kw_do)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_else\") ? { type: \"kw_else\" } : kw_else)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_end\") ? { type: \"kw_end\" } : kw_end)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_except\") ? { type: \"kw_except\" } : kw_except)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_false\") ? { type: \"kw_false\" } : kw_false)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_fetch\") ? { type: \"kw_fetch\" } : kw_fetch)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_for\") ? { type: \"kw_for\" } : kw_for)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_foreign\") ? { type: \"kw_foreign\" } : kw_foreign)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_freeze\") ? { type: \"kw_freeze\" } : kw_freeze)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_full\") ? { type: \"kw_full\" } : kw_full)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_grant\") ? { type: \"kw_grant\" } : kw_grant)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_group\") ? { type: \"kw_group\" } : kw_group)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_having\") ? { type: \"kw_having\" } : kw_having)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_ilike\") ? { type: \"kw_ilike\" } : kw_ilike)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_in\") ? { type: \"kw_in\" } : kw_in)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_initially\") ? { type: \"kw_initially\" } : kw_initially)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_inner\") ? { type: \"kw_inner\" } : kw_inner)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_intersect\") ? { type: \"kw_intersect\" } : kw_intersect)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_into\") ? { type: \"kw_into\" } : kw_into)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_is\") ? { type: \"kw_is\" } : kw_is)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_isnull\") ? { type: \"kw_isnull\" } : kw_isnull)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_join\") ? { type: \"kw_join\" } : kw_join)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_lateral\") ? { type: \"kw_lateral\" } : kw_lateral)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_leading\") ? { type: \"kw_leading\" } : kw_leading)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_left\") ? { type: \"kw_left\" } : kw_left)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_like\") ? { type: \"kw_like\" } : kw_like)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_limit\") ? { type: \"kw_limit\" } : kw_limit)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_localtime\") ? { type: \"kw_localtime\" } : kw_localtime)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_localtimestamp\") ? { type: \"kw_localtimestamp\" } : kw_localtimestamp)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_natural\") ? { type: \"kw_natural\" } : kw_natural)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_notnull\") ? { type: \"kw_notnull\" } : kw_notnull)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_offset\") ? { type: \"kw_offset\" } : kw_offset)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_only\") ? { type: \"kw_only\" } : kw_only)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_or\") ? { type: \"kw_or\" } : kw_or)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_order\") ? { type: \"kw_order\" } : kw_order)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_outer\") ? { type: \"kw_outer\" } : kw_outer)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_overlaps\") ? { type: \"kw_overlaps\" } : kw_overlaps)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_placing\") ? { type: \"kw_placing\" } : kw_placing)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_primary\") ? { type: \"kw_primary\" } : kw_primary)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_references\") ? { type: \"kw_references\" } : kw_references)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_returning\") ? { type: \"kw_returning\" } : kw_returning)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_right\") ? { type: \"kw_right\" } : kw_right)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_select\") ? { type: \"kw_select\" } : kw_select)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_session_user\") ? { type: \"kw_session_user\" } : kw_session_user)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_similar\") ? { type: \"kw_similar\" } : kw_similar)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_some\") ? { type: \"kw_some\" } : kw_some)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_symmetric\") ? { type: \"kw_symmetric\" } : kw_symmetric)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_tablesample\") ? { type: \"kw_tablesample\" } : kw_tablesample)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_then\") ? { type: \"kw_then\" } : kw_then)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_trailing\") ? { type: \"kw_trailing\" } : kw_trailing)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_true\") ? { type: \"kw_true\" } : kw_true)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_union\") ? { type: \"kw_union\" } : kw_union)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_unique\") ? { type: \"kw_unique\" } : kw_unique)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_user\") ? { type: \"kw_user\" } : kw_user)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_using\") ? { type: \"kw_using\" } : kw_using)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_variadic\") ? { type: \"kw_variadic\" } : kw_variadic)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_verbose\") ? { type: \"kw_verbose\" } : kw_verbose)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_when\") ? { type: \"kw_when\" } : kw_when)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_where\") ? { type: \"kw_where\" } : kw_where)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_window\") ? { type: \"kw_window\" } : kw_window)] },\n        { \"name\": \"any_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with)] },\n        { \"name\": \"ident_extended\", \"symbols\": [\"ident\"] },\n        { \"name\": \"ident_extended\", \"symbols\": [\"any_keyword\"] },\n        { \"name\": \"select_statement$ebnf$1\", \"symbols\": [\"select_from\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$2\", \"symbols\": [\"select_where\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [\"select_having\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$3$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$3$subexpression$1\", \"symbols\": [\"select_groupby\", \"select_statement$ebnf$3$subexpression$1$ebnf$1\"] },\n        { \"name\": \"select_statement$ebnf$3\", \"symbols\": [\"select_statement$ebnf$3$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$4\", \"symbols\": [\"select_order_by\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$5\", \"symbols\": [\"select_limit_offset\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$6$subexpression$1$ebnf$1\", \"symbols\": [\"select_skip\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$6$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement$ebnf$6$subexpression$1\", \"symbols\": [\"select_for\", \"select_statement$ebnf$6$subexpression$1$ebnf$1\"] },\n        { \"name\": \"select_statement$ebnf$6\", \"symbols\": [\"select_statement$ebnf$6$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_statement$ebnf$6\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_statement\", \"symbols\": [\"select_what\", \"select_statement$ebnf$1\", \"select_statement$ebnf$2\", \"select_statement$ebnf$3\", \"select_statement$ebnf$4\", \"select_statement$ebnf$5\", \"select_statement$ebnf$6\"], \"postprocess\": x => {\n                let [what, from, where, _groupBy, orderBy, limit, _selectFor] = x;\n                from = unwrap(from);\n                let groupBy = _groupBy && _groupBy[0];\n                let having = _groupBy && _groupBy[1];\n                groupBy = groupBy && (groupBy.length === 1 && groupBy[0].type === 'list' ? groupBy[0].expressions : groupBy);\n                having = having && unwrap(having);\n                let selectFor = _selectFor && _selectFor[0];\n                let skip = _selectFor && _selectFor[1];\n                skip = unwrap(skip);\n                return (0, lexer_2.track)(x, {\n                    ...what,\n                    ...from ? { from: Array.isArray(from) ? from : [from] } : {},\n                    ...groupBy ? { groupBy } : {},\n                    ...having ? { having } : {},\n                    ...limit ? { limit: unwrap(limit) } : {},\n                    ...orderBy ? { orderBy } : {},\n                    ...where ? { where } : {},\n                    ...selectFor ? { for: selectFor[1] } : {},\n                    ...skip ? { skip } : {},\n                    type: 'select',\n                });\n            } },\n        { \"name\": \"select_from\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from), \"select_from_items\"], \"postprocess\": last },\n        { \"name\": \"select_from_items$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"select_from_items$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"select_from_item\"], \"postprocess\": last },\n        { \"name\": \"select_from_items$ebnf$1\", \"symbols\": [\"select_from_items$ebnf$1\", \"select_from_items$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"select_from_items\", \"symbols\": [\"select_from_item\", \"select_from_items$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [...head, ...(flatten(tail) || [])];\n            } },\n        { \"name\": \"select_from_item\", \"symbols\": [\"select_from_subject\"] },\n        { \"name\": \"select_from_item\", \"symbols\": [\"select_from_item_joins\"], \"postprocess\": get(0) },\n        { \"name\": \"select_from_item_joins$subexpression$1\", \"symbols\": [\"select_from_item\"], \"postprocess\": get(0) },\n        { \"name\": \"select_from_item_joins\", \"symbols\": [\"select_from_item_joins$subexpression$1\", \"select_table_join\"], \"postprocess\": flatten },\n        { \"name\": \"select_from_item_joins\", \"symbols\": [\"lparen\", \"select_from_item_joins\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"select_from_subject\", \"symbols\": [\"stb_table\"], \"postprocess\": unwrap },\n        { \"name\": \"select_from_subject\", \"symbols\": [\"stb_statement\"], \"postprocess\": unwrap },\n        { \"name\": \"select_from_subject\", \"symbols\": [\"stb_call\"], \"postprocess\": unwrap },\n        { \"name\": \"stb_opts$ebnf$1\", \"symbols\": [\"collist_paren\"], \"postprocess\": id },\n        { \"name\": \"stb_opts$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_opts\", \"symbols\": [\"ident_aliased\", \"stb_opts$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                alias: toStr(x[0]),\n                ...x[1] && { columnNames: (0, lexer_2.unbox)(x[1]).map(asName) },\n            }) },\n        { \"name\": \"stb_table$ebnf$1\", \"symbols\": [\"stb_opts\"], \"postprocess\": id },\n        { \"name\": \"stb_table$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_table\", \"symbols\": [\"table_ref\", \"stb_table$ebnf$1\"], \"postprocess\": x => {\n                return (0, lexer_2.track)(x, {\n                    type: 'table',\n                    name: (0, lexer_2.track)(x, {\n                        ...x[0],\n                        ...x[1],\n                    }),\n                });\n            } },\n        { \"name\": \"stb_statement$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_lateral\") ? { type: \"kw_lateral\" } : kw_lateral)], \"postprocess\": id },\n        { \"name\": \"stb_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_statement\", \"symbols\": [\"stb_statement$ebnf$1\", \"selection_paren\", \"stb_opts\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'statement',\n                statement: unwrap(x[1]),\n                ...x[0] && { lateral: true },\n                ...x[2],\n            }) },\n        { \"name\": \"select_values\", \"symbols\": [\"kw_values\", \"insert_values\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'values',\n                values: x[1],\n            }) },\n        { \"name\": \"stb_call$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_lateral\") ? { type: \"kw_lateral\" } : kw_lateral)], \"postprocess\": id },\n        { \"name\": \"stb_call$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_call$ebnf$2\", \"symbols\": [\"kw_withordinality\"], \"postprocess\": id },\n        { \"name\": \"stb_call$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_call$ebnf$3\", \"symbols\": [\"stb_call_alias\"], \"postprocess\": id },\n        { \"name\": \"stb_call$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_call\", \"symbols\": [\"stb_call$ebnf$1\", \"expr_function_call\", \"stb_call$ebnf$2\", \"stb_call$ebnf$3\"], \"postprocess\": x => {\n                const lateral = x[0];\n                const withOrdinality = x[2];\n                const alias = x[3];\n                if (!withOrdinality && !alias) {\n                    return x[1];\n                }\n                return (0, lexer_2.track)(x, {\n                    ...x[1],\n                    ...lateral && { lateral: true },\n                    ...withOrdinality && { withOrdinality: true },\n                    alias: alias ? asNameWithColumns(alias[0], alias[1]) : undefined,\n                });\n            } },\n        { \"name\": \"stb_call_alias$subexpression$1$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as)], \"postprocess\": id },\n        { \"name\": \"stb_call_alias$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_call_alias$subexpression$1\", \"symbols\": [\"stb_call_alias$subexpression$1$ebnf$1\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"stb_call_alias$ebnf$1\", \"symbols\": [\"stb_call_alias_list\"], \"postprocess\": id },\n        { \"name\": \"stb_call_alias$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"stb_call_alias\", \"symbols\": [\"stb_call_alias$subexpression$1\", \"stb_call_alias$ebnf$1\"] },\n        { \"name\": \"stb_call_alias_list\", \"symbols\": [\"lparen\", \"stb_call_alias_list_raw\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"stb_call_alias_list_raw$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"stb_call_alias_list_raw$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"stb_call_alias_list_raw$ebnf$1\", \"symbols\": [\"stb_call_alias_list_raw$ebnf$1\", \"stb_call_alias_list_raw$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"stb_call_alias_list_raw\", \"symbols\": [\"ident\", \"stb_call_alias_list_raw$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"select_table_join$ebnf$1\", \"symbols\": [\"select_table_join_clause\"], \"postprocess\": id },\n        { \"name\": \"select_table_join$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_table_join\", \"symbols\": [\"select_join_op\", (lexer_1.lexerAny.has(\"kw_join\") ? { type: \"kw_join\" } : kw_join), \"select_from_subject\", \"select_table_join$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                ...unwrap(x[2]),\n                join: {\n                    type: toStr(x[0], ' '),\n                    ...x[3] && unwrap(x[3]),\n                }\n            }) },\n        { \"name\": \"select_table_join_clause\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"expr\"], \"postprocess\": x => (0, lexer_2.track)(x, { on: last(x) }) },\n        { \"name\": \"select_table_join_clause$macrocall$2\", \"symbols\": [\"ident\"] },\n        { \"name\": \"select_table_join_clause$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"select_table_join_clause$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"select_table_join_clause$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"select_table_join_clause$macrocall$1$ebnf$1\", \"symbols\": [\"select_table_join_clause$macrocall$1$ebnf$1\", \"select_table_join_clause$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"select_table_join_clause$macrocall$1\", \"symbols\": [\"select_table_join_clause$macrocall$2\", \"select_table_join_clause$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"select_table_join_clause\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_using\") ? { type: \"kw_using\" } : kw_using), \"lparen\", \"select_table_join_clause$macrocall$1\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, { using: x[2].map(asName) }) },\n        { \"name\": \"select_join_op$subexpression$1$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_inner\") ? { type: \"kw_inner\" } : kw_inner)], \"postprocess\": id },\n        { \"name\": \"select_join_op$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_join_op$subexpression$1\", \"symbols\": [\"select_join_op$subexpression$1$ebnf$1\"], \"postprocess\": x => (0, lexer_2.box)(x, 'INNER JOIN') },\n        { \"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$1\"] },\n        { \"name\": \"select_join_op$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_cross\") ? { type: \"kw_cross\" } : kw_cross)], \"postprocess\": x => (0, lexer_2.box)(x, 'CROSS JOIN') },\n        { \"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$2\"] },\n        { \"name\": \"select_join_op$subexpression$3$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_outer\") ? { type: \"kw_outer\" } : kw_outer)], \"postprocess\": id },\n        { \"name\": \"select_join_op$subexpression$3$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_join_op$subexpression$3\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_left\") ? { type: \"kw_left\" } : kw_left), \"select_join_op$subexpression$3$ebnf$1\"], \"postprocess\": x => (0, lexer_2.box)(x, 'LEFT JOIN') },\n        { \"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$3\"] },\n        { \"name\": \"select_join_op$subexpression$4$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_outer\") ? { type: \"kw_outer\" } : kw_outer)], \"postprocess\": id },\n        { \"name\": \"select_join_op$subexpression$4$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_join_op$subexpression$4\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_right\") ? { type: \"kw_right\" } : kw_right), \"select_join_op$subexpression$4$ebnf$1\"], \"postprocess\": x => (0, lexer_2.box)(x, 'RIGHT JOIN') },\n        { \"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$4\"] },\n        { \"name\": \"select_join_op$subexpression$5$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_outer\") ? { type: \"kw_outer\" } : kw_outer)], \"postprocess\": id },\n        { \"name\": \"select_join_op$subexpression$5$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_join_op$subexpression$5\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_full\") ? { type: \"kw_full\" } : kw_full), \"select_join_op$subexpression$5$ebnf$1\"], \"postprocess\": x => (0, lexer_2.box)(x, 'FULL JOIN') },\n        { \"name\": \"select_join_op\", \"symbols\": [\"select_join_op$subexpression$5\"] },\n        { \"name\": \"select_what$ebnf$1\", \"symbols\": [\"select_distinct\"], \"postprocess\": id },\n        { \"name\": \"select_what$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_what$ebnf$2\", \"symbols\": [\"select_expr_list_aliased\"], \"postprocess\": id },\n        { \"name\": \"select_what$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_what\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_select\") ? { type: \"kw_select\" } : kw_select), \"select_what$ebnf$1\", \"select_what$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                columns: x[2],\n                ...x[1] && { distinct: (0, lexer_2.unbox)(x[1]) },\n            }) },\n        { \"name\": \"select_expr_list_aliased$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"select_expr_list_aliased$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"select_expr_list_item\"], \"postprocess\": last },\n        { \"name\": \"select_expr_list_aliased$ebnf$1\", \"symbols\": [\"select_expr_list_aliased$ebnf$1\", \"select_expr_list_aliased$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"select_expr_list_aliased\", \"symbols\": [\"select_expr_list_item\", \"select_expr_list_aliased$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"select_expr_list_item$ebnf$1\", \"symbols\": [\"ident_aliased\"], \"postprocess\": id },\n        { \"name\": \"select_expr_list_item$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_expr_list_item\", \"symbols\": [\"expr\", \"select_expr_list_item$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                expr: x[0],\n                ...x[1] ? { alias: asName(x[1]) } : {},\n            }) },\n        { \"name\": \"select_distinct\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)], \"postprocess\": x => (0, lexer_2.box)(x, 'all') },\n        { \"name\": \"select_distinct$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"lparen\", \"expr_list_raw\", \"rparen\"], \"postprocess\": get(2) },\n        { \"name\": \"select_distinct$ebnf$1\", \"symbols\": [\"select_distinct$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_distinct$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_distinct\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_distinct\") ? { type: \"kw_distinct\" } : kw_distinct), \"select_distinct$ebnf$1\"], \"postprocess\": x => (0, lexer_2.box)(x, x[1] || 'distinct') },\n        { \"name\": \"select_where\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_where\") ? { type: \"kw_where\" } : kw_where), \"expr\"], \"postprocess\": last },\n        { \"name\": \"select_groupby\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_group\") ? { type: \"kw_group\" } : kw_group), \"kw_by\", \"expr_list_raw\"], \"postprocess\": last },\n        { \"name\": \"select_having\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_having\") ? { type: \"kw_having\" } : kw_having), \"expr\"], \"postprocess\": last },\n        { \"name\": \"select_limit_offset$ebnf$1$subexpression$1\", \"symbols\": [\"select_offset\"] },\n        { \"name\": \"select_limit_offset$ebnf$1$subexpression$1\", \"symbols\": [\"select_limit\"] },\n        { \"name\": \"select_limit_offset$ebnf$1\", \"symbols\": [\"select_limit_offset$ebnf$1$subexpression$1\"] },\n        { \"name\": \"select_limit_offset$ebnf$1$subexpression$2\", \"symbols\": [\"select_offset\"] },\n        { \"name\": \"select_limit_offset$ebnf$1$subexpression$2\", \"symbols\": [\"select_limit\"] },\n        { \"name\": \"select_limit_offset$ebnf$1\", \"symbols\": [\"select_limit_offset$ebnf$1\", \"select_limit_offset$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"select_limit_offset\", \"symbols\": [\"select_limit_offset$ebnf$1\"], \"postprocess\": (x, rej) => {\n                const value = unwrap(x);\n                if (!Array.isArray(value)) {\n                    return (0, lexer_2.track)(x, value);\n                }\n                if (value.length != 2) {\n                    return rej;\n                }\n                const a = unwrap(value[0]);\n                const b = unwrap(value[1]);\n                if (a.offset && b.offset || a.limit && b.limit) {\n                    return rej;\n                }\n                return (0, lexer_2.track)(x, {\n                    ...a,\n                    ...b,\n                });\n            } },\n        { \"name\": \"select_offset$ebnf$1$subexpression$1\", \"symbols\": [\"kw_row\"] },\n        { \"name\": \"select_offset$ebnf$1$subexpression$1\", \"symbols\": [\"kw_rows\"] },\n        { \"name\": \"select_offset$ebnf$1\", \"symbols\": [\"select_offset$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_offset$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_offset\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_offset\") ? { type: \"kw_offset\" } : kw_offset), \"expr_nostar\", \"select_offset$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { offset: unwrap(x[1]) }) },\n        { \"name\": \"select_limit$subexpression$1\", \"symbols\": [\"select_limit_1\"] },\n        { \"name\": \"select_limit$subexpression$1\", \"symbols\": [\"select_limit_2\"] },\n        { \"name\": \"select_limit\", \"symbols\": [\"select_limit$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { limit: unwrap(x) }) },\n        { \"name\": \"select_limit_1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_limit\") ? { type: \"kw_limit\" } : kw_limit), \"expr_nostar\"], \"postprocess\": last },\n        { \"name\": \"select_limit_2$ebnf$1$subexpression$1\", \"symbols\": [\"kw_first\"] },\n        { \"name\": \"select_limit_2$ebnf$1$subexpression$1\", \"symbols\": [\"kw_next\"] },\n        { \"name\": \"select_limit_2$ebnf$1\", \"symbols\": [\"select_limit_2$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_limit_2$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_limit_2$subexpression$1\", \"symbols\": [\"kw_row\"] },\n        { \"name\": \"select_limit_2$subexpression$1\", \"symbols\": [\"kw_rows\"] },\n        { \"name\": \"select_limit_2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_fetch\") ? { type: \"kw_fetch\" } : kw_fetch), \"select_limit_2$ebnf$1\", \"expr_nostar\", \"select_limit_2$subexpression$1\", (lexer_1.lexerAny.has(\"kw_only\") ? { type: \"kw_only\" } : kw_only)], \"postprocess\": get(2) },\n        { \"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_update\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'update' }) },\n        { \"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_no\", \"kw_key\", \"kw_update\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'no key update' }) },\n        { \"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_share\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'share' }) },\n        { \"name\": \"select_for$subexpression$1\", \"symbols\": [\"kw_key\", \"kw_share\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'key share' }) },\n        { \"name\": \"select_for\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_for\") ? { type: \"kw_for\" } : kw_for), \"select_for$subexpression$1\"] },\n        { \"name\": \"select_skip$subexpression$1\", \"symbols\": [\"kw_nowait\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'nowait' }) },\n        { \"name\": \"select_skip$subexpression$1\", \"symbols\": [\"kw_skip\", \"kw_locked\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'skip locked' }) },\n        { \"name\": \"select_skip\", \"symbols\": [\"select_skip$subexpression$1\"] },\n        { \"name\": \"select_order_by$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_order\") ? { type: \"kw_order\" } : kw_order), \"kw_by\"] },\n        { \"name\": \"select_order_by$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"select_order_by$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"select_order_by_expr\"], \"postprocess\": last },\n        { \"name\": \"select_order_by$ebnf$1\", \"symbols\": [\"select_order_by$ebnf$1\", \"select_order_by$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"select_order_by\", \"symbols\": [\"select_order_by$subexpression$1\", \"select_order_by_expr\", \"select_order_by$ebnf$1\"], \"postprocess\": ([_, head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"select_order_by_expr$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_asc\") ? { type: \"kw_asc\" } : kw_asc)] },\n        { \"name\": \"select_order_by_expr$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_desc\") ? { type: \"kw_desc\" } : kw_desc)] },\n        { \"name\": \"select_order_by_expr$ebnf$1\", \"symbols\": [\"select_order_by_expr$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_order_by_expr$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_order_by_expr$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [\"kw_first\"] },\n        { \"name\": \"select_order_by_expr$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [\"kw_last\"] },\n        { \"name\": \"select_order_by_expr$ebnf$2$subexpression$1\", \"symbols\": [\"kw_nulls\", \"select_order_by_expr$ebnf$2$subexpression$1$subexpression$1\"], \"postprocess\": last },\n        { \"name\": \"select_order_by_expr$ebnf$2\", \"symbols\": [\"select_order_by_expr$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"select_order_by_expr$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"select_order_by_expr\", \"symbols\": [\"expr\", \"select_order_by_expr$ebnf$1\", \"select_order_by_expr$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                by: x[0],\n                ...x[1] && { order: toStr(x[1]).toUpperCase() },\n                ...x[2] && { nulls: toStr(x[2]).toUpperCase() },\n            }) },\n        { \"name\": \"expr\", \"symbols\": [\"expr_nostar\"], \"postprocess\": unwrap },\n        { \"name\": \"expr\", \"symbols\": [\"expr_star\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_nostar\", \"symbols\": [\"expr_paren\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_nostar\", \"symbols\": [\"expr_or\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_paren$subexpression$1\", \"symbols\": [\"expr_or_select\"] },\n        { \"name\": \"expr_paren$subexpression$1\", \"symbols\": [\"expr_list_many\"] },\n        { \"name\": \"expr_paren\", \"symbols\": [\"lparen\", \"expr_paren$subexpression$1\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"expr_or$macrocall$2$macrocall$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_or\") ? { type: \"kw_or\" } : kw_or)] },\n        { \"name\": \"expr_or$macrocall$2$macrocall$1\", \"symbols\": [\"expr_or$macrocall$2$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_or$macrocall$2\", \"symbols\": [\"expr_or$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_or$macrocall$3\", \"symbols\": [\"expr_or\"] },\n        { \"name\": \"expr_or$macrocall$4\", \"symbols\": [\"expr_and\"] },\n        { \"name\": \"expr_or$macrocall$1$subexpression$1\", \"symbols\": [\"expr_or$macrocall$3\"] },\n        { \"name\": \"expr_or$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_or$macrocall$1$subexpression$2\", \"symbols\": [\"expr_or$macrocall$4\"] },\n        { \"name\": \"expr_or$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_or$macrocall$1\", \"symbols\": [\"expr_or$macrocall$1$subexpression$1\", \"expr_or$macrocall$2\", \"expr_or$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_or$macrocall$1\", \"symbols\": [\"expr_or$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_or\", \"symbols\": [\"expr_or$macrocall$1\"] },\n        { \"name\": \"expr_and$macrocall$2$macrocall$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_and\") ? { type: \"kw_and\" } : kw_and)] },\n        { \"name\": \"expr_and$macrocall$2$macrocall$1\", \"symbols\": [\"expr_and$macrocall$2$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_and$macrocall$2\", \"symbols\": [\"expr_and$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_and$macrocall$3\", \"symbols\": [\"expr_and\"] },\n        { \"name\": \"expr_and$macrocall$4\", \"symbols\": [\"expr_not\"] },\n        { \"name\": \"expr_and$macrocall$1$subexpression$1\", \"symbols\": [\"expr_and$macrocall$3\"] },\n        { \"name\": \"expr_and$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_and$macrocall$1$subexpression$2\", \"symbols\": [\"expr_and$macrocall$4\"] },\n        { \"name\": \"expr_and$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_and$macrocall$1\", \"symbols\": [\"expr_and$macrocall$1$subexpression$1\", \"expr_and$macrocall$2\", \"expr_and$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_and$macrocall$1\", \"symbols\": [\"expr_and$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_and\", \"symbols\": [\"expr_and$macrocall$1\"] },\n        { \"name\": \"expr_not$macrocall$2$macrocall$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)] },\n        { \"name\": \"expr_not$macrocall$2$macrocall$1\", \"symbols\": [\"expr_not$macrocall$2$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_not$macrocall$2\", \"symbols\": [\"expr_not$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_not$macrocall$3\", \"symbols\": [\"expr_not\"] },\n        { \"name\": \"expr_not$macrocall$4\", \"symbols\": [\"expr_eq\"] },\n        { \"name\": \"expr_not$macrocall$1$subexpression$1\", \"symbols\": [\"expr_not$macrocall$3\"] },\n        { \"name\": \"expr_not$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_not$macrocall$1\", \"symbols\": [\"expr_not$macrocall$2\", \"expr_not$macrocall$1$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'unary',\n                ...unwrap(x[0]),\n                operand: unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_not$macrocall$1\", \"symbols\": [\"expr_not$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_not\", \"symbols\": [\"expr_not$macrocall$1\"] },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq)] },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_neq\") ? { type: \"op_neq\" } : op_neq)] },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$2\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$2$subexpression$1\"] },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_eq$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_eq$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_eq$macrocall$2\", \"symbols\": [\"expr_eq$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_eq$macrocall$3\", \"symbols\": [\"expr_eq\"] },\n        { \"name\": \"expr_eq$macrocall$4\", \"symbols\": [\"expr_is\"] },\n        { \"name\": \"expr_eq$macrocall$1$subexpression$1\", \"symbols\": [\"expr_eq$macrocall$3\"] },\n        { \"name\": \"expr_eq$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_eq$macrocall$1$subexpression$2\", \"symbols\": [\"expr_eq$macrocall$4\"] },\n        { \"name\": \"expr_eq$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_eq$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$1$subexpression$1\", \"expr_eq$macrocall$2\", \"expr_eq$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_eq$macrocall$1\", \"symbols\": [\"expr_eq$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_eq\", \"symbols\": [\"expr_eq$macrocall$1\"] },\n        { \"name\": \"expr_star\", \"symbols\": [\"star\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'ref', name: '*' }) },\n        { \"name\": \"expr_is$subexpression$1\", \"symbols\": [\"expr_is\"] },\n        { \"name\": \"expr_is$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_is$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_isnull\") ? { type: \"kw_isnull\" } : kw_isnull)] },\n        { \"name\": \"expr_is$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_is\") ? { type: \"kw_is\" } : kw_is), (lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null)] },\n        { \"name\": \"expr_is\", \"symbols\": [\"expr_is$subexpression$1\", \"expr_is$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'unary', op: 'IS NULL', operand: unwrap(x[0]) }) },\n        { \"name\": \"expr_is$subexpression$3\", \"symbols\": [\"expr_is\"] },\n        { \"name\": \"expr_is$subexpression$3\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_is$subexpression$4\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_notnull\") ? { type: \"kw_notnull\" } : kw_notnull)] },\n        { \"name\": \"expr_is$subexpression$4\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_is\") ? { type: \"kw_is\" } : kw_is), \"kw_not_null\"] },\n        { \"name\": \"expr_is\", \"symbols\": [\"expr_is$subexpression$3\", \"expr_is$subexpression$4\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'unary', op: 'IS NOT NULL', operand: unwrap(x[0]) }) },\n        { \"name\": \"expr_is$subexpression$5\", \"symbols\": [\"expr_is\"] },\n        { \"name\": \"expr_is$subexpression$5\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_is$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)], \"postprocess\": id },\n        { \"name\": \"expr_is$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_is$subexpression$6\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_true\") ? { type: \"kw_true\" } : kw_true)] },\n        { \"name\": \"expr_is$subexpression$6\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_false\") ? { type: \"kw_false\" } : kw_false)] },\n        { \"name\": \"expr_is\", \"symbols\": [\"expr_is$subexpression$5\", (lexer_1.lexerAny.has(\"kw_is\") ? { type: \"kw_is\" } : kw_is), \"expr_is$ebnf$1\", \"expr_is$subexpression$6\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'unary',\n                op: 'IS ' + flattenStr([x[2], x[3]])\n                    .join(' ')\n                    .toUpperCase(),\n                operand: unwrap(x[0]),\n            }) },\n        { \"name\": \"expr_is\", \"symbols\": [\"expr_compare\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_compare$macrocall$2$macrocall$2\", \"symbols\": [(lexer_1.lexerAny.has(\"op_compare\") ? { type: \"op_compare\" } : op_compare)] },\n        { \"name\": \"expr_compare$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_compare$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_compare$macrocall$2$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_compare$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_compare$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_compare$macrocall$2\", \"symbols\": [\"expr_compare$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_compare$macrocall$3\", \"symbols\": [\"expr_compare\"] },\n        { \"name\": \"expr_compare$macrocall$4\", \"symbols\": [\"expr_range\"] },\n        { \"name\": \"expr_compare$macrocall$1$subexpression$1\", \"symbols\": [\"expr_compare$macrocall$3\"] },\n        { \"name\": \"expr_compare$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_compare$macrocall$1$subexpression$2\", \"symbols\": [\"expr_compare$macrocall$4\"] },\n        { \"name\": \"expr_compare$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_compare$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$1$subexpression$1\", \"expr_compare$macrocall$2\", \"expr_compare$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_compare$macrocall$1\", \"symbols\": [\"expr_compare$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_compare\", \"symbols\": [\"expr_compare$macrocall$1\"] },\n        { \"name\": \"expr_range$macrocall$2\", \"symbols\": [\"ops_between\"] },\n        { \"name\": \"expr_range$macrocall$3\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_and\") ? { type: \"kw_and\" } : kw_and)] },\n        { \"name\": \"expr_range$macrocall$4\", \"symbols\": [\"expr_range\"] },\n        { \"name\": \"expr_range$macrocall$5\", \"symbols\": [\"expr_others\"] },\n        { \"name\": \"expr_range$macrocall$1$subexpression$1\", \"symbols\": [\"expr_range$macrocall$4\"] },\n        { \"name\": \"expr_range$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_range$macrocall$1$subexpression$2\", \"symbols\": [\"expr_range$macrocall$4\"] },\n        { \"name\": \"expr_range$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_range$macrocall$1$subexpression$3\", \"symbols\": [\"expr_range$macrocall$5\"] },\n        { \"name\": \"expr_range$macrocall$1$subexpression$3\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_range$macrocall$1\", \"symbols\": [\"expr_range$macrocall$1$subexpression$1\", \"expr_range$macrocall$2\", \"expr_range$macrocall$1$subexpression$2\", \"expr_range$macrocall$3\", \"expr_range$macrocall$1$subexpression$3\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'ternary',\n                value: unwrap(x[0]),\n                lo: unwrap(x[2]),\n                hi: unwrap(x[4]),\n                op: (flattenStr(x[1]).join(' ') || '<error>').toUpperCase(),\n            }) },\n        { \"name\": \"expr_range$macrocall$1\", \"symbols\": [\"expr_range$macrocall$5\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_range\", \"symbols\": [\"expr_range$macrocall$1\"] },\n        { \"name\": \"expr_others$macrocall$2$macrocall$2\", \"symbols\": [(lexer_1.lexerAny.has(\"ops_others\") ? { type: \"ops_others\" } : ops_others)] },\n        { \"name\": \"expr_others$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_others$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_others$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_others$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_others$macrocall$2$macrocall$1\", \"symbols\": [\"expr_others$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_others$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_others$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_others$macrocall$2\", \"symbols\": [\"expr_others$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_others$macrocall$3\", \"symbols\": [\"expr_others\"] },\n        { \"name\": \"expr_others$macrocall$4\", \"symbols\": [\"expr_like\"] },\n        { \"name\": \"expr_others$macrocall$1$subexpression$1\", \"symbols\": [\"expr_others$macrocall$3\"] },\n        { \"name\": \"expr_others$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_others$macrocall$1$subexpression$2\", \"symbols\": [\"expr_others$macrocall$4\"] },\n        { \"name\": \"expr_others$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_others$macrocall$1\", \"symbols\": [\"expr_others$macrocall$1$subexpression$1\", \"expr_others$macrocall$2\", \"expr_others$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_others$macrocall$1\", \"symbols\": [\"expr_others$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_others\", \"symbols\": [\"expr_others$macrocall$1\"] },\n        { \"name\": \"expr_like$macrocall$2$macrocall$2\", \"symbols\": [\"ops_like\"] },\n        { \"name\": \"expr_like$macrocall$2$macrocall$1\", \"symbols\": [\"expr_like$macrocall$2$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_like$macrocall$2\", \"symbols\": [\"expr_like$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_like$macrocall$3\", \"symbols\": [\"expr_like\"] },\n        { \"name\": \"expr_like$macrocall$4\", \"symbols\": [\"expr_in\"] },\n        { \"name\": \"expr_like$macrocall$1$subexpression$1\", \"symbols\": [\"expr_like$macrocall$3\"] },\n        { \"name\": \"expr_like$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_like$macrocall$1$subexpression$2\", \"symbols\": [\"expr_like$macrocall$4\"] },\n        { \"name\": \"expr_like$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_like$macrocall$1\", \"symbols\": [\"expr_like$macrocall$1$subexpression$1\", \"expr_like$macrocall$2\", \"expr_like$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_like$macrocall$1\", \"symbols\": [\"expr_like$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_like\", \"symbols\": [\"expr_like$macrocall$1\"] },\n        { \"name\": \"expr_in$macrocall$2$macrocall$2\", \"symbols\": [\"ops_in\"] },\n        { \"name\": \"expr_in$macrocall$2$macrocall$1\", \"symbols\": [\"expr_in$macrocall$2$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_in$macrocall$2\", \"symbols\": [\"expr_in$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_in$macrocall$3\", \"symbols\": [\"expr_in\"] },\n        { \"name\": \"expr_in$macrocall$4\", \"symbols\": [\"expr_add\"] },\n        { \"name\": \"expr_in$macrocall$1$subexpression$1\", \"symbols\": [\"expr_in$macrocall$3\"] },\n        { \"name\": \"expr_in$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_in$macrocall$1$subexpression$2\", \"symbols\": [\"expr_in$macrocall$4\"] },\n        { \"name\": \"expr_in$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_in$macrocall$1\", \"symbols\": [\"expr_in$macrocall$1$subexpression$1\", \"expr_in$macrocall$2\", \"expr_in$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_in$macrocall$1\", \"symbols\": [\"expr_in$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_in\", \"symbols\": [\"expr_in$macrocall$1\"] },\n        { \"name\": \"expr_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_plus\") ? { type: \"op_plus\" } : op_plus)] },\n        { \"name\": \"expr_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_minus\") ? { type: \"op_minus\" } : op_minus)] },\n        { \"name\": \"expr_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_additive\") ? { type: \"op_additive\" } : op_additive)] },\n        { \"name\": \"expr_add$macrocall$2$macrocall$2\", \"symbols\": [\"expr_add$macrocall$2$macrocall$2$subexpression$1\"] },\n        { \"name\": \"expr_add$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_add$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_add$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_add$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_add$macrocall$2$macrocall$1\", \"symbols\": [\"expr_add$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_add$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_add$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_add$macrocall$2\", \"symbols\": [\"expr_add$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_add$macrocall$3\", \"symbols\": [\"expr_add\"] },\n        { \"name\": \"expr_add$macrocall$4\", \"symbols\": [\"expr_mult\"] },\n        { \"name\": \"expr_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_add$macrocall$3\"] },\n        { \"name\": \"expr_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_add$macrocall$1$subexpression$2\", \"symbols\": [\"expr_add$macrocall$4\"] },\n        { \"name\": \"expr_add$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_add$macrocall$1\", \"symbols\": [\"expr_add$macrocall$1$subexpression$1\", \"expr_add$macrocall$2\", \"expr_add$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_add$macrocall$1\", \"symbols\": [\"expr_add$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_add\", \"symbols\": [\"expr_add$macrocall$1\"] },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"star\") ? { type: \"star\" } : star)] },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_div\") ? { type: \"op_div\" } : op_div)] },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_mod\") ? { type: \"op_mod\" } : op_mod)] },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$2\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$2$subexpression$1\"] },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_mult$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_mult$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_mult$macrocall$2\", \"symbols\": [\"expr_mult$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_mult$macrocall$3\", \"symbols\": [\"expr_mult\"] },\n        { \"name\": \"expr_mult$macrocall$4\", \"symbols\": [\"expr_exp\"] },\n        { \"name\": \"expr_mult$macrocall$1$subexpression$1\", \"symbols\": [\"expr_mult$macrocall$3\"] },\n        { \"name\": \"expr_mult$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_mult$macrocall$1$subexpression$2\", \"symbols\": [\"expr_mult$macrocall$4\"] },\n        { \"name\": \"expr_mult$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_mult$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$1$subexpression$1\", \"expr_mult$macrocall$2\", \"expr_mult$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_mult$macrocall$1\", \"symbols\": [\"expr_mult$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_mult\", \"symbols\": [\"expr_mult$macrocall$1\"] },\n        { \"name\": \"expr_exp$macrocall$2$macrocall$2\", \"symbols\": [(lexer_1.lexerAny.has(\"op_exp\") ? { type: \"op_exp\" } : op_exp)] },\n        { \"name\": \"expr_exp$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_exp$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_exp$macrocall$2$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_exp$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_exp$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_exp$macrocall$2\", \"symbols\": [\"expr_exp$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_exp$macrocall$3\", \"symbols\": [\"expr_exp\"] },\n        { \"name\": \"expr_exp$macrocall$4\", \"symbols\": [\"expr_unary_add\"] },\n        { \"name\": \"expr_exp$macrocall$1$subexpression$1\", \"symbols\": [\"expr_exp$macrocall$3\"] },\n        { \"name\": \"expr_exp$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_exp$macrocall$1$subexpression$2\", \"symbols\": [\"expr_exp$macrocall$4\"] },\n        { \"name\": \"expr_exp$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_exp$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$1$subexpression$1\", \"expr_exp$macrocall$2\", \"expr_exp$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_exp$macrocall$1\", \"symbols\": [\"expr_exp$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_exp\", \"symbols\": [\"expr_exp$macrocall$1\"] },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_plus\") ? { type: \"op_plus\" } : op_plus)] },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_minus\") ? { type: \"op_minus\" } : op_minus)] },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$2\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$2$subexpression$1\"] },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$1$macrocall$2\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$2\"] },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$1$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$1$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$1$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_unary_add$macrocall$2$macrocall$1\", \"symbols\": [\"kw_operator\", \"lparen\", \"ident\", \"dot\", \"expr_unary_add$macrocall$2$macrocall$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x[4], ' ') || '<error>').toUpperCase(),\n                opSchema: toStr(x[2]),\n            }) },\n        { \"name\": \"expr_unary_add$macrocall$2\", \"symbols\": [\"expr_unary_add$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_unary_add$macrocall$3\", \"symbols\": [\"expr_unary_add\"] },\n        { \"name\": \"expr_unary_add$macrocall$4\", \"symbols\": [\"expr_various_constructs\"] },\n        { \"name\": \"expr_unary_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_unary_add$macrocall$3\"] },\n        { \"name\": \"expr_unary_add$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_unary_add$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$2\", \"expr_unary_add$macrocall$1$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'unary',\n                ...unwrap(x[0]),\n                operand: unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_unary_add$macrocall$1\", \"symbols\": [\"expr_unary_add$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_unary_add\", \"symbols\": [\"expr_unary_add$macrocall$1\"] },\n        { \"name\": \"expr_various_constructs$macrocall$2$macrocall$2\", \"symbols\": [\"various_binaries\"] },\n        { \"name\": \"expr_various_constructs$macrocall$2$macrocall$1\", \"symbols\": [\"expr_various_constructs$macrocall$2$macrocall$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                op: (toStr(x, ' ') || '<error>').toUpperCase()\n            }) },\n        { \"name\": \"expr_various_constructs$macrocall$2\", \"symbols\": [\"expr_various_constructs$macrocall$2$macrocall$1\"] },\n        { \"name\": \"expr_various_constructs$macrocall$3\", \"symbols\": [\"expr_various_constructs\"] },\n        { \"name\": \"expr_various_constructs$macrocall$4\", \"symbols\": [\"expr_array_index\"] },\n        { \"name\": \"expr_various_constructs$macrocall$1$subexpression$1\", \"symbols\": [\"expr_various_constructs$macrocall$3\"] },\n        { \"name\": \"expr_various_constructs$macrocall$1$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_various_constructs$macrocall$1$subexpression$2\", \"symbols\": [\"expr_various_constructs$macrocall$4\"] },\n        { \"name\": \"expr_various_constructs$macrocall$1$subexpression$2\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_various_constructs$macrocall$1\", \"symbols\": [\"expr_various_constructs$macrocall$1$subexpression$1\", \"expr_various_constructs$macrocall$2\", \"expr_various_constructs$macrocall$1$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'binary',\n                left: unwrap(x[0]),\n                right: unwrap(x[2]),\n                ...unwrap(x[1]),\n            }) },\n        { \"name\": \"expr_various_constructs$macrocall$1\", \"symbols\": [\"expr_various_constructs$macrocall$4\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_various_constructs\", \"symbols\": [\"expr_various_constructs$macrocall$1\"] },\n        { \"name\": \"expr_array_index$subexpression$1\", \"symbols\": [\"expr_array_index\"] },\n        { \"name\": \"expr_array_index$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_array_index\", \"symbols\": [\"expr_array_index$subexpression$1\", (lexer_1.lexerAny.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), \"expr_nostar\", (lexer_1.lexerAny.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'arrayIndex',\n                array: unwrap(x[0]),\n                index: unwrap(x[2]),\n            }) },\n        { \"name\": \"expr_array_index\", \"symbols\": [\"expr_member\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_member$subexpression$1\", \"symbols\": [\"expr_member\"] },\n        { \"name\": \"expr_member$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_member$subexpression$2\", \"symbols\": [\"string\"] },\n        { \"name\": \"expr_member$subexpression$2\", \"symbols\": [\"int\"] },\n        { \"name\": \"expr_member\", \"symbols\": [\"expr_member$subexpression$1\", \"ops_member\", \"expr_member$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'member',\n                operand: unwrap(x[0]),\n                op: x[1],\n                member: unwrap(x[2])\n            }) },\n        { \"name\": \"expr_member$subexpression$3\", \"symbols\": [\"expr_member\"] },\n        { \"name\": \"expr_member$subexpression$3\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"expr_member\", \"symbols\": [\"expr_member$subexpression$3\", (lexer_1.lexerAny.has(\"op_cast\") ? { type: \"op_cast\" } : op_cast), \"data_type\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'cast',\n                operand: unwrap(x[0]),\n                to: x[2],\n            }) },\n        { \"name\": \"expr_member\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_cast\") ? { type: \"kw_cast\" } : kw_cast), \"lparen\", \"expr_nostar\", (lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"data_type\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'cast',\n                operand: unwrap(x[2]),\n                to: x[4],\n            }) },\n        { \"name\": \"expr_member\", \"symbols\": [\"data_type\", \"string\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'cast',\n                operand: (0, lexer_2.track)(x[1], {\n                    type: 'string',\n                    value: (0, lexer_2.unbox)(x[1]),\n                }),\n                to: (0, lexer_2.unbox)(x[0]),\n            }) },\n        { \"name\": \"expr_member\", \"symbols\": [\"expr_dot\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_dot$subexpression$1\", \"symbols\": [\"word\"] },\n        { \"name\": \"expr_dot$subexpression$1\", \"symbols\": [\"star\"] },\n        { \"name\": \"expr_dot\", \"symbols\": [\"qname\", (lexer_1.lexerAny.has(\"dot\") ? { type: \"dot\" } : dot), \"expr_dot$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'ref',\n                table: unwrap(x[0]),\n                name: toStr(x[2])\n            }) },\n        { \"name\": \"expr_dot\", \"symbols\": [\"expr_final\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_final\", \"symbols\": [\"expr_basic\"] },\n        { \"name\": \"expr_final\", \"symbols\": [\"expr_primary\"] },\n        { \"name\": \"expr_basic\", \"symbols\": [\"expr_special_calls\"] },\n        { \"name\": \"expr_basic\", \"symbols\": [\"expr_call\"] },\n        { \"name\": \"expr_basic\", \"symbols\": [\"expr_array\"] },\n        { \"name\": \"expr_basic\", \"symbols\": [\"expr_case\"] },\n        { \"name\": \"expr_basic\", \"symbols\": [\"expr_extract\"] },\n        { \"name\": \"expr_basic\", \"symbols\": [\"word\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'ref',\n                name: unwrap(x[0]),\n            }) },\n        { \"name\": \"expr_array$ebnf$1\", \"symbols\": [\"expr_subarray_items\"], \"postprocess\": id },\n        { \"name\": \"expr_array$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_array\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_array\") ? { type: \"kw_array\" } : kw_array), (lexer_1.lexerAny.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), \"expr_array$ebnf$1\", (lexer_1.lexerAny.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'array',\n                expressions: x[2] || [],\n            }) },\n        { \"name\": \"expr_array\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_array\") ? { type: \"kw_array\" } : kw_array), \"lparen\", \"selection\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'array select',\n                select: unwrap(x[2]),\n            }) },\n        { \"name\": \"expr_subarray$ebnf$1\", \"symbols\": [\"expr_subarray_items\"], \"postprocess\": id },\n        { \"name\": \"expr_subarray$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_subarray\", \"symbols\": [(lexer_1.lexerAny.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket), \"expr_subarray$ebnf$1\", (lexer_1.lexerAny.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)], \"postprocess\": get(1) },\n        { \"name\": \"expr_subarray_items$macrocall$2\", \"symbols\": [\"expr_list_item\"] },\n        { \"name\": \"expr_subarray_items$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"expr_subarray_items$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"expr_subarray_items$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"expr_subarray_items$macrocall$1$ebnf$1\", \"symbols\": [\"expr_subarray_items$macrocall$1$ebnf$1\", \"expr_subarray_items$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"expr_subarray_items$macrocall$1\", \"symbols\": [\"expr_subarray_items$macrocall$2\", \"expr_subarray_items$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"expr_subarray_items\", \"symbols\": [\"expr_subarray_items$macrocall$1\"], \"postprocess\": x => x[0].map(unwrap) },\n        { \"name\": \"expr_subarray_items$macrocall$4\", \"symbols\": [\"expr_subarray\"] },\n        { \"name\": \"expr_subarray_items$macrocall$3$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"expr_subarray_items$macrocall$3$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"expr_subarray_items$macrocall$4\"], \"postprocess\": last },\n        { \"name\": \"expr_subarray_items$macrocall$3$ebnf$1\", \"symbols\": [\"expr_subarray_items$macrocall$3$ebnf$1\", \"expr_subarray_items$macrocall$3$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"expr_subarray_items$macrocall$3\", \"symbols\": [\"expr_subarray_items$macrocall$4\", \"expr_subarray_items$macrocall$3$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"expr_subarray_items\", \"symbols\": [\"expr_subarray_items$macrocall$3\"], \"postprocess\": (x) => {\n                return x[0].map((v) => {\n                    return (0, lexer_2.track)(v, {\n                        type: 'array',\n                        expressions: v[0].map(unwrap),\n                    });\n                });\n            } },\n        { \"name\": \"expr_function_call$ebnf$1\", \"symbols\": [\"expr_list_raw\"], \"postprocess\": id },\n        { \"name\": \"expr_function_call$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_function_call\", \"symbols\": [\"expr_fn_name\", \"lparen\", \"expr_function_call$ebnf$1\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'call',\n                function: unwrap(x[0]),\n                args: x[2] || [],\n            }) },\n        { \"name\": \"expr_call$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)] },\n        { \"name\": \"expr_call$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_distinct\") ? { type: \"kw_distinct\" } : kw_distinct)] },\n        { \"name\": \"expr_call$ebnf$1\", \"symbols\": [\"expr_call$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"expr_call$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call$ebnf$2\", \"symbols\": [\"expr_list_raw\"], \"postprocess\": id },\n        { \"name\": \"expr_call$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call$ebnf$3\", \"symbols\": [\"select_order_by\"], \"postprocess\": id },\n        { \"name\": \"expr_call$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call$ebnf$4$subexpression$1\", \"symbols\": [\"kw_filter\", \"lparen\", (lexer_1.lexerAny.has(\"kw_where\") ? { type: \"kw_where\" } : kw_where), \"expr\", \"rparen\"], \"postprocess\": get(3) },\n        { \"name\": \"expr_call$ebnf$4\", \"symbols\": [\"expr_call$ebnf$4$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"expr_call$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call$ebnf$5\", \"symbols\": [\"expr_call_within_group\"], \"postprocess\": id },\n        { \"name\": \"expr_call$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call$ebnf$6\", \"symbols\": [\"expr_call_over\"], \"postprocess\": id },\n        { \"name\": \"expr_call$ebnf$6\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call\", \"symbols\": [\"expr_fn_name\", \"lparen\", \"expr_call$ebnf$1\", \"expr_call$ebnf$2\", \"expr_call$ebnf$3\", \"rparen\", \"expr_call$ebnf$4\", \"expr_call$ebnf$5\", \"expr_call$ebnf$6\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'call',\n                function: unwrap(x[0]),\n                ...x[2] && { distinct: toStr(x[2]) },\n                args: x[3] || [],\n                ...x[4] && { orderBy: x[4] },\n                ...x[6] && { filter: unwrap(x[6]) },\n                ...x[7] && { withinGroup: x[7] },\n                ...x[8] && { over: unwrap(x[8]) },\n            }) },\n        { \"name\": \"expr_call_over$ebnf$1$subexpression$1\", \"symbols\": [\"kw_partition\", \"kw_by\", \"expr_list_raw\"], \"postprocess\": last },\n        { \"name\": \"expr_call_over$ebnf$1\", \"symbols\": [\"expr_call_over$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"expr_call_over$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call_over$ebnf$2\", \"symbols\": [\"select_order_by\"], \"postprocess\": id },\n        { \"name\": \"expr_call_over$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_call_over\", \"symbols\": [\"kw_over\", \"lparen\", \"expr_call_over$ebnf$1\", \"expr_call_over$ebnf$2\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                ...x[2] && { partitionBy: x[2] },\n                ...x[3] && { orderBy: x[3] },\n            }) },\n        { \"name\": \"expr_call_within_group$subexpression$1\", \"symbols\": [\"kw_within\", (lexer_1.lexerAny.has(\"kw_group\") ? { type: \"kw_group\" } : kw_group)] },\n        { \"name\": \"expr_call_within_group$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_order\") ? { type: \"kw_order\" } : kw_order), \"kw_by\"] },\n        { \"name\": \"expr_call_within_group\", \"symbols\": [\"expr_call_within_group$subexpression$1\", \"lparen\", \"expr_call_within_group$subexpression$2\", \"select_order_by_expr\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, x[3]) },\n        { \"name\": \"expr_extract$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('extract') },\n        { \"name\": \"expr_extract\", \"symbols\": [\"expr_extract$subexpression$1\", \"lparen\", \"word\", (lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from), \"expr\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'extract',\n                field: asName(x[2]),\n                from: x[4],\n            }) },\n        { \"name\": \"expr_primary\", \"symbols\": [\"float\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'numeric', value: (0, lexer_2.unbox)(x[0]) }) },\n        { \"name\": \"expr_primary\", \"symbols\": [\"int\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'integer', value: (0, lexer_2.unbox)(x[0]) }) },\n        { \"name\": \"expr_primary\", \"symbols\": [\"string\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'string', value: (0, lexer_2.unbox)(x[0]) }) },\n        { \"name\": \"expr_primary\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_true\") ? { type: \"kw_true\" } : kw_true)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'boolean', value: true }) },\n        { \"name\": \"expr_primary\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_false\") ? { type: \"kw_false\" } : kw_false)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'boolean', value: false }) },\n        { \"name\": \"expr_primary\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'null' }) },\n        { \"name\": \"expr_primary\", \"symbols\": [\"value_keyword\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'keyword', keyword: toStr(x) }) },\n        { \"name\": \"expr_primary\", \"symbols\": [(lexer_1.lexerAny.has(\"qparam\") ? { type: \"qparam\" } : qparam)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'parameter', name: toStr(x[0]) }) },\n        { \"name\": \"expr_primary\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'default' }) },\n        { \"name\": \"ops_like\", \"symbols\": [\"ops_like_keywors\"] },\n        { \"name\": \"ops_like\", \"symbols\": [\"ops_like_operators\"] },\n        { \"name\": \"ops_like_keywors$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)], \"postprocess\": id },\n        { \"name\": \"ops_like_keywors$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"ops_like_keywors$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_like\") ? { type: \"kw_like\" } : kw_like)] },\n        { \"name\": \"ops_like_keywors$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_ilike\") ? { type: \"kw_ilike\" } : kw_ilike)] },\n        { \"name\": \"ops_like_keywors\", \"symbols\": [\"ops_like_keywors$ebnf$1\", \"ops_like_keywors$subexpression$1\"] },\n        { \"name\": \"ops_like_operators$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_like\") ? { type: \"op_like\" } : op_like)], \"postprocess\": () => 'LIKE' },\n        { \"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$1\"] },\n        { \"name\": \"ops_like_operators$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"op_ilike\") ? { type: \"op_ilike\" } : op_ilike)], \"postprocess\": () => 'ILIKE' },\n        { \"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$2\"] },\n        { \"name\": \"ops_like_operators$subexpression$3\", \"symbols\": [(lexer_1.lexerAny.has(\"op_not_like\") ? { type: \"op_not_like\" } : op_not_like)], \"postprocess\": () => 'NOT LIKE' },\n        { \"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$3\"] },\n        { \"name\": \"ops_like_operators$subexpression$4\", \"symbols\": [(lexer_1.lexerAny.has(\"op_not_ilike\") ? { type: \"op_not_ilike\" } : op_not_ilike)], \"postprocess\": () => 'NOT ILIKE' },\n        { \"name\": \"ops_like_operators\", \"symbols\": [\"ops_like_operators$subexpression$4\"] },\n        { \"name\": \"ops_in$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)], \"postprocess\": id },\n        { \"name\": \"ops_in$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"ops_in\", \"symbols\": [\"ops_in$ebnf$1\", (lexer_1.lexerAny.has(\"kw_in\") ? { type: \"kw_in\" } : kw_in)] },\n        { \"name\": \"ops_between$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)], \"postprocess\": id },\n        { \"name\": \"ops_between$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"ops_between\", \"symbols\": [\"ops_between$ebnf$1\", \"kw_between\"] },\n        { \"name\": \"ops_member$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_member\") ? { type: \"op_member\" } : op_member)] },\n        { \"name\": \"ops_member$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_membertext\") ? { type: \"op_membertext\" } : op_membertext)] },\n        { \"name\": \"ops_member\", \"symbols\": [\"ops_member$subexpression$1\"], \"postprocess\": x => { var _a; return (_a = unwrap(x)) === null || _a === void 0 ? void 0 : _a.value; } },\n        { \"name\": \"expr_list_item\", \"symbols\": [\"expr_or_select\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_list_item\", \"symbols\": [\"expr_star\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_list_raw$macrocall$2\", \"symbols\": [\"expr_list_item\"] },\n        { \"name\": \"expr_list_raw$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"expr_list_raw$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"expr_list_raw$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"expr_list_raw$macrocall$1$ebnf$1\", \"symbols\": [\"expr_list_raw$macrocall$1$ebnf$1\", \"expr_list_raw$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"expr_list_raw$macrocall$1\", \"symbols\": [\"expr_list_raw$macrocall$2\", \"expr_list_raw$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"expr_list_raw\", \"symbols\": [\"expr_list_raw$macrocall$1\"], \"postprocess\": ([x]) => x.map(unwrap) },\n        { \"name\": \"expr_list_raw_many$macrocall$2\", \"symbols\": [\"expr_list_item\"] },\n        { \"name\": \"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"expr_list_raw_many$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"expr_list_raw_many$macrocall$1$ebnf$1\", \"symbols\": [\"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$1\"] },\n        { \"name\": \"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"expr_list_raw_many$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"expr_list_raw_many$macrocall$1$ebnf$1\", \"symbols\": [\"expr_list_raw_many$macrocall$1$ebnf$1\", \"expr_list_raw_many$macrocall$1$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"expr_list_raw_many$macrocall$1\", \"symbols\": [\"expr_list_raw_many$macrocall$2\", \"expr_list_raw_many$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"expr_list_raw_many\", \"symbols\": [\"expr_list_raw_many$macrocall$1\"], \"postprocess\": ([x]) => x.map(unwrap) },\n        { \"name\": \"expr_or_select\", \"symbols\": [\"expr_nostar\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_or_select\", \"symbols\": [\"selection\"], \"postprocess\": unwrap },\n        { \"name\": \"expr_list_many\", \"symbols\": [\"expr_list_raw_many\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'list',\n                expressions: x[0],\n            }) },\n        { \"name\": \"expr_case$ebnf$1\", \"symbols\": [\"expr_nostar\"], \"postprocess\": id },\n        { \"name\": \"expr_case$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_case$ebnf$2\", \"symbols\": [] },\n        { \"name\": \"expr_case$ebnf$2\", \"symbols\": [\"expr_case$ebnf$2\", \"expr_case_whens\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"expr_case$ebnf$3\", \"symbols\": [\"expr_case_else\"], \"postprocess\": id },\n        { \"name\": \"expr_case$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_case\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_case\") ? { type: \"kw_case\" } : kw_case), \"expr_case$ebnf$1\", \"expr_case$ebnf$2\", \"expr_case$ebnf$3\", (lexer_1.lexerAny.has(\"kw_end\") ? { type: \"kw_end\" } : kw_end)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'case',\n                value: x[1],\n                whens: x[2],\n                else: x[3],\n            }) },\n        { \"name\": \"expr_case_whens\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_when\") ? { type: \"kw_when\" } : kw_when), \"expr_nostar\", (lexer_1.lexerAny.has(\"kw_then\") ? { type: \"kw_then\" } : kw_then), \"expr_nostar\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                when: x[1],\n                value: x[3],\n            }) },\n        { \"name\": \"expr_case_else\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_else\") ? { type: \"kw_else\" } : kw_else), \"expr_nostar\"], \"postprocess\": last },\n        { \"name\": \"expr_fn_name$subexpression$1$ebnf$1$subexpression$1\", \"symbols\": [\"word\", (lexer_1.lexerAny.has(\"dot\") ? { type: \"dot\" } : dot)] },\n        { \"name\": \"expr_fn_name$subexpression$1$ebnf$1\", \"symbols\": [\"expr_fn_name$subexpression$1$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"expr_fn_name$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"expr_fn_name$subexpression$1\", \"symbols\": [\"expr_fn_name$subexpression$1$ebnf$1\", \"word_or_keyword\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                name: (0, lexer_2.unbox)(unwrap(x[1])),\n                ...x[0] && { schema: toStr(x[0][0]) },\n            }) },\n        { \"name\": \"expr_fn_name\", \"symbols\": [\"expr_fn_name$subexpression$1\"] },\n        { \"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_any\") ? { type: \"kw_any\" } : kw_any)] },\n        { \"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_some\") ? { type: \"kw_some\" } : kw_some)] },\n        { \"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)] },\n        { \"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_left\") ? { type: \"kw_left\" } : kw_left)] },\n        { \"name\": \"expr_fn_name$subexpression$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_right\") ? { type: \"kw_right\" } : kw_right)] },\n        { \"name\": \"expr_fn_name$subexpression$2\", \"symbols\": [\"expr_fn_name$subexpression$2$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                name: toStr(unwrap(x)),\n            }) },\n        { \"name\": \"expr_fn_name\", \"symbols\": [\"expr_fn_name$subexpression$2\"] },\n        { \"name\": \"word_or_keyword\", \"symbols\": [\"word\"] },\n        { \"name\": \"word_or_keyword\", \"symbols\": [\"value_keyword\"], \"postprocess\": x => (0, lexer_2.box)(x, toStr(x)) },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_catalog\") ? { type: \"kw_current_catalog\" } : kw_current_catalog)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_date\") ? { type: \"kw_current_date\" } : kw_current_date)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_role\") ? { type: \"kw_current_role\" } : kw_current_role)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_schema\") ? { type: \"kw_current_schema\" } : kw_current_schema)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_timestamp\") ? { type: \"kw_current_timestamp\" } : kw_current_timestamp)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_time\") ? { type: \"kw_current_time\" } : kw_current_time)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_localtimestamp\") ? { type: \"kw_localtimestamp\" } : kw_localtimestamp)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_localtime\") ? { type: \"kw_localtime\" } : kw_localtime)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_session_user\") ? { type: \"kw_session_user\" } : kw_session_user)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_user\") ? { type: \"kw_user\" } : kw_user)] },\n        { \"name\": \"value_keyword\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_user\") ? { type: \"kw_current_user\" } : kw_current_user)] },\n        { \"name\": \"expr_special_calls\", \"symbols\": [\"spe_overlay\"] },\n        { \"name\": \"expr_special_calls\", \"symbols\": [\"spe_substring\"] },\n        { \"name\": \"spe_overlay$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('overlay') },\n        { \"name\": \"spe_overlay$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"lparen\") ? { type: \"lparen\" } : lparen), \"expr_nostar\"] },\n        { \"name\": \"spe_overlay$subexpression$3\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_placing\") ? { type: \"kw_placing\" } : kw_placing), \"expr_nostar\"] },\n        { \"name\": \"spe_overlay$subexpression$4\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from), \"expr_nostar\"] },\n        { \"name\": \"spe_overlay$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_for\") ? { type: \"kw_for\" } : kw_for), \"expr_nostar\"] },\n        { \"name\": \"spe_overlay$ebnf$1\", \"symbols\": [\"spe_overlay$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"spe_overlay$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"spe_overlay\", \"symbols\": [\"spe_overlay$subexpression$1\", \"spe_overlay$subexpression$2\", \"spe_overlay$subexpression$3\", \"spe_overlay$subexpression$4\", \"spe_overlay$ebnf$1\", (lexer_1.lexerAny.has(\"rparen\") ? { type: \"rparen\" } : rparen)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'overlay',\n                value: x[1][1],\n                placing: x[2][1],\n                from: x[3][1],\n                ...x[4] && { for: x[4][1] },\n            }) },\n        { \"name\": \"spe_substring$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('substring') },\n        { \"name\": \"spe_substring$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"lparen\") ? { type: \"lparen\" } : lparen), \"expr_nostar\"] },\n        { \"name\": \"spe_substring$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from), \"expr_nostar\"] },\n        { \"name\": \"spe_substring$ebnf$1\", \"symbols\": [\"spe_substring$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"spe_substring$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"spe_substring$ebnf$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_for\") ? { type: \"kw_for\" } : kw_for), \"expr_nostar\"] },\n        { \"name\": \"spe_substring$ebnf$2\", \"symbols\": [\"spe_substring$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"spe_substring$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"spe_substring\", \"symbols\": [\"spe_substring$subexpression$1\", \"spe_substring$subexpression$2\", \"spe_substring$ebnf$1\", \"spe_substring$ebnf$2\", (lexer_1.lexerAny.has(\"rparen\") ? { type: \"rparen\" } : rparen)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'substring',\n                value: x[1][1],\n                ...x[2] && { from: x[2][1] },\n                ...x[3] && { for: x[3][1] },\n            }) },\n        { \"name\": \"various_binaries\", \"symbols\": [\"kw_at\", \"kw_time\", \"kw_zone\"], \"postprocess\": () => 'AT TIME ZONE' },\n        { \"name\": \"createtable_statement$ebnf$1\", \"symbols\": [\"createtable_modifiers\"], \"postprocess\": id },\n        { \"name\": \"createtable_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtable_statement$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"createtable_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtable_statement$ebnf$3\", \"symbols\": [\"createtable_opts\"], \"postprocess\": id },\n        { \"name\": \"createtable_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtable_statement\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"createtable_statement$ebnf$1\", (lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table), \"createtable_statement$ebnf$2\", \"qname\", \"lparen\", \"createtable_declarationlist\", \"rparen\", \"createtable_statement$ebnf$3\"], \"postprocess\": x => {\n                const cols = x[6].filter((v) => 'kind' in v);\n                const constraints = x[6].filter((v) => !('kind' in v));\n                return (0, lexer_2.track)(x, {\n                    type: 'create table',\n                    ...!!x[3] ? { ifNotExists: true } : {},\n                    name: x[4],\n                    columns: cols,\n                    ...unwrap(x[1]),\n                    ...constraints.length ? { constraints } : {},\n                    ...last(x),\n                });\n            } },\n        { \"name\": \"createtable_modifiers\", \"symbols\": [\"kw_unlogged\"], \"postprocess\": x => x[0] ? { unlogged: true } : {} },\n        { \"name\": \"createtable_modifiers\", \"symbols\": [\"m_locglob\"] },\n        { \"name\": \"createtable_modifiers\", \"symbols\": [\"m_tmp\"] },\n        { \"name\": \"createtable_modifiers\", \"symbols\": [\"m_locglob\", \"m_tmp\"], \"postprocess\": ([a, b]) => ({ ...a, ...b }) },\n        { \"name\": \"m_locglob$subexpression$1\", \"symbols\": [\"kw_local\"] },\n        { \"name\": \"m_locglob$subexpression$1\", \"symbols\": [\"kw_global\"] },\n        { \"name\": \"m_locglob\", \"symbols\": [\"m_locglob$subexpression$1\"], \"postprocess\": x => ({ locality: toStr(x) }) },\n        { \"name\": \"m_tmp$subexpression$1\", \"symbols\": [\"kw_temp\"] },\n        { \"name\": \"m_tmp$subexpression$1\", \"symbols\": [\"kw_temporary\"] },\n        { \"name\": \"m_tmp\", \"symbols\": [\"m_tmp$subexpression$1\"], \"postprocess\": x => ({ temporary: true }) },\n        { \"name\": \"createtable_declarationlist$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtable_declarationlist$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"createtable_declaration\"], \"postprocess\": last },\n        { \"name\": \"createtable_declarationlist$ebnf$1\", \"symbols\": [\"createtable_declarationlist$ebnf$1\", \"createtable_declarationlist$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtable_declarationlist\", \"symbols\": [\"createtable_declaration\", \"createtable_declarationlist$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"createtable_declaration$subexpression$1\", \"symbols\": [\"createtable_constraint\"] },\n        { \"name\": \"createtable_declaration$subexpression$1\", \"symbols\": [\"createtable_column\"] },\n        { \"name\": \"createtable_declaration$subexpression$1\", \"symbols\": [\"createtable_like\"] },\n        { \"name\": \"createtable_declaration\", \"symbols\": [\"createtable_declaration$subexpression$1\"], \"postprocess\": unwrap },\n        { \"name\": \"createtable_constraint$macrocall$2\", \"symbols\": [\"createtable_constraint_def\"] },\n        { \"name\": \"createtable_constraint$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_constraint\") ? { type: \"kw_constraint\" } : kw_constraint), \"word\"] },\n        { \"name\": \"createtable_constraint$macrocall$1$ebnf$1\", \"symbols\": [\"createtable_constraint$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createtable_constraint$macrocall$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtable_constraint$macrocall$1\", \"symbols\": [\"createtable_constraint$macrocall$1$ebnf$1\", \"createtable_constraint$macrocall$2\"], \"postprocess\": x => {\n                const name = x[0] && asName(x[0][1]);\n                if (!name) {\n                    return (0, lexer_2.track)(x, unwrap(x[1]));\n                }\n                return (0, lexer_2.track)(x, {\n                    constraintName: name,\n                    ...unwrap(x[1]),\n                });\n            } },\n        { \"name\": \"createtable_constraint\", \"symbols\": [\"createtable_constraint$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"createtable_constraint_def\", \"symbols\": [\"createtable_constraint_def_unique\"] },\n        { \"name\": \"createtable_constraint_def\", \"symbols\": [\"createtable_constraint_def_check\"] },\n        { \"name\": \"createtable_constraint_def\", \"symbols\": [\"createtable_constraint_foreignkey\"] },\n        { \"name\": \"createtable_constraint_def_unique$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_unique\") ? { type: \"kw_unique\" } : kw_unique)] },\n        { \"name\": \"createtable_constraint_def_unique$subexpression$1\", \"symbols\": [\"kw_primary_key\"] },\n        { \"name\": \"createtable_constraint_def_unique\", \"symbols\": [\"createtable_constraint_def_unique$subexpression$1\", \"lparen\", \"createtable_collist\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: toStr(x[0], ' '),\n                columns: x[2].map(asName),\n            }) },\n        { \"name\": \"createtable_constraint_def_check\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_check\") ? { type: \"kw_check\" } : kw_check), \"expr_paren\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'check',\n                expr: unwrap(x[1]),\n            }) },\n        { \"name\": \"createtable_constraint_foreignkey\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_foreign\") ? { type: \"kw_foreign\" } : kw_foreign), \"kw_key\", \"collist_paren\", \"createtable_references\"], \"postprocess\": (x) => {\n                return (0, lexer_2.track)(x, {\n                    type: 'foreign key',\n                    localColumns: x[2].map(asName),\n                    ...x[3],\n                });\n            } },\n        { \"name\": \"createtable_references$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtable_references$ebnf$1\", \"symbols\": [\"createtable_references$ebnf$1\", \"createtable_constraint_foreignkey_onsometing\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtable_references\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_references\") ? { type: \"kw_references\" } : kw_references), \"table_ref\", \"collist_paren\", \"createtable_references$ebnf$1\"], \"postprocess\": (x) => {\n                return (0, lexer_2.track)(x, {\n                    foreignTable: unwrap(x[1]),\n                    foreignColumns: x[2].map(asName),\n                    ...x[3].reduce((a, b) => ({ ...a, ...b }), {}),\n                });\n            } },\n        { \"name\": \"createtable_constraint_foreignkey_onsometing\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"kw_delete\", \"createtable_constraint_on_action\"], \"postprocess\": x => (0, lexer_2.track)(x, { onDelete: last(x) }) },\n        { \"name\": \"createtable_constraint_foreignkey_onsometing\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"kw_update\", \"createtable_constraint_on_action\"], \"postprocess\": x => (0, lexer_2.track)(x, { onUpdate: last(x) }) },\n        { \"name\": \"createtable_constraint_foreignkey_onsometing$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_full\") ? { type: \"kw_full\" } : kw_full)] },\n        { \"name\": \"createtable_constraint_foreignkey_onsometing$subexpression$1\", \"symbols\": [\"kw_partial\"] },\n        { \"name\": \"createtable_constraint_foreignkey_onsometing$subexpression$1\", \"symbols\": [\"kw_simple\"] },\n        { \"name\": \"createtable_constraint_foreignkey_onsometing\", \"symbols\": [\"kw_match\", \"createtable_constraint_foreignkey_onsometing$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { match: toStr(last(x)) }) },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"kw_cascade\"] },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1$subexpression$1\", \"symbols\": [\"kw_no\", \"kw_action\"] },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"createtable_constraint_on_action$subexpression$1$subexpression$1\"] },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"kw_restrict\"] },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null)] },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)] },\n        { \"name\": \"createtable_constraint_on_action$subexpression$1\", \"symbols\": [\"kw_set\", \"createtable_constraint_on_action$subexpression$1$subexpression$2\"] },\n        { \"name\": \"createtable_constraint_on_action\", \"symbols\": [\"createtable_constraint_on_action$subexpression$1\"], \"postprocess\": x => toStr(x, ' ') },\n        { \"name\": \"createtable_collist$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtable_collist$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"createtable_collist$ebnf$1\", \"symbols\": [\"createtable_collist$ebnf$1\", \"createtable_collist$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtable_collist\", \"symbols\": [\"ident\", \"createtable_collist$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"createtable_column$ebnf$1\", \"symbols\": [\"createtable_collate\"], \"postprocess\": id },\n        { \"name\": \"createtable_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtable_column$ebnf$2\", \"symbols\": [] },\n        { \"name\": \"createtable_column$ebnf$2\", \"symbols\": [\"createtable_column$ebnf$2\", \"createtable_column_constraint\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtable_column\", \"symbols\": [\"word\", \"data_type\", \"createtable_column$ebnf$1\", \"createtable_column$ebnf$2\"], \"postprocess\": x => {\n                return (0, lexer_2.track)(x, {\n                    kind: 'column',\n                    name: asName(x[0]),\n                    dataType: x[1],\n                    ...x[2] ? { collate: x[2][1] } : {},\n                    ...x[3] && x[3].length ? { constraints: x[3] } : {},\n                });\n            } },\n        { \"name\": \"createtable_like$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtable_like$ebnf$1\", \"symbols\": [\"createtable_like$ebnf$1\", \"createtable_like_opt\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtable_like\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_like\") ? { type: \"kw_like\" } : kw_like), \"qname\", \"createtable_like$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                kind: 'like table',\n                like: x[1],\n                options: x[2],\n            }) },\n        { \"name\": \"createtable_like_opt$subexpression$1\", \"symbols\": [\"kw_including\"] },\n        { \"name\": \"createtable_like_opt$subexpression$1\", \"symbols\": [\"kw_excluding\"] },\n        { \"name\": \"createtable_like_opt\", \"symbols\": [\"createtable_like_opt$subexpression$1\", \"createtable_like_opt_val\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                verb: toStr(x[0]),\n                option: toStr(x[1]),\n            }) },\n        { \"name\": \"createtable_like_opt_val\", \"symbols\": [\"word\"], \"postprocess\": anyKw('defaults', 'constraints', 'indexes', 'storage', 'comments') },\n        { \"name\": \"createtable_like_opt_val\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)] },\n        { \"name\": \"createtable_column_constraint$macrocall$2\", \"symbols\": [\"createtable_column_constraint_def\"] },\n        { \"name\": \"createtable_column_constraint$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_constraint\") ? { type: \"kw_constraint\" } : kw_constraint), \"word\"] },\n        { \"name\": \"createtable_column_constraint$macrocall$1$ebnf$1\", \"symbols\": [\"createtable_column_constraint$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createtable_column_constraint$macrocall$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtable_column_constraint$macrocall$1\", \"symbols\": [\"createtable_column_constraint$macrocall$1$ebnf$1\", \"createtable_column_constraint$macrocall$2\"], \"postprocess\": x => {\n                const name = x[0] && asName(x[0][1]);\n                if (!name) {\n                    return (0, lexer_2.track)(x, unwrap(x[1]));\n                }\n                return (0, lexer_2.track)(x, {\n                    constraintName: name,\n                    ...unwrap(x[1]),\n                });\n            } },\n        { \"name\": \"createtable_column_constraint\", \"symbols\": [\"createtable_column_constraint$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_unique\") ? { type: \"kw_unique\" } : kw_unique)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'unique' }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [\"kw_primary_key\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'primary key' }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [\"kw_not_null\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'not null' }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'null' }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default), \"expr\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'default', default: unwrap(x[1]) }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_check\") ? { type: \"kw_check\" } : kw_check), \"expr_paren\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'check', expr: unwrap(x[1]) }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [\"createtable_references\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'reference', ...unwrap(x) }) },\n        { \"name\": \"createtable_column_constraint_def\", \"symbols\": [\"altercol_generated\"] },\n        { \"name\": \"createtable_collate\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_collate\") ? { type: \"kw_collate\" } : kw_collate), \"qualified_name\"] },\n        { \"name\": \"createtable_opts$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('inherits') },\n        { \"name\": \"createtable_opts$macrocall$2\", \"symbols\": [\"qname\"] },\n        { \"name\": \"createtable_opts$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtable_opts$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"createtable_opts$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"createtable_opts$macrocall$1$ebnf$1\", \"symbols\": [\"createtable_opts$macrocall$1$ebnf$1\", \"createtable_opts$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtable_opts$macrocall$1\", \"symbols\": [\"createtable_opts$macrocall$2\", \"createtable_opts$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"createtable_opts\", \"symbols\": [\"createtable_opts$subexpression$1\", \"lparen\", \"createtable_opts$macrocall$1\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, { inherits: x[2] }) },\n        { \"name\": \"createindex_statement$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_unique\") ? { type: \"kw_unique\" } : kw_unique)], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_concurrently\") ? { type: \"kw_concurrently\" } : kw_concurrently)], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$3\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$4\", \"symbols\": [\"word\"], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$5$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_using\") ? { type: \"kw_using\" } : kw_using), \"ident\"], \"postprocess\": last },\n        { \"name\": \"createindex_statement$ebnf$5\", \"symbols\": [\"createindex_statement$ebnf$5$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$6\", \"symbols\": [\"createindex_with\"], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$6\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$7\", \"symbols\": [\"createindex_tblspace\"], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$7\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement$ebnf$8\", \"symbols\": [\"createindex_predicate\"], \"postprocess\": id },\n        { \"name\": \"createindex_statement$ebnf$8\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_statement\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"createindex_statement$ebnf$1\", \"kw_index\", \"createindex_statement$ebnf$2\", \"createindex_statement$ebnf$3\", \"createindex_statement$ebnf$4\", (lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"table_ref\", \"createindex_statement$ebnf$5\", \"lparen\", \"createindex_expressions\", \"rparen\", \"createindex_statement$ebnf$6\", \"createindex_statement$ebnf$7\", \"createindex_statement$ebnf$8\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'create index',\n                ...x[1] && { unique: true },\n                ...x[3] && { concurrently: true },\n                ...x[4] && { ifNotExists: true },\n                ...x[5] && { indexName: asName(x[5]) },\n                table: x[7],\n                ...x[8] && { using: asName(x[8]) },\n                expressions: x[10],\n                ...x[12] && { with: x[12] },\n                ...x[13] && { tablespace: unwrap(x[13]) },\n                ...x[14] && { where: unwrap(x[14]) },\n            }) },\n        { \"name\": \"createindex_expressions$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createindex_expressions$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"createindex_expression\"], \"postprocess\": last },\n        { \"name\": \"createindex_expressions$ebnf$1\", \"symbols\": [\"createindex_expressions$ebnf$1\", \"createindex_expressions$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createindex_expressions\", \"symbols\": [\"createindex_expression\", \"createindex_expressions$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"createindex_expression$subexpression$1\", \"symbols\": [\"expr_basic\"] },\n        { \"name\": \"createindex_expression$subexpression$1\", \"symbols\": [\"expr_paren\"] },\n        { \"name\": \"createindex_expression$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_collate\") ? { type: \"kw_collate\" } : kw_collate), \"qualified_name\"], \"postprocess\": last },\n        { \"name\": \"createindex_expression$ebnf$1\", \"symbols\": [\"createindex_expression$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createindex_expression$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_expression$ebnf$2\", \"symbols\": [\"qualified_name\"], \"postprocess\": id },\n        { \"name\": \"createindex_expression$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_expression$ebnf$3$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_asc\") ? { type: \"kw_asc\" } : kw_asc)] },\n        { \"name\": \"createindex_expression$ebnf$3$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_desc\") ? { type: \"kw_desc\" } : kw_desc)] },\n        { \"name\": \"createindex_expression$ebnf$3\", \"symbols\": [\"createindex_expression$ebnf$3$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createindex_expression$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_expression$ebnf$4$subexpression$1$subexpression$1\", \"symbols\": [\"kw_first\"] },\n        { \"name\": \"createindex_expression$ebnf$4$subexpression$1$subexpression$1\", \"symbols\": [\"kw_last\"] },\n        { \"name\": \"createindex_expression$ebnf$4$subexpression$1\", \"symbols\": [\"kw_nulls\", \"createindex_expression$ebnf$4$subexpression$1$subexpression$1\"], \"postprocess\": last },\n        { \"name\": \"createindex_expression$ebnf$4\", \"symbols\": [\"createindex_expression$ebnf$4$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createindex_expression$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createindex_expression\", \"symbols\": [\"createindex_expression$subexpression$1\", \"createindex_expression$ebnf$1\", \"createindex_expression$ebnf$2\", \"createindex_expression$ebnf$3\", \"createindex_expression$ebnf$4\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                expression: unwrap(x[0]),\n                ...x[1] && { collate: unwrap(x[1]) },\n                ...x[2] && { opclass: unwrap(x[2]) },\n                ...x[3] && { order: unwrap(x[3]).value },\n                ...x[4] && { nulls: unwrap(x[4]) },\n            }) },\n        { \"name\": \"createindex_predicate\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_where\") ? { type: \"kw_where\" } : kw_where), \"expr\"], \"postprocess\": last },\n        { \"name\": \"createindex_with$macrocall$2\", \"symbols\": [\"createindex_with_item\"] },\n        { \"name\": \"createindex_with$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createindex_with$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"createindex_with$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"createindex_with$macrocall$1$ebnf$1\", \"symbols\": [\"createindex_with$macrocall$1$ebnf$1\", \"createindex_with$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createindex_with$macrocall$1\", \"symbols\": [\"createindex_with$macrocall$2\", \"createindex_with$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"createindex_with\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"lparen\", \"createindex_with$macrocall$1\", \"rparen\"], \"postprocess\": get(2) },\n        { \"name\": \"createindex_with_item$subexpression$1\", \"symbols\": [\"string\"] },\n        { \"name\": \"createindex_with_item$subexpression$1\", \"symbols\": [\"int\"] },\n        { \"name\": \"createindex_with_item\", \"symbols\": [\"ident\", (lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq), \"createindex_with_item$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { parameter: toStr(x[0]), value: unwrap(x[2]).toString() }) },\n        { \"name\": \"createindex_tblspace\", \"symbols\": [\"kw_tablespace\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"createextension_statement$ebnf$1\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"createextension_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createextension_statement$ebnf$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with)], \"postprocess\": id },\n        { \"name\": \"createextension_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createextension_statement$ebnf$3$subexpression$1\", \"symbols\": [\"kw_schema\", \"word\"], \"postprocess\": last },\n        { \"name\": \"createextension_statement$ebnf$3\", \"symbols\": [\"createextension_statement$ebnf$3$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createextension_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createextension_statement$ebnf$4$subexpression$1\", \"symbols\": [\"kw_version\", \"string\"], \"postprocess\": last },\n        { \"name\": \"createextension_statement$ebnf$4\", \"symbols\": [\"createextension_statement$ebnf$4$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createextension_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createextension_statement$ebnf$5$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from), \"string\"], \"postprocess\": last },\n        { \"name\": \"createextension_statement$ebnf$5\", \"symbols\": [\"createextension_statement$ebnf$5$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"createextension_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createextension_statement\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"kw_extension\", \"createextension_statement$ebnf$1\", \"word\", \"createextension_statement$ebnf$2\", \"createextension_statement$ebnf$3\", \"createextension_statement$ebnf$4\", \"createextension_statement$ebnf$5\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'create extension',\n                ...!!x[2] ? { ifNotExists: true } : {},\n                extension: asName(x[3]),\n                ...!!x[5] ? { schema: asName(x[5]) } : {},\n                ...!!x[6] ? { version: asLit(x[6]) } : {},\n                ...!!x[7] ? { from: asLit(x[7]) } : {},\n            }) },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_start_transaction\"] },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_commit\"] },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_rollback\"] },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_tablespace\"] },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_set\"] },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_show\"] },\n        { \"name\": \"simplestatements_all\", \"symbols\": [\"simplestatements_begin\"] },\n        { \"name\": \"simplestatements_start_transaction$subexpression$1\", \"symbols\": [\"kw_start\", \"kw_transaction\"] },\n        { \"name\": \"simplestatements_start_transaction\", \"symbols\": [\"simplestatements_start_transaction$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'start transaction' }) },\n        { \"name\": \"simplestatements_commit\", \"symbols\": [\"kw_commit\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'commit' }) },\n        { \"name\": \"simplestatements_rollback\", \"symbols\": [\"kw_rollback\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'rollback' }) },\n        { \"name\": \"simplestatements_tablespace\", \"symbols\": [\"kw_tablespace\", \"word\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'tablespace',\n                tablespace: asName(x[1]),\n            }) },\n        { \"name\": \"simplestatements_set$subexpression$1\", \"symbols\": [\"simplestatements_set_simple\"] },\n        { \"name\": \"simplestatements_set$subexpression$1\", \"symbols\": [\"simplestatements_set_timezone\"] },\n        { \"name\": \"simplestatements_set$subexpression$1\", \"symbols\": [\"simplestatements_set_names\"] },\n        { \"name\": \"simplestatements_set\", \"symbols\": [\"kw_set\", \"simplestatements_set$subexpression$1\"], \"postprocess\": last },\n        { \"name\": \"simplestatements_set_timezone\", \"symbols\": [\"kw_time\", \"kw_zone\", \"simplestatements_set_timezone_val\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'set timezone', to: x[2] }) },\n        { \"name\": \"simplestatements_set_timezone_val$subexpression$1\", \"symbols\": [\"string\"] },\n        { \"name\": \"simplestatements_set_timezone_val$subexpression$1\", \"symbols\": [\"int\"] },\n        { \"name\": \"simplestatements_set_timezone_val\", \"symbols\": [\"simplestatements_set_timezone_val$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'value', value: unwrap(x[0]) }) },\n        { \"name\": \"simplestatements_set_timezone_val\", \"symbols\": [\"kw_local\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'local' }) },\n        { \"name\": \"simplestatements_set_timezone_val\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'default' }) },\n        { \"name\": \"simplestatements_set_timezone_val\", \"symbols\": [\"kw_interval\", \"string\", \"kw_hour\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"kw_minute\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'interval', value: (0, lexer_2.unbox)(x[1]) }) },\n        { \"name\": \"simplestatements_set_names\", \"symbols\": [\"kw_names\", \"simplestatements_set_names_val\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'set names', to: x[1] }) },\n        { \"name\": \"simplestatements_set_names_val$subexpression$1\", \"symbols\": [\"string\"] },\n        { \"name\": \"simplestatements_set_names_val\", \"symbols\": [\"simplestatements_set_names_val$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'value', value: unwrap(x[0]) }) },\n        { \"name\": \"simplestatements_set_simple$ebnf$1$subexpression$1\", \"symbols\": [\"kw_local\"] },\n        { \"name\": \"simplestatements_set_simple$ebnf$1$subexpression$1\", \"symbols\": [\"kw_session\"] },\n        { \"name\": \"simplestatements_set_simple$ebnf$1\", \"symbols\": [\"simplestatements_set_simple$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"simplestatements_set_simple$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"simplestatements_set_simple$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq)] },\n        { \"name\": \"simplestatements_set_simple$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to)] },\n        { \"name\": \"simplestatements_set_simple\", \"symbols\": [\"simplestatements_set_simple$ebnf$1\", \"ident\", \"simplestatements_set_simple$subexpression$1\", \"simplestatements_set_val\"], \"postprocess\": x => {\n                var _a;\n                return (0, lexer_2.track)(x, {\n                    type: 'set',\n                    variable: asName(x[1]),\n                    scope: (_a = unwrap(x[0])) === null || _a === void 0 ? void 0 : _a.toLowerCase(),\n                    set: (0, lexer_2.unbox)(x[3]),\n                });\n            } },\n        { \"name\": \"simplestatements_set_val\", \"symbols\": [\"simplestatements_set_val_raw\"], \"postprocess\": unwrap },\n        { \"name\": \"simplestatements_set_val\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'default' }) },\n        { \"name\": \"simplestatements_set_val$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"simplestatements_set_val_raw\"] },\n        { \"name\": \"simplestatements_set_val$ebnf$1\", \"symbols\": [\"simplestatements_set_val$ebnf$1$subexpression$1\"] },\n        { \"name\": \"simplestatements_set_val$ebnf$1$subexpression$2\", \"symbols\": [\"comma\", \"simplestatements_set_val_raw\"] },\n        { \"name\": \"simplestatements_set_val$ebnf$1\", \"symbols\": [\"simplestatements_set_val$ebnf$1\", \"simplestatements_set_val$ebnf$1$subexpression$2\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"simplestatements_set_val\", \"symbols\": [\"simplestatements_set_val_raw\", \"simplestatements_set_val$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'list',\n                values: [x[0], ...(x[1] || [])]\n            }) },\n        { \"name\": \"simplestatements_set_val_raw$subexpression$1\", \"symbols\": [\"string\"] },\n        { \"name\": \"simplestatements_set_val_raw$subexpression$1\", \"symbols\": [\"int\"] },\n        { \"name\": \"simplestatements_set_val_raw\", \"symbols\": [\"simplestatements_set_val_raw$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'value', value: unwrap(x) }) },\n        { \"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)] },\n        { \"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on)] },\n        { \"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_true\") ? { type: \"kw_true\" } : kw_true)] },\n        { \"name\": \"simplestatements_set_val_raw$subexpression$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_false\") ? { type: \"kw_false\" } : kw_false)] },\n        { \"name\": \"simplestatements_set_val_raw\", \"symbols\": [\"simplestatements_set_val_raw$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'identifier', name: unwrap(x).value }) },\n        { \"name\": \"simplestatements_set_val_raw\", \"symbols\": [(lexer_1.lexerAny.has(\"quoted_word\") ? { type: \"quoted_word\" } : quoted_word)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'identifier', doubleQuoted: true, name: unwrap(x).value }) },\n        { \"name\": \"simplestatements_show\", \"symbols\": [\"kw_show\", \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'show', variable: asName(x[1]) }) },\n        { \"name\": \"create_schema$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"kw_schema\"] },\n        { \"name\": \"create_schema$ebnf$1\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"create_schema$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_schema\", \"symbols\": [\"create_schema$subexpression$1\", \"create_schema$ebnf$1\", \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'create schema',\n                name: asName(x[2]),\n                ...!!x[1] ? { ifNotExists: true } : {},\n            }) },\n        { \"name\": \"raise_statement$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": anyKw('debug', 'log', 'info', 'notice', 'warning', 'exception') },\n        { \"name\": \"raise_statement$ebnf$1\", \"symbols\": [\"raise_statement$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"raise_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"raise_statement$ebnf$2$subexpression$1\", \"symbols\": [\"comma\", \"expr_list_raw\"], \"postprocess\": last },\n        { \"name\": \"raise_statement$ebnf$2\", \"symbols\": [\"raise_statement$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"raise_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"raise_statement$ebnf$3\", \"symbols\": [\"raise_using\"], \"postprocess\": id },\n        { \"name\": \"raise_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"raise_statement\", \"symbols\": [\"kw_raise\", \"raise_statement$ebnf$1\", \"string\", \"raise_statement$ebnf$2\", \"raise_statement$ebnf$3\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'raise',\n                format: toStr(x[2]),\n                ...x[1] && { level: toStr(x[1]) },\n                ...x[3] && x[3].length && { formatExprs: x[3] },\n                ...x[4] && x[4].length && { using: x[4] },\n            }) },\n        { \"name\": \"raise_using$macrocall$2\", \"symbols\": [\"raise_using_one\"] },\n        { \"name\": \"raise_using$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"raise_using$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"raise_using$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"raise_using$macrocall$1$ebnf$1\", \"symbols\": [\"raise_using$macrocall$1$ebnf$1\", \"raise_using$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"raise_using$macrocall$1\", \"symbols\": [\"raise_using$macrocall$2\", \"raise_using$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"raise_using\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_using\") ? { type: \"kw_using\" } : kw_using), \"raise_using$macrocall$1\"], \"postprocess\": last },\n        { \"name\": \"raise_using_one\", \"symbols\": [\"raise_using_what\", (lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq), \"expr\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: toStr(x[0]),\n                value: x[2],\n            }) },\n        { \"name\": \"raise_using_what\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table)] },\n        { \"name\": \"raise_using_what\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": anyKw('message', 'detail', 'hint', 'errcode', 'column', 'constraint', 'datatype', 'schema') },\n        { \"name\": \"comment_statement\", \"symbols\": [\"kw_comment\", (lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"comment_what\", (lexer_1.lexerAny.has(\"kw_is\") ? { type: \"kw_is\" } : kw_is), \"string\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'comment',\n                comment: (0, lexer_2.unbox)(last(x)),\n                on: unwrap(x[2]),\n            }) },\n        { \"name\": \"comment_what\", \"symbols\": [\"comment_what_col\"] },\n        { \"name\": \"comment_what\", \"symbols\": [\"comment_what_nm\"] },\n        { \"name\": \"comment_what_nm$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table)] },\n        { \"name\": \"comment_what_nm$subexpression$1\", \"symbols\": [\"kw_materialized\", \"kw_view\"] },\n        { \"name\": \"comment_what_nm$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"word\") ? { type: \"word\" } : word)], \"postprocess\": anyKw('database', 'index', 'trigger', 'type', 'view') },\n        { \"name\": \"comment_what_nm\", \"symbols\": [\"comment_what_nm$subexpression$1\", \"qualified_name\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: toStr(x[0]),\n                name: x[1],\n            }) },\n        { \"name\": \"comment_what_col\", \"symbols\": [\"kw_column\", \"qcolumn\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'column',\n                column: last(x),\n            }) },\n        { \"name\": \"simplestatements_begin$ebnf$1$subexpression$1\", \"symbols\": [\"kw_transaction\"] },\n        { \"name\": \"simplestatements_begin$ebnf$1$subexpression$1\", \"symbols\": [\"kw_work\"] },\n        { \"name\": \"simplestatements_begin$ebnf$1\", \"symbols\": [\"simplestatements_begin$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"simplestatements_begin$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"simplestatements_begin$ebnf$2\", \"symbols\": [] },\n        { \"name\": \"simplestatements_begin$ebnf$2$subexpression$1\", \"symbols\": [\"simplestatements_begin_isol\"] },\n        { \"name\": \"simplestatements_begin$ebnf$2$subexpression$1\", \"symbols\": [\"simplestatements_begin_writ\"] },\n        { \"name\": \"simplestatements_begin$ebnf$2$subexpression$1\", \"symbols\": [\"simplestatements_begin_def\"] },\n        { \"name\": \"simplestatements_begin$ebnf$2\", \"symbols\": [\"simplestatements_begin$ebnf$2\", \"simplestatements_begin$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"simplestatements_begin\", \"symbols\": [\"kw_begin\", \"simplestatements_begin$ebnf$1\", \"simplestatements_begin$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'begin',\n                ...x[2].reduce((a, b) => ({ ...unwrap(a), ...unwrap(b) }), {}),\n            })\n        },\n        { \"name\": \"simplestatements_begin_isol$subexpression$1\", \"symbols\": [\"kw_isolation\", \"kw_level\"] },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"kw_serializable\"] },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('repeatable') },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"simplestatements_begin_isol$subexpression$2$subexpression$1\", \"kw_read\"] },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2$subexpression$2\", \"symbols\": [\"word\"], \"postprocess\": kw('committed') },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"kw_read\", \"simplestatements_begin_isol$subexpression$2$subexpression$2\"] },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2$subexpression$3\", \"symbols\": [\"word\"], \"postprocess\": kw('uncommitted') },\n        { \"name\": \"simplestatements_begin_isol$subexpression$2\", \"symbols\": [\"kw_read\", \"simplestatements_begin_isol$subexpression$2$subexpression$3\"] },\n        { \"name\": \"simplestatements_begin_isol\", \"symbols\": [\"simplestatements_begin_isol$subexpression$1\", \"simplestatements_begin_isol$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                isolationLevel: toStr(x[1], ' '),\n            }) },\n        { \"name\": \"simplestatements_begin_writ$subexpression$1\", \"symbols\": [\"kw_read\", \"kw_write\"] },\n        { \"name\": \"simplestatements_begin_writ$subexpression$1\", \"symbols\": [\"kw_read\", (lexer_1.lexerAny.has(\"kw_only\") ? { type: \"kw_only\" } : kw_only)] },\n        { \"name\": \"simplestatements_begin_writ\", \"symbols\": [\"simplestatements_begin_writ$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                writeable: toStr(x, ' '),\n            }) },\n        { \"name\": \"simplestatements_begin_def$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)], \"postprocess\": id },\n        { \"name\": \"simplestatements_begin_def$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"simplestatements_begin_def\", \"symbols\": [\"simplestatements_begin_def$ebnf$1\", (lexer_1.lexerAny.has(\"kw_deferrable\") ? { type: \"kw_deferrable\" } : kw_deferrable)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                deferrable: !x[0]\n            }) },\n        { \"name\": \"insert_statement$subexpression$1\", \"symbols\": [\"kw_insert\", (lexer_1.lexerAny.has(\"kw_into\") ? { type: \"kw_into\" } : kw_into)] },\n        { \"name\": \"insert_statement$ebnf$1\", \"symbols\": [\"collist_paren\"], \"postprocess\": id },\n        { \"name\": \"insert_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_statement$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [\"kw_system\"] },\n        { \"name\": \"insert_statement$ebnf$2$subexpression$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_user\") ? { type: \"kw_user\" } : kw_user)] },\n        { \"name\": \"insert_statement$ebnf$2$subexpression$1\", \"symbols\": [\"kw_overriding\", \"insert_statement$ebnf$2$subexpression$1$subexpression$1\", \"kw_value\"], \"postprocess\": get(1) },\n        { \"name\": \"insert_statement$ebnf$2\", \"symbols\": [\"insert_statement$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"insert_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_statement$ebnf$3$subexpression$1\", \"symbols\": [\"selection\"] },\n        { \"name\": \"insert_statement$ebnf$3$subexpression$1\", \"symbols\": [\"selection_paren\"] },\n        { \"name\": \"insert_statement$ebnf$3\", \"symbols\": [\"insert_statement$ebnf$3$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"insert_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_statement$ebnf$4$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), \"kw_conflict\", \"insert_on_conflict\"], \"postprocess\": last },\n        { \"name\": \"insert_statement$ebnf$4\", \"symbols\": [\"insert_statement$ebnf$4$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"insert_statement$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_statement$ebnf$5$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_returning\") ? { type: \"kw_returning\" } : kw_returning), \"select_expr_list_aliased\"], \"postprocess\": last },\n        { \"name\": \"insert_statement$ebnf$5\", \"symbols\": [\"insert_statement$ebnf$5$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"insert_statement$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_statement\", \"symbols\": [\"insert_statement$subexpression$1\", \"table_ref_aliased\", \"insert_statement$ebnf$1\", \"insert_statement$ebnf$2\", \"insert_statement$ebnf$3\", \"insert_statement$ebnf$4\", \"insert_statement$ebnf$5\"], \"postprocess\": x => {\n                const columns = x[2] && x[2].map(asName);\n                const overriding = toStr(x[3]);\n                const insert = unwrap(x[4]);\n                const onConflict = x[5];\n                const returning = x[6];\n                return (0, lexer_2.track)(x, {\n                    type: 'insert',\n                    into: unwrap(x[1]),\n                    insert,\n                    ...overriding && { overriding },\n                    ...columns && { columns },\n                    ...returning && { returning },\n                    ...onConflict && { onConflict },\n                });\n            } },\n        { \"name\": \"insert_values$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"insert_values$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"insert_value\"], \"postprocess\": last },\n        { \"name\": \"insert_values$ebnf$1\", \"symbols\": [\"insert_values$ebnf$1\", \"insert_values$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"insert_values\", \"symbols\": [\"insert_value\", \"insert_values$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"insert_value\", \"symbols\": [\"lparen\", \"insert_expr_list_raw\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"insert_expr_list_raw$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"insert_expr_list_raw$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"expr_or_select\"], \"postprocess\": last },\n        { \"name\": \"insert_expr_list_raw$ebnf$1\", \"symbols\": [\"insert_expr_list_raw$ebnf$1\", \"insert_expr_list_raw$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"insert_expr_list_raw\", \"symbols\": [\"expr_or_select\", \"insert_expr_list_raw$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"insert_on_conflict$ebnf$1\", \"symbols\": [\"insert_on_conflict_what\"], \"postprocess\": id },\n        { \"name\": \"insert_on_conflict$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_on_conflict\", \"symbols\": [\"insert_on_conflict$ebnf$1\", \"insert_on_conflict_do\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                ...x[0] ? { on: unwrap(x[0]) } : {},\n                ...x[1],\n            }) },\n        { \"name\": \"insert_on_conflict_what\", \"symbols\": [\"lparen\", \"expr_list_raw\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'on expr',\n                exprs: x[1],\n            }) },\n        { \"name\": \"insert_on_conflict_what\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), (lexer_1.lexerAny.has(\"kw_constraint\") ? { type: \"kw_constraint\" } : kw_constraint), \"qname\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'on constraint',\n                constraint: last(x),\n            }) },\n        { \"name\": \"insert_on_conflict_do\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_do\") ? { type: \"kw_do\" } : kw_do), \"kw_nothing\"], \"postprocess\": x => ({ do: 'do nothing' }) },\n        { \"name\": \"insert_on_conflict_do$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_do\") ? { type: \"kw_do\" } : kw_do), \"kw_update\", \"kw_set\"] },\n        { \"name\": \"insert_on_conflict_do$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_where\") ? { type: \"kw_where\" } : kw_where), \"expr\"], \"postprocess\": last },\n        { \"name\": \"insert_on_conflict_do$ebnf$1\", \"symbols\": [\"insert_on_conflict_do$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"insert_on_conflict_do$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"insert_on_conflict_do\", \"symbols\": [\"insert_on_conflict_do$subexpression$1\", \"update_set_list\", \"insert_on_conflict_do$ebnf$1\"], \"postprocess\": x => ({\n                do: { sets: x[1] },\n                ...x[2] && { where: x[2] },\n            }) },\n        { \"name\": \"update_statement$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from), \"select_from_subject\"], \"postprocess\": last },\n        { \"name\": \"update_statement$ebnf$1\", \"symbols\": [\"update_statement$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"update_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"update_statement$ebnf$2\", \"symbols\": [\"select_where\"], \"postprocess\": id },\n        { \"name\": \"update_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"update_statement$ebnf$3$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_returning\") ? { type: \"kw_returning\" } : kw_returning), \"select_expr_list_aliased\"], \"postprocess\": last },\n        { \"name\": \"update_statement$ebnf$3\", \"symbols\": [\"update_statement$ebnf$3$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"update_statement$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"update_statement\", \"symbols\": [\"kw_update\", \"table_ref_aliased\", \"kw_set\", \"update_set_list\", \"update_statement$ebnf$1\", \"update_statement$ebnf$2\", \"update_statement$ebnf$3\"], \"postprocess\": x => {\n                const from = unwrap(x[4]);\n                const where = unwrap(x[5]);\n                const returning = x[6];\n                return (0, lexer_2.track)(x, {\n                    type: 'update',\n                    table: unwrap(x[1]),\n                    sets: x[3],\n                    ...where ? { where } : {},\n                    ...from ? { from } : {},\n                    ...returning ? { returning } : {},\n                });\n            } },\n        { \"name\": \"update_set_list$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"update_set_list$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"update_set\"], \"postprocess\": last },\n        { \"name\": \"update_set_list$ebnf$1\", \"symbols\": [\"update_set_list$ebnf$1\", \"update_set_list$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"update_set_list\", \"symbols\": [\"update_set\", \"update_set_list$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                const ret = [];\n                for (const _t of [head, ...(tail || [])]) {\n                    const t = unwrap(_t);\n                    if (Array.isArray(t)) {\n                        ret.push(...t);\n                    }\n                    else {\n                        ret.push(t);\n                    }\n                }\n                return ret;\n            } },\n        { \"name\": \"update_set\", \"symbols\": [\"update_set_one\"] },\n        { \"name\": \"update_set\", \"symbols\": [\"update_set_multiple\"] },\n        { \"name\": \"update_set_one\", \"symbols\": [\"ident\", (lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq), \"expr\"], \"postprocess\": x => (0, lexer_2.box)(x, {\n                column: asName(x[0]),\n                value: unwrap(x[2]),\n            }) },\n        { \"name\": \"update_set_multiple$subexpression$1\", \"symbols\": [\"lparen\", \"expr_list_raw\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"update_set_multiple\", \"symbols\": [\"collist_paren\", (lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq), \"update_set_multiple$subexpression$1\"], \"postprocess\": x => {\n                const cols = x[0];\n                const exprs = x[2];\n                if (cols.length !== exprs.length) {\n                    throw new Error('number of columns does not match number of values');\n                }\n                return (0, lexer_2.box)(x, cols.map((x, i) => ({\n                    column: asName(x),\n                    value: unwrap(exprs[i]),\n                })));\n            } },\n        { \"name\": \"altertable_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id },\n        { \"name\": \"altertable_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_statement$ebnf$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_only\") ? { type: \"kw_only\" } : kw_only)], \"postprocess\": id },\n        { \"name\": \"altertable_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_statement\", \"symbols\": [\"kw_alter\", (lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table), \"altertable_statement$ebnf$1\", \"altertable_statement$ebnf$2\", \"table_ref\", \"altertable_actions\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'alter table',\n                ...x[2] ? { ifExists: true } : {},\n                ...x[3] ? { only: true } : {},\n                table: unwrap(x[4]),\n                changes: (0, lexer_2.unbox)(x[5]).map(unwrap),\n            }) },\n        { \"name\": \"altertable_actions$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"altertable_actions$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"altertable_action\"], \"postprocess\": last },\n        { \"name\": \"altertable_actions$ebnf$1\", \"symbols\": [\"altertable_actions$ebnf$1\", \"altertable_actions$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"altertable_actions\", \"symbols\": [\"altertable_action\", \"altertable_actions$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_rename_table\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_rename_column\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_rename_constraint\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_add_column\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_drop_column\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_alter_column\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_add_constraint\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_drop_constraint\"] },\n        { \"name\": \"altertable_action\", \"symbols\": [\"altertable_owner\"] },\n        { \"name\": \"altertable_rename_table\", \"symbols\": [\"kw_rename\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"word\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'rename',\n                to: asName(last(x)),\n            }) },\n        { \"name\": \"altertable_rename_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id },\n        { \"name\": \"altertable_rename_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_rename_column\", \"symbols\": [\"kw_rename\", \"altertable_rename_column$ebnf$1\", \"ident\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'rename column',\n                column: asName(x[2]),\n                to: asName(last(x)),\n            }) },\n        { \"name\": \"altertable_rename_constraint\", \"symbols\": [\"kw_rename\", (lexer_1.lexerAny.has(\"kw_constraint\") ? { type: \"kw_constraint\" } : kw_constraint), \"ident\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'rename constraint',\n                constraint: asName(x[2]),\n                to: asName(last(x)),\n            }) },\n        { \"name\": \"altertable_add_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id },\n        { \"name\": \"altertable_add_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_add_column$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"altertable_add_column$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_add_column\", \"symbols\": [\"kw_add\", \"altertable_add_column$ebnf$1\", \"altertable_add_column$ebnf$2\", \"createtable_column\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'add column',\n                ...x[2] ? { ifNotExists: true } : {},\n                column: unwrap(x[3]),\n            }) },\n        { \"name\": \"altertable_drop_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id },\n        { \"name\": \"altertable_drop_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_drop_column$ebnf$2\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id },\n        { \"name\": \"altertable_drop_column$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_drop_column$ebnf$3$subexpression$1\", \"symbols\": [\"kw_restrict\"] },\n        { \"name\": \"altertable_drop_column$ebnf$3$subexpression$1\", \"symbols\": [\"kw_cascade\"] },\n        { \"name\": \"altertable_drop_column$ebnf$3\", \"symbols\": [\"altertable_drop_column$ebnf$3$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"altertable_drop_column$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_drop_column\", \"symbols\": [\"kw_drop\", \"altertable_drop_column$ebnf$1\", \"altertable_drop_column$ebnf$2\", \"ident\", \"altertable_drop_column$ebnf$3\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'drop column',\n                ...x[2] ? { ifExists: true } : {},\n                column: asName(x[3]),\n                ...x[4] ? { behaviour: toStr(x[4], ' ') } : {},\n            }) },\n        { \"name\": \"altertable_alter_column$ebnf$1\", \"symbols\": [\"kw_column\"], \"postprocess\": id },\n        { \"name\": \"altertable_alter_column$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_alter_column\", \"symbols\": [\"kw_alter\", \"altertable_alter_column$ebnf$1\", \"ident\", \"altercol\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'alter column',\n                column: asName(x[2]),\n                alter: unwrap(x[3])\n            }) },\n        { \"name\": \"altercol$ebnf$1$subexpression$1\", \"symbols\": [\"kw_set\", \"kw_data\"] },\n        { \"name\": \"altercol$ebnf$1\", \"symbols\": [\"altercol$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"altercol$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altercol\", \"symbols\": [\"altercol$ebnf$1\", \"kw_type\", \"data_type\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'set type', dataType: unwrap(last(x)) }) },\n        { \"name\": \"altercol\", \"symbols\": [\"kw_set\", (lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default), \"expr\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'set default', default: unwrap(last(x)) }) },\n        { \"name\": \"altercol\", \"symbols\": [\"kw_drop\", (lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'drop default' }) },\n        { \"name\": \"altercol$subexpression$1\", \"symbols\": [\"kw_set\"] },\n        { \"name\": \"altercol$subexpression$1\", \"symbols\": [\"kw_drop\"] },\n        { \"name\": \"altercol\", \"symbols\": [\"altercol$subexpression$1\", \"kw_not_null\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: toStr(x, ' ') }) },\n        { \"name\": \"altercol\", \"symbols\": [\"altercol_generated_add\"], \"postprocess\": unwrap },\n        { \"name\": \"altertable_add_constraint\", \"symbols\": [\"kw_add\", \"createtable_constraint\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'add constraint',\n                constraint: unwrap(last(x)),\n            }) },\n        { \"name\": \"altertable_drop_constraint$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id },\n        { \"name\": \"altertable_drop_constraint$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_drop_constraint$ebnf$2$subexpression$1\", \"symbols\": [\"kw_restrict\"] },\n        { \"name\": \"altertable_drop_constraint$ebnf$2$subexpression$1\", \"symbols\": [\"kw_cascade\"] },\n        { \"name\": \"altertable_drop_constraint$ebnf$2\", \"symbols\": [\"altertable_drop_constraint$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"altertable_drop_constraint$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altertable_drop_constraint\", \"symbols\": [\"kw_drop\", (lexer_1.lexerAny.has(\"kw_constraint\") ? { type: \"kw_constraint\" } : kw_constraint), \"altertable_drop_constraint$ebnf$1\", \"ident\", \"altertable_drop_constraint$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'drop constraint',\n                ...x[2] ? { ifExists: true } : {},\n                constraint: asName(x[3]),\n                ...x[4] ? { behaviour: toStr(x[4], ' ') } : {},\n            }) },\n        { \"name\": \"altertable_owner\", \"symbols\": [\"kw_owner\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'owner',\n                to: asName(last(x)),\n            }) },\n        { \"name\": \"altercol_generated_add\", \"symbols\": [\"kw_add\", \"altercol_generated\"], \"postprocess\": last },\n        { \"name\": \"altercol_generated$ebnf$1$subexpression$1\", \"symbols\": [\"kw_always\"] },\n        { \"name\": \"altercol_generated$ebnf$1$subexpression$1\", \"symbols\": [\"kw_by\", (lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default)] },\n        { \"name\": \"altercol_generated$ebnf$1\", \"symbols\": [\"altercol_generated$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"altercol_generated$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altercol_generated$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"kw_identity\"] },\n        { \"name\": \"altercol_generated$ebnf$2$subexpression$1\", \"symbols\": [\"lparen\", \"altercol_generated_seq\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"altercol_generated$ebnf$2\", \"symbols\": [\"altercol_generated$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"altercol_generated$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altercol_generated\", \"symbols\": [\"kw_generated\", \"altercol_generated$ebnf$1\", \"altercol_generated$subexpression$1\", \"altercol_generated$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'add generated',\n                ...x[1] && { always: toStr(x[1], ' ') },\n                ...x[3] && { sequence: unwrap(x[3]) },\n            }) },\n        { \"name\": \"altercol_generated_seq$ebnf$1$subexpression$1\", \"symbols\": [\"kw_sequence\", \"kw_name\", \"qualified_name\"] },\n        { \"name\": \"altercol_generated_seq$ebnf$1\", \"symbols\": [\"altercol_generated_seq$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"altercol_generated_seq$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"altercol_generated_seq$ebnf$2\", \"symbols\": [] },\n        { \"name\": \"altercol_generated_seq$ebnf$2\", \"symbols\": [\"altercol_generated_seq$ebnf$2\", \"create_sequence_option\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"altercol_generated_seq\", \"symbols\": [\"altercol_generated_seq$ebnf$1\", \"altercol_generated_seq$ebnf$2\"], \"postprocess\": x => {\n                const ret = {\n                    ...x[0] && { name: unwrap(last(x[0])) },\n                };\n                setSeqOpts(ret, x[1]);\n                return (0, lexer_2.track)(x, ret);\n            } },\n        { \"name\": \"alterindex_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id },\n        { \"name\": \"alterindex_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"alterindex_statement\", \"symbols\": [\"kw_alter\", \"kw_index\", \"alterindex_statement$ebnf$1\", \"table_ref\", \"alterindex_action\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'alter index',\n                ...x[2] ? { ifExists: true } : {},\n                index: unwrap(x[3]),\n                change: unwrap(x[4]),\n            }) },\n        { \"name\": \"alterindex_action\", \"symbols\": [\"alterindex_rename\"] },\n        { \"name\": \"alterindex_action\", \"symbols\": [\"alterindex_set_tablespace\"] },\n        { \"name\": \"alterindex_rename\", \"symbols\": [\"kw_rename\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"word\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'rename',\n                to: asName(last(x)),\n            }) },\n        { \"name\": \"alterindex_set_tablespace\", \"symbols\": [\"kw_set\", \"kw_tablespace\", \"word\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'set tablespace',\n                tablespace: asName(last(x)),\n            }) },\n        { \"name\": \"delete_statement\", \"symbols\": [\"delete_delete\"] },\n        { \"name\": \"delete_statement\", \"symbols\": [\"delete_truncate\"] },\n        { \"name\": \"delete_delete$subexpression$1\", \"symbols\": [\"kw_delete\", (lexer_1.lexerAny.has(\"kw_from\") ? { type: \"kw_from\" } : kw_from)] },\n        { \"name\": \"delete_delete$ebnf$1\", \"symbols\": [\"select_where\"], \"postprocess\": id },\n        { \"name\": \"delete_delete$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"delete_delete$ebnf$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_returning\") ? { type: \"kw_returning\" } : kw_returning), \"select_expr_list_aliased\"], \"postprocess\": last },\n        { \"name\": \"delete_delete$ebnf$2\", \"symbols\": [\"delete_delete$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"delete_delete$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"delete_delete\", \"symbols\": [\"delete_delete$subexpression$1\", \"table_ref_aliased\", \"delete_delete$ebnf$1\", \"delete_delete$ebnf$2\"], \"postprocess\": x => {\n                const where = x[2];\n                const returning = x[3];\n                return (0, lexer_2.track)(x, {\n                    type: 'delete',\n                    from: unwrap(x[1]),\n                    ...where ? { where } : {},\n                    ...returning ? { returning } : {},\n                });\n            } },\n        { \"name\": \"delete_truncate$subexpression$1$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table)], \"postprocess\": id },\n        { \"name\": \"delete_truncate$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"delete_truncate$subexpression$1\", \"symbols\": [\"kw_truncate\", \"delete_truncate$subexpression$1$ebnf$1\"] },\n        { \"name\": \"delete_truncate$macrocall$2\", \"symbols\": [\"table_ref\"] },\n        { \"name\": \"delete_truncate$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"delete_truncate$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"delete_truncate$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"delete_truncate$macrocall$1$ebnf$1\", \"symbols\": [\"delete_truncate$macrocall$1$ebnf$1\", \"delete_truncate$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"delete_truncate$macrocall$1\", \"symbols\": [\"delete_truncate$macrocall$2\", \"delete_truncate$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"delete_truncate$ebnf$1$subexpression$1$subexpression$1\", \"symbols\": [\"kw_restart\"] },\n        { \"name\": \"delete_truncate$ebnf$1$subexpression$1$subexpression$1\", \"symbols\": [\"kw_continue\"] },\n        { \"name\": \"delete_truncate$ebnf$1$subexpression$1\", \"symbols\": [\"delete_truncate$ebnf$1$subexpression$1$subexpression$1\", \"kw_identity\"] },\n        { \"name\": \"delete_truncate$ebnf$1\", \"symbols\": [\"delete_truncate$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"delete_truncate$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"delete_truncate$ebnf$2$subexpression$1\", \"symbols\": [\"kw_restrict\"] },\n        { \"name\": \"delete_truncate$ebnf$2$subexpression$1\", \"symbols\": [\"kw_cascade\"] },\n        { \"name\": \"delete_truncate$ebnf$2\", \"symbols\": [\"delete_truncate$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"delete_truncate$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"delete_truncate\", \"symbols\": [\"delete_truncate$subexpression$1\", \"delete_truncate$macrocall$1\", \"delete_truncate$ebnf$1\", \"delete_truncate$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'truncate table',\n                tables: x[1],\n                ...x[2] && { identity: toStr(x[2][0]) },\n                ...x[3] && { cascade: toStr(x[3]) },\n            }) },\n        { \"name\": \"create_sequence_statement$ebnf$1$subexpression$1\", \"symbols\": [\"kw_temp\"] },\n        { \"name\": \"create_sequence_statement$ebnf$1$subexpression$1\", \"symbols\": [\"kw_temporary\"] },\n        { \"name\": \"create_sequence_statement$ebnf$1\", \"symbols\": [\"create_sequence_statement$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_sequence_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_sequence_statement$ebnf$2\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"create_sequence_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_sequence_statement$ebnf$3\", \"symbols\": [] },\n        { \"name\": \"create_sequence_statement$ebnf$3\", \"symbols\": [\"create_sequence_statement$ebnf$3\", \"create_sequence_option\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"create_sequence_statement\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"create_sequence_statement$ebnf$1\", \"kw_sequence\", \"create_sequence_statement$ebnf$2\", \"qualified_name\", \"create_sequence_statement$ebnf$3\"], \"postprocess\": x => {\n                const ret = {\n                    type: 'create sequence',\n                    ...x[1] && { temp: true },\n                    ...x[3] && { ifNotExists: true },\n                    name: unwrap(x[4]),\n                    options: {},\n                };\n                setSeqOpts(ret.options, x[5]);\n                return (0, lexer_2.track)(x, ret);\n            } },\n        { \"name\": \"create_sequence_option\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"data_type\"], \"postprocess\": x => (0, lexer_2.box)(x, ['as', x[1]]) },\n        { \"name\": \"create_sequence_option$ebnf$1\", \"symbols\": [\"kw_by\"], \"postprocess\": id },\n        { \"name\": \"create_sequence_option$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"kw_increment\", \"create_sequence_option$ebnf$1\", \"int\"], \"postprocess\": x => (0, lexer_2.box)(x, ['incrementBy', x[2]]) },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_minvalue\"], \"postprocess\": x => (0, lexer_2.box)(x, ['minValue', x[0]]) },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_maxvalue\"], \"postprocess\": x => (0, lexer_2.box)(x, ['maxValue', x[0]]) },\n        { \"name\": \"create_sequence_option$ebnf$2\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with)], \"postprocess\": id },\n        { \"name\": \"create_sequence_option$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"kw_start\", \"create_sequence_option$ebnf$2\", \"int\"], \"postprocess\": x => (0, lexer_2.box)(x, ['startWith', x[2]]) },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"kw_cache\", \"int\"], \"postprocess\": x => (0, lexer_2.box)(x, ['cache', x[1]]) },\n        { \"name\": \"create_sequence_option$ebnf$3\", \"symbols\": [\"kw_no\"], \"postprocess\": id },\n        { \"name\": \"create_sequence_option$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_option$ebnf$3\", \"kw_cycle\"], \"postprocess\": x => (0, lexer_2.box)(x, ['cycle', toStr(x, ' ')]) },\n        { \"name\": \"create_sequence_option\", \"symbols\": [\"create_sequence_owned_by\"], \"postprocess\": x => (0, lexer_2.box)(x, ['ownedBy', unwrap(x)]) },\n        { \"name\": \"create_sequence_minvalue\", \"symbols\": [\"kw_minvalue\", \"int\"], \"postprocess\": last },\n        { \"name\": \"create_sequence_minvalue\", \"symbols\": [\"kw_no\", \"kw_minvalue\"], \"postprocess\": x => (0, lexer_2.box)(x, 'no minvalue') },\n        { \"name\": \"create_sequence_maxvalue\", \"symbols\": [\"kw_maxvalue\", \"int\"], \"postprocess\": last },\n        { \"name\": \"create_sequence_maxvalue\", \"symbols\": [\"kw_no\", \"kw_maxvalue\"], \"postprocess\": x => (0, lexer_2.box)(x, 'no maxvalue') },\n        { \"name\": \"create_sequence_owned_by$subexpression$1\", \"symbols\": [\"kw_none\"] },\n        { \"name\": \"create_sequence_owned_by$subexpression$1\", \"symbols\": [\"qcolumn\"] },\n        { \"name\": \"create_sequence_owned_by\", \"symbols\": [\"kw_owned\", \"kw_by\", \"create_sequence_owned_by$subexpression$1\"], \"postprocess\": x => (0, lexer_2.box)(x, unwrap(last(x))) },\n        { \"name\": \"alter_sequence_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id },\n        { \"name\": \"alter_sequence_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"alter_sequence_statement\", \"symbols\": [\"kw_alter\", \"kw_sequence\", \"alter_sequence_statement$ebnf$1\", \"qualified_name\", \"alter_sequence_statement_body\"], \"postprocess\": x => {\n                const ret = {\n                    type: 'alter sequence',\n                    ...x[2] && { ifExists: true },\n                    name: unwrap(x[3]),\n                    change: x[4],\n                };\n                return (0, lexer_2.track)(x, ret);\n            } },\n        { \"name\": \"alter_sequence_statement_body$ebnf$1\", \"symbols\": [\"alter_sequence_option\"] },\n        { \"name\": \"alter_sequence_statement_body$ebnf$1\", \"symbols\": [\"alter_sequence_statement_body$ebnf$1\", \"alter_sequence_option\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"alter_sequence_statement_body\", \"symbols\": [\"alter_sequence_statement_body$ebnf$1\"], \"postprocess\": x => {\n                const ret = {\n                    type: 'set options',\n                };\n                setSeqOpts(ret, x[0]);\n                return (0, lexer_2.track)(x, ret);\n            } },\n        { \"name\": \"alter_sequence_statement_body$subexpression$1\", \"symbols\": [\"ident\"] },\n        { \"name\": \"alter_sequence_statement_body$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_session_user\") ? { type: \"kw_session_user\" } : kw_session_user)] },\n        { \"name\": \"alter_sequence_statement_body$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_current_user\") ? { type: \"kw_current_user\" } : kw_current_user)] },\n        { \"name\": \"alter_sequence_statement_body\", \"symbols\": [\"kw_owner\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"alter_sequence_statement_body$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'owner to', owner: asName(last(x)), }) },\n        { \"name\": \"alter_sequence_statement_body\", \"symbols\": [\"kw_rename\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'rename', newName: asName(last(x)) }) },\n        { \"name\": \"alter_sequence_statement_body\", \"symbols\": [\"kw_set\", \"kw_schema\", \"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'set schema', newSchema: asName(last(x)) }) },\n        { \"name\": \"alter_sequence_option\", \"symbols\": [\"create_sequence_option\"], \"postprocess\": unwrap },\n        { \"name\": \"alter_sequence_option$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with)], \"postprocess\": id },\n        { \"name\": \"alter_sequence_option$ebnf$1$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"alter_sequence_option$ebnf$1$subexpression$1\", \"symbols\": [\"alter_sequence_option$ebnf$1$subexpression$1$ebnf$1\", \"int\"], \"postprocess\": last },\n        { \"name\": \"alter_sequence_option$ebnf$1\", \"symbols\": [\"alter_sequence_option$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"alter_sequence_option$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"alter_sequence_option\", \"symbols\": [\"kw_restart\", \"alter_sequence_option$ebnf$1\"], \"postprocess\": x => (0, lexer_2.box)(x, ['restart', typeof (0, lexer_2.unbox)(x[1]) === 'number' ? (0, lexer_2.unbox)(x[1]) : true]) },\n        { \"name\": \"drop_statement$ebnf$1\", \"symbols\": [\"kw_ifexists\"], \"postprocess\": id },\n        { \"name\": \"drop_statement$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"drop_statement$macrocall$2\", \"symbols\": [\"qualified_name\"] },\n        { \"name\": \"drop_statement$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"drop_statement$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"drop_statement$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"drop_statement$macrocall$1$ebnf$1\", \"symbols\": [\"drop_statement$macrocall$1$ebnf$1\", \"drop_statement$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"drop_statement$macrocall$1\", \"symbols\": [\"drop_statement$macrocall$2\", \"drop_statement$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"drop_statement$ebnf$2$subexpression$1\", \"symbols\": [\"kw_cascade\"] },\n        { \"name\": \"drop_statement$ebnf$2$subexpression$1\", \"symbols\": [\"kw_restrict\"] },\n        { \"name\": \"drop_statement$ebnf$2\", \"symbols\": [\"drop_statement$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"drop_statement$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"drop_statement\", \"symbols\": [\"kw_drop\", \"drop_what\", \"drop_statement$ebnf$1\", \"drop_statement$macrocall$1\", \"drop_statement$ebnf$2\"], \"postprocess\": (x, rej) => {\n                const v = unwrap(x[1]);\n                return (0, lexer_2.track)(x, {\n                    ...v,\n                    ...x[2] && { ifExists: true },\n                    names: x[3],\n                    ...x[4] && { cascade: toStr(x[4]) },\n                });\n            } },\n        { \"name\": \"drop_what\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table)], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'drop table' }) },\n        { \"name\": \"drop_what\", \"symbols\": [\"kw_sequence\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'drop sequence' }) },\n        { \"name\": \"drop_what\", \"symbols\": [\"kw_type\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'drop type' }) },\n        { \"name\": \"drop_what\", \"symbols\": [\"kw_trigger\"], \"postprocess\": x => (0, lexer_2.track)(x, { type: 'drop trigger' }) },\n        { \"name\": \"drop_what$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_concurrently\") ? { type: \"kw_concurrently\" } : kw_concurrently)], \"postprocess\": id },\n        { \"name\": \"drop_what$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"drop_what\", \"symbols\": [\"kw_index\", \"drop_what$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'drop index',\n                ...x[1] && { concurrently: true },\n            }) },\n        { \"name\": \"with_statement\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"with_statement_bindings\", \"with_statement_statement\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'with',\n                bind: x[1],\n                in: unwrap(x[2]),\n            }) },\n        { \"name\": \"with_recursive_statement$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"kw_recursive\"] },\n        { \"name\": \"with_recursive_statement\", \"symbols\": [\"with_recursive_statement$subexpression$1\", \"ident\", \"collist_paren\", (lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"lparen\", \"union_statement\", \"rparen\", \"with_statement_statement\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'with recursive',\n                alias: asName(x[1]),\n                columnNames: x[2].map(asName),\n                bind: x[5],\n                in: unwrap(x[7]),\n            }) },\n        { \"name\": \"with_statement_bindings$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"with_statement_bindings$ebnf$1$subexpression$1\", \"symbols\": [\"comma\", \"with_statement_binding\"], \"postprocess\": last },\n        { \"name\": \"with_statement_bindings$ebnf$1\", \"symbols\": [\"with_statement_bindings$ebnf$1\", \"with_statement_bindings$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"with_statement_bindings\", \"symbols\": [\"with_statement_binding\", \"with_statement_bindings$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"with_statement_binding\", \"symbols\": [\"word\", (lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"lparen\", \"with_statement_statement\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                alias: asName(x[0]),\n                statement: unwrap(x[3]),\n            }) },\n        { \"name\": \"with_statement_statement\", \"symbols\": [\"selection\"] },\n        { \"name\": \"with_statement_statement\", \"symbols\": [\"insert_statement\"] },\n        { \"name\": \"with_statement_statement\", \"symbols\": [\"update_statement\"] },\n        { \"name\": \"with_statement_statement\", \"symbols\": [\"delete_statement\"] },\n        { \"name\": \"createtype_statement$subexpression$1\", \"symbols\": [\"createtype_enum\"] },\n        { \"name\": \"createtype_statement$subexpression$1\", \"symbols\": [\"createtype_composite\"] },\n        { \"name\": \"createtype_statement\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"kw_type\", \"qualified_name\", \"createtype_statement$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                name: x[2],\n                ...unwrap(x[3]),\n            }) },\n        { \"name\": \"createtype_enum$macrocall$2\", \"symbols\": [\"enum_value\"] },\n        { \"name\": \"createtype_enum$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtype_enum$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"createtype_enum$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"createtype_enum$macrocall$1$ebnf$1\", \"symbols\": [\"createtype_enum$macrocall$1$ebnf$1\", \"createtype_enum$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtype_enum$macrocall$1\", \"symbols\": [\"createtype_enum$macrocall$2\", \"createtype_enum$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"createtype_enum\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"kw_enum\", \"lparen\", \"createtype_enum$macrocall$1\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'create enum',\n                values: x[3],\n            }) },\n        { \"name\": \"enum_value\", \"symbols\": [\"string\"], \"postprocess\": x => (0, lexer_2.track)(x, { value: toStr(x) }) },\n        { \"name\": \"createtype_composite$macrocall$2\", \"symbols\": [\"createtype_composite_attr\"] },\n        { \"name\": \"createtype_composite$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"createtype_composite$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"createtype_composite$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"createtype_composite$macrocall$1$ebnf$1\", \"symbols\": [\"createtype_composite$macrocall$1$ebnf$1\", \"createtype_composite$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"createtype_composite$macrocall$1\", \"symbols\": [\"createtype_composite$macrocall$2\", \"createtype_composite$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"createtype_composite\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"lparen\", \"createtype_composite$macrocall$1\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'create composite type',\n                attributes: x[2],\n            }) },\n        { \"name\": \"createtype_composite_attr$ebnf$1\", \"symbols\": [\"createtable_collate\"], \"postprocess\": id },\n        { \"name\": \"createtype_composite_attr$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"createtype_composite_attr\", \"symbols\": [\"word\", \"data_type\", \"createtype_composite_attr$ebnf$1\"], \"postprocess\": x => {\n                return (0, lexer_2.track)(x, {\n                    name: asName(x[0]),\n                    dataType: x[1],\n                    ...x[2] ? { collate: x[2][1] } : {},\n                });\n            } },\n        { \"name\": \"altertype_statement$subexpression$1\", \"symbols\": [\"altertype_enum_add_value\"] },\n        { \"name\": \"altertype_statement$subexpression$1\", \"symbols\": [\"altertype_enum_rename\"] },\n        { \"name\": \"altertype_statement\", \"symbols\": [\"kw_alter\", \"kw_type\", \"qualified_name\", \"altertype_statement$subexpression$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                name: x[2],\n                ...unwrap(x[3]),\n            }) },\n        { \"name\": \"altertype_enum_add_value\", \"symbols\": [\"kw_add\", \"kw_value\", \"enum_additional_value\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'alter enum',\n                change: {\n                    type: 'add value',\n                    add: x[2]\n                }\n            }) },\n        { \"name\": \"enum_additional_value\", \"symbols\": [\"string\"], \"postprocess\": x => (0, lexer_2.track)(x, { value: toStr(x) }) },\n        { \"name\": \"altertype_enum_rename\", \"symbols\": [\"kw_rename\", (lexer_1.lexerAny.has(\"kw_to\") ? { type: \"kw_to\" } : kw_to), \"word\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'alter enum',\n                change: {\n                    type: 'rename',\n                    to: asName(last(x))\n                }\n            }) },\n        { \"name\": \"union_left\", \"symbols\": [\"select_statement\"] },\n        { \"name\": \"union_left\", \"symbols\": [\"select_values\"] },\n        { \"name\": \"union_left\", \"symbols\": [\"selection_paren\"] },\n        { \"name\": \"union_right\", \"symbols\": [\"selection\"] },\n        { \"name\": \"union_right\", \"symbols\": [\"selection_paren\"] },\n        { \"name\": \"union_statement$subexpression$1$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)], \"postprocess\": id },\n        { \"name\": \"union_statement$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"union_statement$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_union\") ? { type: \"kw_union\" } : kw_union), \"union_statement$subexpression$1$ebnf$1\"] },\n        { \"name\": \"union_statement\", \"symbols\": [\"union_left\", \"union_statement$subexpression$1\", \"union_right\"], \"postprocess\": x => {\n                return (0, lexer_2.track)(x, {\n                    type: toStr(x[1], ' '),\n                    left: unwrap(x[0]),\n                    right: unwrap(x[2]),\n                });\n            } },\n        { \"name\": \"prepare$ebnf$1$subexpression$1\", \"symbols\": [\"lparen\", \"data_type_list\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"prepare$ebnf$1\", \"symbols\": [\"prepare$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"prepare$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"prepare\", \"symbols\": [\"kw_prepare\", \"ident\", \"prepare$ebnf$1\", (lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"statement_noprep\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'prepare',\n                name: asName(x[1]),\n                ...x[2] && { args: x[2] },\n                statement: unwrap(last(x)),\n            }) },\n        { \"name\": \"deallocate$ebnf$1\", \"symbols\": [\"kw_prepare\"], \"postprocess\": id },\n        { \"name\": \"deallocate$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"deallocate\", \"symbols\": [\"kw_deallocate\", \"deallocate$ebnf$1\", \"deallocate_target\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'deallocate',\n                target: x[2],\n            }) },\n        { \"name\": \"deallocate_target\", \"symbols\": [\"deallocate_all\"], \"postprocess\": unwrap },\n        { \"name\": \"deallocate_target\", \"symbols\": [\"deallocate_name\"], \"postprocess\": unwrap },\n        { \"name\": \"deallocate_name\", \"symbols\": [\"ident\"], \"postprocess\": x => (0, lexer_2.track)(x, asName(x[0])) },\n        { \"name\": \"deallocate_all\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_all\") ? { type: \"kw_all\" } : kw_all)], \"postprocess\": x => (0, lexer_2.track)(x, { option: 'all' }) },\n        { \"name\": \"create_view_statements\", \"symbols\": [\"create_view\"] },\n        { \"name\": \"create_view_statements\", \"symbols\": [\"create_materialized_view\"] },\n        { \"name\": \"create_view$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_or\") ? { type: \"kw_or\" } : kw_or), \"kw_replace\"] },\n        { \"name\": \"create_view$ebnf$1\", \"symbols\": [\"create_view$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_view$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_view$ebnf$2$subexpression$1\", \"symbols\": [\"kw_temp\"] },\n        { \"name\": \"create_view$ebnf$2$subexpression$1\", \"symbols\": [\"kw_temporary\"] },\n        { \"name\": \"create_view$ebnf$2\", \"symbols\": [\"create_view$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_view$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_view$ebnf$3\", \"symbols\": [\"kw_recursive\"], \"postprocess\": id },\n        { \"name\": \"create_view$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_view$ebnf$4$subexpression$1$macrocall$2\", \"symbols\": [\"ident\"] },\n        { \"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"create_view$ebnf$4$subexpression$1$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [\"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\", \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"create_view$ebnf$4$subexpression$1$macrocall$1\", \"symbols\": [\"create_view$ebnf$4$subexpression$1$macrocall$2\", \"create_view$ebnf$4$subexpression$1$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"create_view$ebnf$4$subexpression$1\", \"symbols\": [\"lparen\", \"create_view$ebnf$4$subexpression$1$macrocall$1\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"create_view$ebnf$4\", \"symbols\": [\"create_view$ebnf$4$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_view$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_view$ebnf$5\", \"symbols\": [\"create_view_opts\"], \"postprocess\": id },\n        { \"name\": \"create_view$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_view$ebnf$6$subexpression$1$subexpression$1\", \"symbols\": [\"kw_local\"] },\n        { \"name\": \"create_view$ebnf$6$subexpression$1$subexpression$1\", \"symbols\": [\"kw_cascaded\"] },\n        { \"name\": \"create_view$ebnf$6$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"create_view$ebnf$6$subexpression$1$subexpression$1\", (lexer_1.lexerAny.has(\"kw_check\") ? { type: \"kw_check\" } : kw_check), \"kw_option\"], \"postprocess\": get(1) },\n        { \"name\": \"create_view$ebnf$6\", \"symbols\": [\"create_view$ebnf$6$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_view$ebnf$6\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_view\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"create_view$ebnf$1\", \"create_view$ebnf$2\", \"create_view$ebnf$3\", \"kw_view\", \"qualified_name\", \"create_view$ebnf$4\", \"create_view$ebnf$5\", (lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"selection\", \"create_view$ebnf$6\"], \"postprocess\": x => {\n                return (0, lexer_2.track)(x, {\n                    type: 'create view',\n                    ...x[1] && { orReplace: true },\n                    ...x[2] && { temp: true },\n                    ...x[3] && { recursive: true },\n                    name: x[5],\n                    ...x[6] && { columnNames: x[6].map(asName) },\n                    ...x[7] && { parameters: fromEntries(x[7]) },\n                    query: x[9],\n                    ...x[10] && { checkOption: toStr(x[10]) },\n                });\n            } },\n        { \"name\": \"create_view_opt\", \"symbols\": [\"ident\", (lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq), \"ident\"], \"postprocess\": ([a, _, b]) => [toStr(a), toStr(b)] },\n        { \"name\": \"create_view_opts$macrocall$2\", \"symbols\": [\"create_view_opt\"] },\n        { \"name\": \"create_view_opts$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"create_view_opts$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"create_view_opts$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"create_view_opts$macrocall$1$ebnf$1\", \"symbols\": [\"create_view_opts$macrocall$1$ebnf$1\", \"create_view_opts$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"create_view_opts$macrocall$1\", \"symbols\": [\"create_view_opts$macrocall$2\", \"create_view_opts$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"create_view_opts\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"create_view_opts$macrocall$1\"], \"postprocess\": last },\n        { \"name\": \"create_materialized_view$ebnf$1\", \"symbols\": [\"kw_ifnotexists\"], \"postprocess\": id },\n        { \"name\": \"create_materialized_view$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$2\", \"symbols\": [\"ident\"] },\n        { \"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"create_materialized_view$ebnf$2$subexpression$1$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\", \"symbols\": [\"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\", \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1\", \"symbols\": [\"create_materialized_view$ebnf$2$subexpression$1$macrocall$2\", \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"create_materialized_view$ebnf$2$subexpression$1\", \"symbols\": [\"lparen\", \"create_materialized_view$ebnf$2$subexpression$1$macrocall$1\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"create_materialized_view$ebnf$2\", \"symbols\": [\"create_materialized_view$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_materialized_view$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_materialized_view$ebnf$3\", \"symbols\": [\"create_view_opts\"], \"postprocess\": id },\n        { \"name\": \"create_materialized_view$ebnf$3\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_materialized_view$ebnf$4$subexpression$1\", \"symbols\": [\"kw_tablespace\", \"ident\"], \"postprocess\": last },\n        { \"name\": \"create_materialized_view$ebnf$4\", \"symbols\": [\"create_materialized_view$ebnf$4$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_materialized_view$ebnf$4\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_materialized_view$ebnf$5$subexpression$1$ebnf$1\", \"symbols\": [\"kw_no\"], \"postprocess\": id },\n        { \"name\": \"create_materialized_view$ebnf$5$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_materialized_view$ebnf$5$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"create_materialized_view$ebnf$5$subexpression$1$ebnf$1\", \"kw_data\"] },\n        { \"name\": \"create_materialized_view$ebnf$5\", \"symbols\": [\"create_materialized_view$ebnf$5$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_materialized_view$ebnf$5\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_materialized_view\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"kw_materialized\", \"kw_view\", \"create_materialized_view$ebnf$1\", \"qualified_name\", \"create_materialized_view$ebnf$2\", \"create_materialized_view$ebnf$3\", \"create_materialized_view$ebnf$4\", (lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"selection\", \"create_materialized_view$ebnf$5\"], \"postprocess\": x => {\n                return (0, lexer_2.track)(x, {\n                    type: 'create materialized view',\n                    ...x[3] && { ifNotExists: true },\n                    name: x[4],\n                    ...x[5] && { columnNames: x[6].map(asName) },\n                    ...x[6] && { parameters: fromEntries(x[6]) },\n                    ...x[7] && { tablespace: asName(x[7]) },\n                    query: x[9],\n                    ...x[10] && { withData: toStr(x[10][1]) !== 'no' },\n                });\n            } },\n        { \"name\": \"refresh_view_statements$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_concurrently\") ? { type: \"kw_concurrently\" } : kw_concurrently)], \"postprocess\": id },\n        { \"name\": \"refresh_view_statements$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"refresh_view_statements$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"kw_no\"], \"postprocess\": id },\n        { \"name\": \"refresh_view_statements$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"refresh_view_statements$ebnf$2$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_with\") ? { type: \"kw_with\" } : kw_with), \"refresh_view_statements$ebnf$2$subexpression$1$ebnf$1\", \"kw_data\"] },\n        { \"name\": \"refresh_view_statements$ebnf$2\", \"symbols\": [\"refresh_view_statements$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"refresh_view_statements$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"refresh_view_statements\", \"symbols\": [\"kw_refresh\", \"kw_materialized\", \"kw_view\", \"refresh_view_statements$ebnf$1\", \"qname\", \"refresh_view_statements$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'refresh materialized view',\n                ...!!x[3] ? { concurrently: true } : {},\n                name: x[4],\n                ...!!x[5] ? { withData: toStr(x[5][1]) !== 'no' } : {},\n            }) },\n        { \"name\": \"functions_statements\", \"symbols\": [\"create_func\"] },\n        { \"name\": \"functions_statements\", \"symbols\": [\"do_stm\"] },\n        { \"name\": \"functions_statements\", \"symbols\": [\"drop_func\"] },\n        { \"name\": \"create_func$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_or\") ? { type: \"kw_or\" } : kw_or), \"kw_replace\"] },\n        { \"name\": \"create_func$ebnf$1\", \"symbols\": [\"create_func$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"create_func$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_func$subexpression$1$ebnf$1$macrocall$2\", \"symbols\": [\"func_argdef\"] },\n        { \"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"create_func$subexpression$1$ebnf$1$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\", \"symbols\": [\"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\", \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"create_func$subexpression$1$ebnf$1$macrocall$1\", \"symbols\": [\"create_func$subexpression$1$ebnf$1$macrocall$2\", \"create_func$subexpression$1$ebnf$1$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"create_func$subexpression$1$ebnf$1\", \"symbols\": [\"create_func$subexpression$1$ebnf$1$macrocall$1\"], \"postprocess\": id },\n        { \"name\": \"create_func$subexpression$1$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"create_func$subexpression$1\", \"symbols\": [\"lparen\", \"create_func$subexpression$1$ebnf$1\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"create_func$ebnf$2\", \"symbols\": [\"func_spec\"] },\n        { \"name\": \"create_func$ebnf$2\", \"symbols\": [\"create_func$ebnf$2\", \"func_spec\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"create_func\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_create\") ? { type: \"kw_create\" } : kw_create), \"create_func$ebnf$1\", \"kw_function\", \"qname\", \"create_func$subexpression$1\", \"create_func$ebnf$2\"], \"postprocess\": (x, rej) => {\n                var _a;\n                const specs = {};\n                for (const s of x[5]) {\n                    for (const k in s) {\n                        if (k[0] !== '_' && k in specs) {\n                            throw new Error('conflicting or redundant options ' + k);\n                        }\n                    }\n                    Object.assign(specs, s);\n                }\n                return (0, lexer_2.track)(x, {\n                    type: 'create function',\n                    ...x[1] && { orReplace: true },\n                    name: x[3],\n                    arguments: (_a = x[4]) !== null && _a !== void 0 ? _a : [],\n                    ...specs,\n                });\n            } },\n        { \"name\": \"func_argdef$ebnf$1\", \"symbols\": [\"func_argopts\"], \"postprocess\": id },\n        { \"name\": \"func_argdef$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"func_argdef$ebnf$2\", \"symbols\": [\"func_argdefault\"], \"postprocess\": id },\n        { \"name\": \"func_argdef$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"func_argdef\", \"symbols\": [\"func_argdef$ebnf$1\", \"data_type\", \"func_argdef$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                default: x[2],\n                type: x[1],\n                ...x[0],\n            }) },\n        { \"name\": \"func_argdefault\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_default\") ? { type: \"kw_default\" } : kw_default), \"expr\"], \"postprocess\": x => x[1]\n        },\n        { \"name\": \"func_argdefault\", \"symbols\": [(lexer_1.lexerAny.has(\"op_eq\") ? { type: \"op_eq\" } : op_eq), \"expr\"], \"postprocess\": x => x[1] },\n        { \"name\": \"func_argopts$ebnf$1\", \"symbols\": [\"word\"], \"postprocess\": id },\n        { \"name\": \"func_argopts$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"func_argopts\", \"symbols\": [\"func_argmod\", \"func_argopts$ebnf$1\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                mode: toStr(x[0]),\n                ...x[1] && { name: asName(x[1]) },\n            }) },\n        { \"name\": \"func_argopts\", \"symbols\": [\"word\"], \"postprocess\": (x, rej) => {\n                const name = asName(x);\n                if (name === 'out' || name === 'inout' || name === 'variadic') {\n                    return rej; // avoid ambiguous syntax\n                }\n                return (0, lexer_2.track)(x, { name });\n            } },\n        { \"name\": \"func_argmod\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_in\") ? { type: \"kw_in\" } : kw_in)] },\n        { \"name\": \"func_argmod\", \"symbols\": [\"kw_out\"] },\n        { \"name\": \"func_argmod\", \"symbols\": [\"kw_inout\"] },\n        { \"name\": \"func_argmod\", \"symbols\": [\"kw_variadic\"] },\n        { \"name\": \"func_spec\", \"symbols\": [\"kw_language\", \"word\"], \"postprocess\": x => (0, lexer_2.track)(x, { language: asName(last(x)) }) },\n        { \"name\": \"func_spec\", \"symbols\": [\"func_purity\"], \"postprocess\": x => (0, lexer_2.track)(x, { purity: toStr(x) }) },\n        { \"name\": \"func_spec$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"codeblock\") ? { type: \"codeblock\" } : codeblock)] },\n        { \"name\": \"func_spec$subexpression$1\", \"symbols\": [\"string\"] },\n        { \"name\": \"func_spec\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_as\") ? { type: \"kw_as\" } : kw_as), \"func_spec$subexpression$1\"], \"postprocess\": x => ({ code: toStr(last(x)) }) },\n        { \"name\": \"func_spec$ebnf$1\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_not\") ? { type: \"kw_not\" } : kw_not)], \"postprocess\": id },\n        { \"name\": \"func_spec$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"func_spec$subexpression$2\", \"symbols\": [\"word\"], \"postprocess\": kw('leakproof') },\n        { \"name\": \"func_spec\", \"symbols\": [\"func_spec$ebnf$1\", \"func_spec$subexpression$2\"], \"postprocess\": x => (0, lexer_2.track)(x, { leakproof: !x[0] }) },\n        { \"name\": \"func_spec\", \"symbols\": [\"func_returns\"], \"postprocess\": x => (0, lexer_2.track)(x, { returns: unwrap(x) }) },\n        { \"name\": \"func_spec$subexpression$3\", \"symbols\": [\"word\"], \"postprocess\": kw('called') },\n        { \"name\": \"func_spec\", \"symbols\": [\"func_spec$subexpression$3\", \"oninp\"], \"postprocess\": () => ({ onNullInput: 'call' }) },\n        { \"name\": \"func_spec$subexpression$4\", \"symbols\": [\"word\"], \"postprocess\": kw('returns') },\n        { \"name\": \"func_spec\", \"symbols\": [\"func_spec$subexpression$4\", (lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null), \"oninp\"], \"postprocess\": () => ({ onNullInput: 'null' }) },\n        { \"name\": \"func_spec$subexpression$5\", \"symbols\": [\"word\"], \"postprocess\": kw('strict') },\n        { \"name\": \"func_spec\", \"symbols\": [\"func_spec$subexpression$5\"], \"postprocess\": () => ({ onNullInput: 'strict' }) },\n        { \"name\": \"func_purity\", \"symbols\": [\"word\"], \"postprocess\": kw('immutable') },\n        { \"name\": \"func_purity\", \"symbols\": [\"word\"], \"postprocess\": kw('stable') },\n        { \"name\": \"func_purity\", \"symbols\": [\"word\"], \"postprocess\": kw('volatile') },\n        { \"name\": \"oninp$subexpression$1\", \"symbols\": [\"word\"], \"postprocess\": kw('input') },\n        { \"name\": \"oninp\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_on\") ? { type: \"kw_on\" } : kw_on), (lexer_1.lexerAny.has(\"kw_null\") ? { type: \"kw_null\" } : kw_null), \"oninp$subexpression$1\"] },\n        { \"name\": \"func_returns\", \"symbols\": [\"kw_returns\", \"data_type\"], \"postprocess\": last },\n        { \"name\": \"func_returns$macrocall$2\", \"symbols\": [\"func_ret_table_col\"] },\n        { \"name\": \"func_returns$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"func_returns$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"func_returns$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"func_returns$macrocall$1$ebnf$1\", \"symbols\": [\"func_returns$macrocall$1$ebnf$1\", \"func_returns$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"func_returns$macrocall$1\", \"symbols\": [\"func_returns$macrocall$2\", \"func_returns$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"func_returns\", \"symbols\": [\"kw_returns\", (lexer_1.lexerAny.has(\"kw_table\") ? { type: \"kw_table\" } : kw_table), \"lparen\", \"func_returns$macrocall$1\", \"rparen\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                kind: 'table',\n                columns: x[3],\n            }) },\n        { \"name\": \"func_ret_table_col\", \"symbols\": [\"word\", \"data_type\"], \"postprocess\": x => (0, lexer_2.track)(x, { name: asName(x[0]), type: x[1] }) },\n        { \"name\": \"do_stm$ebnf$1$subexpression$1\", \"symbols\": [\"kw_language\", \"word\"], \"postprocess\": last },\n        { \"name\": \"do_stm$ebnf$1\", \"symbols\": [\"do_stm$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"do_stm$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"do_stm\", \"symbols\": [(lexer_1.lexerAny.has(\"kw_do\") ? { type: \"kw_do\" } : kw_do), \"do_stm$ebnf$1\", (lexer_1.lexerAny.has(\"codeblock\") ? { type: \"codeblock\" } : codeblock)], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'do',\n                ...x[1] && { language: asName(x[1]) },\n                code: x[2].value,\n            }) },\n        { \"name\": \"drop_func$ebnf$1$subexpression$1\", \"symbols\": [\"kw_if\", \"kw_exists\"] },\n        { \"name\": \"drop_func$ebnf$1\", \"symbols\": [\"drop_func$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"drop_func$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"drop_func$ebnf$2\", \"symbols\": [\"drop_func_overload\"], \"postprocess\": id },\n        { \"name\": \"drop_func$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"drop_func\", \"symbols\": [\"kw_drop\", \"kw_function\", \"drop_func$ebnf$1\", \"qname\", \"drop_func$ebnf$2\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: 'drop function',\n                ...x[2] && { ifExists: true },\n                name: x[3],\n                ...x[4] && { arguments: x[4] },\n            }) },\n        { \"name\": \"drop_func_overload$macrocall$2\", \"symbols\": [\"drop_func_overload_col\"] },\n        { \"name\": \"drop_func_overload$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"drop_func_overload$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"drop_func_overload$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"drop_func_overload$macrocall$1$ebnf$1\", \"symbols\": [\"drop_func_overload$macrocall$1$ebnf$1\", \"drop_func_overload$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"drop_func_overload$macrocall$1\", \"symbols\": [\"drop_func_overload$macrocall$2\", \"drop_func_overload$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"drop_func_overload\", \"symbols\": [\"lparen\", \"drop_func_overload$macrocall$1\", \"rparen\"], \"postprocess\": get(1) },\n        { \"name\": \"drop_func_overload_col$ebnf$1\", \"symbols\": [\"word\"], \"postprocess\": id },\n        { \"name\": \"drop_func_overload_col$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"drop_func_overload_col\", \"symbols\": [\"drop_func_overload_col$ebnf$1\", \"qname\"], \"postprocess\": x => (0, lexer_2.track)(x, {\n                type: x[1],\n                ...x[0] && { name: asName(x[0]) },\n            }) },\n        { \"name\": \"main$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"statement_separator\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main$ebnf$2\", \"symbols\": [] },\n        { \"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"statement_separator\"] },\n        { \"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"main$ebnf$2$subexpression$1$ebnf$1\", \"statement_separator\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main$ebnf$2$subexpression$1\", \"symbols\": [\"main$ebnf$2$subexpression$1$ebnf$1\", \"statement\"] },\n        { \"name\": \"main$ebnf$2\", \"symbols\": [\"main$ebnf$2\", \"main$ebnf$2$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main$ebnf$3\", \"symbols\": [] },\n        { \"name\": \"main$ebnf$3\", \"symbols\": [\"main$ebnf$3\", \"statement_separator\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main\", \"symbols\": [\"main$ebnf$1\", \"statement\", \"main$ebnf$2\", \"main$ebnf$3\"], \"postprocess\": ([_, head, _tail]) => {\n                const tail = _tail;\n                const ret = [unwrap(head), ...tail.map((x) => unwrap(x[1]))];\n                return ret.length === 1\n                    ? ret[0]\n                    : ret;\n            } },\n        { \"name\": \"statement_separator\", \"symbols\": [(lexer_1.lexerAny.has(\"semicolon\") ? { type: \"semicolon\" } : semicolon)] },\n        { \"name\": \"statement\", \"symbols\": [\"statement_noprep\"] },\n        { \"name\": \"statement\", \"symbols\": [\"prepare\"] },\n        { \"name\": \"statement\", \"symbols\": [\"deallocate\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"selection\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"createtable_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"createextension_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"createindex_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"simplestatements_all\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"insert_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"update_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"altertable_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"alterindex_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"delete_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"create_sequence_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"alter_sequence_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"drop_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"createtype_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"altertype_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"create_view_statements\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"refresh_view_statements\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"create_schema\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"raise_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"comment_statement\"] },\n        { \"name\": \"statement_noprep\", \"symbols\": [\"functions_statements\"] },\n        { \"name\": \"selection\", \"symbols\": [\"select_statement\"], \"postprocess\": unwrap },\n        { \"name\": \"selection\", \"symbols\": [\"select_values\"], \"postprocess\": unwrap },\n        { \"name\": \"selection\", \"symbols\": [\"with_statement\"], \"postprocess\": unwrap },\n        { \"name\": \"selection\", \"symbols\": [\"with_recursive_statement\"], \"postprocess\": unwrap },\n        { \"name\": \"selection\", \"symbols\": [\"union_statement\"], \"postprocess\": unwrap },\n        { \"name\": \"selection_paren\", \"symbols\": [\"lparen\", \"selection\", \"rparen\"], \"postprocess\": get(1) }\n    ],\n    ParserStart: \"main\",\n};\nexports.default = grammar;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_304310__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst array_lexer_1 = __nested_webpack_require_304310__(12);\nconst get = (i) => (x) => x[i];\nconst last = (x) => x && x[x.length - 1];\n;\n;\n;\n;\nconst grammar = {\n    Lexer: array_lexer_1.lexerAny,\n    ParserRules: [\n        { \"name\": \"main$ebnf$1\", \"symbols\": [\"elements\"], \"postprocess\": id },\n        { \"name\": \"main$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"main\", \"symbols\": [(array_lexer_1.lexerAny.has(\"start_list\") ? { type: \"start_list\" } : start_list), \"main$ebnf$1\", (array_lexer_1.lexerAny.has(\"end_list\") ? { type: \"end_list\" } : end_list)], \"postprocess\": x => x[1] || [] },\n        { \"name\": \"elements$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"elements$ebnf$1$subexpression$1\", \"symbols\": [(array_lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"elt\"], \"postprocess\": last },\n        { \"name\": \"elements$ebnf$1\", \"symbols\": [\"elements$ebnf$1\", \"elements$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"elements\", \"symbols\": [\"elt\", \"elements$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [head, ...(tail || [])];\n            } },\n        { \"name\": \"elt\", \"symbols\": [(array_lexer_1.lexerAny.has(\"value\") ? { type: \"value\" } : value)], \"postprocess\": x => x[0].value },\n        { \"name\": \"elt\", \"symbols\": [\"main\"], \"postprocess\": x => x[0] }\n    ],\n    ParserStart: \"main\",\n};\nexports.default = grammar;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_306077__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lexerAny = exports.lexer = void 0;\nconst moo_1 = __nested_webpack_require_306077__(0);\n// build lexer\nexports.lexer = (0, moo_1.compile)({\n    valueString: {\n        match: /\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\"/,\n        value: x => JSON.parse(x),\n        type: x => 'value',\n    },\n    valueRaw: {\n        match: /[^\\s,\\{\\}\"](?:[^,\\{\\}\"]*[^\\s,\\{\\}\"])?/,\n        type: () => 'value',\n    },\n    comma: ',',\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    start_list: '{',\n    end_list: '}',\n});\nexports.lexer.next = (next => () => {\n    let tok;\n    while ((tok = next.call(exports.lexer)) && (tok.type === 'space')) {\n    }\n    return tok;\n})(exports.lexer.next);\nexports.lexerAny = exports.lexer;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __nested_webpack_require_306929__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst geometric_lexer_1 = __nested_webpack_require_306929__(14);\nconst get = (i) => (x) => x[i];\nconst last = (x) => x && x[x.length - 1];\nfunction unwrap(e) {\n    if (Array.isArray(e) && e.length === 1) {\n        e = unwrap(e[0]);\n    }\n    if (Array.isArray(e) && !e.length) {\n        return null;\n    }\n    return e;\n}\n;\n;\n;\n;\nconst grammar = {\n    Lexer: geometric_lexer_1.lexerAny,\n    ParserRules: [\n        { \"name\": \"number$subexpression$1\", \"symbols\": [\"float\"] },\n        { \"name\": \"number$subexpression$1\", \"symbols\": [\"int\"] },\n        { \"name\": \"number\", \"symbols\": [\"number$subexpression$1\"], \"postprocess\": unwrap },\n        { \"name\": \"float\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"float\") ? { type: \"float\" } : float)], \"postprocess\": args => parseFloat(unwrap(args)) },\n        { \"name\": \"int\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)], \"postprocess\": arg => parseInt(unwrap(arg), 10) },\n        { \"name\": \"comma\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma)], \"postprocess\": id },\n        { \"name\": \"point$macrocall$2\", \"symbols\": [\"point_content\"] },\n        { \"name\": \"point$macrocall$1$subexpression$1\", \"symbols\": [\"point$macrocall$2\"] },\n        { \"name\": \"point$macrocall$1$subexpression$1\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"lparen\") ? { type: \"lparen\" } : lparen), \"point$macrocall$2\", (geometric_lexer_1.lexerAny.has(\"rparen\") ? { type: \"rparen\" } : rparen)], \"postprocess\": get(1) },\n        { \"name\": \"point$macrocall$1\", \"symbols\": [\"point$macrocall$1$subexpression$1\"], \"postprocess\": unwrap },\n        { \"name\": \"point\", \"symbols\": [\"point$macrocall$1\"], \"postprocess\": unwrap },\n        { \"name\": \"point_content\", \"symbols\": [\"number\", \"comma\", \"number\"], \"postprocess\": x => ({ x: x[0], y: x[2] }) },\n        { \"name\": \"line\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"lcurl\") ? { type: \"lcurl\" } : lcurl), \"number\", \"comma\", \"number\", \"comma\", \"number\", (geometric_lexer_1.lexerAny.has(\"rcurl\") ? { type: \"rcurl\" } : rcurl)], \"postprocess\": x => ({\n                a: x[1],\n                b: x[3],\n                c: x[5],\n            }) },\n        { \"name\": \"box\", \"symbols\": [\"closed_path\"], \"postprocess\": ([x], rej) => {\n                if (x.length !== 2) {\n                    return rej;\n                }\n                return x;\n            } },\n        { \"name\": \"lseg\", \"symbols\": [\"path\"], \"postprocess\": ([x], rej) => {\n                if (x.path.length !== 2) {\n                    return rej;\n                }\n                return x.path;\n            } },\n        { \"name\": \"path\", \"symbols\": [\"open_path\"], \"postprocess\": ([path]) => ({ closed: false, path }) },\n        { \"name\": \"path\", \"symbols\": [\"closed_path\"], \"postprocess\": ([path]) => ({ closed: true, path }) },\n        { \"name\": \"open_path$macrocall$2\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"lbracket\") ? { type: \"lbracket\" } : lbracket)] },\n        { \"name\": \"open_path$macrocall$3\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"rbracket\") ? { type: \"rbracket\" } : rbracket)] },\n        { \"name\": \"open_path$macrocall$1$macrocall$2\", \"symbols\": [\"point\"] },\n        { \"name\": \"open_path$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"open_path$macrocall$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"open_path$macrocall$1$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"open_path$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": [\"open_path$macrocall$1$macrocall$1$ebnf$1\", \"open_path$macrocall$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"open_path$macrocall$1$macrocall$1\", \"symbols\": [\"open_path$macrocall$1$macrocall$2\", \"open_path$macrocall$1$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"open_path$macrocall$1\", \"symbols\": [\"open_path$macrocall$2\", \"open_path$macrocall$1$macrocall$1\", \"open_path$macrocall$3\"], \"postprocess\": get(1) },\n        { \"name\": \"open_path\", \"symbols\": [\"open_path$macrocall$1\"], \"postprocess\": last },\n        { \"name\": \"closed_path$subexpression$1$macrocall$2\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"lparen\") ? { type: \"lparen\" } : lparen)] },\n        { \"name\": \"closed_path$subexpression$1$macrocall$3\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"rparen\") ? { type: \"rparen\" } : rparen)] },\n        { \"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$2\", \"symbols\": [\"point\"] },\n        { \"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1$subexpression$1\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"closed_path$subexpression$1$macrocall$1$macrocall$2\"], \"postprocess\": last },\n        { \"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\", \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"closed_path$subexpression$1$macrocall$1$macrocall$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$1$macrocall$2\", \"closed_path$subexpression$1$macrocall$1$macrocall$1$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"closed_path$subexpression$1$macrocall$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$2\", \"closed_path$subexpression$1$macrocall$1$macrocall$1\", \"closed_path$subexpression$1$macrocall$3\"], \"postprocess\": get(1) },\n        { \"name\": \"closed_path$subexpression$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$1\"], \"postprocess\": last },\n        { \"name\": \"closed_path$subexpression$1$macrocall$5\", \"symbols\": [\"point\"] },\n        { \"name\": \"closed_path$subexpression$1$macrocall$4$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"closed_path$subexpression$1$macrocall$4$ebnf$1$subexpression$1\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"comma\") ? { type: \"comma\" } : comma), \"closed_path$subexpression$1$macrocall$5\"], \"postprocess\": last },\n        { \"name\": \"closed_path$subexpression$1$macrocall$4$ebnf$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$4$ebnf$1\", \"closed_path$subexpression$1$macrocall$4$ebnf$1$subexpression$1\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"closed_path$subexpression$1$macrocall$4\", \"symbols\": [\"closed_path$subexpression$1$macrocall$5\", \"closed_path$subexpression$1$macrocall$4$ebnf$1\"], \"postprocess\": ([head, tail]) => {\n                return [unwrap(head), ...(tail.map(unwrap) || [])];\n            } },\n        { \"name\": \"closed_path$subexpression$1\", \"symbols\": [\"closed_path$subexpression$1$macrocall$4\"], \"postprocess\": last },\n        { \"name\": \"closed_path\", \"symbols\": [\"closed_path$subexpression$1\"], \"postprocess\": get(0) },\n        { \"name\": \"polygon\", \"symbols\": [\"closed_path\"], \"postprocess\": get(0) },\n        { \"name\": \"circle_body\", \"symbols\": [\"point\", \"comma\", \"number\"], \"postprocess\": x => ({ c: x[0], r: x[2] }) },\n        { \"name\": \"circle$subexpression$1$macrocall$2\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"lcomp\") ? { type: \"lcomp\" } : lcomp)] },\n        { \"name\": \"circle$subexpression$1$macrocall$3\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"rcomp\") ? { type: \"rcomp\" } : rcomp)] },\n        { \"name\": \"circle$subexpression$1$macrocall$1\", \"symbols\": [\"circle$subexpression$1$macrocall$2\", \"circle_body\", \"circle$subexpression$1$macrocall$3\"], \"postprocess\": get(1) },\n        { \"name\": \"circle$subexpression$1\", \"symbols\": [\"circle$subexpression$1$macrocall$1\"] },\n        { \"name\": \"circle$subexpression$1$macrocall$5\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"lparen\") ? { type: \"lparen\" } : lparen)] },\n        { \"name\": \"circle$subexpression$1$macrocall$6\", \"symbols\": [(geometric_lexer_1.lexerAny.has(\"rparen\") ? { type: \"rparen\" } : rparen)] },\n        { \"name\": \"circle$subexpression$1$macrocall$4\", \"symbols\": [\"circle$subexpression$1$macrocall$5\", \"circle_body\", \"circle$subexpression$1$macrocall$6\"], \"postprocess\": get(1) },\n        { \"name\": \"circle$subexpression$1\", \"symbols\": [\"circle$subexpression$1$macrocall$4\"] },\n        { \"name\": \"circle$subexpression$1\", \"symbols\": [\"circle_body\"] },\n        { \"name\": \"circle\", \"symbols\": [\"circle$subexpression$1\"], \"postprocess\": unwrap }\n    ],\n    ParserStart: \"number\",\n};\nexports.default = grammar;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __nested_webpack_require_315955__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lexerAny = exports.lexer = void 0;\nconst moo_1 = __nested_webpack_require_315955__(0);\n// build lexer\nexports.lexer = (0, moo_1.compile)({\n    comma: ',',\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    int: /\\-?\\d+(?![\\.\\d])/,\n    float: /\\-?(?:(?:\\d*\\.\\d+)|(?:\\d+\\.\\d*))/,\n    lcurl: '{',\n    rcurl: '}',\n    lparen: '(',\n    rparen: ')',\n    lbracket: '[',\n    rbracket: ']',\n    lcomp: '<',\n    rcomp: '>',\n});\nexports.lexer.next = (next => () => {\n    let tok;\n    while ((tok = next.call(exports.lexer)) && (tok.type === 'space')) {\n    }\n    return tok;\n})(exports.lexer.next);\nexports.lexerAny = exports.lexer;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_316740__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst interval_lexer_1 = __nested_webpack_require_316740__(16);\n;\n;\n;\n;\nconst grammar = {\n    Lexer: interval_lexer_1.lexerAny,\n    ParserRules: [\n        { \"name\": \"main$ebnf$1\", \"symbols\": [\"elt\"] },\n        { \"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"elt\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main\", \"symbols\": [\"main$ebnf$1\"], \"postprocess\": ([elts]) => {\n                // check unicity\n                const s = new Set();\n                for (const e of elts) {\n                    const k = typeof e[1] === 'number'\n                        ? e[0]\n                        : 'time';\n                    if (s.has(k)) {\n                        return 'invalid';\n                    }\n                    s.add(k);\n                }\n                return elts;\n            } },\n        { \"name\": \"elt\", \"symbols\": [\"time\"] },\n        { \"name\": \"elt\", \"symbols\": [\"num\", \"unit\"], \"postprocess\": ([[n], u]) => {\n                u = u[0].type;\n                return [u, n];\n            } },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"years\") ? { type: \"years\" } : years)] },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"months\") ? { type: \"months\" } : months)] },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"days\") ? { type: \"days\" } : days)] },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"hours\") ? { type: \"hours\" } : hours)] },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"minutes\") ? { type: \"minutes\" } : minutes)] },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"seconds\") ? { type: \"seconds\" } : seconds)] },\n        { \"name\": \"unit\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"milliseconds\") ? { type: \"milliseconds\" } : milliseconds)] },\n        { \"name\": \"num\", \"symbols\": [\"int\"] },\n        { \"name\": \"num\", \"symbols\": [\"float\"] },\n        { \"name\": \"uint\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)], \"postprocess\": ([x]) => parseInt(x, 10) },\n        { \"name\": \"int$ebnf$1$subexpression$1\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"neg\") ? { type: \"neg\" } : neg)] },\n        { \"name\": \"int$ebnf$1\", \"symbols\": [\"int$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"int$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"int\", \"symbols\": [\"int$ebnf$1\", (interval_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)], \"postprocess\": ([neg, x]) => parseInt(x, 10) * (neg ? -1 : 1) },\n        { \"name\": \"float$ebnf$1$subexpression$1\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"neg\") ? { type: \"neg\" } : neg)] },\n        { \"name\": \"float$ebnf$1\", \"symbols\": [\"float$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"float$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"float$ebnf$2\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)], \"postprocess\": id },\n        { \"name\": \"float$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"float\", \"symbols\": [\"float$ebnf$1\", \"float$ebnf$2\", (interval_lexer_1.lexerAny.has(\"dot\") ? { type: \"dot\" } : dot), (interval_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)], \"postprocess\": ([neg, ...v]) => parseFloat(v.map(v => v ? v.text : '0').join('')) * (neg ? -1 : 1) },\n        { \"name\": \"time$ebnf$1$subexpression$1\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"colon\") ? { type: \"colon\" } : colon), \"uint\"] },\n        { \"name\": \"time$ebnf$1\", \"symbols\": [\"time$ebnf$1$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"time$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"time$ebnf$2$subexpression$1\", \"symbols\": [(interval_lexer_1.lexerAny.has(\"dot\") ? { type: \"dot\" } : dot), (interval_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)] },\n        { \"name\": \"time$ebnf$2\", \"symbols\": [\"time$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"time$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"time\", \"symbols\": [\"uint\", (interval_lexer_1.lexerAny.has(\"colon\") ? { type: \"colon\" } : colon), \"uint\", \"time$ebnf$1\", \"time$ebnf$2\"], \"postprocess\": ([a, _, b, c, d]) => {\n                c = c && c[1];\n                d = d && d[1];\n                const ret = typeof c === 'number' ? [\n                    ['hours', a],\n                    ['minutes', b],\n                    ['seconds', c],\n                ] : [\n                    ['minutes', a],\n                    ['seconds', b],\n                ];\n                if (d) {\n                    ret.push(['milliseconds', parseFloat('0.' + d) * 1000]);\n                }\n                return ret;\n            } }\n    ],\n    ParserStart: \"main\",\n};\nexports.default = grammar;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_321903__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lexerAny = exports.lexer = void 0;\nconst moo_1 = __nested_webpack_require_321903__(0);\n// build lexer\nexports.lexer = (0, moo_1.compile)({\n    int: /\\d+/,\n    neg: '-',\n    dot: '.',\n    years: /(?:y|yrs?|years?)\\b/,\n    months: /(?:mon(?:th)?s?)\\b/,\n    days: /(?:d|days?)\\b/,\n    hours: /(?:h|hrs?|hours?)\\b/,\n    minutes: /(?:m|mins?|minutes?)\\b/,\n    seconds: /(?:s|secs?|seconds?)\\b/,\n    milliseconds: /(?:ms|milliseconds?)\\b/,\n    space: { match: /[\\s\\t\\n\\v\\f\\r]+/, lineBreaks: true, },\n    colon: ':',\n});\nexports.lexer.next = (next => () => {\n    let tok;\n    while ((tok = next.call(exports.lexer)) && (tok.type === 'space')) {\n    }\n    return tok;\n})(exports.lexer.next);\nexports.lexerAny = exports.lexer;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_322771__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Generated automatically by nearley, version unknown\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d) { return d[0]; }\nconst interval_iso_lexer_1 = __nested_webpack_require_322771__(18);\n;\n;\n;\n;\nconst grammar = {\n    Lexer: interval_iso_lexer_1.lexerAny,\n    ParserRules: [\n        { \"name\": \"num\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"int\") ? { type: \"int\" } : int)] },\n        { \"name\": \"num\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"float\") ? { type: \"float\" } : float)] },\n        { \"name\": \"main$ebnf$1\", \"symbols\": [] },\n        { \"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"long\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"short\"] },\n        { \"name\": \"main$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"main$ebnf$2$subexpression$1$ebnf$1\", \"short\"], \"postprocess\": (d) => d[0].concat([d[1]]) },\n        { \"name\": \"main$ebnf$2$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"T\") ? { type: \"T\" } : T), \"main$ebnf$2$subexpression$1$ebnf$1\"] },\n        { \"name\": \"main$ebnf$2\", \"symbols\": [\"main$ebnf$2$subexpression$1\"], \"postprocess\": id },\n        { \"name\": \"main$ebnf$2\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"main\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"P\") ? { type: \"P\" } : P), \"main$ebnf$1\", \"main$ebnf$2\"], \"postprocess\": ([_, a, b], rej) => {\n                b = !b ? [] : b[1];\n                { }\n                if (!a.length && !b.length) {\n                    return rej;\n                }\n                return !a.length ? b\n                    : !b.length ? a\n                        : [...a, ...b];\n            } },\n        { \"name\": \"long$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"Y\") ? { type: \"Y\" } : Y)] },\n        { \"name\": \"long$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"M\") ? { type: \"M\" } : M)] },\n        { \"name\": \"long$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"W\") ? { type: \"W\" } : W)] },\n        { \"name\": \"long$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"D\") ? { type: \"D\" } : D)] },\n        { \"name\": \"long\", \"symbols\": [\"num\", \"long$subexpression$1\"], \"postprocess\": ([n, u]) => {\n                n = parseFloat(n[0].value);\n                u = u[0].type;\n                switch (u) {\n                    case 'Y':\n                        return ['years', n];\n                    case 'M':\n                        return ['months', n];\n                    case 'W':\n                        return ['days', n * 7];\n                    case 'D':\n                        return ['days', n];\n                    default:\n                        throw new Error('Unexpected unit ' + u);\n                }\n            } },\n        { \"name\": \"short$ebnf$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"T\") ? { type: \"T\" } : T)], \"postprocess\": id },\n        { \"name\": \"short$ebnf$1\", \"symbols\": [], \"postprocess\": () => null },\n        { \"name\": \"short$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"H\") ? { type: \"H\" } : H)] },\n        { \"name\": \"short$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"M\") ? { type: \"M\" } : M)] },\n        { \"name\": \"short$subexpression$1\", \"symbols\": [(interval_iso_lexer_1.lexerAny.has(\"S\") ? { type: \"S\" } : S)] },\n        { \"name\": \"short\", \"symbols\": [\"short$ebnf$1\", \"num\", \"short$subexpression$1\"], \"postprocess\": ([_, n, u]) => {\n                n = parseFloat(n[0].value);\n                u = u[0].type;\n                switch (u) {\n                    case 'H':\n                        return ['hours', n];\n                    case 'M':\n                        return ['minutes', n];\n                    case 'S':\n                        return ['seconds', n];\n                    default:\n                        throw new Error('Unexpected unit ' + u);\n                }\n            } }\n    ],\n    ParserStart: \"num\",\n};\nexports.default = grammar;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __nested_webpack_require_327004__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lexerAny = exports.lexer = void 0;\nconst moo_1 = __nested_webpack_require_327004__(0);\n// build lexer\nexports.lexer = (0, moo_1.compile)({\n    int: /\\-?\\d+(?![\\.\\d])/,\n    float: /\\-?(?:(?:\\d*\\.\\d+)|(?:\\d+\\.\\d*))/,\n    P: 'P',\n    Y: 'Y',\n    M: 'M',\n    W: 'W',\n    D: 'D',\n    H: 'H',\n    S: 'S',\n    T: 'T',\n});\nexports.lexerAny = exports.lexer;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_327503__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toSql = void 0;\nconst ast_mapper_1 = __nested_webpack_require_327503__(2);\nconst ast_visitor_1 = __nested_webpack_require_327503__(5);\nconst utils_1 = __nested_webpack_require_327503__(6);\nconst pg_escape_1 = __nested_webpack_require_327503__(20);\nconst keywords_1 = __nested_webpack_require_327503__(3);\nconst kwSet = new Set(keywords_1.sqlKeywords.map(x => x.toLowerCase()));\nlet ret = [];\nfunction name(nm) {\n    return ident(nm.name);\n}\nfunction ident(nm, forceDoubleQuote) {\n    if (!forceDoubleQuote) {\n        // only add quotes if has upper cases, or if it is a keyword.\n        const low = nm.toLowerCase();\n        if (low === nm && !kwSet.has(low) && /^[a-z][a-z0-9_]*$/.test(low)) {\n            return nm;\n        }\n    }\n    return '\"' + nm + '\"';\n}\nfunction list(elems, act, addParen) {\n    if (addParen) {\n        ret.push('(');\n    }\n    let first = true;\n    for (const e of elems) {\n        if (!first) {\n            ret.push(', ');\n        }\n        first = false;\n        act(e);\n    }\n    if (addParen) {\n        ret.push(')');\n    }\n}\nfunction addConstraint(c, m) {\n    switch (c.type) {\n        case 'foreign key':\n            ret.push(' foreign key (', ...c.localColumns.map(name).join(', '), ')');\n        // 👈 There is no \"break\" here... that's not an error, we want to fall throught the 'reference' case\n        case 'reference':\n            ret.push(' REFERENCES ');\n            m.tableRef(c.foreignTable);\n            ret.push('(', ...c.foreignColumns.map(name).join(', '), ') ');\n            if (c.match) {\n                ret.push(' MATCH ', c.match.toUpperCase());\n            }\n            if (c.onDelete) {\n                ret.push(' ON DELETE ', c.onDelete);\n            }\n            if (c.onUpdate) {\n                ret.push(' ON UPDATE ', c.onUpdate);\n            }\n            break;\n        case 'primary key':\n        case 'unique':\n            ret.push(' ', c.type, ' ');\n            if ('columns' in c) {\n                ret.push('(', ...c.columns.map(name).join(', '), ') ');\n            }\n            break;\n        case 'check':\n            ret.push(' check ');\n            m.expr(c.expr);\n            break;\n        case 'not null':\n        case 'null':\n            ret.push(' ', c.type, ' ');\n            break;\n        case 'default':\n            ret.push(' default ');\n            m.expr(c.default);\n            break;\n        case 'add generated':\n            ret.push(' GENERATED ');\n            visitGenerated(m, c);\n            break;\n        default:\n            throw utils_1.NotSupported.never(c);\n    }\n    ret.push(' ');\n}\nfunction visitQualifiedName(cs, forceDoubleQuote) {\n    if (cs.schema) {\n        ret.push(ident(cs.schema), '.');\n    }\n    ret.push(ident(cs.name, forceDoubleQuote), ' ');\n}\nfunction visitQualifiedNameAliased(cs) {\n    visitQualifiedName(cs);\n    if (cs.alias) {\n        ret.push(' AS ', ident(cs.alias), ' ');\n    }\n}\nfunction visitOrderBy(m, orderBy) {\n    ret.push(' ORDER BY ');\n    list(orderBy, e => {\n        m.expr(e.by);\n        if (e.order) {\n            ret.push(' ', e.order, ' ');\n        }\n        if (e.nulls) {\n            ret.push(' NULLS ', e.nulls, ' ');\n        }\n    }, false);\n}\nfunction visitSetVal(set) {\n    switch (set.type) {\n        case 'default':\n            ret.push('DEFAULT ');\n            break;\n        case 'identifier':\n            ret.push(set.name);\n            break;\n        case 'list':\n            let first = true;\n            for (const v of set.values) {\n                if (!first) {\n                    ret.push(', ');\n                }\n                first = false;\n                visitSetVal(v);\n            }\n            break;\n        case 'value':\n            ret.push(typeof set.value === 'number' ? set.value.toString() : (0, pg_escape_1.literal)(set.value));\n            break;\n        default:\n            throw utils_1.NotSupported.never(set);\n    }\n}\nfunction visitGenerated(m, alter) {\n    if (alter.always) {\n        ret.push(alter.always.toUpperCase(), ' ');\n    }\n    ret.push('AS IDENTITY ');\n    if (alter.sequence) {\n        ret.push('(');\n        if (alter.sequence.name) {\n            ret.push('SEQUENCE NAME ');\n            visitQualifiedName(alter.sequence.name);\n            ret.push(' ');\n        }\n        visitSeqOpts(m, alter.sequence);\n        ret.push(') ');\n    }\n}\nfunction visitSeqOpts(m, cs) {\n    if (cs.as) {\n        ret.push('AS ');\n        m.dataType(cs.as);\n        ret.push(' ');\n    }\n    if (typeof cs.incrementBy === 'number') {\n        ret.push('INCREMENT BY ', cs.incrementBy.toString(), ' ');\n    }\n    if (cs.minValue === 'no minvalue') {\n        ret.push('NO MINVALUE ');\n    }\n    if (typeof cs.minValue === 'number') {\n        ret.push('MINVALUE ', cs.minValue.toString(), ' ');\n    }\n    if (cs.maxValue === 'no maxvalue') {\n        ret.push('NO MAXVALUE ');\n    }\n    if (typeof cs.maxValue === 'number') {\n        ret.push('MAXVALUE ', cs.maxValue.toString(), ' ');\n    }\n    if (typeof cs.startWith === 'number') {\n        ret.push('START WITH ', cs.startWith.toString(), ' ');\n    }\n    if (typeof cs.cache === 'number') {\n        ret.push('CACHE ', cs.cache.toString(), ' ');\n    }\n    if (cs.cycle) {\n        ret.push(cs.cycle, ' ');\n    }\n    if (cs.ownedBy === 'none') {\n        ret.push('OWNED BY NONE ');\n    }\n    else if (cs.ownedBy) {\n        ret.push('OWNED BY ');\n        visitQColumn(cs.ownedBy);\n    }\n    if ('restart' in cs) {\n        if (cs.restart === true) {\n            ret.push('RESTART ');\n        }\n        else if (cs.restart) {\n            ret.push('RESTART WITH ', cs.restart.toString(), ' ');\n        }\n    }\n}\nfunction visitQColumn(col) {\n    if (col.schema) {\n        ret.push(ident(col.schema), '.');\n    }\n    ret.push(ident(col.table), '.', ident(col.column), ' ');\n}\nfunction join(m, j, tbl) {\n    if (!j) {\n        tbl();\n        return;\n    }\n    ret.push(j.type, ' ');\n    tbl();\n    if (j.on) {\n        ret.push('ON ');\n        m.expr(j.on);\n    }\n    if (j.using) {\n        ret.push('USING (');\n        list(j.using, x => ret.push(name(x)), false);\n        ret.push(') ');\n    }\n    ret.push(' ');\n}\nfunction visitOp(v) {\n    if (v.opSchema) {\n        ret.push(' operator(', ident(v.opSchema), '.', v.op, ') ');\n    }\n    else {\n        ret.push(' ', v.op, ' ');\n    }\n}\nconst visitor = (0, ast_visitor_1.astVisitor)(m => ({\n    addColumn: (...args) => {\n        ret.push(' ADD COLUMN ');\n        if (args[0].ifNotExists) {\n            ret.push('IF NOT EXISTS ');\n        }\n        m.super().addColumn(...args);\n    },\n    createExtension: e => {\n        ret.push('CREATE EXTENSION ');\n        if (e.ifNotExists) {\n            ret.push(' IF NOT EXISTS ');\n        }\n        ret.push(name(e.extension));\n        if (!e.from && !e.version && !e.schema) {\n            return;\n        }\n        ret.push(' WITH');\n        if (e.schema) {\n            ret.push(' SCHEMA ', name(e.schema));\n        }\n        if (e.version) {\n            ret.push(' VERSION ', (0, pg_escape_1.literal)(e.version.value));\n        }\n        if (e.from) {\n            ret.push(' FROM ', (0, pg_escape_1.literal)(e.from.value));\n        }\n    },\n    tablespace: t => {\n        ret.push('TABLESPACE ', name(t.tablespace));\n    },\n    addConstraint: c => {\n        ret.push(' ADD ');\n        const cname = c.constraint.constraintName;\n        if (cname) {\n            ret.push(' CONSTRAINT ', name(cname), ' ');\n        }\n        addConstraint(c.constraint, m);\n    },\n    alterColumn: (c, t) => {\n        ret.push(' ALTER COLUMN ', name(c.column), ' ');\n        m.super().alterColumn(c, t);\n    },\n    setColumnDefault: (a, t, c) => {\n        ret.push(' SET DEFAULT ');\n        m.expr(a.default);\n        if (a.updateExisting) {\n            throw new Error('Not implemented: updateExisting on set column default');\n        }\n    },\n    createEnum: t => {\n        ret.push('CREATE TYPE ');\n        visitQualifiedName(t.name);\n        ret.push(' AS ENUM ');\n        list(t.values, x => ret.push((0, pg_escape_1.literal)(x.value)), true);\n        ret.push(' ');\n    },\n    alterEnum: t => {\n        ret.push('ALTER TYPE ');\n        visitQualifiedName(t.name);\n        if (t.change.type === 'rename') {\n            ret.push(' RENAME TO ');\n            visitQualifiedName(t.change.to);\n        }\n        else {\n            ret.push(' ADD VALUE ', (0, pg_escape_1.literal)(t.change.add.value));\n        }\n    },\n    createCompositeType: c => {\n        ret.push('CREATE TYPE ');\n        visitQualifiedName(c.name);\n        ret.push(' AS ');\n        list(c.attributes, x => {\n            ret.push(name(x.name), ' ');\n            m.dataType(x.dataType);\n            if (x.collate) {\n                ret.push('COLLATE ');\n                visitQualifiedName(x.collate);\n            }\n        }, true);\n        ret.push(' ');\n    },\n    setTableOwner: o => {\n        ret.push(' OWNER TO ', name(o.to));\n    },\n    alterColumnSimple: c => ret.push(c.type),\n    alterColumnAddGenerated: (alter) => {\n        ret.push(' ADD GENERATED ');\n        visitGenerated(m, alter);\n    },\n    setColumnType: t => {\n        ret.push(' SET DATA TYPE ');\n        m.dataType(t.dataType);\n        ret.push(' ');\n    },\n    alterTable: t => {\n        ret.push('ALTER TABLE ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        if (t.only) {\n            ret.push(' ONLY ');\n        }\n        visitQualifiedNameAliased(t.table);\n        list(t.changes, change => m.tableAlteration(change, t.table), false);\n    },\n    alterIndex: t => {\n        ret.push('ALTER INDEX ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        visitQualifiedNameAliased(t.index);\n        switch (t.change.type) {\n            case 'rename':\n                ret.push(' RENAME TO ');\n                visitQualifiedName(t.change.to);\n                ret.push(' ');\n                break;\n            case 'set tablespace':\n                ret.push(' SET TABLESPACE ');\n                visitQualifiedName(t.change.tablespace);\n                ret.push(' ');\n                break;\n            default:\n                throw utils_1.NotSupported.never(t.change, 'Alter index type not supported: ');\n        }\n    },\n    tableAlteration: (change, table) => {\n        switch (change.type) {\n            case 'add column':\n                return m.addColumn(change, table);\n            case 'add constraint':\n                return m.addConstraint(change, table);\n            case 'alter column':\n                return m.alterColumn(change, table);\n            case 'rename':\n                return m.renameTable(change, table);\n            case 'rename column':\n                return m.renameColumn(change, table);\n            case 'rename constraint':\n                return m.renameConstraint(change, table);\n            case 'drop column':\n                return m.dropColumn(change, table);\n            case 'drop constraint':\n                return m.dropConstraint(change, table);\n            case 'owner':\n                return m.setTableOwner(change, table);\n            default:\n                throw utils_1.NotSupported.never(change);\n        }\n    },\n    array: v => {\n        ret.push(v.type === 'array' ? 'ARRAY[' : '(');\n        list(v.expressions, e => m.expr(e), false);\n        ret.push(v.type === 'array' ? ']' : ')');\n    },\n    arrayIndex: v => {\n        m.expr(v.array);\n        ret.push('[');\n        m.expr(v.index);\n        ret.push('] ');\n    },\n    expr: e => {\n        if (e.type === 'ref') {\n            m.ref(e);\n            return;\n        }\n        // lists can become incorrect with an additional set of parentheses\n        if (e.type === 'list') {\n            m.super().expr(e);\n            return;\n        }\n        // this forces to respect precedence\n        // (however, it will introduce lots of unecessary parenthesis)\n        ret.push('(');\n        m.super().expr(e);\n        ret.push(')');\n    },\n    callOverlay: o => {\n        ret.push('OVERLAY(');\n        m.expr(o.value);\n        ret.push(' PLACING ');\n        m.expr(o.placing);\n        ret.push(' FROM ');\n        m.expr(o.from);\n        if (o.for) {\n            ret.push(' FOR ');\n            m.expr(o.for);\n        }\n        ret.push(')');\n    },\n    callSubstring: s => {\n        ret.push('SUBSTRING(');\n        m.expr(s.value);\n        if (s.from) {\n            ret.push(' FROM ');\n            m.expr(s.from);\n        }\n        if (s.for) {\n            ret.push(' FOR ');\n            m.expr(s.for);\n        }\n        ret.push(')');\n    },\n    binary: v => {\n        m.expr(v.left);\n        visitOp(v);\n        m.expr(v.right);\n    },\n    call: v => {\n        visitQualifiedName(v.function);\n        ret.push('(');\n        if (v.distinct) {\n            ret.push(v.distinct, ' ');\n        }\n        list(v.args, e => m.expr(e), false);\n        if (v.orderBy) {\n            visitOrderBy(m, v.orderBy);\n        }\n        ret.push(') ');\n        if (v.filter) {\n            ret.push('filter (where ');\n            m.expr(v.filter);\n            ret.push(') ');\n        }\n        if (v.withinGroup) {\n            ret.push('WITHIN GROUP (');\n            visitOrderBy(m, [v.withinGroup]);\n            ret.push(') ');\n        }\n        if (v.over) {\n            ret.push('over (');\n            if (v.over.partitionBy) {\n                ret.push('PARTITION BY ');\n                list(v.over.partitionBy, x => m.expr(x), false);\n                ret.push(' ');\n            }\n            if (v.over.orderBy) {\n                visitOrderBy(m, v.over.orderBy);\n                ret.push(' ');\n            }\n            ret.push(') ');\n        }\n    },\n    case: c => {\n        ret.push('CASE ');\n        if (c.value) {\n            m.expr(c.value);\n        }\n        for (const e of c.whens) {\n            ret.push(' WHEN ');\n            m.expr(e.when);\n            ret.push(' THEN ');\n            m.expr(e.value);\n        }\n        if (c.else) {\n            ret.push(' ELSE ');\n            m.expr(c.else);\n        }\n        ret.push(' END ');\n    },\n    cast: c => {\n        m.expr(c.operand);\n        ret.push('::');\n        m.dataType(c.to);\n    },\n    constant: c => {\n        switch (c.type) {\n            case 'boolean':\n                ret.push(c.value ? 'true' : 'false');\n                break;\n            case 'integer':\n                ret.push(c.value.toString(10));\n                break;\n            case 'numeric':\n                ret.push(c.value.toString());\n                if (Number.isInteger(c.value)) {\n                    ret.push('.');\n                }\n                break;\n            case 'null':\n                ret.push('null');\n                break;\n            case 'constant':\n                break;\n            case 'string':\n                ret.push((0, pg_escape_1.literal)(c.value));\n                break;\n            default:\n                throw utils_1.NotSupported.never(c);\n        }\n    },\n    valueKeyword: v => {\n        ret.push(v.keyword, ' ');\n    },\n    comment: c => {\n        ret.push('COMMENT ON ', c.on.type.toUpperCase(), ' ');\n        switch (c.on.type) {\n            case 'column':\n                visitQColumn(c.on.column);\n                break;\n            default:\n                visitQualifiedName(c.on.name);\n                break;\n        }\n        ret.push(' IS ', (0, pg_escape_1.literal)(c.comment), ' ');\n    },\n    extract: v => {\n        ret.push('EXTRACT (', v.field.name.toUpperCase(), ' FROM ');\n        m.expr(v.from);\n        ret.push(') ');\n    },\n    createColumn: c => {\n        var _a;\n        ret.push(name(c.name), ' ');\n        m.dataType(c.dataType);\n        ret.push(' ');\n        if (c.collate) {\n            ret.push('COLLATE ');\n            visitQualifiedName(c.collate);\n        }\n        for (const cst of (_a = c.constraints) !== null && _a !== void 0 ? _a : []) {\n            m.constraint(cst);\n        }\n    },\n    begin: beg => {\n        ret.push('BEGIN ');\n        if (beg.isolationLevel) {\n            ret.push('ISOLATION LEVEL ', beg.isolationLevel.toUpperCase(), ' ');\n        }\n        if (beg.writeable) {\n            ret.push(beg.writeable.toUpperCase(), ' ');\n        }\n        if (typeof beg.deferrable === 'boolean') {\n            if (!beg.deferrable) {\n                ret.push('NOT ');\n            }\n            ret.push('DEFERRABLE ');\n        }\n    },\n    alterSequence: cs => {\n        ret.push('ALTER SEQUENCE ');\n        if (cs.ifExists) {\n            ret.push('IF EXISTS ');\n        }\n        visitQualifiedName(cs.name);\n        switch (cs.change.type) {\n            case 'set options':\n                visitSeqOpts(m, cs.change);\n                break;\n            case 'rename':\n                ret.push('RENAME TO ', name(cs.change.newName), ' ');\n                break;\n            case 'set schema':\n                ret.push('SET SCHEMA ', name(cs.change.newSchema), ' ');\n                break;\n            case 'owner to':\n                const own = cs.change.owner;\n                ret.push('OWNER TO ', name(cs.change.owner), ' ');\n                break;\n            default:\n                throw utils_1.NotSupported.never(cs.change);\n        }\n    },\n    createSequence: cs => {\n        ret.push('CREATE ');\n        if (cs.temp) {\n            ret.push('TEMPORARY ');\n        }\n        ret.push('SEQUENCE ');\n        if (cs.ifNotExists) {\n            ret.push('IF NOT EXISTS ');\n        }\n        visitQualifiedName(cs.name);\n        visitSeqOpts(m, cs.options);\n    },\n    drop: val => {\n        ret.push(val.type.toUpperCase(), ' ');\n        if (val.concurrently) {\n            ret.push('CONCURRENTLY ');\n        }\n        if (val.ifExists) {\n            ret.push('IF EXISTS ');\n        }\n        list(val.names, x => m.tableRef(x), false);\n        if (val.cascade) {\n            ret.push(val.cascade.toUpperCase(), ' ');\n        }\n    },\n    constraint: cst => {\n        if (cst.constraintName) {\n            ret.push(' CONSTRAINT ', name(cst.constraintName), ' ');\n        }\n        addConstraint(cst, m);\n    },\n    do: d => {\n        ret.push('DO');\n        if (d.language) {\n            ret.push(' LANGUAGE ', d.language.name);\n        }\n        ret.push(' $$', d.code, '$$');\n    },\n    createFunction: c => {\n        var _a;\n        ret.push(c.orReplace ? 'CREATE OR REPLACE FUNCTION ' : 'CREATE FUNCTION ');\n        visitQualifiedName(c.name);\n        // args\n        list(c.arguments, a => {\n            if (a.mode) {\n                ret.push(a.mode, ' ');\n            }\n            if (a.name) {\n                ret.push(name(a.name), ' ');\n            }\n            m.dataType(a.type);\n            if (a.default) {\n                ret.push(\" = \");\n                m.expr(a.default);\n            }\n        }, true);\n        // ret type\n        if (c.returns) {\n            switch (c.returns.kind) {\n                case 'table':\n                    ret.push(' RETURNS TABLE ');\n                    list(c.returns.columns, t => {\n                        ret.push(name(t.name), ' ');\n                        m.dataType(t.type);\n                    }, true);\n                    break;\n                case undefined:\n                case null:\n                case 'array':\n                    ret.push(' RETURNS ');\n                    m.dataType(c.returns);\n                    break;\n                default:\n                    throw utils_1.NotSupported.never(c.returns);\n            }\n        }\n        ret.push(' AS $$', (_a = c.code) !== null && _a !== void 0 ? _a : '', '$$');\n        // function settings\n        if (c.language) {\n            ret.push('LANGUAGE ', c.language.name, ' ');\n        }\n        if (c.purity) {\n            ret.push(c.purity.toUpperCase(), ' ');\n        }\n        if (typeof c.leakproof === 'boolean') {\n            ret.push(c.leakproof ? 'LEAKPROOF ' : 'NOT LEAKPROOF ');\n        }\n        switch (c.onNullInput) {\n            case 'call':\n                ret.push('CALLED ON NULL INPUT ');\n                break;\n            case 'null':\n                ret.push('RETURNS NULL ON NULL INPUT ');\n                break;\n            case 'strict':\n                ret.push('STRICT ');\n                break;\n            case null:\n            case undefined:\n                break;\n            default:\n                throw utils_1.NotSupported.never(c.onNullInput);\n        }\n    },\n    dropFunction: d => {\n        ret.push('DROP FUNCTION ');\n        if (d.ifExists) {\n            ret.push('IF EXISTS ');\n        }\n        visitQualifiedName(d.name);\n        if (d.arguments) {\n            list(d.arguments, a => {\n                if (a.name) {\n                    visitQualifiedName(a.name);\n                    ret.push(' ');\n                }\n                m.dataType(a.type);\n            }, true);\n        }\n        ret.push(' ');\n    },\n    with: w => {\n        ret.push('WITH ');\n        list(w.bind, b => {\n            ret.push(name(b.alias), ' AS (');\n            m.statement(b.statement);\n            ret.push(') ');\n        }, false);\n        m.statement(w.in);\n    },\n    withRecursive: val => {\n        ret.push('WITH RECURSIVE ', name(val.alias), '(', ...val.columnNames.map(name).join(', '), ') AS (');\n        m.union(val.bind);\n        ret.push(') ');\n        m.statement(val.in);\n    },\n    setGlobal: g => {\n        ret.push('SET ');\n        if (g.scope) {\n            ret.push(g.scope.toUpperCase() + ' ');\n        }\n        ret.push(name(g.variable), ' = ');\n        visitSetVal(g.set);\n    },\n    setTimezone: g => {\n        ret.push('SET TIME ZONE ');\n        switch (g.to.type) {\n            case 'default':\n            case 'local':\n                ret.push(g.to.type.toUpperCase(), ' ');\n                break;\n            case 'value':\n                ret.push(typeof g.to.value === 'string'\n                    ? (0, pg_escape_1.literal)(g.to.value)\n                    : g.to.value.toString(10));\n                break;\n            case 'interval':\n                ret.push('INTERVAL ', (0, pg_escape_1.literal)(g.to.value), ' HOUR TO MINUTE');\n                break;\n            default:\n                throw utils_1.NotSupported.never(g.to);\n        }\n    },\n    setNames: g => {\n        ret.push('SET NAMES ');\n        switch (g.to.type) {\n            case 'value':\n                ret.push((0, pg_escape_1.literal)(g.to.value));\n                break;\n        }\n    },\n    dataType: d => {\n        var _a, _b;\n        if ((d === null || d === void 0 ? void 0 : d.kind) === 'array') {\n            m.dataType(d.arrayOf);\n            ret.push('[]');\n            return;\n        }\n        if (!(d === null || d === void 0 ? void 0 : d.name)) {\n            ret.push('unkown');\n            return;\n        }\n        let appendConfig = true;\n        if (d.schema) {\n            visitQualifiedName(d, d.doubleQuoted);\n        }\n        else {\n            // see https://www.postgresql.org/docs/13/datatype.html\n            // & issue https://github.com/oguimbal/pgsql-ast-parser/issues/38\n            if (d.doubleQuoted) {\n                visitQualifiedName(d, true);\n            }\n            else {\n                switch (d.name) {\n                    case 'double precision':\n                    case 'character varying':\n                    case 'bit varying':\n                        ret.push(d.name, ' ');\n                        break;\n                    case 'time without time zone':\n                    case 'timestamp without time zone':\n                    case 'time with time zone':\n                    case 'timestamp with time zone':\n                        const parts = d.name.split(' ');\n                        ret.push(parts.shift());\n                        if ((_a = d.config) === null || _a === void 0 ? void 0 : _a.length) {\n                            list(d.config, v => ret.push(v.toString(10)), true);\n                        }\n                        ret.push(' ');\n                        ret.push(parts.join(' '), ' ');\n                        appendConfig = false;\n                        break;\n                    default:\n                        visitQualifiedName(d);\n                        break;\n                }\n            }\n        }\n        if (appendConfig && ((_b = d.config) === null || _b === void 0 ? void 0 : _b.length)) {\n            list(d.config, v => ret.push(v.toString(10)), true);\n        }\n    },\n    createIndex: c => {\n        ret.push(c.unique ? 'CREATE UNIQUE INDEX ' : 'CREATE INDEX ');\n        if (c.concurrently) {\n            ret.push('CONCURRENTLY ');\n        }\n        if (c.ifNotExists) {\n            ret.push(' IF NOT EXISTS ');\n        }\n        if (c.indexName) {\n            ret.push(name(c.indexName), ' ');\n        }\n        ret.push('ON ');\n        m.tableRef(c.table);\n        if (c.using) {\n            ret.push('USING ', name(c.using), ' ');\n        }\n        list(c.expressions, e => {\n            m.expr(e.expression);\n            ret.push(' ');\n            if (e.collate) {\n                ret.push('COLLATE ');\n                visitQualifiedName(e.collate);\n            }\n            if (e.opclass) {\n                visitQualifiedName(e.opclass);\n            }\n            if (e.order) {\n                ret.push(e.order, ' ');\n            }\n            if (e.nulls) {\n                ret.push('nulls ', e.nulls, ' ');\n            }\n        }, true);\n        if (c.with) {\n            ret.push('WITH ');\n            list(c.with, w => {\n                ret.push(w.parameter, ' = ', (0, pg_escape_1.literal)(w.value));\n            }, true);\n        }\n        if (c.tablespace) {\n            ret.push('TABLESPACE ', ident(c.tablespace));\n        }\n        if (c.where) {\n            ret.push(' WHERE ');\n            m.expr(c.where);\n        }\n        ret.push(' ');\n    },\n    createTable: t => {\n        var _a;\n        ret.push('CREATE ');\n        if (t.locality) {\n            ret.push(t.locality.toUpperCase(), ' ');\n        }\n        if (t.temporary) {\n            ret.push('TEMPORARY ');\n        }\n        if (t.unlogged) {\n            ret.push('UNLOGGED ');\n        }\n        ret.push(t.ifNotExists ? 'TABLE IF NOT EXISTS ' : 'TABLE ');\n        m.tableRef(t.name);\n        ret.push('(');\n        list(t.columns, c => {\n            switch (c.kind) {\n                case 'column':\n                    return m.createColumn(c);\n                case 'like table':\n                    return m.likeTable(c);\n                default:\n                    throw utils_1.NotSupported.never(c);\n            }\n        }, false);\n        if (t.constraints) {\n            ret.push(', ');\n            list(t.constraints, c => {\n                const cname = c.constraintName;\n                if (cname) {\n                    ret.push('CONSTRAINT ', name(cname), ' ');\n                }\n                addConstraint(c, m);\n            }, false);\n        }\n        ret.push(') ');\n        if ((_a = t.inherits) === null || _a === void 0 ? void 0 : _a.length) {\n            ret.push(' INHERITS ');\n            list(t.inherits, i => visitQualifiedName(i), true);\n        }\n    },\n    likeTable: l => {\n        ret.push(' LIKE ');\n        m.tableRef(l.like);\n        ret.push(' ');\n        for (const { verb, option } of l.options) {\n            ret.push(verb.toUpperCase(), ' ', option.toUpperCase(), ' ');\n        }\n    },\n    createSchema: s => {\n        ret.push(s.ifNotExists ? 'CREATE SCHEMA IF NOT EXISTS ' : 'CREATE SCHEMA ');\n        ret.push(name(s.name));\n    },\n    truncateTable: t => {\n        ret.push('TRUNCATE TABLE ');\n        let first = true;\n        for (const tbl of t.tables) {\n            if (!first) {\n                ret.push(', ');\n            }\n            first = false;\n            m.tableRef(tbl);\n        }\n        if (t.identity) {\n            switch (t.identity) {\n                case 'restart':\n                    ret.push(' RESTART IDENTITY ');\n                    break;\n                case 'continue':\n                    ret.push(' CONTINUE IDENTITY ');\n                    break;\n            }\n        }\n        if (t.cascade) {\n            ret.push(' ', t.cascade, ' ');\n        }\n    },\n    delete: t => {\n        ret.push('DELETE FROM ');\n        m.tableRef(t.from);\n        if (t.where) {\n            ret.push(' WHERE ');\n            m.expr(t.where);\n        }\n        if (t.returning) {\n            ret.push(' RETURNING ');\n            list(t.returning, r => m.selectionColumn(r), false);\n        }\n        ret.push(' ');\n    },\n    dropColumn: t => {\n        ret.push(' DROP COLUMN ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        ret.push(name(t.column));\n        if (t.behaviour) {\n            ret.push(' ', t.behaviour);\n        }\n        ret.push(' ');\n    },\n    dropConstraint: t => {\n        ret.push(' DROP CONSTRAINT ');\n        if (t.ifExists) {\n            ret.push(' IF EXISTS ');\n        }\n        ret.push(name(t.constraint));\n        if (t.behaviour) {\n            ret.push(' ', t.behaviour.toUpperCase(), ' ');\n        }\n    },\n    from: t => m.super().from(t),\n    fromCall: s => {\n        join(m, s.join, () => {\n            var _a, _b;\n            if (s.lateral) {\n                ret.push(\"LATERAL \");\n            }\n            m.call(s);\n            if (s.withOrdinality) {\n                ret.push(' WITH ORDINALITY');\n            }\n            if (s.alias) {\n                ret.push(' AS ', name(s.alias), ' ');\n                const len = (_b = (_a = s.alias.columns) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n                if (len > 0) {\n                    ret.push('(');\n                    for (let ix = 0; ix < len; ++ix) {\n                        if (ix !== 0) {\n                            ret.push(', ');\n                        }\n                        ret.push(name(s.alias.columns[ix]));\n                    }\n                    ret.push(')');\n                }\n            }\n        });\n        ret.push(' ');\n    },\n    fromStatement: s => {\n        // todo: use 's.db' if defined\n        join(m, s.join, () => {\n            if (s.lateral) {\n                ret.push(\"LATERAL \");\n            }\n            ret.push('(');\n            m.select(s.statement);\n            ret.push(') ');\n            if (s.alias) {\n                ret.push(' AS ', ident(s.alias));\n                if (s.columnNames) {\n                    list(s.columnNames, c => ret.push(name(c)), true);\n                }\n                ret.push(' ');\n            }\n        });\n        ret.push(' ');\n    },\n    values: s => {\n        ret.push('VALUES ');\n        list(s.values, vlist => {\n            list(vlist, e => {\n                m.expr(e);\n            }, true);\n        }, false);\n    },\n    fromTable: s => {\n        join(m, s.join, () => {\n            m.tableRef(s.name);\n            if (s.name.columnNames) {\n                if (!s.name.alias) {\n                    throw new Error('Cannot specify aliased column names without an alias');\n                }\n                list(s.name.columnNames, c => ret.push(name(c)), true);\n            }\n        });\n    },\n    join: j => {\n        throw new Error('Should not happen 💀');\n    },\n    insert: i => {\n        ret.push('INSERT INTO ');\n        m.tableRef(i.into);\n        if (i.columns) {\n            ret.push('(', i.columns.map(name).join(', '), ')');\n        }\n        ret.push(' ');\n        if (i.overriding) {\n            ret.push('OVERRIDING ', i.overriding.toUpperCase(), ' VALUE ');\n        }\n        m.select(i.insert);\n        ret.push(' ');\n        if (i.onConflict) {\n            ret.push('ON CONFLICT ');\n            const on = i.onConflict.on;\n            switch (on === null || on === void 0 ? void 0 : on.type) {\n                case 'on expr':\n                    list(on.exprs, e => m.expr(e), true);\n                    break;\n                case 'on constraint':\n                    ret.push('ON CONSTRAINT ');\n                    visitQualifiedName(on.constraint);\n                case null:\n                case undefined:\n                    break;\n                default:\n                    throw utils_1.NotSupported.never(on);\n            }\n            if (i.onConflict.do === 'do nothing') {\n                ret.push(' DO NOTHING');\n            }\n            else {\n                ret.push(' DO UPDATE SET ');\n                list(i.onConflict.do.sets, s => m.set(s), false);\n                if (i.onConflict.where) {\n                    ret.push(' WHERE ');\n                    m.expr(i.onConflict.where);\n                }\n            }\n            ret.push(' ');\n        }\n        if (i.returning) {\n            ret.push(' RETURNING ');\n            list(i.returning, r => m.selectionColumn(r), false);\n        }\n    },\n    raise: r => {\n        var _a, _b;\n        ret.push('RAISE ');\n        if (r.level) {\n            ret.push(r.level.toUpperCase(), ' ');\n        }\n        ret.push((0, pg_escape_1.literal)(r.format), ' ');\n        if ((_a = r.formatExprs) === null || _a === void 0 ? void 0 : _a.length) {\n            ret.push(', ');\n            list(r.formatExprs, e => m.expr(e), false);\n        }\n        if ((_b = r.using) === null || _b === void 0 ? void 0 : _b.length) {\n            ret.push(' USING ');\n            list(r.using, ({ type, value }) => {\n                ret.push(type.toUpperCase(), '=');\n                m.expr(value);\n            }, false);\n        }\n        ret.push(' ');\n    },\n    default: () => {\n        ret.push(' DEFAULT ');\n    },\n    member: e => {\n        m.expr(e.operand);\n        ret.push(e.op);\n        ret.push(typeof e.member === 'number'\n            ? e.member.toString(10)\n            : (0, pg_escape_1.literal)(e.member));\n    },\n    ref: r => {\n        if (r.table) {\n            visitQualifiedName(r.table);\n            ret.push('.');\n        }\n        ret.push(r.name === '*' ? '*' : ident(r.name));\n    },\n    parameter: p => {\n        ret.push(p.name);\n    },\n    renameColumn: r => {\n        ret.push(' RENAME COLUMN ', name(r.column), ' TO ', name(r.to));\n    },\n    renameConstraint: r => {\n        ret.push(' RENAME CONSTRAINT ', name(r.constraint), ' TO ', name(r.to));\n    },\n    renameTable: r => {\n        ret.push(' RENAME TO ', name(r.to));\n    },\n    createView: c => {\n        ret.push('CREATE ');\n        if (c.orReplace) {\n            ret.push('OR REPLACE ');\n        }\n        if (c.temp) {\n            ret.push('TEMP ');\n        }\n        if (c.recursive) {\n            ret.push('RECURSIVE ');\n        }\n        ret.push('VIEW ');\n        m.tableRef(c.name);\n        if (c.columnNames) {\n            list(c.columnNames, c => ret.push(name(c)), true);\n        }\n        const opts = c.parameters && Object.entries(c.parameters);\n        if (opts === null || opts === void 0 ? void 0 : opts.length) {\n            ret.push(' WITH ');\n            list(opts, ([k, v]) => ret.push(k, '=', v), false);\n        }\n        ret.push(' AS ');\n        m.select(c.query);\n        if (c.checkOption) {\n            ret.push(' WITH ', c.checkOption.toUpperCase(), ' CHECK OPTION');\n        }\n    },\n    createMaterializedView: c => {\n        ret.push('CREATE MATERIALIZED VIEW ');\n        if (c.ifNotExists) {\n            ret.push('IF NOT EXISTS ');\n        }\n        m.tableRef(c.name);\n        if (c.columnNames) {\n            list(c.columnNames, c => ret.push(name(c)), true);\n        }\n        const opts = c.parameters && Object.entries(c.parameters);\n        if (opts === null || opts === void 0 ? void 0 : opts.length) {\n            ret.push(' WITH ');\n            list(opts, ([k, v]) => ret.push(k, '=', v), false);\n        }\n        if (c.tablespace) {\n            ret.push(' TABLESPACE ', name(c.tablespace));\n        }\n        ret.push(' AS ');\n        m.select(c.query);\n        if (typeof c.withData === 'boolean') {\n            ret.push(c.withData ? ' WITH DATA' : ' WITH NO DATA');\n        }\n    },\n    refreshMaterializedView: val => {\n        ret.push('REFRESH MATERIALIZED VIEW ');\n        if (val.concurrently) {\n            ret.push('CONCURRENTLY ');\n        }\n        m.tableRef(val.name);\n        if (typeof val.withData === 'boolean') {\n            ret.push(val.withData ? ' WITH DATA' : ' WITH NO DATA');\n        }\n    },\n    select: s => m.super().select(s),\n    selection: s => {\n        ret.push('SELECT ');\n        if (s.distinct) {\n            if (typeof s.distinct === 'string') {\n                ret.push(s.distinct.toUpperCase());\n            }\n            else {\n                ret.push(' DISTINCT ON ');\n                list(s.distinct, v => m.expr(v), true);\n            }\n            ret.push(' ');\n        }\n        if (s.columns) {\n            list(s.columns, c => m.selectionColumn(c), false);\n        }\n        ret.push(' ');\n        if (s.from) {\n            ret.push('FROM ');\n            const tblCnt = s.from.length;\n            for (let i = 0; i < tblCnt; i++) {\n                const f = s.from[i];\n                if (i > 0 && !f.join) {\n                    // implicit cross join (https://www.postgresql.org/docs/9.5/sql-select.html#SQL-FROM)\n                    ret.push(',');\n                }\n                m.from(f);\n            }\n            ret.push(' ');\n        }\n        if (s.where) {\n            ret.push('WHERE ');\n            m.expr(s.where);\n            ret.push(' ');\n        }\n        if (s.groupBy) {\n            ret.push('GROUP BY ');\n            list(s.groupBy, e => m.expr(e), false);\n            ret.push(' ');\n            if (s.having) {\n                ret.push(' HAVING ');\n                m.expr(s.having);\n                ret.push(' ');\n            }\n        }\n        if (s.orderBy) {\n            visitOrderBy(m, s.orderBy);\n            ret.push(' ');\n        }\n        if (s.limit) {\n            if (s.limit.offset) {\n                ret.push(`OFFSET `);\n                m.expr(s.limit.offset);\n            }\n            if (s.limit.limit) {\n                ret.push(`LIMIT `);\n                m.expr(s.limit.limit);\n            }\n        }\n        if (s.for) {\n            ret.push('FOR ', s.for.type.toUpperCase());\n            if (s.skip) {\n                ret.push(' ', s.skip.type.toUpperCase());\n            }\n        }\n    },\n    show: s => {\n        ret.push('SHOW ', name(s.variable));\n    },\n    prepare: s => {\n        var _a;\n        ret.push('PREPARE ', name(s.name));\n        if ((_a = s.args) === null || _a === void 0 ? void 0 : _a.length) {\n            list(s.args, a => m.dataType(a), true);\n        }\n        ret.push(' AS ');\n        m.statement(s.statement);\n    },\n    deallocate: s => {\n        ret.push('DEALLOCATE ');\n        if ('name' in s.target) {\n            ret.push(s.target.name);\n            return;\n        }\n        ret.push('ALL');\n    },\n    arraySelect: s => {\n        ret.push('array(');\n        m.select(s.select);\n        ret.push(')');\n    },\n    union: s => {\n        ret.push('(');\n        m.statement(s.left);\n        ret.push(') ', s.type.toUpperCase(), ' ');\n        if (s.right.type === 'union' || s.right.type === 'union all') {\n            m.union(s.right);\n        }\n        else {\n            ret.push('(');\n            m.statement(s.right);\n            ret.push(')');\n        }\n    },\n    selectionColumn: c => {\n        m.expr(c.expr);\n        if (c.alias) {\n            ret.push(' AS ', name(c.alias));\n        }\n        ret.push(' ');\n    },\n    set: s => {\n        ret.push(name(s.column), ' = ');\n        m.expr(s.value);\n        ret.push(' ');\n    },\n    statement: s => m.super().statement(s),\n    tableRef: r => {\n        visitQualifiedName(r);\n        if (r.alias) {\n            ret.push(' AS ', ident(r.alias));\n        }\n        ret.push(' ');\n    },\n    ternary: t => {\n        m.expr(t.value);\n        ret.push(' ', t.op, ' ');\n        m.expr(t.lo);\n        ret.push(' AND ');\n        m.expr(t.hi);\n        ret.push(' ');\n    },\n    transaction: t => {\n        ret.push(t.type);\n    },\n    unary: t => {\n        switch (t.op) {\n            case '+':\n            case '-':\n                // prefix ops\n                visitOp(t);\n                m.expr(t.operand);\n                break;\n            case 'NOT':\n                // prefix ops\n                ret.push(t.op);\n                ret.push(' ');\n                m.expr(t.operand);\n                break;\n            default:\n                // postfix ops\n                m.expr(t.operand);\n                ret.push(' ');\n                ret.push(t.op);\n        }\n    },\n    update: u => {\n        ret.push('UPDATE ');\n        m.tableRef(u.table);\n        ret.push(' SET ');\n        list(u.sets, s => m.set(s), false);\n        ret.push(' ');\n        if (u.from) {\n            ret.push('FROM ');\n            m.from(u.from);\n            ret.push(' ');\n        }\n        if (u.where) {\n            ret.push('WHERE ');\n            m.expr(u.where);\n            ret.push(' ');\n        }\n        if (u.returning) {\n            ret.push(' RETURNING ');\n            list(u.returning, r => m.selectionColumn(r), false);\n            ret.push(' ');\n        }\n    },\n}));\nexports.toSql = {};\nconst proto = ast_mapper_1.AstDefaultMapper.prototype;\nfor (const k of Object.getOwnPropertyNames(proto)) {\n    const orig = proto[k];\n    if (k === 'constructor' || k === 'super' || typeof orig !== 'function') {\n        continue;\n    }\n    exports.toSql[k] = function (...args) {\n        try {\n            visitor[k].apply(visitor, args);\n            return ret.join('').trim();\n        }\n        finally {\n            ret = [];\n        }\n    };\n}\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// stolen from https://github.com/segmentio/pg-escape/blob/master/index.js\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.literal = void 0;\nfunction literal(val) {\n    if (null == val)\n        return 'NULL';\n    if (Array.isArray(val)) {\n        var vals = val.map(literal);\n        return \"(\" + vals.join(\", \") + \")\";\n    }\n    var backslash = ~val.indexOf('\\\\');\n    var prefix = backslash ? 'E' : '';\n    val = val.replace(/'/g, \"''\");\n    val = val.replace(/\\\\/g, '\\\\\\\\');\n    return prefix + \"'\" + val + \"'\";\n}\nexports.literal = literal;\n;\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.locationOf = void 0;\nfunction locationOf(node) {\n    const n = node._location;\n    if (!n) {\n        throw new Error('This statement has not been parsed using location tracking (which has a small performance hit). ');\n    }\n    return n;\n}\nexports.locationOf = locationOf;\n;\n;\n\n\n/***/ })\n/******/ ])));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/pgsql-ast-parser/index.js\n");

/***/ }),

/***/ "../node_modules/semver/classes/comparator.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/classes/comparator.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ')\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = __webpack_require__(/*! ../internal/parse-options */ \"../node_modules/semver/internal/parse-options.js\")\nconst { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ \"../node_modules/semver/internal/re.js\")\nconst cmp = __webpack_require__(/*! ../functions/cmp */ \"../node_modules/semver/functions/cmp.js\")\nconst debug = __webpack_require__(/*! ../internal/debug */ \"../node_modules/semver/internal/debug.js\")\nconst SemVer = __webpack_require__(/*! ./semver */ \"../node_modules/semver/classes/semver.js\")\nconst Range = __webpack_require__(/*! ./range */ \"../node_modules/semver/classes/range.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9jbGFzc2VzL2NvbXBhcmF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlEQUFpRCxLQUFLO0FBQ3REOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQkFBcUIsbUJBQU8sQ0FBQyxtRkFBMkI7QUFDeEQsUUFBUSxnQkFBZ0IsRUFBRSxtQkFBTyxDQUFDLDZEQUFnQjtBQUNsRCxZQUFZLG1CQUFPLENBQUMsaUVBQWtCO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxtRUFBbUI7QUFDekMsZUFBZSxtQkFBTyxDQUFDLDBEQUFVO0FBQ2pDLGNBQWMsbUJBQU8sQ0FBQyx3REFBUyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvY2xhc3Nlcy9jb21wYXJhdG9yLmpzPzkyMjEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQU5ZID0gU3ltYm9sKCdTZW1WZXIgQU5ZJylcbi8vIGhvaXN0ZWQgY2xhc3MgZm9yIGN5Y2xpYyBkZXBlbmRlbmN5XG5jbGFzcyBDb21wYXJhdG9yIHtcbiAgc3RhdGljIGdldCBBTlkgKCkge1xuICAgIHJldHVybiBBTllcbiAgfVxuXG4gIGNvbnN0cnVjdG9yIChjb21wLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gICAgaWYgKGNvbXAgaW5zdGFuY2VvZiBDb21wYXJhdG9yKSB7XG4gICAgICBpZiAoY29tcC5sb29zZSA9PT0gISFvcHRpb25zLmxvb3NlKSB7XG4gICAgICAgIHJldHVybiBjb21wXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wID0gY29tcC52YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXAgPSBjb21wLnRyaW0oKS5zcGxpdCgvXFxzKy8pLmpvaW4oJyAnKVxuICAgIGRlYnVnKCdjb21wYXJhdG9yJywgY29tcCwgb3B0aW9ucylcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICAgIHRoaXMucGFyc2UoY29tcClcblxuICAgIGlmICh0aGlzLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICB0aGlzLnZhbHVlID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMub3BlcmF0b3IgKyB0aGlzLnNlbXZlci52ZXJzaW9uXG4gICAgfVxuXG4gICAgZGVidWcoJ2NvbXAnLCB0aGlzKVxuICB9XG5cbiAgcGFyc2UgKGNvbXApIHtcbiAgICBjb25zdCByID0gdGhpcy5vcHRpb25zLmxvb3NlID8gcmVbdC5DT01QQVJBVE9STE9PU0VdIDogcmVbdC5DT01QQVJBVE9SXVxuICAgIGNvbnN0IG0gPSBjb21wLm1hdGNoKHIpXG5cbiAgICBpZiAoIW0pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgY29tcGFyYXRvcjogJHtjb21wfWApXG4gICAgfVxuXG4gICAgdGhpcy5vcGVyYXRvciA9IG1bMV0gIT09IHVuZGVmaW5lZCA/IG1bMV0gOiAnJ1xuICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSAnPScpIHtcbiAgICAgIHRoaXMub3BlcmF0b3IgPSAnJ1xuICAgIH1cblxuICAgIC8vIGlmIGl0IGxpdGVyYWxseSBpcyBqdXN0ICc+JyBvciAnJyB0aGVuIGFsbG93IGFueXRoaW5nLlxuICAgIGlmICghbVsyXSkge1xuICAgICAgdGhpcy5zZW12ZXIgPSBBTllcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW12ZXIgPSBuZXcgU2VtVmVyKG1bMl0sIHRoaXMub3B0aW9ucy5sb29zZSlcbiAgICB9XG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVcbiAgfVxuXG4gIHRlc3QgKHZlcnNpb24pIHtcbiAgICBkZWJ1ZygnQ29tcGFyYXRvci50ZXN0JywgdmVyc2lvbiwgdGhpcy5vcHRpb25zLmxvb3NlKVxuXG4gICAgaWYgKHRoaXMuc2VtdmVyID09PSBBTlkgfHwgdmVyc2lvbiA9PT0gQU5ZKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIHRoaXMub3B0aW9ucylcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbXAodmVyc2lvbiwgdGhpcy5vcGVyYXRvciwgdGhpcy5zZW12ZXIsIHRoaXMub3B0aW9ucylcbiAgfVxuXG4gIGludGVyc2VjdHMgKGNvbXAsIG9wdGlvbnMpIHtcbiAgICBpZiAoIShjb21wIGluc3RhbmNlb2YgQ29tcGFyYXRvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2EgQ29tcGFyYXRvciBpcyByZXF1aXJlZCcpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICcnKSB7XG4gICAgICBpZiAodGhpcy52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmFuZ2UoY29tcC52YWx1ZSwgb3B0aW9ucykudGVzdCh0aGlzLnZhbHVlKVxuICAgIH0gZWxzZSBpZiAoY29tcC5vcGVyYXRvciA9PT0gJycpIHtcbiAgICAgIGlmIChjb21wLnZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSYW5nZSh0aGlzLnZhbHVlLCBvcHRpb25zKS50ZXN0KGNvbXAuc2VtdmVyKVxuICAgIH1cblxuICAgIG9wdGlvbnMgPSBwYXJzZU9wdGlvbnMob3B0aW9ucylcblxuICAgIC8vIFNwZWNpYWwgY2FzZXMgd2hlcmUgbm90aGluZyBjYW4gcG9zc2libHkgYmUgbG93ZXJcbiAgICBpZiAob3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSAmJlxuICAgICAgKHRoaXMudmFsdWUgPT09ICc8MC4wLjAtMCcgfHwgY29tcC52YWx1ZSA9PT0gJzwwLjAuMC0wJykpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UgJiZcbiAgICAgICh0aGlzLnZhbHVlLnN0YXJ0c1dpdGgoJzwwLjAuMCcpIHx8IGNvbXAudmFsdWUuc3RhcnRzV2l0aCgnPDAuMC4wJykpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBTYW1lIGRpcmVjdGlvbiBpbmNyZWFzaW5nICg+IG9yID49KVxuICAgIGlmICh0aGlzLm9wZXJhdG9yLnN0YXJ0c1dpdGgoJz4nKSAmJiBjb21wLm9wZXJhdG9yLnN0YXJ0c1dpdGgoJz4nKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gU2FtZSBkaXJlY3Rpb24gZGVjcmVhc2luZyAoPCBvciA8PSlcbiAgICBpZiAodGhpcy5vcGVyYXRvci5zdGFydHNXaXRoKCc8JykgJiYgY29tcC5vcGVyYXRvci5zdGFydHNXaXRoKCc8JykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIHNhbWUgU2VtVmVyIGFuZCBib3RoIHNpZGVzIGFyZSBpbmNsdXNpdmUgKDw9IG9yID49KVxuICAgIGlmIChcbiAgICAgICh0aGlzLnNlbXZlci52ZXJzaW9uID09PSBjb21wLnNlbXZlci52ZXJzaW9uKSAmJlxuICAgICAgdGhpcy5vcGVyYXRvci5pbmNsdWRlcygnPScpICYmIGNvbXAub3BlcmF0b3IuaW5jbHVkZXMoJz0nKSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gb3Bwb3NpdGUgZGlyZWN0aW9ucyBsZXNzIHRoYW5cbiAgICBpZiAoY21wKHRoaXMuc2VtdmVyLCAnPCcsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICAgdGhpcy5vcGVyYXRvci5zdGFydHNXaXRoKCc+JykgJiYgY29tcC5vcGVyYXRvci5zdGFydHNXaXRoKCc8JykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIC8vIG9wcG9zaXRlIGRpcmVjdGlvbnMgZ3JlYXRlciB0aGFuXG4gICAgaWYgKGNtcCh0aGlzLnNlbXZlciwgJz4nLCBjb21wLnNlbXZlciwgb3B0aW9ucykgJiZcbiAgICAgIHRoaXMub3BlcmF0b3Iuc3RhcnRzV2l0aCgnPCcpICYmIGNvbXAub3BlcmF0b3Iuc3RhcnRzV2l0aCgnPicpKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBhcmF0b3JcblxuY29uc3QgcGFyc2VPcHRpb25zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcGFyc2Utb3B0aW9ucycpXG5jb25zdCB7IHNhZmVSZTogcmUsIHQgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcbmNvbnN0IGNtcCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9jbXAnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9kZWJ1ZycpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4vcmFuZ2UnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/classes/comparator.js\n");

/***/ }),

/***/ "../node_modules/semver/classes/range.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/classes/range.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SPACE_CHARACTERS = /\\s+/g\n\n// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.formatted = undefined\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ')\n\n    // First, split on ||\n    this.set = this.raw\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.formatted = undefined\n  }\n\n  get range () {\n    if (this.formatted === undefined) {\n      this.formatted = ''\n      for (let i = 0; i < this.set.length; i++) {\n        if (i > 0) {\n          this.formatted += '||'\n        }\n        const comps = this.set[i]\n        for (let k = 0; k < comps.length; k++) {\n          if (k > 0) {\n            this.formatted += ' '\n          }\n          this.formatted += comps[k].toString().trim()\n        }\n      }\n    }\n    return this.formatted\n  }\n\n  format () {\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n    debug('tilde trim', range)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n    debug('caret trim', range)\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = __webpack_require__(/*! ../internal/lrucache */ \"../node_modules/semver/internal/lrucache.js\")\nconst cache = new LRU()\n\nconst parseOptions = __webpack_require__(/*! ../internal/parse-options */ \"../node_modules/semver/internal/parse-options.js\")\nconst Comparator = __webpack_require__(/*! ./comparator */ \"../node_modules/semver/classes/comparator.js\")\nconst debug = __webpack_require__(/*! ../internal/debug */ \"../node_modules/semver/internal/debug.js\")\nconst SemVer = __webpack_require__(/*! ./semver */ \"../node_modules/semver/classes/semver.js\")\nconst {\n  safeRe: re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = __webpack_require__(/*! ../internal/re */ \"../node_modules/semver/internal/re.js\")\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = __webpack_require__(/*! ../internal/constants */ \"../node_modules/semver/internal/constants.js\")\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceTilde(c, options))\n    .join(' ')\n}\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceCaret(c, options))\n    .join(' ')\n}\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp\n    .split(/\\s+/)\n    .map((c) => replaceXRange(c, options))\n    .join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp\n    .trim()\n    .replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp\n    .trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n// TODO build?\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return `${from} ${to}`.trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/semver/classes/range.js\n");

/***/ }),

/***/ "../node_modules/semver/classes/semver.js":
/*!************************************************!*\
  !*** ../node_modules/semver/classes/semver.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const debug = __webpack_require__(/*! ../internal/debug */ \"../node_modules/semver/internal/debug.js\")\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(/*! ../internal/constants */ \"../node_modules/semver/internal/constants.js\")\nconst { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ \"../node_modules/semver/internal/re.js\")\n\nconst parseOptions = __webpack_require__(/*! ../internal/parse-options */ \"../node_modules/semver/internal/parse-options.js\")\nconst { compareIdentifiers } = __webpack_require__(/*! ../internal/identifiers */ \"../node_modules/semver/internal/identifiers.js\")\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('build compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier, identifierBase) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier, identifierBase)\n        this.inc('pre', identifier, identifierBase)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase)\n        }\n        this.inc('pre', identifier, identifierBase)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre': {\n        const base = Number(identifierBase) ? 1 : 0\n\n        if (!identifier && identifierBase === false) {\n          throw new Error('invalid increment argument: identifier is empty')\n        }\n\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\n              throw new Error('invalid increment argument: identifier already exists')\n            }\n            this.prerelease.push(base)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          let prerelease = [identifier, base]\n          if (identifierBase === false) {\n            prerelease = [identifier]\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease\n            }\n          } else {\n            this.prerelease = prerelease\n          }\n        }\n        break\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.raw = this.format()\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`\n    }\n    return this\n  }\n}\n\nmodule.exports = SemVer\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/semver/classes/semver.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/clean.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/clean.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parse = __webpack_require__(/*! ./parse */ \"../node_modules/semver/functions/parse.js\")\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY2xlYW4uanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLDBEQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jbGVhbi5qcz8yYWUyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCBjbGVhbiA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHMgPSBwYXJzZSh2ZXJzaW9uLnRyaW0oKS5yZXBsYWNlKC9eWz12XSsvLCAnJyksIG9wdGlvbnMpXG4gIHJldHVybiBzID8gcy52ZXJzaW9uIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBjbGVhblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/clean.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/cmp.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/cmp.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const eq = __webpack_require__(/*! ./eq */ \"../node_modules/semver/functions/eq.js\")\nconst neq = __webpack_require__(/*! ./neq */ \"../node_modules/semver/functions/neq.js\")\nconst gt = __webpack_require__(/*! ./gt */ \"../node_modules/semver/functions/gt.js\")\nconst gte = __webpack_require__(/*! ./gte */ \"../node_modules/semver/functions/gte.js\")\nconst lt = __webpack_require__(/*! ./lt */ \"../node_modules/semver/functions/lt.js\")\nconst lte = __webpack_require__(/*! ./lte */ \"../node_modules/semver/functions/lte.js\")\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY21wLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxvREFBTTtBQUN6QixZQUFZLG1CQUFPLENBQUMsc0RBQU87QUFDM0IsV0FBVyxtQkFBTyxDQUFDLG9EQUFNO0FBQ3pCLFlBQVksbUJBQU8sQ0FBQyxzREFBTztBQUMzQixXQUFXLG1CQUFPLENBQUMsb0RBQU07QUFDekIsWUFBWSxtQkFBTyxDQUFDLHNEQUFPOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxHQUFHO0FBQ2xEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NtcC5qcz9mNjU0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVxID0gcmVxdWlyZSgnLi9lcScpXG5jb25zdCBuZXEgPSByZXF1aXJlKCcuL25lcScpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4vZ3QnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi9ndGUnKVxuY29uc3QgbHQgPSByZXF1aXJlKCcuL2x0JylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4vbHRlJylcblxuY29uc3QgY21wID0gKGEsIG9wLCBiLCBsb29zZSkgPT4ge1xuICBzd2l0Y2ggKG9wKSB7XG4gICAgY2FzZSAnPT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICB9XG4gICAgICByZXR1cm4gYSA9PT0gYlxuXG4gICAgY2FzZSAnIT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICB9XG4gICAgICByZXR1cm4gYSAhPT0gYlxuXG4gICAgY2FzZSAnJzpcbiAgICBjYXNlICc9JzpcbiAgICBjYXNlICc9PSc6XG4gICAgICByZXR1cm4gZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4gbmVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gZ3QoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gZ3RlKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gbHQoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8PSc6XG4gICAgICByZXR1cm4gbHRlKGEsIGIsIGxvb3NlKVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgb3BlcmF0b3I6ICR7b3B9YClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjbXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/cmp.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/coerce.js":
/*!**************************************************!*\
  !*** ../node_modules/semver/functions/coerce.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst parse = __webpack_require__(/*! ./parse */ \"../node_modules/semver/functions/parse.js\")\nconst { safeRe: re, t } = __webpack_require__(/*! ../internal/re */ \"../node_modules/semver/internal/re.js\")\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\n    let next\n    while ((next = coerceRtlRegex.exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  const major = match[2]\n  const minor = match[3] || '0'\n  const patch = match[4] || '0'\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\n\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n}\nmodule.exports = coerce\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29lcmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxtRUFBbUI7QUFDMUMsY0FBYyxtQkFBTyxDQUFDLDBEQUFTO0FBQy9CLFFBQVEsZ0JBQWdCLEVBQUUsbUJBQU8sQ0FBQyw2REFBZ0I7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxTQUFTO0FBQzFFLDREQUE0RCxTQUFTOztBQUVyRSxrQkFBa0IsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU07QUFDL0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvZXJjZS5qcz8yN2Y4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCB7IHNhZmVSZTogcmUsIHQgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcblxuY29uc3QgY29lcmNlID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICByZXR1cm4gdmVyc2lvblxuICB9XG5cbiAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnbnVtYmVyJykge1xuICAgIHZlcnNpb24gPSBTdHJpbmcodmVyc2lvbilcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBsZXQgbWF0Y2ggPSBudWxsXG4gIGlmICghb3B0aW9ucy5ydGwpIHtcbiAgICBtYXRjaCA9IHZlcnNpb24ubWF0Y2gob3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSA/IHJlW3QuQ09FUkNFRlVMTF0gOiByZVt0LkNPRVJDRV0pXG4gIH0gZWxzZSB7XG4gICAgLy8gRmluZCB0aGUgcmlnaHQtbW9zdCBjb2VyY2libGUgc3RyaW5nIHRoYXQgZG9lcyBub3Qgc2hhcmVcbiAgICAvLyBhIHRlcm1pbnVzIHdpdGggYSBtb3JlIGxlZnQtd2FyZCBjb2VyY2libGUgc3RyaW5nLlxuICAgIC8vIEVnLCAnMS4yLjMuNCcgd2FudHMgdG8gY29lcmNlICcyLjMuNCcsIG5vdCAnMy40JyBvciAnNCdcbiAgICAvLyBXaXRoIGluY2x1ZGVQcmVyZWxlYXNlIG9wdGlvbiBzZXQsICcxLjIuMy40LXJjJyB3YW50cyB0byBjb2VyY2UgJzIuMy40LXJjJywgbm90ICcyLjMuNCdcbiAgICAvL1xuICAgIC8vIFdhbGsgdGhyb3VnaCB0aGUgc3RyaW5nIGNoZWNraW5nIHdpdGggYSAvZyByZWdleHBcbiAgICAvLyBNYW51YWxseSBzZXQgdGhlIGluZGV4IHNvIGFzIHRvIHBpY2sgdXAgb3ZlcmxhcHBpbmcgbWF0Y2hlcy5cbiAgICAvLyBTdG9wIHdoZW4gd2UgZ2V0IGEgbWF0Y2ggdGhhdCBlbmRzIGF0IHRoZSBzdHJpbmcgZW5kLCBzaW5jZSBub1xuICAgIC8vIGNvZXJjaWJsZSBzdHJpbmcgY2FuIGJlIG1vcmUgcmlnaHQtd2FyZCB3aXRob3V0IHRoZSBzYW1lIHRlcm1pbnVzLlxuICAgIGNvbnN0IGNvZXJjZVJ0bFJlZ2V4ID0gb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSA/IHJlW3QuQ09FUkNFUlRMRlVMTF0gOiByZVt0LkNPRVJDRVJUTF1cbiAgICBsZXQgbmV4dFxuICAgIHdoaWxlICgobmV4dCA9IGNvZXJjZVJ0bFJlZ2V4LmV4ZWModmVyc2lvbikpICYmXG4gICAgICAgICghbWF0Y2ggfHwgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggIT09IHZlcnNpb24ubGVuZ3RoKVxuICAgICkge1xuICAgICAgaWYgKCFtYXRjaCB8fFxuICAgICAgICAgICAgbmV4dC5pbmRleCArIG5leHRbMF0ubGVuZ3RoICE9PSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCkge1xuICAgICAgICBtYXRjaCA9IG5leHRcbiAgICAgIH1cbiAgICAgIGNvZXJjZVJ0bFJlZ2V4Lmxhc3RJbmRleCA9IG5leHQuaW5kZXggKyBuZXh0WzFdLmxlbmd0aCArIG5leHRbMl0ubGVuZ3RoXG4gICAgfVxuICAgIC8vIGxlYXZlIGl0IGluIGEgY2xlYW4gc3RhdGVcbiAgICBjb2VyY2VSdGxSZWdleC5sYXN0SW5kZXggPSAtMVxuICB9XG5cbiAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IG1ham9yID0gbWF0Y2hbMl1cbiAgY29uc3QgbWlub3IgPSBtYXRjaFszXSB8fCAnMCdcbiAgY29uc3QgcGF0Y2ggPSBtYXRjaFs0XSB8fCAnMCdcbiAgY29uc3QgcHJlcmVsZWFzZSA9IG9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UgJiYgbWF0Y2hbNV0gPyBgLSR7bWF0Y2hbNV19YCA6ICcnXG4gIGNvbnN0IGJ1aWxkID0gb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSAmJiBtYXRjaFs2XSA/IGArJHttYXRjaFs2XX1gIDogJydcblxuICByZXR1cm4gcGFyc2UoYCR7bWFqb3J9LiR7bWlub3J9LiR7cGF0Y2h9JHtwcmVyZWxlYXNlfSR7YnVpbGR9YCwgb3B0aW9ucylcbn1cbm1vZHVsZS5leHBvcnRzID0gY29lcmNlXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/coerce.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/compare-build.js":
/*!*********************************************************!*\
  !*** ../node_modules/semver/functions/compare-build.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsbUVBQW1CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQuanM/OGQxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlQnVpbGQgPSAoYSwgYiwgbG9vc2UpID0+IHtcbiAgY29uc3QgdmVyc2lvbkEgPSBuZXcgU2VtVmVyKGEsIGxvb3NlKVxuICBjb25zdCB2ZXJzaW9uQiA9IG5ldyBTZW1WZXIoYiwgbG9vc2UpXG4gIHJldHVybiB2ZXJzaW9uQS5jb21wYXJlKHZlcnNpb25CKSB8fCB2ZXJzaW9uQS5jb21wYXJlQnVpbGQodmVyc2lvbkIpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVCdWlsZFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/compare-build.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/compare-loose.js":
/*!*********************************************************!*\
  !*** ../node_modules/semver/functions/compare-loose.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS1sb29zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyw4REFBVztBQUNuQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS1sb29zZS5qcz8xODg1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgY29tcGFyZUxvb3NlID0gKGEsIGIpID0+IGNvbXBhcmUoYSwgYiwgdHJ1ZSlcbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZUxvb3NlXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/compare-loose.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/compare.js":
/*!***************************************************!*\
  !*** ../node_modules/semver/functions/compare.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsbUVBQW1CO0FBQzFDO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb21wYXJlLmpzP2M1OWEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgY29tcGFyZSA9IChhLCBiLCBsb29zZSkgPT5cbiAgbmV3IFNlbVZlcihhLCBsb29zZSkuY29tcGFyZShuZXcgU2VtVmVyKGIsIGxvb3NlKSlcblxubW9kdWxlLmV4cG9ydHMgPSBjb21wYXJlXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/compare.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/diff.js":
/*!************************************************!*\
  !*** ../node_modules/semver/functions/diff.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parse = __webpack_require__(/*! ./parse.js */ \"../node_modules/semver/functions/parse.js\")\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n  const lowHasPre = !!lowVersion.prerelease.length\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major'\n    }\n\n    // Otherwise it can be determined by checking the high version\n\n    if (highVersion.patch) {\n      // anything higher than a patch bump would result in the wrong version\n      return 'patch'\n    }\n\n    if (highVersion.minor) {\n      // anything higher than a minor bump would result in the wrong version\n      return 'minor'\n    }\n\n    // bumping major/minor/patch all have same result\n    return 'major'\n  }\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // high and low are preleases\n  return 'prerelease'\n}\n\nmodule.exports = diff\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZGlmZi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsNkRBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9kaWZmLmpzPzgyNGYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlLmpzJylcblxuY29uc3QgZGlmZiA9ICh2ZXJzaW9uMSwgdmVyc2lvbjIpID0+IHtcbiAgY29uc3QgdjEgPSBwYXJzZSh2ZXJzaW9uMSwgbnVsbCwgdHJ1ZSlcbiAgY29uc3QgdjIgPSBwYXJzZSh2ZXJzaW9uMiwgbnVsbCwgdHJ1ZSlcbiAgY29uc3QgY29tcGFyaXNvbiA9IHYxLmNvbXBhcmUodjIpXG5cbiAgaWYgKGNvbXBhcmlzb24gPT09IDApIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgdjFIaWdoZXIgPSBjb21wYXJpc29uID4gMFxuICBjb25zdCBoaWdoVmVyc2lvbiA9IHYxSGlnaGVyID8gdjEgOiB2MlxuICBjb25zdCBsb3dWZXJzaW9uID0gdjFIaWdoZXIgPyB2MiA6IHYxXG4gIGNvbnN0IGhpZ2hIYXNQcmUgPSAhIWhpZ2hWZXJzaW9uLnByZXJlbGVhc2UubGVuZ3RoXG4gIGNvbnN0IGxvd0hhc1ByZSA9ICEhbG93VmVyc2lvbi5wcmVyZWxlYXNlLmxlbmd0aFxuXG4gIGlmIChsb3dIYXNQcmUgJiYgIWhpZ2hIYXNQcmUpIHtcbiAgICAvLyBHb2luZyBmcm9tIHByZXJlbGVhc2UgLT4gbm8gcHJlcmVsZWFzZSByZXF1aXJlcyBzb21lIHNwZWNpYWwgY2FzaW5nXG5cbiAgICAvLyBJZiB0aGUgbG93IHZlcnNpb24gaGFzIG9ubHkgYSBtYWpvciwgdGhlbiBpdCB3aWxsIGFsd2F5cyBiZSBhIG1ham9yXG4gICAgLy8gU29tZSBleGFtcGxlczpcbiAgICAvLyAxLjAuMC0xIC0+IDEuMC4wXG4gICAgLy8gMS4wLjAtMSAtPiAxLjEuMVxuICAgIC8vIDEuMC4wLTEgLT4gMi4wLjBcbiAgICBpZiAoIWxvd1ZlcnNpb24ucGF0Y2ggJiYgIWxvd1ZlcnNpb24ubWlub3IpIHtcbiAgICAgIHJldHVybiAnbWFqb3InXG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlIGl0IGNhbiBiZSBkZXRlcm1pbmVkIGJ5IGNoZWNraW5nIHRoZSBoaWdoIHZlcnNpb25cblxuICAgIGlmIChoaWdoVmVyc2lvbi5wYXRjaCkge1xuICAgICAgLy8gYW55dGhpbmcgaGlnaGVyIHRoYW4gYSBwYXRjaCBidW1wIHdvdWxkIHJlc3VsdCBpbiB0aGUgd3JvbmcgdmVyc2lvblxuICAgICAgcmV0dXJuICdwYXRjaCdcbiAgICB9XG5cbiAgICBpZiAoaGlnaFZlcnNpb24ubWlub3IpIHtcbiAgICAgIC8vIGFueXRoaW5nIGhpZ2hlciB0aGFuIGEgbWlub3IgYnVtcCB3b3VsZCByZXN1bHQgaW4gdGhlIHdyb25nIHZlcnNpb25cbiAgICAgIHJldHVybiAnbWlub3InXG4gICAgfVxuXG4gICAgLy8gYnVtcGluZyBtYWpvci9taW5vci9wYXRjaCBhbGwgaGF2ZSBzYW1lIHJlc3VsdFxuICAgIHJldHVybiAnbWFqb3InXG4gIH1cblxuICAvLyBhZGQgdGhlIGBwcmVgIHByZWZpeCBpZiB3ZSBhcmUgZ29pbmcgdG8gYSBwcmVyZWxlYXNlIHZlcnNpb25cbiAgY29uc3QgcHJlZml4ID0gaGlnaEhhc1ByZSA/ICdwcmUnIDogJydcblxuICBpZiAodjEubWFqb3IgIT09IHYyLm1ham9yKSB7XG4gICAgcmV0dXJuIHByZWZpeCArICdtYWpvcidcbiAgfVxuXG4gIGlmICh2MS5taW5vciAhPT0gdjIubWlub3IpIHtcbiAgICByZXR1cm4gcHJlZml4ICsgJ21pbm9yJ1xuICB9XG5cbiAgaWYgKHYxLnBhdGNoICE9PSB2Mi5wYXRjaCkge1xuICAgIHJldHVybiBwcmVmaXggKyAncGF0Y2gnXG4gIH1cblxuICAvLyBoaWdoIGFuZCBsb3cgYXJlIHByZWxlYXNlc1xuICByZXR1cm4gJ3ByZXJlbGVhc2UnXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGlmZlxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/diff.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/eq.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/functions/eq.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZXEuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsOERBQVc7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2VxLmpzPzQ0ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBlcSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPT09IDBcbm1vZHVsZS5leHBvcnRzID0gZXFcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/eq.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/gt.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/functions/gt.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZ3QuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsOERBQVc7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2d0LmpzPzlmYWEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBndCA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPiAwXG5tb2R1bGUuZXhwb3J0cyA9IGd0XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/gt.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/gte.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/gte.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZ3RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFXO0FBQ25DO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9ndGUuanM/MmU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGd0ZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPj0gMFxubW9kdWxlLmV4cG9ydHMgPSBndGVcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/gte.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/inc.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/inc.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\n\nconst inc = (version, release, options, identifier, identifierBase) => {\n  if (typeof (options) === 'string') {\n    identifierBase = identifier\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier, identifierBase).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvaW5jLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxtRUFBbUI7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvaW5jLmpzP2Q4ODAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuXG5jb25zdCBpbmMgPSAodmVyc2lvbiwgcmVsZWFzZSwgb3B0aW9ucywgaWRlbnRpZmllciwgaWRlbnRpZmllckJhc2UpID0+IHtcbiAgaWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdzdHJpbmcnKSB7XG4gICAgaWRlbnRpZmllckJhc2UgPSBpZGVudGlmaWVyXG4gICAgaWRlbnRpZmllciA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKFxuICAgICAgdmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlciA/IHZlcnNpb24udmVyc2lvbiA6IHZlcnNpb24sXG4gICAgICBvcHRpb25zXG4gICAgKS5pbmMocmVsZWFzZSwgaWRlbnRpZmllciwgaWRlbnRpZmllckJhc2UpLnZlcnNpb25cbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/inc.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/lt.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/functions/lt.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsOERBQVc7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2x0LmpzP2E5ODgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBsdCA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPCAwXG5tb2R1bGUuZXhwb3J0cyA9IGx0XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/lt.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/lte.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/lte.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbHRlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFXO0FBQ25DO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9sdGUuanM/YWEyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGx0ZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPD0gMFxubW9kdWxlLmV4cG9ydHMgPSBsdGVcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/lte.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/major.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/major.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbWFqb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbWFqb3IuanM/Mzc5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBtYWpvciA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkubWFqb3Jcbm1vZHVsZS5leHBvcnRzID0gbWFqb3JcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/major.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/minor.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/minor.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbWlub3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbWlub3IuanM/NzQ2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBtaW5vciA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkubWlub3Jcbm1vZHVsZS5leHBvcnRzID0gbWlub3JcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/minor.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/neq.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/functions/neq.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbmVxLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLDhEQUFXO0FBQ25DO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9uZXEuanM/NWFkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IG5lcSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgIT09IDBcbm1vZHVsZS5leHBvcnRzID0gbmVxXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/neq.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/parse.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/parse.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst parse = (version, options, throwErrors = false) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    if (!throwErrors) {\n      return null\n    }\n    throw er\n  }\n}\n\nmodule.exports = parse\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGFyc2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGFyc2UuanM/NzlmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBwYXJzZSA9ICh2ZXJzaW9uLCBvcHRpb25zLCB0aHJvd0Vycm9ycyA9IGZhbHNlKSA9PiB7XG4gIGlmICh2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyKSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgaWYgKCF0aHJvd0Vycm9ycykge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgdGhyb3cgZXJcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/parse.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/patch.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/patch.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGF0Y2guanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGF0Y2guanM/ZjE1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBwYXRjaCA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkucGF0Y2hcbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/patch.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/prerelease.js":
/*!******************************************************!*\
  !*** ../node_modules/semver/functions/prerelease.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parse = __webpack_require__(/*! ./parse */ \"../node_modules/semver/functions/parse.js\")\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcHJlcmVsZWFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsMERBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ByZXJlbGVhc2UuanM/ZmQyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgcHJlcmVsZWFzZSA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiAocGFyc2VkICYmIHBhcnNlZC5wcmVyZWxlYXNlLmxlbmd0aCkgPyBwYXJzZWQucHJlcmVsZWFzZSA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gcHJlcmVsZWFzZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/prerelease.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/rcompare.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/functions/rcompare.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compare = __webpack_require__(/*! ./compare */ \"../node_modules/semver/functions/compare.js\")\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcmNvbXBhcmUuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsOERBQVc7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3Jjb21wYXJlLmpzPzRlMTciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCByY29tcGFyZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShiLCBhLCBsb29zZSlcbm1vZHVsZS5leHBvcnRzID0gcmNvbXBhcmVcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/rcompare.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/rsort.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/rsort.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compareBuild = __webpack_require__(/*! ./compare-build */ \"../node_modules/semver/functions/compare-build.js\")\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcnNvcnQuanMiLCJtYXBwaW5ncyI6IkFBQUEscUJBQXFCLG1CQUFPLENBQUMsMEVBQWlCO0FBQzlDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9yc29ydC5qcz9lODNhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vY29tcGFyZS1idWlsZCcpXG5jb25zdCByc29ydCA9IChsaXN0LCBsb29zZSkgPT4gbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlQnVpbGQoYiwgYSwgbG9vc2UpKVxubW9kdWxlLmV4cG9ydHMgPSByc29ydFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/rsort.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/satisfies.js":
/*!*****************************************************!*\
  !*** ../node_modules/semver/functions/satisfies.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvc2F0aXNmaWVzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxpRUFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9zYXRpc2ZpZXMuanM/M2JjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3Qgc2F0aXNmaWVzID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIHRyeSB7XG4gICAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHJhbmdlLnRlc3QodmVyc2lvbilcbn1cbm1vZHVsZS5leHBvcnRzID0gc2F0aXNmaWVzXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/satisfies.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/sort.js":
/*!************************************************!*\
  !*** ../node_modules/semver/functions/sort.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const compareBuild = __webpack_require__(/*! ./compare-build */ \"../node_modules/semver/functions/compare-build.js\")\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvc29ydC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsbUJBQU8sQ0FBQywwRUFBaUI7QUFDOUM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NvcnQuanM/NDBkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21wYXJlQnVpbGQgPSByZXF1aXJlKCcuL2NvbXBhcmUtYnVpbGQnKVxuY29uc3Qgc29ydCA9IChsaXN0LCBsb29zZSkgPT4gbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlQnVpbGQoYSwgYiwgbG9vc2UpKVxubW9kdWxlLmV4cG9ydHMgPSBzb3J0XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/sort.js\n");

/***/ }),

/***/ "../node_modules/semver/functions/valid.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/functions/valid.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const parse = __webpack_require__(/*! ./parse */ \"../node_modules/semver/functions/parse.js\")\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvdmFsaWQuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLDBEQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy92YWxpZC5qcz8yNWE2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCB2YWxpZCA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHYgPSBwYXJzZSh2ZXJzaW9uLCBvcHRpb25zKVxuICByZXR1cm4gdiA/IHYudmVyc2lvbiA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/functions/valid.js\n");

/***/ }),

/***/ "../node_modules/semver/index.js":
/*!***************************************!*\
  !*** ../node_modules/semver/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// just pre-load all the stuff that index.js lazily exports\nconst internalRe = __webpack_require__(/*! ./internal/re */ \"../node_modules/semver/internal/re.js\")\nconst constants = __webpack_require__(/*! ./internal/constants */ \"../node_modules/semver/internal/constants.js\")\nconst SemVer = __webpack_require__(/*! ./classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst identifiers = __webpack_require__(/*! ./internal/identifiers */ \"../node_modules/semver/internal/identifiers.js\")\nconst parse = __webpack_require__(/*! ./functions/parse */ \"../node_modules/semver/functions/parse.js\")\nconst valid = __webpack_require__(/*! ./functions/valid */ \"../node_modules/semver/functions/valid.js\")\nconst clean = __webpack_require__(/*! ./functions/clean */ \"../node_modules/semver/functions/clean.js\")\nconst inc = __webpack_require__(/*! ./functions/inc */ \"../node_modules/semver/functions/inc.js\")\nconst diff = __webpack_require__(/*! ./functions/diff */ \"../node_modules/semver/functions/diff.js\")\nconst major = __webpack_require__(/*! ./functions/major */ \"../node_modules/semver/functions/major.js\")\nconst minor = __webpack_require__(/*! ./functions/minor */ \"../node_modules/semver/functions/minor.js\")\nconst patch = __webpack_require__(/*! ./functions/patch */ \"../node_modules/semver/functions/patch.js\")\nconst prerelease = __webpack_require__(/*! ./functions/prerelease */ \"../node_modules/semver/functions/prerelease.js\")\nconst compare = __webpack_require__(/*! ./functions/compare */ \"../node_modules/semver/functions/compare.js\")\nconst rcompare = __webpack_require__(/*! ./functions/rcompare */ \"../node_modules/semver/functions/rcompare.js\")\nconst compareLoose = __webpack_require__(/*! ./functions/compare-loose */ \"../node_modules/semver/functions/compare-loose.js\")\nconst compareBuild = __webpack_require__(/*! ./functions/compare-build */ \"../node_modules/semver/functions/compare-build.js\")\nconst sort = __webpack_require__(/*! ./functions/sort */ \"../node_modules/semver/functions/sort.js\")\nconst rsort = __webpack_require__(/*! ./functions/rsort */ \"../node_modules/semver/functions/rsort.js\")\nconst gt = __webpack_require__(/*! ./functions/gt */ \"../node_modules/semver/functions/gt.js\")\nconst lt = __webpack_require__(/*! ./functions/lt */ \"../node_modules/semver/functions/lt.js\")\nconst eq = __webpack_require__(/*! ./functions/eq */ \"../node_modules/semver/functions/eq.js\")\nconst neq = __webpack_require__(/*! ./functions/neq */ \"../node_modules/semver/functions/neq.js\")\nconst gte = __webpack_require__(/*! ./functions/gte */ \"../node_modules/semver/functions/gte.js\")\nconst lte = __webpack_require__(/*! ./functions/lte */ \"../node_modules/semver/functions/lte.js\")\nconst cmp = __webpack_require__(/*! ./functions/cmp */ \"../node_modules/semver/functions/cmp.js\")\nconst coerce = __webpack_require__(/*! ./functions/coerce */ \"../node_modules/semver/functions/coerce.js\")\nconst Comparator = __webpack_require__(/*! ./classes/comparator */ \"../node_modules/semver/classes/comparator.js\")\nconst Range = __webpack_require__(/*! ./classes/range */ \"../node_modules/semver/classes/range.js\")\nconst satisfies = __webpack_require__(/*! ./functions/satisfies */ \"../node_modules/semver/functions/satisfies.js\")\nconst toComparators = __webpack_require__(/*! ./ranges/to-comparators */ \"../node_modules/semver/ranges/to-comparators.js\")\nconst maxSatisfying = __webpack_require__(/*! ./ranges/max-satisfying */ \"../node_modules/semver/ranges/max-satisfying.js\")\nconst minSatisfying = __webpack_require__(/*! ./ranges/min-satisfying */ \"../node_modules/semver/ranges/min-satisfying.js\")\nconst minVersion = __webpack_require__(/*! ./ranges/min-version */ \"../node_modules/semver/ranges/min-version.js\")\nconst validRange = __webpack_require__(/*! ./ranges/valid */ \"../node_modules/semver/ranges/valid.js\")\nconst outside = __webpack_require__(/*! ./ranges/outside */ \"../node_modules/semver/ranges/outside.js\")\nconst gtr = __webpack_require__(/*! ./ranges/gtr */ \"../node_modules/semver/ranges/gtr.js\")\nconst ltr = __webpack_require__(/*! ./ranges/ltr */ \"../node_modules/semver/ranges/ltr.js\")\nconst intersects = __webpack_require__(/*! ./ranges/intersects */ \"../node_modules/semver/ranges/intersects.js\")\nconst simplifyRange = __webpack_require__(/*! ./ranges/simplify */ \"../node_modules/semver/ranges/simplify.js\")\nconst subset = __webpack_require__(/*! ./ranges/subset */ \"../node_modules/semver/ranges/subset.js\")\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  RELEASE_TYPES: constants.RELEASE_TYPES,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLG1CQUFtQixtQkFBTyxDQUFDLDREQUFlO0FBQzFDLGtCQUFrQixtQkFBTyxDQUFDLDBFQUFzQjtBQUNoRCxlQUFlLG1CQUFPLENBQUMsa0VBQWtCO0FBQ3pDLG9CQUFvQixtQkFBTyxDQUFDLDhFQUF3QjtBQUNwRCxjQUFjLG1CQUFPLENBQUMsb0VBQW1CO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyxvRUFBbUI7QUFDekMsY0FBYyxtQkFBTyxDQUFDLG9FQUFtQjtBQUN6QyxZQUFZLG1CQUFPLENBQUMsZ0VBQWlCO0FBQ3JDLGFBQWEsbUJBQU8sQ0FBQyxrRUFBa0I7QUFDdkMsY0FBYyxtQkFBTyxDQUFDLG9FQUFtQjtBQUN6QyxjQUFjLG1CQUFPLENBQUMsb0VBQW1CO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyxvRUFBbUI7QUFDekMsbUJBQW1CLG1CQUFPLENBQUMsOEVBQXdCO0FBQ25ELGdCQUFnQixtQkFBTyxDQUFDLHdFQUFxQjtBQUM3QyxpQkFBaUIsbUJBQU8sQ0FBQywwRUFBc0I7QUFDL0MscUJBQXFCLG1CQUFPLENBQUMsb0ZBQTJCO0FBQ3hELHFCQUFxQixtQkFBTyxDQUFDLG9GQUEyQjtBQUN4RCxhQUFhLG1CQUFPLENBQUMsa0VBQWtCO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQyxvRUFBbUI7QUFDekMsV0FBVyxtQkFBTyxDQUFDLDhEQUFnQjtBQUNuQyxXQUFXLG1CQUFPLENBQUMsOERBQWdCO0FBQ25DLFdBQVcsbUJBQU8sQ0FBQyw4REFBZ0I7QUFDbkMsWUFBWSxtQkFBTyxDQUFDLGdFQUFpQjtBQUNyQyxZQUFZLG1CQUFPLENBQUMsZ0VBQWlCO0FBQ3JDLFlBQVksbUJBQU8sQ0FBQyxnRUFBaUI7QUFDckMsWUFBWSxtQkFBTyxDQUFDLGdFQUFpQjtBQUNyQyxlQUFlLG1CQUFPLENBQUMsc0VBQW9CO0FBQzNDLG1CQUFtQixtQkFBTyxDQUFDLDBFQUFzQjtBQUNqRCxjQUFjLG1CQUFPLENBQUMsZ0VBQWlCO0FBQ3ZDLGtCQUFrQixtQkFBTyxDQUFDLDRFQUF1QjtBQUNqRCxzQkFBc0IsbUJBQU8sQ0FBQyxnRkFBeUI7QUFDdkQsc0JBQXNCLG1CQUFPLENBQUMsZ0ZBQXlCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLGdGQUF5QjtBQUN2RCxtQkFBbUIsbUJBQU8sQ0FBQywwRUFBc0I7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsOERBQWdCO0FBQzNDLGdCQUFnQixtQkFBTyxDQUFDLGtFQUFrQjtBQUMxQyxZQUFZLG1CQUFPLENBQUMsMERBQWM7QUFDbEMsWUFBWSxtQkFBTyxDQUFDLDBEQUFjO0FBQ2xDLG1CQUFtQixtQkFBTyxDQUFDLHdFQUFxQjtBQUNoRCxzQkFBc0IsbUJBQU8sQ0FBQyxvRUFBbUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGdFQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbmRleC5qcz9iZGUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGp1c3QgcHJlLWxvYWQgYWxsIHRoZSBzdHVmZiB0aGF0IGluZGV4LmpzIGxhemlseSBleHBvcnRzXG5jb25zdCBpbnRlcm5hbFJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9yZScpXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2ludGVybmFsL2NvbnN0YW50cycpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IGlkZW50aWZpZXJzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9pZGVudGlmaWVycycpXG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3BhcnNlJylcbmNvbnN0IHZhbGlkID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvdmFsaWQnKVxuY29uc3QgY2xlYW4gPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbGVhbicpXG5jb25zdCBpbmMgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9pbmMnKVxuY29uc3QgZGlmZiA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2RpZmYnKVxuY29uc3QgbWFqb3IgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9tYWpvcicpXG5jb25zdCBtaW5vciA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL21pbm9yJylcbmNvbnN0IHBhdGNoID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvcGF0Y2gnKVxuY29uc3QgcHJlcmVsZWFzZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ByZXJlbGVhc2UnKVxuY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvbXBhcmUnKVxuY29uc3QgcmNvbXBhcmUgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9yY29tcGFyZScpXG5jb25zdCBjb21wYXJlTG9vc2UgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb21wYXJlLWxvb3NlJylcbmNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQnKVxuY29uc3Qgc29ydCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3NvcnQnKVxuY29uc3QgcnNvcnQgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9yc29ydCcpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2d0JylcbmNvbnN0IGx0ID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvbHQnKVxuY29uc3QgZXEgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9lcScpXG5jb25zdCBuZXEgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9uZXEnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvZ3RlJylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0ZScpXG5jb25zdCBjbXAgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbXAnKVxuY29uc3QgY29lcmNlID0gcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29lcmNlJylcbmNvbnN0IENvbXBhcmF0b3IgPSByZXF1aXJlKCcuL2NsYXNzZXMvY29tcGFyYXRvcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuL2Z1bmN0aW9ucy9zYXRpc2ZpZXMnKVxuY29uc3QgdG9Db21wYXJhdG9ycyA9IHJlcXVpcmUoJy4vcmFuZ2VzL3RvLWNvbXBhcmF0b3JzJylcbmNvbnN0IG1heFNhdGlzZnlpbmcgPSByZXF1aXJlKCcuL3Jhbmdlcy9tYXgtc2F0aXNmeWluZycpXG5jb25zdCBtaW5TYXRpc2Z5aW5nID0gcmVxdWlyZSgnLi9yYW5nZXMvbWluLXNhdGlzZnlpbmcnKVxuY29uc3QgbWluVmVyc2lvbiA9IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi12ZXJzaW9uJylcbmNvbnN0IHZhbGlkUmFuZ2UgPSByZXF1aXJlKCcuL3Jhbmdlcy92YWxpZCcpXG5jb25zdCBvdXRzaWRlID0gcmVxdWlyZSgnLi9yYW5nZXMvb3V0c2lkZScpXG5jb25zdCBndHIgPSByZXF1aXJlKCcuL3Jhbmdlcy9ndHInKVxuY29uc3QgbHRyID0gcmVxdWlyZSgnLi9yYW5nZXMvbHRyJylcbmNvbnN0IGludGVyc2VjdHMgPSByZXF1aXJlKCcuL3Jhbmdlcy9pbnRlcnNlY3RzJylcbmNvbnN0IHNpbXBsaWZ5UmFuZ2UgPSByZXF1aXJlKCcuL3Jhbmdlcy9zaW1wbGlmeScpXG5jb25zdCBzdWJzZXQgPSByZXF1aXJlKCcuL3Jhbmdlcy9zdWJzZXQnKVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlLFxuICB2YWxpZCxcbiAgY2xlYW4sXG4gIGluYyxcbiAgZGlmZixcbiAgbWFqb3IsXG4gIG1pbm9yLFxuICBwYXRjaCxcbiAgcHJlcmVsZWFzZSxcbiAgY29tcGFyZSxcbiAgcmNvbXBhcmUsXG4gIGNvbXBhcmVMb29zZSxcbiAgY29tcGFyZUJ1aWxkLFxuICBzb3J0LFxuICByc29ydCxcbiAgZ3QsXG4gIGx0LFxuICBlcSxcbiAgbmVxLFxuICBndGUsXG4gIGx0ZSxcbiAgY21wLFxuICBjb2VyY2UsXG4gIENvbXBhcmF0b3IsXG4gIFJhbmdlLFxuICBzYXRpc2ZpZXMsXG4gIHRvQ29tcGFyYXRvcnMsXG4gIG1heFNhdGlzZnlpbmcsXG4gIG1pblNhdGlzZnlpbmcsXG4gIG1pblZlcnNpb24sXG4gIHZhbGlkUmFuZ2UsXG4gIG91dHNpZGUsXG4gIGd0cixcbiAgbHRyLFxuICBpbnRlcnNlY3RzLFxuICBzaW1wbGlmeVJhbmdlLFxuICBzdWJzZXQsXG4gIFNlbVZlcixcbiAgcmU6IGludGVybmFsUmUucmUsXG4gIHNyYzogaW50ZXJuYWxSZS5zcmMsXG4gIHRva2VuczogaW50ZXJuYWxSZS50LFxuICBTRU1WRVJfU1BFQ19WRVJTSU9OOiBjb25zdGFudHMuU0VNVkVSX1NQRUNfVkVSU0lPTixcbiAgUkVMRUFTRV9UWVBFUzogY29uc3RhbnRzLlJFTEVBU0VfVFlQRVMsXG4gIGNvbXBhcmVJZGVudGlmaWVyczogaWRlbnRpZmllcnMuY29tcGFyZUlkZW50aWZpZXJzLFxuICByY29tcGFyZUlkZW50aWZpZXJzOiBpZGVudGlmaWVycy5yY29tcGFyZUlkZW50aWZpZXJzLFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/index.js\n");

/***/ }),

/***/ "../node_modules/semver/internal/constants.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/internal/constants.js ***!
  \****************************************************/
/***/ ((module) => {

eval("// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\n// Max safe length for a build identifier. The max length minus 6 characters for\n// the shortest version with a build 0.0.0+BUILD.\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\nconst RELEASE_TYPES = [\n  'major',\n  'premajor',\n  'minor',\n  'preminor',\n  'patch',\n  'prepatch',\n  'prerelease',\n]\n\nmodule.exports = {\n  MAX_LENGTH,\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_SAFE_INTEGER,\n  RELEASE_TYPES,\n  SEMVER_SPEC_VERSION,\n  FLAG_INCLUDE_PRERELEASE: 0b001,\n  FLAG_LOOSE: 0b010,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL2NvbnN0YW50cy5qcz83NjVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE5vdGU6IHRoaXMgaXMgdGhlIHNlbXZlci5vcmcgdmVyc2lvbiBvZiB0aGUgc3BlYyB0aGF0IGl0IGltcGxlbWVudHNcbi8vIE5vdCBuZWNlc3NhcmlseSB0aGUgcGFja2FnZSB2ZXJzaW9uIG9mIHRoaXMgY29kZS5cbmNvbnN0IFNFTVZFUl9TUEVDX1ZFUlNJT04gPSAnMi4wLjAnXG5cbmNvbnN0IE1BWF9MRU5HVEggPSAyNTZcbmNvbnN0IE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fFxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gOTAwNzE5OTI1NDc0MDk5MVxuXG4vLyBNYXggc2FmZSBzZWdtZW50IGxlbmd0aCBmb3IgY29lcmNpb24uXG5jb25zdCBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIID0gMTZcblxuLy8gTWF4IHNhZmUgbGVuZ3RoIGZvciBhIGJ1aWxkIGlkZW50aWZpZXIuIFRoZSBtYXggbGVuZ3RoIG1pbnVzIDYgY2hhcmFjdGVycyBmb3Jcbi8vIHRoZSBzaG9ydGVzdCB2ZXJzaW9uIHdpdGggYSBidWlsZCAwLjAuMCtCVUlMRC5cbmNvbnN0IE1BWF9TQUZFX0JVSUxEX0xFTkdUSCA9IE1BWF9MRU5HVEggLSA2XG5cbmNvbnN0IFJFTEVBU0VfVFlQRVMgPSBbXG4gICdtYWpvcicsXG4gICdwcmVtYWpvcicsXG4gICdtaW5vcicsXG4gICdwcmVtaW5vcicsXG4gICdwYXRjaCcsXG4gICdwcmVwYXRjaCcsXG4gICdwcmVyZWxlYXNlJyxcbl1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE1BWF9MRU5HVEgsXG4gIE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEgsXG4gIE1BWF9TQUZFX0JVSUxEX0xFTkdUSCxcbiAgTUFYX1NBRkVfSU5URUdFUixcbiAgUkVMRUFTRV9UWVBFUyxcbiAgU0VNVkVSX1NQRUNfVkVSU0lPTixcbiAgRkxBR19JTkNMVURFX1BSRVJFTEVBU0U6IDBiMDAxLFxuICBGTEFHX0xPT1NFOiAwYjAxMCxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/internal/constants.js\n");

/***/ }),

/***/ "../node_modules/semver/internal/debug.js":
/*!************************************************!*\
  !*** ../node_modules/semver/internal/debug.js ***!
  \************************************************/
/***/ ((module) => {

eval("const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvZGVidWcuanM/MTgzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWJ1ZyA9IChcbiAgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gIHByb2Nlc3MuZW52ICYmXG4gIHByb2Nlc3MuZW52Lk5PREVfREVCVUcgJiZcbiAgL1xcYnNlbXZlclxcYi9pLnRlc3QocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRylcbikgPyAoLi4uYXJncykgPT4gY29uc29sZS5lcnJvcignU0VNVkVSJywgLi4uYXJncylcbiAgOiAoKSA9PiB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYnVnXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/internal/debug.js\n");

/***/ }),

/***/ "../node_modules/semver/internal/identifiers.js":
/*!******************************************************!*\
  !*** ../node_modules/semver/internal/identifiers.js ***!
  \******************************************************/
/***/ ((module) => {

eval("const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9pZGVudGlmaWVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL2lkZW50aWZpZXJzLmpzP2FiMTUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbnVtZXJpYyA9IC9eWzAtOV0rJC9cbmNvbnN0IGNvbXBhcmVJZGVudGlmaWVycyA9IChhLCBiKSA9PiB7XG4gIGNvbnN0IGFudW0gPSBudW1lcmljLnRlc3QoYSlcbiAgY29uc3QgYm51bSA9IG51bWVyaWMudGVzdChiKVxuXG4gIGlmIChhbnVtICYmIGJudW0pIHtcbiAgICBhID0gK2FcbiAgICBiID0gK2JcbiAgfVxuXG4gIHJldHVybiBhID09PSBiID8gMFxuICAgIDogKGFudW0gJiYgIWJudW0pID8gLTFcbiAgICA6IChibnVtICYmICFhbnVtKSA/IDFcbiAgICA6IGEgPCBiID8gLTFcbiAgICA6IDFcbn1cblxuY29uc3QgcmNvbXBhcmVJZGVudGlmaWVycyA9IChhLCBiKSA9PiBjb21wYXJlSWRlbnRpZmllcnMoYiwgYSlcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBhcmVJZGVudGlmaWVycyxcbiAgcmNvbXBhcmVJZGVudGlmaWVycyxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/internal/identifiers.js\n");

/***/ }),

/***/ "../node_modules/semver/internal/lrucache.js":
/*!***************************************************!*\
  !*** ../node_modules/semver/internal/lrucache.js ***!
  \***************************************************/
/***/ ((module) => {

eval("class LRUCache {\n  constructor () {\n    this.max = 1000\n    this.map = new Map()\n  }\n\n  get (key) {\n    const value = this.map.get(key)\n    if (value === undefined) {\n      return undefined\n    } else {\n      // Remove the key from the map and add it to the end\n      this.map.delete(key)\n      this.map.set(key, value)\n      return value\n    }\n  }\n\n  delete (key) {\n    return this.map.delete(key)\n  }\n\n  set (key, value) {\n    const deleted = this.delete(key)\n\n    if (!deleted && value !== undefined) {\n      // If cache is full, delete the least recently used item\n      if (this.map.size >= this.max) {\n        const firstKey = this.map.keys().next().value\n        this.delete(firstKey)\n      }\n\n      this.map.set(key, value)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = LRUCache\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9scnVjYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL2xydWNhY2hlLmpzPzJjNGIiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTFJVQ2FjaGUge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5tYXggPSAxMDAwXG4gICAgdGhpcy5tYXAgPSBuZXcgTWFwKClcbiAgfVxuXG4gIGdldCAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLm1hcC5nZXQoa2V5KVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUga2V5IGZyb20gdGhlIG1hcCBhbmQgYWRkIGl0IHRvIHRoZSBlbmRcbiAgICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpXG4gICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIGRlbGV0ZSAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmRlbGV0ZShrZXkpXG4gIH1cblxuICBzZXQgKGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBkZWxldGVkID0gdGhpcy5kZWxldGUoa2V5KVxuXG4gICAgaWYgKCFkZWxldGVkICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIGNhY2hlIGlzIGZ1bGwsIGRlbGV0ZSB0aGUgbGVhc3QgcmVjZW50bHkgdXNlZCBpdGVtXG4gICAgICBpZiAodGhpcy5tYXAuc2l6ZSA+PSB0aGlzLm1heCkge1xuICAgICAgICBjb25zdCBmaXJzdEtleSA9IHRoaXMubWFwLmtleXMoKS5uZXh0KCkudmFsdWVcbiAgICAgICAgdGhpcy5kZWxldGUoZmlyc3RLZXkpXG4gICAgICB9XG5cbiAgICAgIHRoaXMubWFwLnNldChrZXksIHZhbHVlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMUlVDYWNoZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/internal/lrucache.js\n");

/***/ }),

/***/ "../node_modules/semver/internal/parse-options.js":
/*!********************************************************!*\
  !*** ../node_modules/semver/internal/parse-options.js ***!
  \********************************************************/
/***/ ((module) => {

eval("// parse out just the options we care about\nconst looseOption = Object.freeze({ loose: true })\nconst emptyOpts = Object.freeze({ })\nconst parseOptions = options => {\n  if (!options) {\n    return emptyOpts\n  }\n\n  if (typeof options !== 'object') {\n    return looseOption\n  }\n\n  return options\n}\nmodule.exports = parseOptions\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9wYXJzZS1vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esb0NBQW9DLGFBQWE7QUFDakQsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL3BhcnNlLW9wdGlvbnMuanM/ZWE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYXJzZSBvdXQganVzdCB0aGUgb3B0aW9ucyB3ZSBjYXJlIGFib3V0XG5jb25zdCBsb29zZU9wdGlvbiA9IE9iamVjdC5mcmVlemUoeyBsb29zZTogdHJ1ZSB9KVxuY29uc3QgZW1wdHlPcHRzID0gT2JqZWN0LmZyZWV6ZSh7IH0pXG5jb25zdCBwYXJzZU9wdGlvbnMgPSBvcHRpb25zID0+IHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmV0dXJuIGVtcHR5T3B0c1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBsb29zZU9wdGlvblxuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VPcHRpb25zXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/internal/parse-options.js\n");

/***/ }),

/***/ "../node_modules/semver/internal/re.js":
/*!*********************************************!*\
  !*** ../node_modules/semver/internal/re.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = __webpack_require__(/*! ./constants */ \"../node_modules/semver/internal/constants.js\")\nconst debug = __webpack_require__(/*! ./debug */ \"../node_modules/semver/internal/debug.js\")\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n              `(?:${src[t.PRERELEASE]})?` +\n              `(?:${src[t.BUILD]})?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9yZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxtQkFBTyxDQUFDLGlFQUFhO0FBQ3pCLGNBQWMsbUJBQU8sQ0FBQyx5REFBUztBQUMvQjs7QUFFQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixlQUFlLGNBQWM7QUFDN0IsWUFBWSxXQUFXO0FBQ3ZCLFVBQVUsU0FBUztBQUNuQjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixNQUFNLFlBQVksT0FBTyxJQUFJLEtBQUs7QUFDbEQsZ0JBQWdCLE1BQU0sWUFBWSxPQUFPLElBQUksS0FBSztBQUNsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvREFBb0QsaUJBQWlCOztBQUVyRTtBQUNBOztBQUVBLCtCQUErQix5QkFBeUI7QUFDeEQsdUJBQXVCLHlCQUF5QjtBQUNoRCx1QkFBdUIseUJBQXlCOztBQUVoRCxvQ0FBb0MsOEJBQThCO0FBQ2xFLDRCQUE0Qiw4QkFBOEI7QUFDMUQsNEJBQTRCLDhCQUE4Qjs7QUFFMUQ7QUFDQTs7QUFFQSwwQ0FBMEM7QUFDMUMsQ0FBQyxHQUFHLDRCQUE0Qjs7QUFFaEMsK0NBQStDO0FBQy9DLENBQUMsR0FBRyw0QkFBNEI7O0FBRWhDO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEMsQ0FBQyxRQUFRLDRCQUE0Qjs7QUFFckMsd0NBQXdDO0FBQ3hDLENBQUMsUUFBUSxpQ0FBaUM7O0FBRTFDO0FBQ0E7O0FBRUEsa0NBQWtDLGlCQUFpQjs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQixDQUFDLFFBQVEsdUJBQXVCOztBQUVoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCO0FBQzlCLENBQUMsRUFBRSxrQkFBa0I7QUFDckIsZUFBZTs7QUFFZix3QkFBd0IsaUJBQWlCOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMsQ0FBQyxFQUFFLHVCQUF1QjtBQUMxQixlQUFlOztBQUVmLHlCQUF5QixrQkFBa0I7O0FBRTNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw4QkFBOEI7QUFDdEUsbUNBQW1DLHlCQUF5Qjs7QUFFNUQsdUNBQXVDLHdCQUF3QjtBQUMvRCw2QkFBNkIsd0JBQXdCO0FBQ3JELDZCQUE2Qix3QkFBd0I7QUFDckQseUJBQXlCLGtCQUFrQjtBQUMzQyxrQ0FBa0M7QUFDbEM7O0FBRUEsNENBQTRDLDZCQUE2QjtBQUN6RSxrQ0FBa0MsNkJBQTZCO0FBQy9ELGtDQUFrQyw2QkFBNkI7QUFDL0QsOEJBQThCLHVCQUF1QjtBQUNyRCx1Q0FBdUM7QUFDdkM7O0FBRUEsMEJBQTBCLFlBQVksTUFBTSxtQkFBbUI7QUFDL0QsK0JBQStCLFlBQVksTUFBTSx3QkFBd0I7O0FBRXpFO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsb0JBQW9CLElBQUksRUFBRSwyQkFBMkI7QUFDckQsMEJBQTBCLElBQUksMkJBQTJCO0FBQ3pELDBCQUEwQixJQUFJLDJCQUEyQjtBQUN6RCx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QyxvQkFBb0IsYUFBYTtBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtDQUFrQyxpQkFBaUI7QUFDbkQsd0JBQXdCOztBQUV4Qix5QkFBeUIsaUJBQWlCLEVBQUUsbUJBQW1CO0FBQy9ELDhCQUE4QixpQkFBaUIsRUFBRSx3QkFBd0I7O0FBRXpFO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsaUJBQWlCO0FBQ25ELHdCQUF3Qjs7QUFFeEIseUJBQXlCLGlCQUFpQixFQUFFLG1CQUFtQjtBQUMvRCw4QkFBOEIsaUJBQWlCLEVBQUUsd0JBQXdCOztBQUV6RTtBQUNBLG1DQUFtQyxZQUFZLE9BQU8sa0JBQWtCO0FBQ3hFLDhCQUE4QixZQUFZLE9BQU8saUJBQWlCOztBQUVsRTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLENBQUMsT0FBTyxrQkFBa0IsR0FBRyxtQkFBbUI7QUFDaEQsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxtQkFBbUI7QUFDdkQ7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDOztBQUVBLHlDQUF5Qyx3QkFBd0I7QUFDakU7QUFDQSw0QkFBNEIsd0JBQXdCO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL3JlLmpzP2E5MzMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xuICBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RILFxuICBNQVhfU0FGRV9CVUlMRF9MRU5HVEgsXG4gIE1BWF9MRU5HVEgsXG59ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuL2RlYnVnJylcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9XG5cbi8vIFRoZSBhY3R1YWwgcmVnZXhwcyBnbyBvbiBleHBvcnRzLnJlXG5jb25zdCByZSA9IGV4cG9ydHMucmUgPSBbXVxuY29uc3Qgc2FmZVJlID0gZXhwb3J0cy5zYWZlUmUgPSBbXVxuY29uc3Qgc3JjID0gZXhwb3J0cy5zcmMgPSBbXVxuY29uc3QgdCA9IGV4cG9ydHMudCA9IHt9XG5sZXQgUiA9IDBcblxuY29uc3QgTEVUVEVSREFTSE5VTUJFUiA9ICdbYS16QS1aMC05LV0nXG5cbi8vIFJlcGxhY2Ugc29tZSBncmVlZHkgcmVnZXggdG9rZW5zIHRvIHByZXZlbnQgcmVnZXggZG9zIGlzc3Vlcy4gVGhlc2UgcmVnZXggYXJlXG4vLyB1c2VkIGludGVybmFsbHkgdmlhIHRoZSBzYWZlUmUgb2JqZWN0IHNpbmNlIGFsbCBpbnB1dHMgaW4gdGhpcyBsaWJyYXJ5IGdldFxuLy8gbm9ybWFsaXplZCBmaXJzdCB0byB0cmltIGFuZCBjb2xsYXBzZSBhbGwgZXh0cmEgd2hpdGVzcGFjZS4gVGhlIG9yaWdpbmFsXG4vLyByZWdleGVzIGFyZSBleHBvcnRlZCBmb3IgdXNlcmxhbmQgY29uc3VtcHRpb24gYW5kIGxvd2VyIGxldmVsIHVzYWdlLiBBXG4vLyBmdXR1cmUgYnJlYWtpbmcgY2hhbmdlIGNvdWxkIGV4cG9ydCB0aGUgc2FmZXIgcmVnZXggb25seSB3aXRoIGEgbm90ZSB0aGF0XG4vLyBhbGwgaW5wdXQgc2hvdWxkIGhhdmUgZXh0cmEgd2hpdGVzcGFjZSByZW1vdmVkLlxuY29uc3Qgc2FmZVJlZ2V4UmVwbGFjZW1lbnRzID0gW1xuICBbJ1xcXFxzJywgMV0sXG4gIFsnXFxcXGQnLCBNQVhfTEVOR1RIXSxcbiAgW0xFVFRFUkRBU0hOVU1CRVIsIE1BWF9TQUZFX0JVSUxEX0xFTkdUSF0sXG5dXG5cbmNvbnN0IG1ha2VTYWZlUmVnZXggPSAodmFsdWUpID0+IHtcbiAgZm9yIChjb25zdCBbdG9rZW4sIG1heF0gb2Ygc2FmZVJlZ2V4UmVwbGFjZW1lbnRzKSB7XG4gICAgdmFsdWUgPSB2YWx1ZVxuICAgICAgLnNwbGl0KGAke3Rva2VufSpgKS5qb2luKGAke3Rva2VufXswLCR7bWF4fX1gKVxuICAgICAgLnNwbGl0KGAke3Rva2VufStgKS5qb2luKGAke3Rva2VufXsxLCR7bWF4fX1gKVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG5jb25zdCBjcmVhdGVUb2tlbiA9IChuYW1lLCB2YWx1ZSwgaXNHbG9iYWwpID0+IHtcbiAgY29uc3Qgc2FmZSA9IG1ha2VTYWZlUmVnZXgodmFsdWUpXG4gIGNvbnN0IGluZGV4ID0gUisrXG4gIGRlYnVnKG5hbWUsIGluZGV4LCB2YWx1ZSlcbiAgdFtuYW1lXSA9IGluZGV4XG4gIHNyY1tpbmRleF0gPSB2YWx1ZVxuICByZVtpbmRleF0gPSBuZXcgUmVnRXhwKHZhbHVlLCBpc0dsb2JhbCA/ICdnJyA6IHVuZGVmaW5lZClcbiAgc2FmZVJlW2luZGV4XSA9IG5ldyBSZWdFeHAoc2FmZSwgaXNHbG9iYWwgPyAnZycgOiB1bmRlZmluZWQpXG59XG5cbi8vIFRoZSBmb2xsb3dpbmcgUmVndWxhciBFeHByZXNzaW9ucyBjYW4gYmUgdXNlZCBmb3IgdG9rZW5pemluZyxcbi8vIHZhbGlkYXRpbmcsIGFuZCBwYXJzaW5nIFNlbVZlciB2ZXJzaW9uIHN0cmluZ3MuXG5cbi8vICMjIE51bWVyaWMgSWRlbnRpZmllclxuLy8gQSBzaW5nbGUgYDBgLCBvciBhIG5vbi16ZXJvIGRpZ2l0IGZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBkaWdpdHMuXG5cbmNyZWF0ZVRva2VuKCdOVU1FUklDSURFTlRJRklFUicsICcwfFsxLTldXFxcXGQqJylcbmNyZWF0ZVRva2VuKCdOVU1FUklDSURFTlRJRklFUkxPT1NFJywgJ1xcXFxkKycpXG5cbi8vICMjIE5vbi1udW1lcmljIElkZW50aWZpZXJcbi8vIFplcm8gb3IgbW9yZSBkaWdpdHMsIGZvbGxvd2VkIGJ5IGEgbGV0dGVyIG9yIGh5cGhlbiwgYW5kIHRoZW4gemVybyBvclxuLy8gbW9yZSBsZXR0ZXJzLCBkaWdpdHMsIG9yIGh5cGhlbnMuXG5cbmNyZWF0ZVRva2VuKCdOT05OVU1FUklDSURFTlRJRklFUicsIGBcXFxcZCpbYS16QS1aLV0ke0xFVFRFUkRBU0hOVU1CRVJ9KmApXG5cbi8vICMjIE1haW4gVmVyc2lvblxuLy8gVGhyZWUgZG90LXNlcGFyYXRlZCBudW1lcmljIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignTUFJTlZFUlNJT04nLCBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuY3JlYXRlVG9rZW4oJ01BSU5WRVJTSU9OTE9PU0UnLCBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KWApXG5cbi8vICMjIFByZS1yZWxlYXNlIFZlcnNpb24gSWRlbnRpZmllclxuLy8gQSBudW1lcmljIGlkZW50aWZpZXIsIG9yIGEgbm9uLW51bWVyaWMgaWRlbnRpZmllci5cblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VJREVOVElGSUVSJywgYCg/OiR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdXG59fCR7c3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdfSlgKVxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRScsIGAoPzoke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdXG59fCR7c3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdfSlgKVxuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uXG4vLyBIeXBoZW4sIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIGRvdC1zZXBhcmF0ZWQgcHJlLXJlbGVhc2UgdmVyc2lvblxuLy8gaWRlbnRpZmllcnMuXG5cbmNyZWF0ZVRva2VuKCdQUkVSRUxFQVNFJywgYCg/Oi0oJHtzcmNbdC5QUkVSRUxFQVNFSURFTlRJRklFUl1cbn0oPzpcXFxcLiR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJdfSkqKSlgKVxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRUxPT1NFJywgYCg/Oi0/KCR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV1cbn0oPzpcXFxcLiR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV19KSopKWApXG5cbi8vICMjIEJ1aWxkIE1ldGFkYXRhIElkZW50aWZpZXJcbi8vIEFueSBjb21iaW5hdGlvbiBvZiBkaWdpdHMsIGxldHRlcnMsIG9yIGh5cGhlbnMuXG5cbmNyZWF0ZVRva2VuKCdCVUlMRElERU5USUZJRVInLCBgJHtMRVRURVJEQVNITlVNQkVSfStgKVxuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YVxuLy8gUGx1cyBzaWduLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBwZXJpb2Qtc2VwYXJhdGVkIGJ1aWxkIG1ldGFkYXRhXG4vLyBpZGVudGlmaWVycy5cblxuY3JlYXRlVG9rZW4oJ0JVSUxEJywgYCg/OlxcXFwrKCR7c3JjW3QuQlVJTERJREVOVElGSUVSXVxufSg/OlxcXFwuJHtzcmNbdC5CVUlMRElERU5USUZJRVJdfSkqKSlgKVxuXG4vLyAjIyBGdWxsIFZlcnNpb24gU3RyaW5nXG4vLyBBIG1haW4gdmVyc2lvbiwgZm9sbG93ZWQgb3B0aW9uYWxseSBieSBhIHByZS1yZWxlYXNlIHZlcnNpb24gYW5kXG4vLyBidWlsZCBtZXRhZGF0YS5cblxuLy8gTm90ZSB0aGF0IHRoZSBvbmx5IG1ham9yLCBtaW5vciwgcGF0Y2gsIGFuZCBwcmUtcmVsZWFzZSBzZWN0aW9ucyBvZlxuLy8gdGhlIHZlcnNpb24gc3RyaW5nIGFyZSBjYXB0dXJpbmcgZ3JvdXBzLiAgVGhlIGJ1aWxkIG1ldGFkYXRhIGlzIG5vdCBhXG4vLyBjYXB0dXJpbmcgZ3JvdXAsIGJlY2F1c2UgaXQgc2hvdWxkIG5vdCBldmVyIGJlIHVzZWQgaW4gdmVyc2lvblxuLy8gY29tcGFyaXNvbi5cblxuY3JlYXRlVG9rZW4oJ0ZVTExQTEFJTicsIGB2PyR7c3JjW3QuTUFJTlZFUlNJT05dXG59JHtzcmNbdC5QUkVSRUxFQVNFXX0/JHtcbiAgc3JjW3QuQlVJTERdfT9gKVxuXG5jcmVhdGVUb2tlbignRlVMTCcsIGBeJHtzcmNbdC5GVUxMUExBSU5dfSRgKVxuXG4vLyBsaWtlIGZ1bGwsIGJ1dCBhbGxvd3MgdjEuMi4zIGFuZCA9MS4yLjMsIHdoaWNoIHBlb3BsZSBkbyBzb21ldGltZXMuXG4vLyBhbHNvLCAxLjAuMGFscGhhMSAocHJlcmVsZWFzZSB3aXRob3V0IHRoZSBoeXBoZW4pIHdoaWNoIGlzIHByZXR0eVxuLy8gY29tbW9uIGluIHRoZSBucG0gcmVnaXN0cnkuXG5jcmVhdGVUb2tlbignTE9PU0VQTEFJTicsIGBbdj1cXFxcc10qJHtzcmNbdC5NQUlOVkVSU0lPTkxPT1NFXVxufSR7c3JjW3QuUFJFUkVMRUFTRUxPT1NFXX0/JHtcbiAgc3JjW3QuQlVJTERdfT9gKVxuXG5jcmVhdGVUb2tlbignTE9PU0UnLCBgXiR7c3JjW3QuTE9PU0VQTEFJTl19JGApXG5cbmNyZWF0ZVRva2VuKCdHVExUJywgJygoPzo8fD4pPz0/KScpXG5cbi8vIFNvbWV0aGluZyBsaWtlIFwiMi4qXCIgb3IgXCIxLjIueFwiLlxuLy8gTm90ZSB0aGF0IFwieC54XCIgaXMgYSB2YWxpZCB4UmFuZ2UgaWRlbnRpZmVyLCBtZWFuaW5nIFwiYW55IHZlcnNpb25cIlxuLy8gT25seSB0aGUgZmlyc3QgaXRlbSBpcyBzdHJpY3RseSByZXF1aXJlZC5cbmNyZWF0ZVRva2VuKCdYUkFOR0VJREVOVElGSUVSTE9PU0UnLCBgJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXX18eHxYfFxcXFwqYClcbmNyZWF0ZVRva2VuKCdYUkFOR0VJREVOVElGSUVSJywgYCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfXx4fFh8XFxcXCpgKVxuXG5jcmVhdGVUb2tlbignWFJBTkdFUExBSU4nLCBgW3Y9XFxcXHNdKigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJdfSlgICtcbiAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYCg/OlxcXFwuKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGAoPzoke3NyY1t0LlBSRVJFTEVBU0VdfSk/JHtcbiAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXX0/YCArXG4gICAgICAgICAgICAgICAgICAgYCk/KT9gKVxuXG5jcmVhdGVUb2tlbignWFJBTkdFUExBSU5MT09TRScsIGBbdj1cXFxcc10qKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuUFJFUkVMRUFTRUxPT1NFXX0pPyR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXX0/YCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKT8pP2ApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0UnLCBgXiR7c3JjW3QuR1RMVF19XFxcXHMqJHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignWFJBTkdFTE9PU0UnLCBgXiR7c3JjW3QuR1RMVF19XFxcXHMqJHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0kYClcblxuLy8gQ29lcmNpb24uXG4vLyBFeHRyYWN0IGFueXRoaW5nIHRoYXQgY291bGQgY29uY2VpdmFibHkgYmUgYSBwYXJ0IG9mIGEgdmFsaWQgc2VtdmVyXG5jcmVhdGVUb2tlbignQ09FUkNFUExBSU4nLCBgJHsnKF58W15cXFxcZF0pJyArXG4gICAgICAgICAgICAgICcoXFxcXGR7MSwnfSR7TUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSH19KWAgK1xuICAgICAgICAgICAgICBgKD86XFxcXC4oXFxcXGR7MSwke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSkpP2AgK1xuICAgICAgICAgICAgICBgKD86XFxcXC4oXFxcXGR7MSwke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSkpP2ApXG5jcmVhdGVUb2tlbignQ09FUkNFJywgYCR7c3JjW3QuQ09FUkNFUExBSU5dfSg/OiR8W15cXFxcZF0pYClcbmNyZWF0ZVRva2VuKCdDT0VSQ0VGVUxMJywgc3JjW3QuQ09FUkNFUExBSU5dICtcbiAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuUFJFUkVMRUFTRV19KT9gICtcbiAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuQlVJTERdfSk/YCArXG4gICAgICAgICAgICAgIGAoPzokfFteXFxcXGRdKWApXG5jcmVhdGVUb2tlbignQ09FUkNFUlRMJywgc3JjW3QuQ09FUkNFXSwgdHJ1ZSlcbmNyZWF0ZVRva2VuKCdDT0VSQ0VSVExGVUxMJywgc3JjW3QuQ09FUkNFRlVMTF0sIHRydWUpXG5cbi8vIFRpbGRlIHJhbmdlcy5cbi8vIE1lYW5pbmcgaXMgXCJyZWFzb25hYmx5IGF0IG9yIGdyZWF0ZXIgdGhhblwiXG5jcmVhdGVUb2tlbignTE9ORVRJTERFJywgJyg/On4+PyknKVxuXG5jcmVhdGVUb2tlbignVElMREVUUklNJywgYChcXFxccyopJHtzcmNbdC5MT05FVElMREVdfVxcXFxzK2AsIHRydWUpXG5leHBvcnRzLnRpbGRlVHJpbVJlcGxhY2UgPSAnJDF+J1xuXG5jcmVhdGVUb2tlbignVElMREUnLCBgXiR7c3JjW3QuTE9ORVRJTERFXX0ke3NyY1t0LlhSQU5HRVBMQUlOXX0kYClcbmNyZWF0ZVRva2VuKCdUSUxERUxPT1NFJywgYF4ke3NyY1t0LkxPTkVUSUxERV19JHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0kYClcblxuLy8gQ2FyZXQgcmFuZ2VzLlxuLy8gTWVhbmluZyBpcyBcImF0IGxlYXN0IGFuZCBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoXCJcbmNyZWF0ZVRva2VuKCdMT05FQ0FSRVQnLCAnKD86XFxcXF4pJylcblxuY3JlYXRlVG9rZW4oJ0NBUkVUVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuTE9ORUNBUkVUXX1cXFxccytgLCB0cnVlKVxuZXhwb3J0cy5jYXJldFRyaW1SZXBsYWNlID0gJyQxXidcblxuY3JlYXRlVG9rZW4oJ0NBUkVUJywgYF4ke3NyY1t0LkxPTkVDQVJFVF19JHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignQ0FSRVRMT09TRScsIGBeJHtzcmNbdC5MT05FQ0FSRVRdfSR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19JGApXG5cbi8vIEEgc2ltcGxlIGd0L2x0L2VxIHRoaW5nLCBvciBqdXN0IFwiXCIgdG8gaW5kaWNhdGUgXCJhbnkgdmVyc2lvblwiXG5jcmVhdGVUb2tlbignQ09NUEFSQVRPUkxPT1NFJywgYF4ke3NyY1t0LkdUTFRdfVxcXFxzKigke3NyY1t0LkxPT1NFUExBSU5dfSkkfF4kYClcbmNyZWF0ZVRva2VuKCdDT01QQVJBVE9SJywgYF4ke3NyY1t0LkdUTFRdfVxcXFxzKigke3NyY1t0LkZVTExQTEFJTl19KSR8XiRgKVxuXG4vLyBBbiBleHByZXNzaW9uIHRvIHN0cmlwIGFueSB3aGl0ZXNwYWNlIGJldHdlZW4gdGhlIGd0bHQgYW5kIHRoZSB0aGluZ1xuLy8gaXQgbW9kaWZpZXMsIHNvIHRoYXQgYD4gMS4yLjNgID09PiBgPjEuMi4zYFxuY3JlYXRlVG9rZW4oJ0NPTVBBUkFUT1JUUklNJywgYChcXFxccyopJHtzcmNbdC5HVExUXVxufVxcXFxzKigke3NyY1t0LkxPT1NFUExBSU5dfXwke3NyY1t0LlhSQU5HRVBMQUlOXX0pYCwgdHJ1ZSlcbmV4cG9ydHMuY29tcGFyYXRvclRyaW1SZXBsYWNlID0gJyQxJDIkMydcblxuLy8gU29tZXRoaW5nIGxpa2UgYDEuMi4zIC0gMS4yLjRgXG4vLyBOb3RlIHRoYXQgdGhlc2UgYWxsIHVzZSB0aGUgbG9vc2UgZm9ybSwgYmVjYXVzZSB0aGV5J2xsIGJlXG4vLyBjaGVja2VkIGFnYWluc3QgZWl0aGVyIHRoZSBzdHJpY3Qgb3IgbG9vc2UgY29tcGFyYXRvciBmb3JtXG4vLyBsYXRlci5cbmNyZWF0ZVRva2VuKCdIWVBIRU5SQU5HRScsIGBeXFxcXHMqKCR7c3JjW3QuWFJBTkdFUExBSU5dfSlgICtcbiAgICAgICAgICAgICAgICAgICBgXFxcXHMrLVxcXFxzK2AgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5YUkFOR0VQTEFJTl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGBcXFxccyokYClcblxuY3JlYXRlVG9rZW4oJ0hZUEhFTlJBTkdFTE9PU0UnLCBgXlxcXFxzKigke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcXFxccystXFxcXHMrYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxzKiRgKVxuXG4vLyBTdGFyIHJhbmdlcyBiYXNpY2FsbHkganVzdCBhbGxvdyBhbnl0aGluZyBhdCBhbGwuXG5jcmVhdGVUb2tlbignU1RBUicsICcoPHw+KT89P1xcXFxzKlxcXFwqJylcbi8vID49MC4wLjAgaXMgbGlrZSBhIHN0YXJcbmNyZWF0ZVRva2VuKCdHVEUwJywgJ15cXFxccyo+PVxcXFxzKjBcXFxcLjBcXFxcLjBcXFxccyokJylcbmNyZWF0ZVRva2VuKCdHVEUwUFJFJywgJ15cXFxccyo+PVxcXFxzKjBcXFxcLjBcXFxcLjAtMFxcXFxzKiQnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/internal/re.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/gtr.js":
/*!********************************************!*\
  !*** ../node_modules/semver/ranges/gtr.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Determine if version is greater than all the versions possible in the range.\nconst outside = __webpack_require__(/*! ./outside */ \"../node_modules/semver/ranges/outside.js\")\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvZ3RyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsMkRBQVc7QUFDbkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2d0ci5qcz9iN2FjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERldGVybWluZSBpZiB2ZXJzaW9uIGlzIGdyZWF0ZXIgdGhhbiBhbGwgdGhlIHZlcnNpb25zIHBvc3NpYmxlIGluIHRoZSByYW5nZS5cbmNvbnN0IG91dHNpZGUgPSByZXF1aXJlKCcuL291dHNpZGUnKVxuY29uc3QgZ3RyID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiBvdXRzaWRlKHZlcnNpb24sIHJhbmdlLCAnPicsIG9wdGlvbnMpXG5tb2R1bGUuZXhwb3J0cyA9IGd0clxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/gtr.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/intersects.js":
/*!***************************************************!*\
  !*** ../node_modules/semver/ranges/intersects.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2, options)\n}\nmodule.exports = intersects\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvaW50ZXJzZWN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsaUVBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2ludGVyc2VjdHMuanM/OGEwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgaW50ZXJzZWN0cyA9IChyMSwgcjIsIG9wdGlvbnMpID0+IHtcbiAgcjEgPSBuZXcgUmFuZ2UocjEsIG9wdGlvbnMpXG4gIHIyID0gbmV3IFJhbmdlKHIyLCBvcHRpb25zKVxuICByZXR1cm4gcjEuaW50ZXJzZWN0cyhyMiwgb3B0aW9ucylcbn1cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0c1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/intersects.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/ltr.js":
/*!********************************************!*\
  !*** ../node_modules/semver/ranges/ltr.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const outside = __webpack_require__(/*! ./outside */ \"../node_modules/semver/ranges/outside.js\")\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbHRyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLDJEQUFXO0FBQ25DO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL2x0ci5qcz80ZDk4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG91dHNpZGUgPSByZXF1aXJlKCcuL291dHNpZGUnKVxuLy8gRGV0ZXJtaW5lIGlmIHZlcnNpb24gaXMgbGVzcyB0aGFuIGFsbCB0aGUgdmVyc2lvbnMgcG9zc2libGUgaW4gdGhlIHJhbmdlXG5jb25zdCBsdHIgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IG91dHNpZGUodmVyc2lvbiwgcmFuZ2UsICc8Jywgb3B0aW9ucylcbm1vZHVsZS5leHBvcnRzID0gbHRyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/ltr.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/max-satisfying.js":
/*!*******************************************************!*\
  !*** ../node_modules/semver/ranges/max-satisfying.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWF4LXNhdGlzZnlpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQyxjQUFjLG1CQUFPLENBQUMsaUVBQWtCOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9tYXgtc2F0aXNmeWluZy5qcz80YWZkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5cbmNvbnN0IG1heFNhdGlzZnlpbmcgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGxldCBtYXggPSBudWxsXG4gIGxldCBtYXhTViA9IG51bGxcbiAgbGV0IHJhbmdlT2JqID0gbnVsbFxuICB0cnkge1xuICAgIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaCgodikgPT4ge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1heCB8fCBtYXhTVi5jb21wYXJlKHYpID09PSAtMSkge1xuICAgICAgICAvLyBjb21wYXJlKG1heCwgdiwgdHJ1ZSlcbiAgICAgICAgbWF4ID0gdlxuICAgICAgICBtYXhTViA9IG5ldyBTZW1WZXIobWF4LCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG1heFxufVxubW9kdWxlLmV4cG9ydHMgPSBtYXhTYXRpc2Z5aW5nXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/max-satisfying.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/min-satisfying.js":
/*!*******************************************************!*\
  !*** ../node_modules/semver/ranges/min-satisfying.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWluLXNhdGlzZnlpbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQyxjQUFjLG1CQUFPLENBQUMsaUVBQWtCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi1zYXRpc2Z5aW5nLmpzPzMyMmIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IG1pblNhdGlzZnlpbmcgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGxldCBtaW4gPSBudWxsXG4gIGxldCBtaW5TViA9IG51bGxcbiAgbGV0IHJhbmdlT2JqID0gbnVsbFxuICB0cnkge1xuICAgIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaCgodikgPT4ge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1pbiB8fCBtaW5TVi5jb21wYXJlKHYpID09PSAxKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWluLCB2LCB0cnVlKVxuICAgICAgICBtaW4gPSB2XG4gICAgICAgIG1pblNWID0gbmV3IFNlbVZlcihtaW4sIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWluXG59XG5tb2R1bGUuZXhwb3J0cyA9IG1pblNhdGlzZnlpbmdcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/min-satisfying.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/min-version.js":
/*!****************************************************!*\
  !*** ../node_modules/semver/ranges/min-version.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\nconst gt = __webpack_require__(/*! ../functions/gt */ \"../node_modules/semver/functions/gt.js\")\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWluLXZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLG1FQUFtQjtBQUMxQyxjQUFjLG1CQUFPLENBQUMsaUVBQWtCO0FBQ3hDLFdBQVcsbUJBQU8sQ0FBQywrREFBaUI7O0FBRXBDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isc0JBQXNCO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsb0JBQW9CO0FBQ3ZFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9taW4tdmVyc2lvbi5qcz9jYzA1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndCcpXG5cbmNvbnN0IG1pblZlcnNpb24gPSAocmFuZ2UsIGxvb3NlKSA9PiB7XG4gIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBsb29zZSlcblxuICBsZXQgbWludmVyID0gbmV3IFNlbVZlcignMC4wLjAnKVxuICBpZiAocmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgbWludmVyID0gbmV3IFNlbVZlcignMC4wLjAtMCcpXG4gIGlmIChyYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICBtaW52ZXIgPSBudWxsXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2Uuc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY29tcGFyYXRvcnMgPSByYW5nZS5zZXRbaV1cblxuICAgIGxldCBzZXRNaW4gPSBudWxsXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaCgoY29tcGFyYXRvcikgPT4ge1xuICAgICAgLy8gQ2xvbmUgdG8gYXZvaWQgbWFuaXB1bGF0aW5nIHRoZSBjb21wYXJhdG9yJ3Mgc2VtdmVyIG9iamVjdC5cbiAgICAgIGNvbnN0IGNvbXB2ZXIgPSBuZXcgU2VtVmVyKGNvbXBhcmF0b3Iuc2VtdmVyLnZlcnNpb24pXG4gICAgICBzd2l0Y2ggKGNvbXBhcmF0b3Iub3BlcmF0b3IpIHtcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgaWYgKGNvbXB2ZXIucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbXB2ZXIucGF0Y2grK1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wdmVyLnByZXJlbGVhc2UucHVzaCgwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb21wdmVyLnJhdyA9IGNvbXB2ZXIuZm9ybWF0KClcbiAgICAgICAgICAvKiBmYWxsdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgaWYgKCFzZXRNaW4gfHwgZ3QoY29tcHZlciwgc2V0TWluKSkge1xuICAgICAgICAgICAgc2V0TWluID0gY29tcHZlclxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgIC8qIElnbm9yZSBtYXhpbXVtIHZlcnNpb25zICovXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgb3BlcmF0aW9uOiAke2NvbXBhcmF0b3Iub3BlcmF0b3J9YClcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmIChzZXRNaW4gJiYgKCFtaW52ZXIgfHwgZ3QobWludmVyLCBzZXRNaW4pKSkge1xuICAgICAgbWludmVyID0gc2V0TWluXG4gICAgfVxuICB9XG5cbiAgaWYgKG1pbnZlciAmJiByYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBtaW5WZXJzaW9uXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/min-version.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/outside.js":
/*!************************************************!*\
  !*** ../node_modules/semver/ranges/outside.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const SemVer = __webpack_require__(/*! ../classes/semver */ \"../node_modules/semver/classes/semver.js\")\nconst Comparator = __webpack_require__(/*! ../classes/comparator */ \"../node_modules/semver/classes/comparator.js\")\nconst { ANY } = Comparator\nconst Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\nconst satisfies = __webpack_require__(/*! ../functions/satisfies */ \"../node_modules/semver/functions/satisfies.js\")\nconst gt = __webpack_require__(/*! ../functions/gt */ \"../node_modules/semver/functions/gt.js\")\nconst lt = __webpack_require__(/*! ../functions/lt */ \"../node_modules/semver/functions/lt.js\")\nconst lte = __webpack_require__(/*! ../functions/lte */ \"../node_modules/semver/functions/lte.js\")\nconst gte = __webpack_require__(/*! ../functions/gte */ \"../node_modules/semver/functions/gte.js\")\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvb3V0c2lkZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsbUVBQW1CO0FBQzFDLG1CQUFtQixtQkFBTyxDQUFDLDJFQUF1QjtBQUNsRCxRQUFRLE1BQU07QUFDZCxjQUFjLG1CQUFPLENBQUMsaUVBQWtCO0FBQ3hDLGtCQUFrQixtQkFBTyxDQUFDLDZFQUF3QjtBQUNsRCxXQUFXLG1CQUFPLENBQUMsK0RBQWlCO0FBQ3BDLFdBQVcsbUJBQU8sQ0FBQywrREFBaUI7QUFDcEMsWUFBWSxtQkFBTyxDQUFDLGlFQUFrQjtBQUN0QyxZQUFZLG1CQUFPLENBQUMsaUVBQWtCOztBQUV0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0Isc0JBQXNCO0FBQ3hDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4uL25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL291dHNpZGUuanM/NDI0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBDb21wYXJhdG9yID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9jb21wYXJhdG9yJylcbmNvbnN0IHsgQU5ZIH0gPSBDb21wYXJhdG9yXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL3NhdGlzZmllcycpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndCcpXG5jb25zdCBsdCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9sdCcpXG5jb25zdCBsdGUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvbHRlJylcbmNvbnN0IGd0ZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndGUnKVxuXG5jb25zdCBvdXRzaWRlID0gKHZlcnNpb24sIHJhbmdlLCBoaWxvLCBvcHRpb25zKSA9PiB7XG4gIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuXG4gIGxldCBndGZuLCBsdGVmbiwgbHRmbiwgY29tcCwgZWNvbXBcbiAgc3dpdGNoIChoaWxvKSB7XG4gICAgY2FzZSAnPic6XG4gICAgICBndGZuID0gZ3RcbiAgICAgIGx0ZWZuID0gbHRlXG4gICAgICBsdGZuID0gbHRcbiAgICAgIGNvbXAgPSAnPidcbiAgICAgIGVjb21wID0gJz49J1xuICAgICAgYnJlYWtcbiAgICBjYXNlICc8JzpcbiAgICAgIGd0Zm4gPSBsdFxuICAgICAgbHRlZm4gPSBndGVcbiAgICAgIGx0Zm4gPSBndFxuICAgICAgY29tcCA9ICc8J1xuICAgICAgZWNvbXAgPSAnPD0nXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNdXN0IHByb3ZpZGUgYSBoaWxvIHZhbCBvZiBcIjxcIiBvciBcIj5cIicpXG4gIH1cblxuICAvLyBJZiBpdCBzYXRpc2ZpZXMgdGhlIHJhbmdlIGl0IGlzIG5vdCBvdXRzaWRlXG4gIGlmIChzYXRpc2ZpZXModmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBGcm9tIG5vdyBvbiwgdmFyaWFibGUgdGVybXMgYXJlIGFzIGlmIHdlJ3JlIGluIFwiZ3RyXCIgbW9kZS5cbiAgLy8gYnV0IG5vdGUgdGhhdCBldmVyeXRoaW5nIGlzIGZsaXBwZWQgZm9yIHRoZSBcImx0clwiIGZ1bmN0aW9uLlxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2Uuc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY29tcGFyYXRvcnMgPSByYW5nZS5zZXRbaV1cblxuICAgIGxldCBoaWdoID0gbnVsbFxuICAgIGxldCBsb3cgPSBudWxsXG5cbiAgICBjb21wYXJhdG9ycy5mb3JFYWNoKChjb21wYXJhdG9yKSA9PiB7XG4gICAgICBpZiAoY29tcGFyYXRvci5zZW12ZXIgPT09IEFOWSkge1xuICAgICAgICBjb21wYXJhdG9yID0gbmV3IENvbXBhcmF0b3IoJz49MC4wLjAnKVxuICAgICAgfVxuICAgICAgaGlnaCA9IGhpZ2ggfHwgY29tcGFyYXRvclxuICAgICAgbG93ID0gbG93IHx8IGNvbXBhcmF0b3JcbiAgICAgIGlmIChndGZuKGNvbXBhcmF0b3Iuc2VtdmVyLCBoaWdoLnNlbXZlciwgb3B0aW9ucykpIHtcbiAgICAgICAgaGlnaCA9IGNvbXBhcmF0b3JcbiAgICAgIH0gZWxzZSBpZiAobHRmbihjb21wYXJhdG9yLnNlbXZlciwgbG93LnNlbXZlciwgb3B0aW9ucykpIHtcbiAgICAgICAgbG93ID0gY29tcGFyYXRvclxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBJZiB0aGUgZWRnZSB2ZXJzaW9uIGNvbXBhcmF0b3IgaGFzIGEgb3BlcmF0b3IgdGhlbiBvdXIgdmVyc2lvblxuICAgIC8vIGlzbid0IG91dHNpZGUgaXRcbiAgICBpZiAoaGlnaC5vcGVyYXRvciA9PT0gY29tcCB8fCBoaWdoLm9wZXJhdG9yID09PSBlY29tcCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGxvd2VzdCB2ZXJzaW9uIGNvbXBhcmF0b3IgaGFzIGFuIG9wZXJhdG9yIGFuZCBvdXIgdmVyc2lvblxuICAgIC8vIGlzIGxlc3MgdGhhbiBpdCB0aGVuIGl0IGlzbid0IGhpZ2hlciB0aGFuIHRoZSByYW5nZVxuICAgIGlmICgoIWxvdy5vcGVyYXRvciB8fCBsb3cub3BlcmF0b3IgPT09IGNvbXApICYmXG4gICAgICAgIGx0ZWZuKHZlcnNpb24sIGxvdy5zZW12ZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2UgaWYgKGxvdy5vcGVyYXRvciA9PT0gZWNvbXAgJiYgbHRmbih2ZXJzaW9uLCBsb3cuc2VtdmVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3V0c2lkZVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/outside.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/simplify.js":
/*!*************************************************!*\
  !*** ../node_modules/semver/ranges/simplify.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = __webpack_require__(/*! ../functions/satisfies.js */ \"../node_modules/semver/functions/satisfies.js\")\nconst compare = __webpack_require__(/*! ../functions/compare.js */ \"../node_modules/semver/functions/compare.js\")\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvc2ltcGxpZnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsZ0ZBQTJCO0FBQ3JELGdCQUFnQixtQkFBTyxDQUFDLDRFQUF5QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ04sdUJBQXVCLElBQUk7QUFDM0IsTUFBTTtBQUNOLHVCQUF1QixJQUFJO0FBQzNCLE1BQU07QUFDTixxQkFBcUIsS0FBSyxJQUFJLElBQUk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvc2ltcGxpZnkuanM/YTMwYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBnaXZlbiBhIHNldCBvZiB2ZXJzaW9ucyBhbmQgYSByYW5nZSwgY3JlYXRlIGEgXCJzaW1wbGlmaWVkXCIgcmFuZ2Vcbi8vIHRoYXQgaW5jbHVkZXMgdGhlIHNhbWUgdmVyc2lvbnMgdGhhdCB0aGUgb3JpZ2luYWwgcmFuZ2UgZG9lc1xuLy8gSWYgdGhlIG9yaWdpbmFsIHJhbmdlIGlzIHNob3J0ZXIgdGhhbiB0aGUgc2ltcGxpZmllZCBvbmUsIHJldHVybiB0aGF0LlxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL3NhdGlzZmllcy5qcycpXG5jb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NvbXBhcmUuanMnKVxubW9kdWxlLmV4cG9ydHMgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHNldCA9IFtdXG4gIGxldCBmaXJzdCA9IG51bGxcbiAgbGV0IHByZXYgPSBudWxsXG4gIGNvbnN0IHYgPSB2ZXJzaW9ucy5zb3J0KChhLCBiKSA9PiBjb21wYXJlKGEsIGIsIG9wdGlvbnMpKVxuICBmb3IgKGNvbnN0IHZlcnNpb24gb2Ygdikge1xuICAgIGNvbnN0IGluY2x1ZGVkID0gc2F0aXNmaWVzKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKVxuICAgIGlmIChpbmNsdWRlZCkge1xuICAgICAgcHJldiA9IHZlcnNpb25cbiAgICAgIGlmICghZmlyc3QpIHtcbiAgICAgICAgZmlyc3QgPSB2ZXJzaW9uXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgIHNldC5wdXNoKFtmaXJzdCwgcHJldl0pXG4gICAgICB9XG4gICAgICBwcmV2ID0gbnVsbFxuICAgICAgZmlyc3QgPSBudWxsXG4gICAgfVxuICB9XG4gIGlmIChmaXJzdCkge1xuICAgIHNldC5wdXNoKFtmaXJzdCwgbnVsbF0pXG4gIH1cblxuICBjb25zdCByYW5nZXMgPSBbXVxuICBmb3IgKGNvbnN0IFttaW4sIG1heF0gb2Ygc2V0KSB7XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICByYW5nZXMucHVzaChtaW4pXG4gICAgfSBlbHNlIGlmICghbWF4ICYmIG1pbiA9PT0gdlswXSkge1xuICAgICAgcmFuZ2VzLnB1c2goJyonKVxuICAgIH0gZWxzZSBpZiAoIW1heCkge1xuICAgICAgcmFuZ2VzLnB1c2goYD49JHttaW59YClcbiAgICB9IGVsc2UgaWYgKG1pbiA9PT0gdlswXSkge1xuICAgICAgcmFuZ2VzLnB1c2goYDw9JHttYXh9YClcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2VzLnB1c2goYCR7bWlufSAtICR7bWF4fWApXG4gICAgfVxuICB9XG4gIGNvbnN0IHNpbXBsaWZpZWQgPSByYW5nZXMuam9pbignIHx8ICcpXG4gIGNvbnN0IG9yaWdpbmFsID0gdHlwZW9mIHJhbmdlLnJhdyA9PT0gJ3N0cmluZycgPyByYW5nZS5yYXcgOiBTdHJpbmcocmFuZ2UpXG4gIHJldHVybiBzaW1wbGlmaWVkLmxlbmd0aCA8IG9yaWdpbmFsLmxlbmd0aCA/IHNpbXBsaWZpZWQgOiByYW5nZVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/simplify.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/subset.js":
/*!***********************************************!*\
  !*** ../node_modules/semver/ranges/subset.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Range = __webpack_require__(/*! ../classes/range.js */ \"../node_modules/semver/classes/range.js\")\nconst Comparator = __webpack_require__(/*! ../classes/comparator.js */ \"../node_modules/semver/classes/comparator.js\")\nconst { ANY } = Comparator\nconst satisfies = __webpack_require__(/*! ../functions/satisfies.js */ \"../node_modules/semver/functions/satisfies.js\")\nconst compare = __webpack_require__(/*! ../functions/compare.js */ \"../node_modules/semver/functions/compare.js\")\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/subset.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/to-comparators.js":
/*!*******************************************************!*\
  !*** ../node_modules/semver/ranges/to-comparators.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvdG8tY29tcGFyYXRvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLGlFQUFrQjs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uLi9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy90by1jb21wYXJhdG9ycy5qcz82NDY1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5cbi8vIE1vc3RseSBqdXN0IGZvciB0ZXN0aW5nIGFuZCBsZWdhY3kgQVBJIHJlYXNvbnNcbmNvbnN0IHRvQ29tcGFyYXRvcnMgPSAocmFuZ2UsIG9wdGlvbnMpID0+XG4gIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucykuc2V0XG4gICAgLm1hcChjb21wID0+IGNvbXAubWFwKGMgPT4gYy52YWx1ZSkuam9pbignICcpLnRyaW0oKS5zcGxpdCgnICcpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvQ29tcGFyYXRvcnNcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/to-comparators.js\n");

/***/ }),

/***/ "../node_modules/semver/ranges/valid.js":
/*!**********************************************!*\
  !*** ../node_modules/semver/ranges/valid.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Range = __webpack_require__(/*! ../classes/range */ \"../node_modules/semver/classes/range.js\")\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvdmFsaWQuanMiLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxtQkFBTyxDQUFDLGlFQUFrQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi4vbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvdmFsaWQuanM/YjFkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgdmFsaWRSYW5nZSA9IChyYW5nZSwgb3B0aW9ucykgPT4ge1xuICB0cnkge1xuICAgIC8vIFJldHVybiAnKicgaW5zdGVhZCBvZiAnJyBzbyB0aGF0IHRydXRoaW5lc3Mgd29ya3MuXG4gICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIGl0J3MgaW52YWxpZCBhbnl3YXlcbiAgICByZXR1cm4gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKS5yYW5nZSB8fCAnKidcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkUmFuZ2VcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/semver/ranges/valid.js\n");

/***/ }),

/***/ "./components/Divider.tsx":
/*!********************************!*\
  !*** ./components/Divider.tsx ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Divider: () => (/* binding */ Divider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\n\n\n\n\nfunction Divider() {\n    const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.useTheme2)();\n    return (0,_utils_version__WEBPACK_IMPORTED_MODULE_3__.isVersionGtOrEq)(_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.buildInfo.version, '10.1.0') ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Divider, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: {\n            borderTop: `1px solid ${theme.colors.border.weak}`,\n            margin: theme.spacing(2, 0),\n            width: '100%'\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0RpdmlkZXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ3lDO0FBQ3pCO0FBQ007QUFFekMsU0FBU0M7SUFDZCxNQUFNSyxRQUFRSCxzREFBU0E7SUFDdkIsT0FBT0UsK0RBQWVBLENBQUNELG9EQUFNQSxDQUFDRyxTQUFTLENBQUNDLE9BQU8sRUFBRSwwQkFDL0MsMkRBQUNOLGdEQUFjQSx3QkFFZiwyREFBQ087UUFDQ0MsT0FBTztZQUFFQyxXQUFXLENBQUMsVUFBVSxFQUFFTCxNQUFNTSxNQUFNLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLENBQUM7WUFBRUMsUUFBUVQsTUFBTVUsT0FBTyxDQUFDLEdBQUc7WUFBSUMsT0FBTztRQUFPOztBQUc5RyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9EaXZpZGVyLnRzeD81MzMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEaXZpZGVyIGFzIEdyYWZhbmFEaXZpZGVyLCB1c2VUaGVtZTIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcbmltcG9ydCB7IGlzVmVyc2lvbkd0T3JFcSB9IGZyb20gJ3V0aWxzL3ZlcnNpb24nO1xuXG5leHBvcnQgZnVuY3Rpb24gRGl2aWRlcigpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZTIoKTtcbiAgcmV0dXJuIGlzVmVyc2lvbkd0T3JFcShjb25maWcuYnVpbGRJbmZvLnZlcnNpb24sICcxMC4xLjAnKSA/IChcbiAgICA8R3JhZmFuYURpdmlkZXIgLz5cbiAgKSA6IChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17eyBib3JkZXJUb3A6IGAxcHggc29saWQgJHt0aGVtZS5jb2xvcnMuYm9yZGVyLndlYWt9YCwgbWFyZ2luOiB0aGVtZS5zcGFjaW5nKDIsIDApLCB3aWR0aDogJzEwMCUnIH19XG4gICAgPjwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiRGl2aWRlciIsIkdyYWZhbmFEaXZpZGVyIiwidXNlVGhlbWUyIiwiY29uZmlnIiwiaXNWZXJzaW9uR3RPckVxIiwidGhlbWUiLCJidWlsZEluZm8iLCJ2ZXJzaW9uIiwiZGl2Iiwic3R5bGUiLCJib3JkZXJUb3AiLCJjb2xvcnMiLCJib3JkZXIiLCJ3ZWFrIiwibWFyZ2luIiwic3BhY2luZyIsIndpZHRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Divider.tsx\n");

/***/ }),

/***/ "./components/LogsContextPanel.tsx":
/*!*****************************************!*\
  !*** ./components/LogsContextPanel.tsx ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _testExports: () => (/* binding */ _testExports),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../selectors */ \"./selectors.ts\");\n\n\n\n\nconst LogsContextPanelStyles = (0,_emotion_css__WEBPACK_IMPORTED_MODULE_2__.css)`\n  display: flex;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n  width: 100%;\n`;\nconst LogsContextPanel = (props)=>{\n    const { columns, datasourceUid } = props;\n    const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.useTheme2)();\n    if (!columns || columns.length === 0) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Alert, {\n            \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_3__.Components.LogsContextPanel.alert,\n            title: \"\",\n            severity: \"warning\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Stack, {\n            direction: \"column\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, 'Unable to match any context columns. Make sure your query returns at least one log context column from your ', /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n            style: {\n                textDecoration: 'underline'\n            },\n            href: `/connections/datasources/edit/${encodeURIComponent(datasourceUid)}#logs-config`\n        }, \"ClickHouse Data Source settings\"))));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: LogsContextPanelStyles\n    }, columns.map((p)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LogContextKey, {\n            key: p.name,\n            name: p.name,\n            value: p.value,\n            primaryColor: theme.colors.secondary.main,\n            primaryTextColor: theme.colors.text.primary,\n            secondaryColor: theme.colors.background.secondary,\n            secondaryTextColor: theme.colors.info.text\n        })));\n};\n/**\n * Roughly match an icon with the context column name.\n */ const iconMatcher = (contextName)=>{\n    contextName = contextName.toLowerCase();\n    if (contextName === 'db' || contextName === 'database' || contextName.includes('data')) {\n        return 'database';\n    } else if (contextName.includes('service')) {\n        return 'building';\n    } else if (contextName.includes('error') || contextName.includes('warn') || contextName.includes('critical') || contextName.includes('fatal')) {\n        return 'exclamation-triangle';\n    } else if (contextName.includes('user') || contextName.includes('admin')) {\n        return 'user';\n    } else if (contextName.includes('email')) {\n        return 'at';\n    } else if (contextName.includes('file')) {\n        return 'file-alt';\n    } else if (contextName.includes('bug')) {\n        return 'bug';\n    } else if (contextName.includes('search')) {\n        return 'search';\n    } else if (contextName.includes('tag')) {\n        return 'tag-alt';\n    } else if (contextName.includes('span') || contextName.includes('stack')) {\n        return 'brackets-curly';\n    }\n    if (contextName === 'host' || contextName === 'hostname' || contextName.includes('host')) {\n        return 'cloud';\n    }\n    if (contextName === 'url' || contextName.includes('url')) {\n        return 'link';\n    } else if (contextName.includes('container') || contextName.includes('pod')) {\n        return 'cube';\n    }\n    return 'align-left';\n};\nconst LogContextKey = (props)=>{\n    const { name, value, primaryColor, primaryTextColor, secondaryColor, secondaryTextColor } = props;\n    const styles = {\n        container: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_2__.css)`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      margin: 0.25em;\n      color: ${primaryTextColor}\n    `,\n        containerLeft: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_2__.css)`\n      display: flex;\n      align-items: center;\n      background-color: ${primaryColor};\n      border-radius: 2px;\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n  \n      padding-top: 0.15em;\n      padding-bottom: 0.15em;\n      padding-left: 0.25em;\n      padding-right: 0.25em;\n    `,\n        contextName: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_2__.css)`\n      font-weight: bold;\n      padding-left: 0.25em;\n      user-select: all;\n    `,\n        contextValue: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_2__.css)`\n      background-color: ${secondaryColor};\n      color: ${secondaryTextColor};\n      border-radius: 2px;\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n      user-select: all;\n      font-family: monospace;\n\n      padding-top: 0.15em;\n      padding-bottom: 0.15em;\n      padding-left: 0.25em;\n      padding-right: 0.25em;\n    `\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.container,\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_3__.Components.LogsContextPanel.LogsContextKey\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.containerLeft\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, {\n        name: iconMatcher(name),\n        size: \"md\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, \"test\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: styles.contextName\n    }, name)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n        className: styles.contextValue\n    }, value));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LogsContextPanel);\nconst _testExports = {\n    iconMatcher,\n    LogContextKey\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/LogsContextPanel.tsx\n");

/***/ }),

/***/ "./components/SqlEditor.tsx":
/*!**********************************!*\
  !*** ./components/SqlEditor.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SqlEditor: () => (/* binding */ SqlEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _sqlProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sqlProvider */ \"./components/sqlProvider.ts\");\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles */ \"./styles.ts\");\n/* harmony import */ var _suggestions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./suggestions */ \"./components/suggestions.ts\");\n/* harmony import */ var _data_validate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/validate */ \"./data/validate.ts\");\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../data/utils */ \"./data/utils.ts\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _queryBuilder_QueryTypeSwitcher__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./queryBuilder/QueryTypeSwitcher */ \"./components/queryBuilder/QueryTypeSwitcher.tsx\");\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\n\n\n\n\nfunction setupAutoSize(editor) {\n    const container = editor.getDomNode();\n    const updateHeight = ()=>{\n        if (container) {\n            const contentHeight = Math.max(100, Math.min(1000, editor.getContentHeight()));\n            const width = parseInt(container.style.width, 10);\n            container.style.width = `${width}px`;\n            container.style.height = `${contentHeight}px`;\n            editor.layout({\n                width,\n                height: contentHeight\n            });\n        }\n    };\n    editor.onDidContentSizeChange(updateHeight);\n    updateHeight();\n}\nconst SqlEditor = (props)=>{\n    const { query, onChange, datasource } = props;\n    const sqlQuery = query;\n    const queryType = sqlQuery.queryType || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_8__.QueryType.Table;\n    const saveChanges = (changes)=>{\n        onChange(_object_spread(_object_spread_props(_object_spread({}, sqlQuery), {\n            pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_10__.pluginVersion,\n            editorType: _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.SQL,\n            format: (0,_data_utils__WEBPACK_IMPORTED_MODULE_7__.mapQueryTypeToGrafanaFormat)(changes.queryType || queryType)\n        }), changes));\n    };\n    const schema = {\n        databases: ()=>datasource.fetchDatabases(),\n        tables: (db)=>datasource.fetchTables(db),\n        fields: (db, table)=>datasource.fetchFields(db, table),\n        defaultDatabase: datasource.getDefaultDatabase()\n    };\n    const getSuggestions = /*#__PURE__*/ function() {\n        var _ref = _async_to_generator(function*(text, range) {\n            const suggestions = yield (0,_suggestions__WEBPACK_IMPORTED_MODULE_5__.fetchSuggestions)(text, schema, range);\n            return Promise.resolve({\n                suggestions\n            });\n        });\n        return function getSuggestions(text, range) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    const validateSql = (sql, model, me)=>{\n        const v = (0,_data_validate__WEBPACK_IMPORTED_MODULE_6__.validate)(sql);\n        const errorSeverity = 8;\n        if (v.valid) {\n            me.setModelMarkers(model, 'clickhouse', []);\n        } else {\n            const err = v.error;\n            me.setModelMarkers(model, 'clickhouse', [\n                {\n                    startLineNumber: err.startLine,\n                    startColumn: err.startCol,\n                    endLineNumber: err.endLine,\n                    endColumn: err.endCol,\n                    message: err.expected,\n                    severity: errorSeverity\n                }\n            ]);\n        }\n    };\n    const handleMount = (editor)=>{\n        const me = (0,_sqlProvider__WEBPACK_IMPORTED_MODULE_2__.registerSQL)('chSql', editor, getSuggestions);\n        setupAutoSize(editor);\n        editor.onKeyUp((e)=>{\n            if (datasource.settings.jsonData.validateSql) {\n                const sql = editor.getValue();\n                validateSql(sql, editor.getModel(), me);\n            }\n        });\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: 'gf-form ' + _styles__WEBPACK_IMPORTED_MODULE_4__.styles.QueryEditor.queryType\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_queryBuilder_QueryTypeSwitcher__WEBPACK_IMPORTED_MODULE_9__.QueryTypeSwitcher, {\n        queryType: queryType,\n        onChange: (queryType)=>saveChanges({\n                queryType\n            }),\n        sqlEditor: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.wrapper\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.CodeEditor, {\n        \"aria-label\": \"SQL Editor\",\n        language: \"sql\",\n        value: query.rawSql,\n        onSave: (sql)=>saveChanges({\n                rawSql: sql\n            }),\n        showMiniMap: false,\n        showLineNumbers: true,\n        onBlur: (sql)=>saveChanges({\n                rawSql: sql\n            }),\n        onEditorDidMount: (editor)=>handleMount(editor)\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/SqlEditor.tsx\n");

/***/ }),

/***/ "./components/configEditor/AliasTableConfig.tsx":
/*!******************************************************!*\
  !*** ./components/configEditor/AliasTableConfig.tsx ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AliasTableConfig: () => (/* binding */ AliasTableConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n\n\n\n\n\n\nconst AliasTableConfig = (props)=>{\n    const { onAliasTablesChange } = props;\n    const [entries, setEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.aliasTables || []);\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.Config.AliasTableConfig;\n    const selectors = _selectors__WEBPACK_IMPORTED_MODULE_5__.selectors.components.Config.AliasTableConfig;\n    const entryToUniqueKey = (entry)=>`\"${entry.targetDatabase}\".\"${entry.targetTable}\":\"${entry.aliasDatabase}\".\"${entry.aliasTable}\"`;\n    const removeDuplicateEntries = (entries)=>{\n        const duplicateKeys = new Set();\n        return entries.filter((entry)=>{\n            const key = entryToUniqueKey(entry);\n            if (duplicateKeys.has(key)) {\n                return false;\n            }\n            duplicateKeys.add(key);\n            return true;\n        });\n    };\n    const addEntry = ()=>{\n        setEntries(removeDuplicateEntries([\n            ...entries,\n            {\n                targetDatabase: '',\n                targetTable: '',\n                aliasDatabase: '',\n                aliasTable: ''\n            }\n        ]));\n    };\n    const removeEntry = (index)=>{\n        let nextEntries = entries.slice();\n        nextEntries.splice(index, 1);\n        nextEntries = removeDuplicateEntries(nextEntries);\n        setEntries(nextEntries);\n        onAliasTablesChange(nextEntries);\n    };\n    const updateEntry = (index, entry)=>{\n        let nextEntries = entries.slice();\n        entry.targetDatabase = entry.targetDatabase.trim();\n        entry.targetTable = entry.targetTable.trim();\n        entry.aliasDatabase = entry.aliasDatabase.trim();\n        entry.aliasTable = entry.aliasTable.trim();\n        nextEntries[index] = entry;\n        nextEntries = removeDuplicateEntries(nextEntries);\n        setEntries(nextEntries);\n        onAliasTablesChange(nextEntries);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSection, {\n        title: labels.title\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, labels.descriptionParts[0]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"code\", null, labels.descriptionParts[1]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, labels.descriptionParts[2])), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"br\", null), entries.map((entry, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AliasTableEditor, {\n            key: entryToUniqueKey(entry),\n            targetDatabase: entry.targetDatabase,\n            targetTable: entry.targetTable,\n            aliasDatabase: entry.aliasDatabase,\n            aliasTable: entry.aliasTable,\n            onEntryChange: (e)=>updateEntry(index, e),\n            onRemove: ()=>removeEntry(index)\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {\n        \"data-testid\": selectors.addEntryButton,\n        icon: \"plus-circle\",\n        variant: \"secondary\",\n        size: \"sm\",\n        onClick: addEntry,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.smallBtn\n    }, labels.addTableLabel));\n};\nconst AliasTableEditor = (props)=>{\n    const { onEntryChange, onRemove } = props;\n    const [targetDatabase, setTargetDatabase] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.targetDatabase);\n    const [targetTable, setTargetTable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.targetTable);\n    const [aliasDatabase, setAliasDatabase] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.aliasDatabase);\n    const [aliasTable, setAliasTable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.aliasTable);\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.Config.AliasTableConfig;\n    const selectors = _selectors__WEBPACK_IMPORTED_MODULE_5__.selectors.components.Config.AliasTableConfig;\n    const onUpdate = ()=>{\n        onEntryChange({\n            targetDatabase,\n            targetTable,\n            aliasDatabase,\n            aliasTable\n        });\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": selectors.aliasEditor\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.HorizontalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.targetDatabaseLabel,\n        \"aria-label\": labels.targetDatabaseLabel\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        \"data-testid\": selectors.targetDatabaseInput,\n        value: targetDatabase,\n        placeholder: labels.targetDatabasePlaceholder,\n        onChange: (e)=>setTargetDatabase(e.target.value),\n        onBlur: ()=>onUpdate()\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.targetTableLabel,\n        \"aria-label\": labels.targetTableLabel\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        \"data-testid\": selectors.targetTableInput,\n        value: targetTable,\n        placeholder: labels.targetTableLabel,\n        onChange: (e)=>setTargetTable(e.target.value),\n        onBlur: ()=>onUpdate()\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.aliasDatabaseLabel,\n        \"aria-label\": labels.aliasDatabaseLabel\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        \"data-testid\": selectors.aliasDatabaseInput,\n        value: aliasDatabase,\n        placeholder: labels.aliasDatabasePlaceholder,\n        onChange: (e)=>setAliasDatabase(e.target.value),\n        onBlur: ()=>onUpdate()\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.aliasTableLabel,\n        \"aria-label\": labels.aliasTableLabel\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        \"data-testid\": selectors.aliasTableInput,\n        value: aliasTable,\n        placeholder: labels.aliasTableLabel,\n        onChange: (e)=>setAliasTable(e.target.value),\n        onBlur: ()=>onUpdate()\n    })), onRemove && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {\n        \"data-testid\": selectors.removeEntryButton,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.smallBtn,\n        variant: \"destructive\",\n        size: \"sm\",\n        icon: \"trash-alt\",\n        onClick: onRemove\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/configEditor/AliasTableConfig.tsx\n");

/***/ }),

/***/ "./components/configEditor/DefaultDatabaseTableConfig.tsx":
/*!****************************************************************!*\
  !*** ./components/configEditor/DefaultDatabaseTableConfig.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDatabaseTableConfig: () => (/* binding */ DefaultDatabaseTableConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n\n\n\n\nconst DefaultDatabaseTableConfig = (props)=>{\n    const { defaultDatabase, defaultTable, onDefaultDatabaseChange, onDefaultTableChange } = props;\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.Config.DefaultDatabaseTableConfig;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSection, {\n        title: labels.title\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.database.label,\n        description: labels.database.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: labels.database.name,\n        width: 40,\n        value: defaultDatabase || '',\n        onChange: onDefaultDatabaseChange,\n        label: labels.database.label,\n        \"aria-label\": labels.database.label,\n        placeholder: labels.database.placeholder,\n        type: \"text\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.table.label,\n        description: labels.table.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: labels.table.name,\n        width: 40,\n        value: defaultTable || '',\n        onChange: onDefaultTableChange,\n        label: labels.table.label,\n        \"aria-label\": labels.table.label,\n        placeholder: labels.table.placeholder,\n        type: \"text\"\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbmZpZ0VkaXRvci9EZWZhdWx0RGF0YWJhc2VUYWJsZUNvbmZpZy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE4QztBQUN3QjtBQUMzQjtBQUNaO0FBU3hCLE1BQU1LLDZCQUE2QixDQUFDQztJQUN6QyxNQUFNLEVBQUVDLGVBQWUsRUFBRUMsWUFBWSxFQUFFQyx1QkFBdUIsRUFBRUMsb0JBQW9CLEVBQUUsR0FBR0o7SUFDekYsTUFBTUssU0FBU1AsK0NBQVNBLENBQUNRLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDUiwwQkFBMEI7SUFFckUscUJBQ0UsMkRBQUNKLHNFQUFhQTtRQUFDYSxPQUFPSCxPQUFPRyxLQUFLO3FCQUNoQywyREFBQ1gsOENBQUtBO1FBQ0pZLE9BQU9KLE9BQU9LLFFBQVEsQ0FBQ0QsS0FBSztRQUM1QkUsYUFBYU4sT0FBT0ssUUFBUSxDQUFDQyxXQUFXO3FCQUV4QywyREFBQ2YsOENBQUtBO1FBQ0pnQixNQUFNUCxPQUFPSyxRQUFRLENBQUNFLElBQUk7UUFDMUJDLE9BQU87UUFDUEMsT0FBT2IsbUJBQW1CO1FBQzFCYyxVQUFVWjtRQUNWTSxPQUFPSixPQUFPSyxRQUFRLENBQUNELEtBQUs7UUFDNUJPLGNBQVlYLE9BQU9LLFFBQVEsQ0FBQ0QsS0FBSztRQUNqQ1EsYUFBYVosT0FBT0ssUUFBUSxDQUFDTyxXQUFXO1FBQ3hDQyxNQUFLO3VCQUdULDJEQUFDckIsOENBQUtBO1FBQ0pZLE9BQU9KLE9BQU9jLEtBQUssQ0FBQ1YsS0FBSztRQUN6QkUsYUFBYU4sT0FBT2MsS0FBSyxDQUFDUixXQUFXO3FCQUVyQywyREFBQ2YsOENBQUtBO1FBQ0pnQixNQUFNUCxPQUFPYyxLQUFLLENBQUNQLElBQUk7UUFDdkJDLE9BQU87UUFDUEMsT0FBT1osZ0JBQWdCO1FBQ3ZCYSxVQUFVWDtRQUNWSyxPQUFPSixPQUFPYyxLQUFLLENBQUNWLEtBQUs7UUFDekJPLGNBQVlYLE9BQU9jLEtBQUssQ0FBQ1YsS0FBSztRQUM5QlEsYUFBYVosT0FBT2MsS0FBSyxDQUFDRixXQUFXO1FBQ3JDQyxNQUFLOztBQUtmLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvY29uZmlnRWRpdG9yL0RlZmF1bHREYXRhYmFzZVRhYmxlQ29uZmlnLnRzeD9hNGJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBTeW50aGV0aWNFdmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbmZpZ1NlY3Rpb24gfSBmcm9tICdjb21wb25lbnRzL2V4cGVyaW1lbnRhbC9Db25maWdTZWN0aW9uJztcbmltcG9ydCB7IElucHV0LCBGaWVsZCB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCBhbGxMYWJlbHMgZnJvbSAnbGFiZWxzJztcblxuaW50ZXJmYWNlIERlZmF1bHREYXRhYmFzZVRhYmxlQ29uZmlnUHJvcHMge1xuICBkZWZhdWx0RGF0YWJhc2U/OiBzdHJpbmc7XG4gIGRlZmF1bHRUYWJsZT86IHN0cmluZztcbiAgb25EZWZhdWx0RGF0YWJhc2VDaGFuZ2U6IChlOiBTeW50aGV0aWNFdmVudDxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQsIEV2ZW50PikgPT4gdm9pZDtcbiAgb25EZWZhdWx0VGFibGVDaGFuZ2U6IChlOiBTeW50aGV0aWNFdmVudDxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQsIEV2ZW50PikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IERlZmF1bHREYXRhYmFzZVRhYmxlQ29uZmlnID0gKHByb3BzOiBEZWZhdWx0RGF0YWJhc2VUYWJsZUNvbmZpZ1Byb3BzKSA9PiB7XG4gIGNvbnN0IHsgZGVmYXVsdERhdGFiYXNlLCBkZWZhdWx0VGFibGUsIG9uRGVmYXVsdERhdGFiYXNlQ2hhbmdlLCBvbkRlZmF1bHRUYWJsZUNoYW5nZSB9ID0gcHJvcHM7XG4gIGNvbnN0IGxhYmVscyA9IGFsbExhYmVscy5jb21wb25lbnRzLkNvbmZpZy5EZWZhdWx0RGF0YWJhc2VUYWJsZUNvbmZpZztcblxuICByZXR1cm4gKFxuICAgIDxDb25maWdTZWN0aW9uIHRpdGxlPXtsYWJlbHMudGl0bGV9PlxuICAgICAgPEZpZWxkXG4gICAgICAgIGxhYmVsPXtsYWJlbHMuZGF0YWJhc2UubGFiZWx9XG4gICAgICAgIGRlc2NyaXB0aW9uPXtsYWJlbHMuZGF0YWJhc2UuZGVzY3JpcHRpb259XG4gICAgICA+XG4gICAgICAgIDxJbnB1dFxuICAgICAgICAgIG5hbWU9e2xhYmVscy5kYXRhYmFzZS5uYW1lfVxuICAgICAgICAgIHdpZHRoPXs0MH1cbiAgICAgICAgICB2YWx1ZT17ZGVmYXVsdERhdGFiYXNlIHx8ICcnfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkRlZmF1bHREYXRhYmFzZUNoYW5nZX1cbiAgICAgICAgICBsYWJlbD17bGFiZWxzLmRhdGFiYXNlLmxhYmVsfVxuICAgICAgICAgIGFyaWEtbGFiZWw9e2xhYmVscy5kYXRhYmFzZS5sYWJlbH1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17bGFiZWxzLmRhdGFiYXNlLnBsYWNlaG9sZGVyfVxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgLz5cbiAgICAgIDwvRmllbGQ+XG4gICAgICA8RmllbGRcbiAgICAgICAgbGFiZWw9e2xhYmVscy50YWJsZS5sYWJlbH1cbiAgICAgICAgZGVzY3JpcHRpb249e2xhYmVscy50YWJsZS5kZXNjcmlwdGlvbn1cbiAgICAgID5cbiAgICAgICAgPElucHV0XG4gICAgICAgICAgbmFtZT17bGFiZWxzLnRhYmxlLm5hbWV9XG4gICAgICAgICAgd2lkdGg9ezQwfVxuICAgICAgICAgIHZhbHVlPXtkZWZhdWx0VGFibGUgfHwgJyd9XG4gICAgICAgICAgb25DaGFuZ2U9e29uRGVmYXVsdFRhYmxlQ2hhbmdlfVxuICAgICAgICAgIGxhYmVsPXtsYWJlbHMudGFibGUubGFiZWx9XG4gICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWxzLnRhYmxlLmxhYmVsfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtsYWJlbHMudGFibGUucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAvPlxuICAgICAgPC9GaWVsZD5cbiAgICA8L0NvbmZpZ1NlY3Rpb24+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJDb25maWdTZWN0aW9uIiwiSW5wdXQiLCJGaWVsZCIsImFsbExhYmVscyIsIkRlZmF1bHREYXRhYmFzZVRhYmxlQ29uZmlnIiwicHJvcHMiLCJkZWZhdWx0RGF0YWJhc2UiLCJkZWZhdWx0VGFibGUiLCJvbkRlZmF1bHREYXRhYmFzZUNoYW5nZSIsIm9uRGVmYXVsdFRhYmxlQ2hhbmdlIiwibGFiZWxzIiwiY29tcG9uZW50cyIsIkNvbmZpZyIsInRpdGxlIiwibGFiZWwiLCJkYXRhYmFzZSIsImRlc2NyaXB0aW9uIiwibmFtZSIsIndpZHRoIiwidmFsdWUiLCJvbkNoYW5nZSIsImFyaWEtbGFiZWwiLCJwbGFjZWhvbGRlciIsInR5cGUiLCJ0YWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/configEditor/DefaultDatabaseTableConfig.tsx\n");

/***/ }),

/***/ "./components/configEditor/HttpHeadersConfig.tsx":
/*!*******************************************************!*\
  !*** ./components/configEditor/HttpHeadersConfig.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpHeadersConfig: () => (/* binding */ HttpHeadersConfig),\n/* harmony export */   useConfiguredSecureHttpHeaders: () => (/* binding */ useConfiguredSecureHttpHeaders)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n\n\n\n\n\n\nconst HttpHeadersConfig = (props)=>{\n    const { secureFields, onHttpHeadersChange } = props;\n    const configuredSecureHeaders = useConfiguredSecureHttpHeaders(secureFields);\n    const [headers, setHeaders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.headers || []);\n    const [forwardGrafanaHeaders, setForwardGrafanaHeaders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.forwardGrafanaHeaders || false);\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.Config.HttpHeadersConfig;\n    const selectors = _selectors__WEBPACK_IMPORTED_MODULE_5__.selectors.components.Config.HttpHeaderConfig;\n    const addHeader = ()=>setHeaders([\n            ...headers,\n            {\n                name: '',\n                value: '',\n                secure: false\n            }\n        ]);\n    const removeHeader = (index)=>{\n        const nextHeaders = headers.slice();\n        nextHeaders.splice(index, 1);\n        setHeaders(nextHeaders);\n        onHttpHeadersChange(nextHeaders);\n    };\n    const updateHeader = (index, header)=>{\n        const nextHeaders = headers.slice();\n        header.name = header.name.trim();\n        nextHeaders[index] = header;\n        setHeaders(nextHeaders);\n        onHttpHeadersChange(nextHeaders);\n    };\n    const updateForwardGrafanaHeaders = (value)=>{\n        setForwardGrafanaHeaders(value);\n        props.onForwardGrafanaHeadersChange(value);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSection, {\n        title: labels.title\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.label,\n        description: labels.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, headers.map((header, index)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(HttpHeaderEditor, {\n            key: header.name + index,\n            name: header.name,\n            value: header.value,\n            secure: header.secure,\n            isSecureConfigured: configuredSecureHeaders.has(header.name),\n            onHeaderChange: (header)=>updateHeader(index, header),\n            onRemove: ()=>removeHeader(index)\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {\n        \"data-testid\": selectors.addHeaderButton,\n        icon: \"plus-circle\",\n        variant: \"secondary\",\n        size: \"sm\",\n        onClick: addHeader,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.smallBtn\n    }, labels.addHeaderLabel))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.forwardGrafanaHeaders.label,\n        description: labels.forwardGrafanaHeaders.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        \"data-testid\": selectors.forwardGrafanaHeadersSwitch,\n        className: \"gf-form\",\n        value: forwardGrafanaHeaders,\n        onChange: (e)=>updateForwardGrafanaHeaders(e.currentTarget.checked)\n    })));\n};\nconst HttpHeaderEditor = (props)=>{\n    const { onHeaderChange, onRemove } = props;\n    const [name, setName] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.name);\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.value);\n    const [secure, setSecure] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.secure);\n    const [isSecureConfigured, setSecureConfigured] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.isSecureConfigured);\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.Config.HttpHeadersConfig;\n    const selectors = _selectors__WEBPACK_IMPORTED_MODULE_5__.selectors.components.Config.HttpHeaderConfig;\n    const onUpdate = ()=>{\n        onHeaderChange({\n            name,\n            value,\n            secure\n        });\n    };\n    let valueInput;\n    if (secure) {\n        valueInput = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.SecretInput, {\n            \"data-testid\": selectors.headerValueInput,\n            width: 65,\n            label: \"\",\n            \"aria-label\": \"\",\n            placeholder: labels.secureHeaderValueLabel,\n            value: value,\n            isConfigured: isSecureConfigured,\n            onReset: ()=>setSecureConfigured(false),\n            onChange: (e)=>setValue(e.target.value),\n            onBlur: ()=>onUpdate()\n        });\n    } else {\n        valueInput = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n            \"data-testid\": selectors.headerValueInput,\n            width: 65,\n            value: value,\n            placeholder: labels.insecureHeaderValueLabel,\n            onChange: (e)=>setValue(e.target.value),\n            onBlur: ()=>onUpdate()\n        });\n    }\n    const headerValueLabel = secure ? labels.secureHeaderValueLabel : labels.insecureHeaderValueLabel;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": selectors.headerEditor\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.HorizontalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.headerNameLabel,\n        \"aria-label\": labels.headerNameLabel\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        \"data-testid\": selectors.headerNameInput,\n        value: name,\n        disabled: isSecureConfigured,\n        placeholder: labels.headerNamePlaceholder,\n        onChange: (e)=>setName(e.target.value),\n        onBlur: ()=>onUpdate()\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: headerValueLabel,\n        \"aria-label\": headerValueLabel\n    }, valueInput), !isSecureConfigured && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.secureLabel\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        \"data-testid\": selectors.headerSecureSwitch,\n        className: \"gf-form\",\n        value: secure,\n        onChange: (e)=>setSecure(e.currentTarget.checked),\n        onBlur: ()=>onUpdate()\n    })), onRemove && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {\n        \"data-testid\": selectors.removeHeaderButton,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.smallBtn,\n        variant: \"destructive\",\n        size: \"sm\",\n        icon: \"trash-alt\",\n        onClick: onRemove\n    })));\n};\n/**\n * Returns a Set of all secured headers that are configured\n */ const useConfiguredSecureHttpHeaders = (secureJsonFields)=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const secureHeaders = new Set();\n        for(let key in secureJsonFields){\n            if (key.startsWith('secureHttpHeaders.') && secureJsonFields[key]) {\n                secureHeaders.add(key.substring(key.indexOf('.') + 1));\n            }\n        }\n        return secureHeaders;\n    }, [\n        secureJsonFields\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbmZpZ0VkaXRvci9IdHRwSGVhZGVyc0NvbmZpZy50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUE4RDtBQUNRO0FBQ21CO0FBRTFEO0FBQ0M7QUFDc0I7QUFXL0MsTUFBTWMsb0JBQW9CLENBQUNDO0lBQ2hDLE1BQU0sRUFBRUMsWUFBWSxFQUFFQyxtQkFBbUIsRUFBRSxHQUFHRjtJQUM5QyxNQUFNRywwQkFBMEJDLCtCQUErQkg7SUFDL0QsTUFBTSxDQUFDSSxTQUFTQyxXQUFXLEdBQUduQiwrQ0FBUUEsQ0FBaUJhLE1BQU1LLE9BQU8sSUFBSSxFQUFFO0lBQzFFLE1BQU0sQ0FBQ0UsdUJBQXVCQyx5QkFBeUIsR0FBR3JCLCtDQUFRQSxDQUFVYSxNQUFNTyxxQkFBcUIsSUFBSTtJQUMzRyxNQUFNRSxTQUFTZCwrQ0FBU0EsQ0FBQ2UsVUFBVSxDQUFDQyxNQUFNLENBQUNaLGlCQUFpQjtJQUM1RCxNQUFNRixZQUFZQyxpREFBWUEsQ0FBQ1ksVUFBVSxDQUFDQyxNQUFNLENBQUNDLGdCQUFnQjtJQUVqRSxNQUFNQyxZQUFZLElBQU1QLFdBQVc7ZUFBSUQ7WUFBUztnQkFBRVMsTUFBTTtnQkFBSUMsT0FBTztnQkFBSUMsUUFBUTtZQUFNO1NBQUU7SUFDdkYsTUFBTUMsZUFBZSxDQUFDQztRQUNwQixNQUFNQyxjQUE4QmQsUUFBUWUsS0FBSztRQUNqREQsWUFBWUUsTUFBTSxDQUFDSCxPQUFPO1FBQzFCWixXQUFXYTtRQUNYakIsb0JBQW9CaUI7SUFDdEI7SUFDQSxNQUFNRyxlQUFlLENBQUNKLE9BQWVLO1FBQ25DLE1BQU1KLGNBQThCZCxRQUFRZSxLQUFLO1FBQ2pERyxPQUFPVCxJQUFJLEdBQUdTLE9BQU9ULElBQUksQ0FBQ1UsSUFBSTtRQUM5QkwsV0FBVyxDQUFDRCxNQUFNLEdBQUdLO1FBQ3JCakIsV0FBV2E7UUFDWGpCLG9CQUFvQmlCO0lBQ3RCO0lBQ0EsTUFBTU0sOEJBQThCLENBQUNWO1FBQ25DUCx5QkFBeUJPO1FBQ3pCZixNQUFNMEIsNkJBQTZCLENBQUNYO0lBQ3RDO0lBRUEscUJBQ0UsMkRBQUMzQixzRUFBYUE7UUFDWnVDLE9BQU9sQixPQUFPa0IsS0FBSztxQkFFbkIsMkRBQUNyQyw4Q0FBS0E7UUFBQ3NDLE9BQU9uQixPQUFPbUIsS0FBSztRQUFFQyxhQUFhcEIsT0FBT29CLFdBQVc7cUJBQ3pELDBIQUNHeEIsUUFBUXlCLEdBQUcsQ0FBQyxDQUFDUCxRQUFRTCxzQkFDcEIsMkRBQUNhO1lBQ0NDLEtBQUtULE9BQU9ULElBQUksR0FBR0k7WUFDbkJKLE1BQU1TLE9BQU9ULElBQUk7WUFDakJDLE9BQU9RLE9BQU9SLEtBQUs7WUFDbkJDLFFBQVFPLE9BQU9QLE1BQU07WUFDckJpQixvQkFBb0I5Qix3QkFBd0IrQixHQUFHLENBQUNYLE9BQU9ULElBQUk7WUFDM0RxQixnQkFBZ0JaLENBQUFBLFNBQVVELGFBQWFKLE9BQU9LO1lBQzlDYSxVQUFVLElBQU1uQixhQUFhQzsyQkFHakMsMkRBQUN4QiwrQ0FBTUE7UUFDSDJDLGVBQWF4QyxVQUFVeUMsZUFBZTtRQUN0Q0MsTUFBSztRQUNMQyxTQUFRO1FBQ1JDLE1BQUs7UUFDTEMsU0FBUzdCO1FBQ1Q4QixXQUFXL0MsMkNBQU1BLENBQUNnRCxNQUFNLENBQUNDLFFBQVE7T0FFaENwQyxPQUFPcUMsY0FBYyxtQkFJOUIsMkRBQUN4RCw4Q0FBS0E7UUFBQ3NDLE9BQU9uQixPQUFPRixxQkFBcUIsQ0FBQ3FCLEtBQUs7UUFBRUMsYUFBYXBCLE9BQU9GLHFCQUFxQixDQUFDd0MsT0FBTztxQkFDakcsMkRBQUN2RCwrQ0FBTUE7UUFDTDZDLGVBQWF4QyxVQUFVbUQsMkJBQTJCO1FBQ2xETCxXQUFXO1FBQ1g1QixPQUFPUjtRQUNQMEMsVUFBVSxDQUFDQyxJQUFNekIsNEJBQTRCeUIsRUFBRUMsYUFBYSxDQUFDQyxPQUFPOztBQUs5RSxFQUFDO0FBV0QsTUFBTXJCLG1CQUFtQixDQUFDL0I7SUFDeEIsTUFBTSxFQUFFbUMsY0FBYyxFQUFFQyxRQUFRLEVBQUUsR0FBR3BDO0lBQ3JDLE1BQU0sQ0FBQ2MsTUFBTXVDLFFBQVEsR0FBR2xFLCtDQUFRQSxDQUFTYSxNQUFNYyxJQUFJO0lBQ25ELE1BQU0sQ0FBQ0MsT0FBT3VDLFNBQVMsR0FBR25FLCtDQUFRQSxDQUFTYSxNQUFNZSxLQUFLO0lBQ3RELE1BQU0sQ0FBQ0MsUUFBUXVDLFVBQVUsR0FBR3BFLCtDQUFRQSxDQUFVYSxNQUFNZ0IsTUFBTTtJQUMxRCxNQUFNLENBQUNpQixvQkFBb0J1QixvQkFBb0IsR0FBR3JFLCtDQUFRQSxDQUFVYSxNQUFNaUMsa0JBQWtCO0lBQzVGLE1BQU14QixTQUFTZCwrQ0FBU0EsQ0FBQ2UsVUFBVSxDQUFDQyxNQUFNLENBQUNaLGlCQUFpQjtJQUM1RCxNQUFNRixZQUFZQyxpREFBWUEsQ0FBQ1ksVUFBVSxDQUFDQyxNQUFNLENBQUNDLGdCQUFnQjtJQUVqRSxNQUFNNkMsV0FBVztRQUNmdEIsZUFBZTtZQUNickI7WUFDQUM7WUFDQUM7UUFDRjtJQUNGO0lBRUEsSUFBSTBDO0lBQ0osSUFBSTFDLFFBQVE7UUFDVjBDLDJCQUFhLDJEQUFDakUsb0RBQVdBO1lBQ3ZCNEMsZUFBYXhDLFVBQVU4RCxnQkFBZ0I7WUFDdkNDLE9BQU87WUFDUGhDLE9BQU07WUFDTmlDLGNBQVc7WUFDWEMsYUFBYXJELE9BQU9zRCxzQkFBc0I7WUFDMUNoRCxPQUFPQTtZQUNQaUQsY0FBYy9CO1lBQ2RnQyxTQUFTLElBQU1ULG9CQUFvQjtZQUNuQ1AsVUFBVSxDQUFDQyxJQUFxQ0ksU0FBU0osRUFBRWdCLE1BQU0sQ0FBQ25ELEtBQUs7WUFDdkVvRCxRQUFRLElBQU1WOztJQUVsQixPQUFPO1FBQ0xDLDJCQUFhLDJEQUFDckUsOENBQUtBO1lBQ2pCZ0QsZUFBYXhDLFVBQVU4RCxnQkFBZ0I7WUFDdkNDLE9BQU87WUFDUDdDLE9BQU9BO1lBQ1ArQyxhQUFhckQsT0FBTzJELHdCQUF3QjtZQUM1Q25CLFVBQVUsQ0FBQ0MsSUFBcUNJLFNBQVNKLEVBQUVnQixNQUFNLENBQUNuRCxLQUFLO1lBQ3ZFb0QsUUFBUSxJQUFNVjs7SUFFbEI7SUFFQSxNQUFNWSxtQkFBbUJyRCxTQUFTUCxPQUFPc0Qsc0JBQXNCLEdBQUd0RCxPQUFPMkQsd0JBQXdCO0lBQ2pHLHFCQUNFLDJEQUFDRTtRQUFJakMsZUFBYXhDLFVBQVUwRSxZQUFZO3FCQUN0QywyREFBQ2hGLHdEQUFlQSxzQkFDZCwyREFBQ0QsOENBQUtBO1FBQUNzQyxPQUFPbkIsT0FBTytELGVBQWU7UUFBRVgsY0FBWXBELE9BQU8rRCxlQUFlO3FCQUN0RSwyREFBQ25GLDhDQUFLQTtRQUNKZ0QsZUFBYXhDLFVBQVU0RSxlQUFlO1FBQ3RDMUQsT0FBT0Q7UUFDUDRELFVBQVV6QztRQUNWNkIsYUFBYXJELE9BQU9rRSxxQkFBcUI7UUFDekMxQixVQUFVLENBQUNDLElBQXFDRyxRQUFRSCxFQUFFZ0IsTUFBTSxDQUFDbkQsS0FBSztRQUN0RW9ELFFBQVEsSUFBTVY7dUJBR2xCLDJEQUFDbkUsOENBQUtBO1FBQUNzQyxPQUFPeUM7UUFBa0JSLGNBQVlRO09BQ3pDWCxhQUVELENBQUN6QixvQ0FDRCwyREFBQzNDLDhDQUFLQTtRQUFDc0MsT0FBT25CLE9BQU9tRSxXQUFXO3FCQUM5QiwyREFBQ3BGLCtDQUFNQTtRQUNMNkMsZUFBYXhDLFVBQVVnRixrQkFBa0I7UUFDekNsQyxXQUFVO1FBQ1Y1QixPQUFPQztRQUNQaUMsVUFBVUMsQ0FBQUEsSUFBS0ssVUFBVUwsRUFBRUMsYUFBYSxDQUFDQyxPQUFPO1FBQ2hEZSxRQUFRLElBQU1WO1NBSWxCckIsMEJBQ0EsMkRBQUMxQywrQ0FBTUE7UUFDTDJDLGVBQWF4QyxVQUFVaUYsa0JBQWtCO1FBQ3pDbkMsV0FBVy9DLDJDQUFNQSxDQUFDZ0QsTUFBTSxDQUFDQyxRQUFRO1FBQ2pDTCxTQUFRO1FBQ1JDLE1BQUs7UUFDTEYsTUFBSztRQUNMRyxTQUFTTjs7QUFNckI7QUFFQTs7Q0FFQyxHQUNNLE1BQU1oQyxpQ0FBaUMsQ0FBQzJFO0lBQzdDLE9BQU83Riw4Q0FBT0EsQ0FBQztRQUNiLE1BQU04RixnQkFBZ0IsSUFBSUM7UUFDMUIsSUFBSyxJQUFJakQsT0FBTytDLGlCQUFrQjtZQUNoQyxJQUFJL0MsSUFBSWtELFVBQVUsQ0FBQyx5QkFBeUJILGdCQUFnQixDQUFDL0MsSUFBSSxFQUFFO2dCQUNqRWdELGNBQWNHLEdBQUcsQ0FBQ25ELElBQUlvRCxTQUFTLENBQUNwRCxJQUFJcUQsT0FBTyxDQUFDLE9BQU87WUFDckQ7UUFDRjtRQUNBLE9BQU9MO0lBQ1QsR0FBRztRQUFDRDtLQUFpQjtBQUN2QixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL2NvbmZpZ0VkaXRvci9IdHRwSGVhZGVyc0NvbmZpZy50c3g/YTViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ2hhbmdlRXZlbnQsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29uZmlnU2VjdGlvbiB9IGZyb20gJ2NvbXBvbmVudHMvZXhwZXJpbWVudGFsL0NvbmZpZ1NlY3Rpb24nO1xuaW1wb3J0IHsgSW5wdXQsIEZpZWxkLCBIb3Jpem9udGFsR3JvdXAsIFN3aXRjaCwgU2VjcmV0SW5wdXQsIEJ1dHRvbiB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCB7IENISHR0cEhlYWRlciB9IGZyb20gJ3R5cGVzL2NvbmZpZyc7XG5pbXBvcnQgYWxsTGFiZWxzIGZyb20gJ2xhYmVscyc7XG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tICdzdHlsZXMnO1xuaW1wb3J0IHsgc2VsZWN0b3JzIGFzIGFsbFNlbGVjdG9ycyB9IGZyb20gJ3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBLZXlWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuXG5pbnRlcmZhY2UgSHR0cEhlYWRlcnNDb25maWdQcm9wcyB7XG4gIGhlYWRlcnM/OiBDSEh0dHBIZWFkZXJbXTtcbiAgZm9yd2FyZEdyYWZhbmFIZWFkZXJzPzogYm9vbGVhbjtcbiAgc2VjdXJlRmllbGRzOiBLZXlWYWx1ZTxib29sZWFuPjtcbiAgb25IdHRwSGVhZGVyc0NoYW5nZTogKHY6IENISHR0cEhlYWRlcltdKSA9PiB2b2lkO1xuICBvbkZvcndhcmRHcmFmYW5hSGVhZGVyc0NoYW5nZTogKHY6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBIdHRwSGVhZGVyc0NvbmZpZyA9IChwcm9wczogSHR0cEhlYWRlcnNDb25maWdQcm9wcykgPT4ge1xuICBjb25zdCB7IHNlY3VyZUZpZWxkcywgb25IdHRwSGVhZGVyc0NoYW5nZSB9ID0gcHJvcHM7XG4gIGNvbnN0IGNvbmZpZ3VyZWRTZWN1cmVIZWFkZXJzID0gdXNlQ29uZmlndXJlZFNlY3VyZUh0dHBIZWFkZXJzKHNlY3VyZUZpZWxkcyk7XG4gIGNvbnN0IFtoZWFkZXJzLCBzZXRIZWFkZXJzXSA9IHVzZVN0YXRlPENISHR0cEhlYWRlcltdPihwcm9wcy5oZWFkZXJzIHx8IFtdKTtcbiAgY29uc3QgW2ZvcndhcmRHcmFmYW5hSGVhZGVycywgc2V0Rm9yd2FyZEdyYWZhbmFIZWFkZXJzXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHByb3BzLmZvcndhcmRHcmFmYW5hSGVhZGVycyB8fCBmYWxzZSk7XG4gIGNvbnN0IGxhYmVscyA9IGFsbExhYmVscy5jb21wb25lbnRzLkNvbmZpZy5IdHRwSGVhZGVyc0NvbmZpZztcbiAgY29uc3Qgc2VsZWN0b3JzID0gYWxsU2VsZWN0b3JzLmNvbXBvbmVudHMuQ29uZmlnLkh0dHBIZWFkZXJDb25maWc7XG5cbiAgY29uc3QgYWRkSGVhZGVyID0gKCkgPT4gc2V0SGVhZGVycyhbLi4uaGVhZGVycywgeyBuYW1lOiAnJywgdmFsdWU6ICcnLCBzZWN1cmU6IGZhbHNlIH1dKTtcbiAgY29uc3QgcmVtb3ZlSGVhZGVyID0gKGluZGV4OiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBuZXh0SGVhZGVyczogQ0hIdHRwSGVhZGVyW10gPSBoZWFkZXJzLnNsaWNlKCk7XG4gICAgbmV4dEhlYWRlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICBzZXRIZWFkZXJzKG5leHRIZWFkZXJzKTtcbiAgICBvbkh0dHBIZWFkZXJzQ2hhbmdlKG5leHRIZWFkZXJzKTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlSGVhZGVyID0gKGluZGV4OiBudW1iZXIsIGhlYWRlcjogQ0hIdHRwSGVhZGVyKSA9PiB7XG4gICAgY29uc3QgbmV4dEhlYWRlcnM6IENISHR0cEhlYWRlcltdID0gaGVhZGVycy5zbGljZSgpO1xuICAgIGhlYWRlci5uYW1lID0gaGVhZGVyLm5hbWUudHJpbSgpO1xuICAgIG5leHRIZWFkZXJzW2luZGV4XSA9IGhlYWRlcjtcbiAgICBzZXRIZWFkZXJzKG5leHRIZWFkZXJzKTtcbiAgICBvbkh0dHBIZWFkZXJzQ2hhbmdlKG5leHRIZWFkZXJzKTtcbiAgfTtcbiAgY29uc3QgdXBkYXRlRm9yd2FyZEdyYWZhbmFIZWFkZXJzID0gKHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgc2V0Rm9yd2FyZEdyYWZhbmFIZWFkZXJzKHZhbHVlKTtcbiAgICBwcm9wcy5vbkZvcndhcmRHcmFmYW5hSGVhZGVyc0NoYW5nZSh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxDb25maWdTZWN0aW9uXG4gICAgICB0aXRsZT17bGFiZWxzLnRpdGxlfVxuICAgID5cbiAgICAgIDxGaWVsZCBsYWJlbD17bGFiZWxzLmxhYmVsfSBkZXNjcmlwdGlvbj17bGFiZWxzLmRlc2NyaXB0aW9ufT5cbiAgICAgICAgPD5cbiAgICAgICAgICB7aGVhZGVycy5tYXAoKGhlYWRlciwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIDxIdHRwSGVhZGVyRWRpdG9yXG4gICAgICAgICAgICAgIGtleT17aGVhZGVyLm5hbWUgKyBpbmRleH1cbiAgICAgICAgICAgICAgbmFtZT17aGVhZGVyLm5hbWV9XG4gICAgICAgICAgICAgIHZhbHVlPXtoZWFkZXIudmFsdWV9XG4gICAgICAgICAgICAgIHNlY3VyZT17aGVhZGVyLnNlY3VyZX1cbiAgICAgICAgICAgICAgaXNTZWN1cmVDb25maWd1cmVkPXtjb25maWd1cmVkU2VjdXJlSGVhZGVycy5oYXMoaGVhZGVyLm5hbWUpfVxuICAgICAgICAgICAgICBvbkhlYWRlckNoYW5nZT17aGVhZGVyID0+IHVwZGF0ZUhlYWRlcihpbmRleCwgaGVhZGVyKX1cbiAgICAgICAgICAgICAgb25SZW1vdmU9eygpID0+IHJlbW92ZUhlYWRlcihpbmRleCl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICkpfVxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e3NlbGVjdG9ycy5hZGRIZWFkZXJCdXR0b259XG4gICAgICAgICAgICAgIGljb249XCJwbHVzLWNpcmNsZVwiXG4gICAgICAgICAgICAgIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXthZGRIZWFkZXJ9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLkNvbW1vbi5zbWFsbEJ0bn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge2xhYmVscy5hZGRIZWFkZXJMYWJlbH1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC8+XG4gICAgICA8L0ZpZWxkPlxuICAgICAgPEZpZWxkIGxhYmVsPXtsYWJlbHMuZm9yd2FyZEdyYWZhbmFIZWFkZXJzLmxhYmVsfSBkZXNjcmlwdGlvbj17bGFiZWxzLmZvcndhcmRHcmFmYW5hSGVhZGVycy50b29sdGlwfT5cbiAgICAgICAgPFN3aXRjaFxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtzZWxlY3RvcnMuZm9yd2FyZEdyYWZhbmFIZWFkZXJzU3dpdGNofVxuICAgICAgICAgIGNsYXNzTmFtZT17XCJnZi1mb3JtXCJ9XG4gICAgICAgICAgdmFsdWU9e2ZvcndhcmRHcmFmYW5hSGVhZGVyc31cbiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHVwZGF0ZUZvcndhcmRHcmFmYW5hSGVhZGVycyhlLmN1cnJlbnRUYXJnZXQuY2hlY2tlZCl9XG4gICAgICAgIC8+XG4gICAgICA8L0ZpZWxkPlxuICAgIDwvQ29uZmlnU2VjdGlvbj5cbiAgKTtcbn1cblxuaW50ZXJmYWNlIEh0dHBIZWFkZXJFZGl0b3JQcm9wcyB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgc2VjdXJlOiBib29sZWFuO1xuICBpc1NlY3VyZUNvbmZpZ3VyZWQ6IGJvb2xlYW47XG4gIG9uSGVhZGVyQ2hhbmdlOiAodjogQ0hIdHRwSGVhZGVyKSA9PiB2b2lkO1xuICBvblJlbW92ZT86ICgpID0+IHZvaWQ7XG59XG5cbmNvbnN0IEh0dHBIZWFkZXJFZGl0b3IgPSAocHJvcHM6IEh0dHBIZWFkZXJFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCB7IG9uSGVhZGVyQ2hhbmdlLCBvblJlbW92ZSB9ID0gcHJvcHM7XG4gIGNvbnN0IFtuYW1lLCBzZXROYW1lXSA9IHVzZVN0YXRlPHN0cmluZz4ocHJvcHMubmFtZSk7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGU8c3RyaW5nPihwcm9wcy52YWx1ZSk7XG4gIGNvbnN0IFtzZWN1cmUsIHNldFNlY3VyZV0gPSB1c2VTdGF0ZTxib29sZWFuPihwcm9wcy5zZWN1cmUpO1xuICBjb25zdCBbaXNTZWN1cmVDb25maWd1cmVkLCBzZXRTZWN1cmVDb25maWd1cmVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHByb3BzLmlzU2VjdXJlQ29uZmlndXJlZCk7XG4gIGNvbnN0IGxhYmVscyA9IGFsbExhYmVscy5jb21wb25lbnRzLkNvbmZpZy5IdHRwSGVhZGVyc0NvbmZpZztcbiAgY29uc3Qgc2VsZWN0b3JzID0gYWxsU2VsZWN0b3JzLmNvbXBvbmVudHMuQ29uZmlnLkh0dHBIZWFkZXJDb25maWc7XG5cbiAgY29uc3Qgb25VcGRhdGUgPSAoKSA9PiB7XG4gICAgb25IZWFkZXJDaGFuZ2Uoe1xuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgc2VjdXJlXG4gICAgfSk7XG4gIH1cblxuICBsZXQgdmFsdWVJbnB1dDtcbiAgaWYgKHNlY3VyZSkge1xuICAgIHZhbHVlSW5wdXQgPSA8U2VjcmV0SW5wdXRcbiAgICAgIGRhdGEtdGVzdGlkPXtzZWxlY3RvcnMuaGVhZGVyVmFsdWVJbnB1dH1cbiAgICAgIHdpZHRoPXs2NX1cbiAgICAgIGxhYmVsPVwiXCJcbiAgICAgIGFyaWEtbGFiZWw9XCJcIlxuICAgICAgcGxhY2Vob2xkZXI9e2xhYmVscy5zZWN1cmVIZWFkZXJWYWx1ZUxhYmVsfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgaXNDb25maWd1cmVkPXtpc1NlY3VyZUNvbmZpZ3VyZWR9XG4gICAgICBvblJlc2V0PXsoKSA9PiBzZXRTZWN1cmVDb25maWd1cmVkKGZhbHNlKX1cbiAgICAgIG9uQ2hhbmdlPXsoZTogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgIG9uQmx1cj17KCkgPT4gb25VcGRhdGUoKX1cbiAgICAvPjtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZUlucHV0ID0gPElucHV0XG4gICAgICBkYXRhLXRlc3RpZD17c2VsZWN0b3JzLmhlYWRlclZhbHVlSW5wdXR9XG4gICAgICB3aWR0aD17NjV9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICBwbGFjZWhvbGRlcj17bGFiZWxzLmluc2VjdXJlSGVhZGVyVmFsdWVMYWJlbH1cbiAgICAgIG9uQ2hhbmdlPXsoZTogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHNldFZhbHVlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgIG9uQmx1cj17KCkgPT4gb25VcGRhdGUoKX1cbiAgICAvPjtcbiAgfVxuXG4gIGNvbnN0IGhlYWRlclZhbHVlTGFiZWwgPSBzZWN1cmUgPyBsYWJlbHMuc2VjdXJlSGVhZGVyVmFsdWVMYWJlbCA6IGxhYmVscy5pbnNlY3VyZUhlYWRlclZhbHVlTGFiZWw7XG4gIHJldHVybiAoXG4gICAgPGRpdiBkYXRhLXRlc3RpZD17c2VsZWN0b3JzLmhlYWRlckVkaXRvcn0+XG4gICAgICA8SG9yaXpvbnRhbEdyb3VwPlxuICAgICAgICA8RmllbGQgbGFiZWw9e2xhYmVscy5oZWFkZXJOYW1lTGFiZWx9IGFyaWEtbGFiZWw9e2xhYmVscy5oZWFkZXJOYW1lTGFiZWx9PlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e3NlbGVjdG9ycy5oZWFkZXJOYW1lSW5wdXR9XG4gICAgICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtpc1NlY3VyZUNvbmZpZ3VyZWR9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17bGFiZWxzLmhlYWRlck5hbWVQbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZTogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHNldE5hbWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgb25CbHVyPXsoKSA9PiBvblVwZGF0ZSgpfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRmllbGQ+XG4gICAgICAgIDxGaWVsZCBsYWJlbD17aGVhZGVyVmFsdWVMYWJlbH0gYXJpYS1sYWJlbD17aGVhZGVyVmFsdWVMYWJlbH0+XG4gICAgICAgICAge3ZhbHVlSW5wdXR9XG4gICAgICAgIDwvRmllbGQ+XG4gICAgICAgIHsgIWlzU2VjdXJlQ29uZmlndXJlZCAmJlxuICAgICAgICAgIDxGaWVsZCBsYWJlbD17bGFiZWxzLnNlY3VyZUxhYmVsfT5cbiAgICAgICAgICAgIDxTd2l0Y2hcbiAgICAgICAgICAgICAgZGF0YS10ZXN0aWQ9e3NlbGVjdG9ycy5oZWFkZXJTZWN1cmVTd2l0Y2h9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImdmLWZvcm1cIlxuICAgICAgICAgICAgICB2YWx1ZT17c2VjdXJlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRTZWN1cmUoZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpfVxuICAgICAgICAgICAgICBvbkJsdXI9eygpID0+IG9uVXBkYXRlKCl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvRmllbGQ+XG4gICAgICAgIH1cbiAgICAgICAgeyBvblJlbW92ZSAmJlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtzZWxlY3RvcnMucmVtb3ZlSGVhZGVyQnV0dG9ufVxuICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuQ29tbW9uLnNtYWxsQnRufVxuICAgICAgICAgICAgdmFyaWFudD1cImRlc3RydWN0aXZlXCJcbiAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgICBpY29uPVwidHJhc2gtYWx0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uUmVtb3ZlfVxuICAgICAgICAgIC8+XG4gICAgICAgIH1cbiAgICAgIDwvSG9yaXpvbnRhbEdyb3VwPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBTZXQgb2YgYWxsIHNlY3VyZWQgaGVhZGVycyB0aGF0IGFyZSBjb25maWd1cmVkXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDb25maWd1cmVkU2VjdXJlSHR0cEhlYWRlcnMgPSAoc2VjdXJlSnNvbkZpZWxkczogS2V5VmFsdWU8Ym9vbGVhbj4pOiBTZXQ8c3RyaW5nPiA9PiB7XG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBzZWN1cmVIZWFkZXJzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgZm9yIChsZXQga2V5IGluIHNlY3VyZUpzb25GaWVsZHMpIHtcbiAgICAgIGlmIChrZXkuc3RhcnRzV2l0aCgnc2VjdXJlSHR0cEhlYWRlcnMuJykgJiYgc2VjdXJlSnNvbkZpZWxkc1trZXldKSB7XG4gICAgICAgIHNlY3VyZUhlYWRlcnMuYWRkKGtleS5zdWJzdHJpbmcoa2V5LmluZGV4T2YoJy4nKSArIDEpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlY3VyZUhlYWRlcnM7XG4gIH0sIFtzZWN1cmVKc29uRmllbGRzXSk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlTWVtbyIsInVzZVN0YXRlIiwiQ29uZmlnU2VjdGlvbiIsIklucHV0IiwiRmllbGQiLCJIb3Jpem9udGFsR3JvdXAiLCJTd2l0Y2giLCJTZWNyZXRJbnB1dCIsIkJ1dHRvbiIsImFsbExhYmVscyIsInN0eWxlcyIsInNlbGVjdG9ycyIsImFsbFNlbGVjdG9ycyIsIkh0dHBIZWFkZXJzQ29uZmlnIiwicHJvcHMiLCJzZWN1cmVGaWVsZHMiLCJvbkh0dHBIZWFkZXJzQ2hhbmdlIiwiY29uZmlndXJlZFNlY3VyZUhlYWRlcnMiLCJ1c2VDb25maWd1cmVkU2VjdXJlSHR0cEhlYWRlcnMiLCJoZWFkZXJzIiwic2V0SGVhZGVycyIsImZvcndhcmRHcmFmYW5hSGVhZGVycyIsInNldEZvcndhcmRHcmFmYW5hSGVhZGVycyIsImxhYmVscyIsImNvbXBvbmVudHMiLCJDb25maWciLCJIdHRwSGVhZGVyQ29uZmlnIiwiYWRkSGVhZGVyIiwibmFtZSIsInZhbHVlIiwic2VjdXJlIiwicmVtb3ZlSGVhZGVyIiwiaW5kZXgiLCJuZXh0SGVhZGVycyIsInNsaWNlIiwic3BsaWNlIiwidXBkYXRlSGVhZGVyIiwiaGVhZGVyIiwidHJpbSIsInVwZGF0ZUZvcndhcmRHcmFmYW5hSGVhZGVycyIsIm9uRm9yd2FyZEdyYWZhbmFIZWFkZXJzQ2hhbmdlIiwidGl0bGUiLCJsYWJlbCIsImRlc2NyaXB0aW9uIiwibWFwIiwiSHR0cEhlYWRlckVkaXRvciIsImtleSIsImlzU2VjdXJlQ29uZmlndXJlZCIsImhhcyIsIm9uSGVhZGVyQ2hhbmdlIiwib25SZW1vdmUiLCJkYXRhLXRlc3RpZCIsImFkZEhlYWRlckJ1dHRvbiIsImljb24iLCJ2YXJpYW50Iiwic2l6ZSIsIm9uQ2xpY2siLCJjbGFzc05hbWUiLCJDb21tb24iLCJzbWFsbEJ0biIsImFkZEhlYWRlckxhYmVsIiwidG9vbHRpcCIsImZvcndhcmRHcmFmYW5hSGVhZGVyc1N3aXRjaCIsIm9uQ2hhbmdlIiwiZSIsImN1cnJlbnRUYXJnZXQiLCJjaGVja2VkIiwic2V0TmFtZSIsInNldFZhbHVlIiwic2V0U2VjdXJlIiwic2V0U2VjdXJlQ29uZmlndXJlZCIsIm9uVXBkYXRlIiwidmFsdWVJbnB1dCIsImhlYWRlclZhbHVlSW5wdXQiLCJ3aWR0aCIsImFyaWEtbGFiZWwiLCJwbGFjZWhvbGRlciIsInNlY3VyZUhlYWRlclZhbHVlTGFiZWwiLCJpc0NvbmZpZ3VyZWQiLCJvblJlc2V0IiwidGFyZ2V0Iiwib25CbHVyIiwiaW5zZWN1cmVIZWFkZXJWYWx1ZUxhYmVsIiwiaGVhZGVyVmFsdWVMYWJlbCIsImRpdiIsImhlYWRlckVkaXRvciIsImhlYWRlck5hbWVMYWJlbCIsImhlYWRlck5hbWVJbnB1dCIsImRpc2FibGVkIiwiaGVhZGVyTmFtZVBsYWNlaG9sZGVyIiwic2VjdXJlTGFiZWwiLCJoZWFkZXJTZWN1cmVTd2l0Y2giLCJyZW1vdmVIZWFkZXJCdXR0b24iLCJzZWN1cmVKc29uRmllbGRzIiwic2VjdXJlSGVhZGVycyIsIlNldCIsInN0YXJ0c1dpdGgiLCJhZGQiLCJzdWJzdHJpbmciLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/configEditor/HttpHeadersConfig.tsx\n");

/***/ }),

/***/ "./components/configEditor/LabeledInput.tsx":
/*!**************************************************!*\
  !*** ./components/configEditor/LabeledInput.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LabeledInput: () => (/* binding */ LabeledInput)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction LabeledInput(props) {\n    const { label, tooltip, placeholder, disabled, value, onChange } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 12,\n        className: \"query-keyword\",\n        tooltip: tooltip || label\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        disabled: disabled,\n        width: 30,\n        value: value,\n        onChange: (e)=>onChange(e.currentTarget.value),\n        placeholder: placeholder\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbmZpZ0VkaXRvci9MYWJlbGVkSW5wdXQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBCO0FBQzJCO0FBVzlDLFNBQVNHLGFBQWFDLEtBQXdCO0lBQ25ELE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRSxHQUFHTjtJQUVuRSxxQkFDRSwyREFBQ087UUFBSUMsV0FBVTtxQkFDYiwyREFBQ1Ysd0RBQWVBO1FBQUNXLE9BQU87UUFBSUQsV0FBVTtRQUFnQk4sU0FBU0EsV0FBV0Q7T0FDdkVBLHNCQUVILDJEQUFDSiw4Q0FBS0E7UUFDSk8sVUFBVUE7UUFDVkssT0FBTztRQUNQSixPQUFPQTtRQUNQQyxVQUFVSSxDQUFBQSxJQUFLSixTQUFTSSxFQUFFQyxhQUFhLENBQUNOLEtBQUs7UUFDN0NGLGFBQWFBOztBQUlyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9jb25maWdFZGl0b3IvTGFiZWxlZElucHV0LnRzeD80MWRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJbnB1dCwgSW5saW5lRm9ybUxhYmVsIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbnRlcmZhY2UgTGFiZWxlZElucHV0UHJvcHMge1xuICBsYWJlbDogc3RyaW5nO1xuICB0b29sdGlwPzogc3RyaW5nO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICB2YWx1ZTogc3RyaW5nO1xuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWJlbGVkSW5wdXQocHJvcHM6IExhYmVsZWRJbnB1dFByb3BzKSB7XG4gIGNvbnN0IHsgbGFiZWwsIHRvb2x0aXAsIHBsYWNlaG9sZGVyLCBkaXNhYmxlZCwgdmFsdWUsIG9uQ2hhbmdlIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2YtZm9ybVwiPlxuICAgICAgPElubGluZUZvcm1MYWJlbCB3aWR0aD17MTJ9IGNsYXNzTmFtZT1cInF1ZXJ5LWtleXdvcmRcIiB0b29sdGlwPXt0b29sdGlwIHx8IGxhYmVsfT5cbiAgICAgICAge2xhYmVsfVxuICAgICAgPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICA8SW5wdXRcbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICB3aWR0aD17MzB9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSW5wdXQiLCJJbmxpbmVGb3JtTGFiZWwiLCJMYWJlbGVkSW5wdXQiLCJwcm9wcyIsImxhYmVsIiwidG9vbHRpcCIsInBsYWNlaG9sZGVyIiwiZGlzYWJsZWQiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwiZGl2IiwiY2xhc3NOYW1lIiwid2lkdGgiLCJlIiwiY3VycmVudFRhcmdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/configEditor/LabeledInput.tsx\n");

/***/ }),

/***/ "./components/configEditor/LogsConfig.tsx":
/*!************************************************!*\
  !*** ./components/configEditor/LogsConfig.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogsConfig: () => (/* binding */ LogsConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _queryBuilder_OtelVersionSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../queryBuilder/OtelVersionSelect */ \"./components/queryBuilder/OtelVersionSelect.tsx\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../otel */ \"./otel.ts\");\n/* harmony import */ var _LabeledInput__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LabeledInput */ \"./components/configEditor/LabeledInput.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../data/utils */ \"./data/utils.ts\");\n/* harmony import */ var _queryBuilder_Switch__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../queryBuilder/Switch */ \"./components/queryBuilder/Switch.tsx\");\n\n\n\n\n\n\n\n\n\n\nconst LogsConfig = (props)=>{\n    const { onDefaultDatabaseChange, onDefaultTableChange, onOtelEnabledChange, onOtelVersionChange, onTimeColumnChange, onLevelColumnChange, onMessageColumnChange, onSelectContextColumnsChange, onContextColumnsChange } = props;\n    let { defaultDatabase, defaultTable, otelEnabled, otelVersion, timeColumn, levelColumn, messageColumn, selectContextColumns, contextColumns } = props.logsConfig || {};\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_7__[\"default\"].components.Config.LogsConfig;\n    const otelConfig = _otel__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getVersion(otelVersion);\n    if (otelEnabled && otelConfig) {\n        timeColumn = otelConfig.logColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time);\n        levelColumn = otelConfig.logColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.LogLevel);\n        messageColumn = otelConfig.logColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.LogMessage);\n    }\n    const onContextColumnsChangeTrimmed = (columns)=>onContextColumnsChange(columns.map((c)=>c.trim()).filter((c)=>c));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSection, {\n        title: labels.title,\n        description: labels.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        id: \"logs-config\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.defaultDatabase.label,\n        description: labels.defaultDatabase.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: labels.defaultDatabase.name,\n        width: 40,\n        value: defaultDatabase || '',\n        onChange: (e)=>onDefaultDatabaseChange(e.currentTarget.value),\n        label: labels.defaultDatabase.label,\n        \"aria-label\": labels.defaultDatabase.label,\n        placeholder: labels.defaultDatabase.placeholder\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.defaultTable.label,\n        description: labels.defaultTable.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: labels.defaultTable.name,\n        width: 40,\n        value: defaultTable || '',\n        onChange: (e)=>onDefaultTableChange(e.currentTarget.value),\n        label: labels.defaultTable.label,\n        \"aria-label\": labels.defaultTable.label,\n        placeholder: _otel__WEBPACK_IMPORTED_MODULE_5__.defaultLogsTable\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSubSection, {\n        title: labels.columns.title,\n        description: labels.columns.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_queryBuilder_OtelVersionSelect__WEBPACK_IMPORTED_MODULE_3__.OtelVersionSelect, {\n        enabled: otelEnabled || false,\n        selectedVersion: otelVersion || '',\n        onEnabledChange: onOtelEnabledChange,\n        onVersionChange: onOtelVersionChange,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.time.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_8__.columnLabelToPlaceholder)(labels.columns.time.label),\n        tooltip: labels.columns.time.tooltip,\n        value: timeColumn || '',\n        onChange: onTimeColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.level.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_8__.columnLabelToPlaceholder)(labels.columns.level.label),\n        tooltip: labels.columns.level.tooltip,\n        value: levelColumn || '',\n        onChange: onLevelColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.message.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_8__.columnLabelToPlaceholder)(labels.columns.message.label),\n        tooltip: labels.columns.message.tooltip,\n        value: messageColumn || '',\n        onChange: onMessageColumnChange\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"br\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSubSection, {\n        title: labels.contextColumns.title,\n        description: labels.contextColumns.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_queryBuilder_Switch__WEBPACK_IMPORTED_MODULE_9__.Switch, {\n        label: labels.contextColumns.selectContextColumns.label,\n        tooltip: labels.contextColumns.selectContextColumns.tooltip,\n        value: selectContextColumns || false,\n        onChange: onSelectContextColumnsChange,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.InlineFormLabel, {\n        width: 12,\n        className: \"query-keyword\",\n        tooltip: labels.contextColumns.columns.tooltip\n    }, labels.contextColumns.columns.label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.TagsInput, {\n        placeholder: labels.contextColumns.columns.placeholder,\n        tags: contextColumns || [],\n        onChange: onContextColumnsChangeTrimmed,\n        width: 60\n    }))));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/configEditor/LogsConfig.tsx\n");

/***/ }),

/***/ "./components/configEditor/QuerySettingsConfig.tsx":
/*!*********************************************************!*\
  !*** ./components/configEditor/QuerySettingsConfig.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuerySettingsConfig: () => (/* binding */ QuerySettingsConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n\n\n\n\nconst QuerySettingsConfig = (props)=>{\n    const { dialTimeout, queryTimeout, validateSql, onDialTimeoutChange, onQueryTimeoutChange, onValidateSqlChange } = props;\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.Config.QuerySettingsConfig;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_2__.ConfigSection, {\n        title: labels.title\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Field, {\n        label: labels.dialTimeout.label,\n        description: labels.dialTimeout.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        name: labels.dialTimeout.name,\n        width: 40,\n        value: dialTimeout || '',\n        onChange: onDialTimeoutChange,\n        label: labels.dialTimeout.label,\n        \"aria-label\": labels.dialTimeout.label,\n        placeholder: labels.dialTimeout.placeholder,\n        type: \"number\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Field, {\n        label: labels.queryTimeout.label,\n        description: labels.queryTimeout.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        name: labels.queryTimeout.name,\n        width: 40,\n        value: queryTimeout || '',\n        onChange: onQueryTimeoutChange,\n        label: labels.queryTimeout.label,\n        \"aria-label\": labels.queryTimeout.label,\n        placeholder: labels.queryTimeout.placeholder,\n        type: \"number\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Field, {\n        label: labels.validateSql.label,\n        description: labels.validateSql.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Switch, {\n        className: \"gf-form\",\n        value: validateSql || false,\n        onChange: onValidateSqlChange,\n        role: \"checkbox\"\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2NvbmZpZ0VkaXRvci9RdWVyeVNldHRpbmdzQ29uZmlnLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXlDO0FBQ1U7QUFDbUI7QUFDdkM7QUFXeEIsTUFBTU0sc0JBQXNCLENBQUNDO0lBQ2xDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsbUJBQW1CLEVBQUVDLG9CQUFvQixFQUFFQyxtQkFBbUIsRUFBRSxHQUFHTjtJQUNuSCxNQUFNTyxTQUFTVCwrQ0FBU0EsQ0FBQ1UsVUFBVSxDQUFDQyxNQUFNLENBQUNWLG1CQUFtQjtJQUU5RCxxQkFDRSwyREFBQ0Ysc0VBQWFBO1FBQUNhLE9BQU9ILE9BQU9HLEtBQUs7cUJBQ2hDLDJEQUFDZCw4Q0FBS0E7UUFBQ2UsT0FBT0osT0FBT04sV0FBVyxDQUFDVSxLQUFLO1FBQUVDLGFBQWFMLE9BQU9OLFdBQVcsQ0FBQ1ksT0FBTztxQkFDM0UsMkRBQUNsQiw4Q0FBS0E7UUFDSm1CLE1BQU1QLE9BQU9OLFdBQVcsQ0FBQ2EsSUFBSTtRQUM3QkMsT0FBTztRQUNQQyxPQUFPZixlQUFlO1FBQ3RCZ0IsVUFBVWI7UUFDVk8sT0FBT0osT0FBT04sV0FBVyxDQUFDVSxLQUFLO1FBQy9CTyxjQUFZWCxPQUFPTixXQUFXLENBQUNVLEtBQUs7UUFDcENRLGFBQWFaLE9BQU9OLFdBQVcsQ0FBQ2tCLFdBQVc7UUFDM0NDLE1BQUs7dUJBR1QsMkRBQUN4Qiw4Q0FBS0E7UUFDSmUsT0FBT0osT0FBT0wsWUFBWSxDQUFDUyxLQUFLO1FBQ2hDQyxhQUFhTCxPQUFPTCxZQUFZLENBQUNXLE9BQU87cUJBRXhDLDJEQUFDbEIsOENBQUtBO1FBQ0ptQixNQUFNUCxPQUFPTCxZQUFZLENBQUNZLElBQUk7UUFDOUJDLE9BQU87UUFDUEMsT0FBT2QsZ0JBQWdCO1FBQ3ZCZSxVQUFVWjtRQUNWTSxPQUFPSixPQUFPTCxZQUFZLENBQUNTLEtBQUs7UUFDaENPLGNBQVlYLE9BQU9MLFlBQVksQ0FBQ1MsS0FBSztRQUNyQ1EsYUFBYVosT0FBT0wsWUFBWSxDQUFDaUIsV0FBVztRQUM1Q0MsTUFBSzt1QkFHVCwyREFBQ3hCLDhDQUFLQTtRQUFDZSxPQUFPSixPQUFPSixXQUFXLENBQUNRLEtBQUs7UUFBRUMsYUFBYUwsT0FBT0osV0FBVyxDQUFDVSxPQUFPO3FCQUM3RSwyREFBQ25CLCtDQUFNQTtRQUNMMkIsV0FBVTtRQUNWTCxPQUFPYixlQUFlO1FBQ3RCYyxVQUFVWDtRQUNWZ0IsTUFBSzs7QUFLakIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9jb25maWdFZGl0b3IvUXVlcnlTZXR0aW5nc0NvbmZpZy50c3g/MjM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRm9ybUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU3dpdGNoLCBJbnB1dCwgRmllbGQgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgeyBDb25maWdTZWN0aW9uIH0gZnJvbSAnY29tcG9uZW50cy9leHBlcmltZW50YWwvQ29uZmlnU2VjdGlvbic7XG5pbXBvcnQgYWxsTGFiZWxzIGZyb20gJ2xhYmVscyc7XG5cbmludGVyZmFjZSBRdWVyeVNldHRpbmdzQ29uZmlnUHJvcHMge1xuICBkaWFsVGltZW91dD86IHN0cmluZztcbiAgcXVlcnlUaW1lb3V0Pzogc3RyaW5nO1xuICB2YWxpZGF0ZVNxbD86IGJvb2xlYW47XG4gIG9uRGlhbFRpbWVvdXRDaGFuZ2U6IChlOiBGb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uUXVlcnlUaW1lb3V0Q2hhbmdlOiAoZTogRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBvblZhbGlkYXRlU3FsQ2hhbmdlOiAoZTogRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgUXVlcnlTZXR0aW5nc0NvbmZpZyA9IChwcm9wczogUXVlcnlTZXR0aW5nc0NvbmZpZ1Byb3BzKSA9PiB7XG4gIGNvbnN0IHsgZGlhbFRpbWVvdXQsIHF1ZXJ5VGltZW91dCwgdmFsaWRhdGVTcWwsIG9uRGlhbFRpbWVvdXRDaGFuZ2UsIG9uUXVlcnlUaW1lb3V0Q2hhbmdlLCBvblZhbGlkYXRlU3FsQ2hhbmdlIH0gPSBwcm9wcztcbiAgY29uc3QgbGFiZWxzID0gYWxsTGFiZWxzLmNvbXBvbmVudHMuQ29uZmlnLlF1ZXJ5U2V0dGluZ3NDb25maWc7XG5cbiAgcmV0dXJuIChcbiAgICA8Q29uZmlnU2VjdGlvbiB0aXRsZT17bGFiZWxzLnRpdGxlfT5cbiAgICAgIDxGaWVsZCBsYWJlbD17bGFiZWxzLmRpYWxUaW1lb3V0LmxhYmVsfSBkZXNjcmlwdGlvbj17bGFiZWxzLmRpYWxUaW1lb3V0LnRvb2x0aXB9PlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgbmFtZT17bGFiZWxzLmRpYWxUaW1lb3V0Lm5hbWV9XG4gICAgICAgICAgICB3aWR0aD17NDB9XG4gICAgICAgICAgICB2YWx1ZT17ZGlhbFRpbWVvdXQgfHwgJyd9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25EaWFsVGltZW91dENoYW5nZX1cbiAgICAgICAgICAgIGxhYmVsPXtsYWJlbHMuZGlhbFRpbWVvdXQubGFiZWx9XG4gICAgICAgICAgICBhcmlhLWxhYmVsPXtsYWJlbHMuZGlhbFRpbWVvdXQubGFiZWx9XG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17bGFiZWxzLmRpYWxUaW1lb3V0LnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9GaWVsZD5cbiAgICAgICAgPEZpZWxkXG4gICAgICAgICAgbGFiZWw9e2xhYmVscy5xdWVyeVRpbWVvdXQubGFiZWx9XG4gICAgICAgICAgZGVzY3JpcHRpb249e2xhYmVscy5xdWVyeVRpbWVvdXQudG9vbHRpcH1cbiAgICAgICAgPlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgbmFtZT17bGFiZWxzLnF1ZXJ5VGltZW91dC5uYW1lfVxuICAgICAgICAgICAgd2lkdGg9ezQwfVxuICAgICAgICAgICAgdmFsdWU9e3F1ZXJ5VGltZW91dCB8fCAnJ31cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtvblF1ZXJ5VGltZW91dENoYW5nZX1cbiAgICAgICAgICAgIGxhYmVsPXtsYWJlbHMucXVlcnlUaW1lb3V0LmxhYmVsfVxuICAgICAgICAgICAgYXJpYS1sYWJlbD17bGFiZWxzLnF1ZXJ5VGltZW91dC5sYWJlbH1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtsYWJlbHMucXVlcnlUaW1lb3V0LnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9GaWVsZD5cbiAgICAgICAgPEZpZWxkIGxhYmVsPXtsYWJlbHMudmFsaWRhdGVTcWwubGFiZWx9IGRlc2NyaXB0aW9uPXtsYWJlbHMudmFsaWRhdGVTcWwudG9vbHRpcH0+XG4gICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2YtZm9ybVwiXG4gICAgICAgICAgICB2YWx1ZT17dmFsaWRhdGVTcWwgfHwgZmFsc2V9XG4gICAgICAgICAgICBvbkNoYW5nZT17b25WYWxpZGF0ZVNxbENoYW5nZX1cbiAgICAgICAgICAgIHJvbGU9J2NoZWNrYm94J1xuICAgICAgICAgIC8+XG4gICAgICAgIDwvRmllbGQ+XG4gICAgPC9Db25maWdTZWN0aW9uPlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiU3dpdGNoIiwiSW5wdXQiLCJGaWVsZCIsIkNvbmZpZ1NlY3Rpb24iLCJhbGxMYWJlbHMiLCJRdWVyeVNldHRpbmdzQ29uZmlnIiwicHJvcHMiLCJkaWFsVGltZW91dCIsInF1ZXJ5VGltZW91dCIsInZhbGlkYXRlU3FsIiwib25EaWFsVGltZW91dENoYW5nZSIsIm9uUXVlcnlUaW1lb3V0Q2hhbmdlIiwib25WYWxpZGF0ZVNxbENoYW5nZSIsImxhYmVscyIsImNvbXBvbmVudHMiLCJDb25maWciLCJ0aXRsZSIsImxhYmVsIiwiZGVzY3JpcHRpb24iLCJ0b29sdGlwIiwibmFtZSIsIndpZHRoIiwidmFsdWUiLCJvbkNoYW5nZSIsImFyaWEtbGFiZWwiLCJwbGFjZWhvbGRlciIsInR5cGUiLCJjbGFzc05hbWUiLCJyb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/configEditor/QuerySettingsConfig.tsx\n");

/***/ }),

/***/ "./components/configEditor/TracesConfig.tsx":
/*!**************************************************!*\
  !*** ./components/configEditor/TracesConfig.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracesConfig: () => (/* binding */ TracesConfig)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _queryBuilder_OtelVersionSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../queryBuilder/OtelVersionSelect */ \"./components/queryBuilder/OtelVersionSelect.tsx\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../otel */ \"./otel.ts\");\n/* harmony import */ var _LabeledInput__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LabeledInput */ \"./components/configEditor/LabeledInput.tsx\");\n/* harmony import */ var _queryBuilder_DurationUnitSelect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../queryBuilder/DurationUnitSelect */ \"./components/queryBuilder/DurationUnitSelect.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../data/utils */ \"./data/utils.ts\");\n\n\n\n\n\n\n\n\n\n\nconst TracesConfig = (props)=>{\n    const { onDefaultDatabaseChange, onDefaultTableChange, onOtelEnabledChange, onOtelVersionChange, onTraceIdColumnChange, onSpanIdColumnChange, onOperationNameColumnChange, onParentSpanIdColumnChange, onServiceNameColumnChange, onDurationColumnChange, onDurationUnitChange, onStartTimeColumnChange, onTagsColumnChange, onServiceTagsColumnChange } = props;\n    let { defaultDatabase, defaultTable, otelEnabled, otelVersion, traceIdColumn, spanIdColumn, operationNameColumn, parentSpanIdColumn, serviceNameColumn, durationColumn, durationUnit, startTimeColumn, tagsColumn, serviceTagsColumn } = props.tracesConfig || {};\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_8__[\"default\"].components.Config.TracesConfig;\n    const otelConfig = _otel__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getVersion(otelVersion);\n    if (otelEnabled && otelConfig) {\n        startTimeColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time);\n        traceIdColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceId);\n        spanIdColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceSpanId);\n        parentSpanIdColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceParentSpanId);\n        serviceNameColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceServiceName);\n        operationNameColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceOperationName);\n        durationColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceDurationTime);\n        tagsColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceTags);\n        serviceTagsColumn = otelConfig.traceColumnMap.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceServiceTags);\n        durationUnit = otelConfig.traceDurationUnit.toString();\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSection, {\n        title: labels.title,\n        description: labels.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        id: \"traces-config\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.defaultDatabase.label,\n        description: labels.defaultDatabase.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: labels.defaultDatabase.name,\n        width: 40,\n        value: defaultDatabase || '',\n        onChange: (e)=>onDefaultDatabaseChange(e.currentTarget.value),\n        label: labels.defaultDatabase.label,\n        \"aria-label\": labels.defaultDatabase.label,\n        placeholder: labels.defaultDatabase.placeholder\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.defaultTable.label,\n        description: labels.defaultTable.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: labels.defaultTable.name,\n        width: 40,\n        value: defaultTable || '',\n        onChange: (e)=>onDefaultTableChange(e.currentTarget.value),\n        label: labels.defaultTable.label,\n        \"aria-label\": labels.defaultTable.label,\n        placeholder: _otel__WEBPACK_IMPORTED_MODULE_5__.defaultTraceTable\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSubSection, {\n        title: labels.columns.title,\n        description: labels.columns.description\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_queryBuilder_OtelVersionSelect__WEBPACK_IMPORTED_MODULE_3__.OtelVersionSelect, {\n        enabled: otelEnabled || false,\n        selectedVersion: otelVersion || '',\n        onEnabledChange: onOtelEnabledChange,\n        onVersionChange: onOtelVersionChange,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.traceId.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.traceId.label),\n        tooltip: labels.columns.traceId.tooltip,\n        value: traceIdColumn || '',\n        onChange: onTraceIdColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.spanId.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.spanId.label),\n        tooltip: labels.columns.spanId.tooltip,\n        value: spanIdColumn || '',\n        onChange: onSpanIdColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.operationName.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.operationName.label),\n        tooltip: labels.columns.operationName.tooltip,\n        value: operationNameColumn || '',\n        onChange: onOperationNameColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.parentSpanId.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.parentSpanId.label),\n        tooltip: labels.columns.parentSpanId.tooltip,\n        value: parentSpanIdColumn || '',\n        onChange: onParentSpanIdColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.serviceName.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.serviceName.label),\n        tooltip: labels.columns.serviceName.tooltip,\n        value: serviceNameColumn || '',\n        onChange: onServiceNameColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.durationTime.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.durationTime.label),\n        tooltip: labels.columns.durationTime.tooltip,\n        value: durationColumn || '',\n        onChange: onDurationColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_queryBuilder_DurationUnitSelect__WEBPACK_IMPORTED_MODULE_7__.DurationUnitSelect, {\n        disabled: otelEnabled,\n        unit: durationUnit || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.TimeUnit.Nanoseconds,\n        onChange: onDurationUnitChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.startTime.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.startTime.label),\n        tooltip: labels.columns.startTime.tooltip,\n        value: startTimeColumn || '',\n        onChange: onStartTimeColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.tags.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.tags.label),\n        tooltip: labels.columns.tags.tooltip,\n        value: tagsColumn || '',\n        onChange: onTagsColumnChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LabeledInput__WEBPACK_IMPORTED_MODULE_6__.LabeledInput, {\n        disabled: otelEnabled,\n        label: labels.columns.serviceTags.label,\n        placeholder: (0,_data_utils__WEBPACK_IMPORTED_MODULE_9__.columnLabelToPlaceholder)(labels.columns.serviceTags.label),\n        tooltip: labels.columns.serviceTags.tooltip,\n        value: serviceTagsColumn || '',\n        onChange: onServiceTagsColumnChange\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/configEditor/TracesConfig.tsx\n");

/***/ }),

/***/ "./components/experimental/ConfigSection/ConfigSection.tsx":
/*!*****************************************************************!*\
  !*** ./components/experimental/ConfigSection/ConfigSection.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigSection: () => (/* binding */ ConfigSection)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _GenericConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GenericConfigSection */ \"./components/experimental/ConfigSection/GenericConfigSection.tsx\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _object_without_properties(source, excluded) {\n    if (source == null) return {};\n    var target = _object_without_properties_loose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _object_without_properties_loose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\nconst ConfigSection = (_param)=>{\n    var { children } = _param, props = _object_without_properties(_param, [\n        \"children\"\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_GenericConfigSection__WEBPACK_IMPORTED_MODULE_1__.GenericConfigSection, _object_spread_props(_object_spread({}, props), {\n        kind: \"section\"\n    }), children);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2V4cGVyaW1lbnRhbC9Db25maWdTZWN0aW9uL0NvbmZpZ1NlY3Rpb24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ3dFO0FBSTNGLE1BQU1FLGdCQUFnQjtRQUFDLEVBQUVDLFFBQVEsRUFBbUIsV0FBZEM7UUFBYkQ7O0lBQzlCLHFCQUNFLDJEQUFDRix1RUFBb0JBLDBDQUFLRztRQUFPQyxNQUFLO1FBQ25DRjtBQUdQLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvZXhwZXJpbWVudGFsL0NvbmZpZ1NlY3Rpb24vQ29uZmlnU2VjdGlvbi50c3g/ODBjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2VuZXJpY0NvbmZpZ1NlY3Rpb24sIFByb3BzIGFzIEdlbmVyaWNDb25maWdTZWN0aW9uUHJvcHMgfSBmcm9tICcuL0dlbmVyaWNDb25maWdTZWN0aW9uJztcblxudHlwZSBQcm9wcyA9IE9taXQ8R2VuZXJpY0NvbmZpZ1NlY3Rpb25Qcm9wcywgJ2tpbmQnPjtcblxuZXhwb3J0IGNvbnN0IENvbmZpZ1NlY3Rpb24gPSAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8R2VuZXJpY0NvbmZpZ1NlY3Rpb24gey4uLnByb3BzfSBraW5kPVwic2VjdGlvblwiPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvR2VuZXJpY0NvbmZpZ1NlY3Rpb24+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiR2VuZXJpY0NvbmZpZ1NlY3Rpb24iLCJDb25maWdTZWN0aW9uIiwiY2hpbGRyZW4iLCJwcm9wcyIsImtpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/experimental/ConfigSection/ConfigSection.tsx\n");

/***/ }),

/***/ "./components/experimental/ConfigSection/ConfigSubSection.tsx":
/*!********************************************************************!*\
  !*** ./components/experimental/ConfigSection/ConfigSubSection.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigSubSection: () => (/* binding */ ConfigSubSection)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _GenericConfigSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GenericConfigSection */ \"./components/experimental/ConfigSection/GenericConfigSection.tsx\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _object_without_properties(source, excluded) {\n    if (source == null) return {};\n    var target = _object_without_properties_loose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _object_without_properties_loose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\nconst ConfigSubSection = (_param)=>{\n    var { children } = _param, props = _object_without_properties(_param, [\n        \"children\"\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_GenericConfigSection__WEBPACK_IMPORTED_MODULE_1__.GenericConfigSection, _object_spread_props(_object_spread({}, props), {\n        kind: \"sub-section\"\n    }), children);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2V4cGVyaW1lbnRhbC9Db25maWdTZWN0aW9uL0NvbmZpZ1N1YlNlY3Rpb24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ3dFO0FBSTNGLE1BQU1FLG1CQUFtQjtRQUFDLEVBQUVDLFFBQVEsRUFBbUIsV0FBZEM7UUFBYkQ7O0lBQ2pDLHFCQUNFLDJEQUFDRix1RUFBb0JBLDBDQUFLRztRQUFPQyxNQUFLO1FBQ25DRjtBQUdQLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvZXhwZXJpbWVudGFsL0NvbmZpZ1NlY3Rpb24vQ29uZmlnU3ViU2VjdGlvbi50c3g/NDQ5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2VuZXJpY0NvbmZpZ1NlY3Rpb24sIFByb3BzIGFzIEdlbmVyaWNDb25maWdTZWN0aW9uUHJvcHMgfSBmcm9tICcuL0dlbmVyaWNDb25maWdTZWN0aW9uJztcblxudHlwZSBQcm9wcyA9IE9taXQ8R2VuZXJpY0NvbmZpZ1NlY3Rpb25Qcm9wcywgJ2tpbmQnPjtcblxuZXhwb3J0IGNvbnN0IENvbmZpZ1N1YlNlY3Rpb24gPSAoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfTogUHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8R2VuZXJpY0NvbmZpZ1NlY3Rpb24gey4uLnByb3BzfSBraW5kPVwic3ViLXNlY3Rpb25cIj5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0dlbmVyaWNDb25maWdTZWN0aW9uPlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkdlbmVyaWNDb25maWdTZWN0aW9uIiwiQ29uZmlnU3ViU2VjdGlvbiIsImNoaWxkcmVuIiwicHJvcHMiLCJraW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/experimental/ConfigSection/ConfigSubSection.tsx\n");

/***/ }),

/***/ "./components/experimental/ConfigSection/DataSourceDescription.tsx":
/*!*************************************************************************!*\
  !*** ./components/experimental/ConfigSection/DataSourceDescription.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataSourceDescription: () => (/* binding */ DataSourceDescription)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\nconst DataSourceDescription = ({ dataSourceName, docsLink, hasRequiredFields = true, className })=>{\n    const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useTheme2)();\n    const styles = {\n        container: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)({\n            p: {\n                margin: 0\n            },\n            'p + p': {\n                marginTop: theme.spacing(2)\n            }\n        }),\n        text: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)(_object_spread_props(_object_spread({}, theme.typography.body), {\n            color: theme.colors.text.secondary,\n            a: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)({\n                color: theme.colors.text.link,\n                textDecoration: 'underline',\n                '&:hover': {\n                    textDecoration: 'none'\n                }\n            })\n        }))\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.cx)(styles.container, className)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n        className: styles.text\n    }, \"Before you can use the \", dataSourceName, \" data source, you must configure it below or in the config file. For detailed instructions,\", ' ', /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        href: docsLink,\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, \"view the documentation\"), \".\"), hasRequiredFields && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n        className: styles.text\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"i\", null, \"Fields marked with * are required\")));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2V4cGVyaW1lbnRhbC9Db25maWdTZWN0aW9uL0RhdGFTb3VyY2VEZXNjcmlwdGlvbi50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDYTtBQUNDO0FBU2pDLE1BQU1JLHdCQUF3QixDQUFDLEVBQUVDLGNBQWMsRUFBRUMsUUFBUSxFQUFFQyxvQkFBb0IsSUFBSSxFQUFFQyxTQUFTLEVBQVM7SUFDNUcsTUFBTUMsUUFBUU4sc0RBQVNBO0lBRXZCLE1BQU1PLFNBQVM7UUFDYkMsV0FBV1QsaURBQUdBLENBQUM7WUFDYlUsR0FBRztnQkFDREMsUUFBUTtZQUNWO1lBQ0EsU0FBUztnQkFDUEMsV0FBV0wsTUFBTU0sT0FBTyxDQUFDO1lBQzNCO1FBQ0Y7UUFDQUMsTUFBTWQsaURBQUdBLENBQUMsd0NBQ0xPLE1BQU1RLFVBQVUsQ0FBQ0MsSUFBSTtZQUN4QkMsT0FBT1YsTUFBTVcsTUFBTSxDQUFDSixJQUFJLENBQUNLLFNBQVM7WUFDbENDLEdBQUdwQixpREFBR0EsQ0FBQztnQkFDTGlCLE9BQU9WLE1BQU1XLE1BQU0sQ0FBQ0osSUFBSSxDQUFDTyxJQUFJO2dCQUM3QkMsZ0JBQWdCO2dCQUNoQixXQUFXO29CQUNUQSxnQkFBZ0I7Z0JBQ2xCO1lBQ0Y7O0lBRUo7SUFFQSxxQkFDRSwyREFBQ0M7UUFBSWpCLFdBQVdQLGdEQUFFQSxDQUFDUyxPQUFPQyxTQUFTLEVBQUVIO3FCQUNuQywyREFBQ0k7UUFBRUosV0FBV0UsT0FBT00sSUFBSTtPQUFFLDJCQUNEWCxnQkFBZSwrRkFDaEIsbUJBQ3ZCLDJEQUFDaUI7UUFBRUksTUFBTXBCO1FBQVVxQixRQUFPO1FBQVNDLEtBQUk7T0FBYSwyQkFFaEQsTUFHTHJCLG1DQUNDLDJEQUFDSztRQUFFSixXQUFXRSxPQUFPTSxJQUFJO3FCQUN2QiwyREFBQ2EsV0FBRTtBQUtiLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvZXhwZXJpbWVudGFsL0NvbmZpZ1NlY3Rpb24vRGF0YVNvdXJjZURlc2NyaXB0aW9uLnRzeD9kOTAwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCB7IHVzZVRoZW1lMiB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxudHlwZSBQcm9wcyA9IHtcbiAgZGF0YVNvdXJjZU5hbWU6IHN0cmluZztcbiAgZG9jc0xpbms6IHN0cmluZztcbiAgaGFzUmVxdWlyZWRGaWVsZHM/OiBib29sZWFuO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgRGF0YVNvdXJjZURlc2NyaXB0aW9uID0gKHsgZGF0YVNvdXJjZU5hbWUsIGRvY3NMaW5rLCBoYXNSZXF1aXJlZEZpZWxkcyA9IHRydWUsIGNsYXNzTmFtZSB9OiBQcm9wcykgPT4ge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lMigpO1xuXG4gIGNvbnN0IHN0eWxlcyA9IHtcbiAgICBjb250YWluZXI6IGNzcyh7XG4gICAgICBwOiB7XG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgIH0sXG4gICAgICAncCArIHAnOiB7XG4gICAgICAgIG1hcmdpblRvcDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgdGV4dDogY3NzKHtcbiAgICAgIC4uLnRoZW1lLnR5cG9ncmFwaHkuYm9keSxcbiAgICAgIGNvbG9yOiB0aGVtZS5jb2xvcnMudGV4dC5zZWNvbmRhcnksXG4gICAgICBhOiBjc3Moe1xuICAgICAgICBjb2xvcjogdGhlbWUuY29sb3JzLnRleHQubGluayxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSksXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y3goc3R5bGVzLmNvbnRhaW5lciwgY2xhc3NOYW1lKX0+XG4gICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy50ZXh0fT5cbiAgICAgICAgQmVmb3JlIHlvdSBjYW4gdXNlIHRoZSB7ZGF0YVNvdXJjZU5hbWV9IGRhdGEgc291cmNlLCB5b3UgbXVzdCBjb25maWd1cmUgaXQgYmVsb3cgb3IgaW4gdGhlIGNvbmZpZyBmaWxlLiBGb3JcbiAgICAgICAgZGV0YWlsZWQgaW5zdHJ1Y3Rpb25zLHsnICd9XG4gICAgICAgIDxhIGhyZWY9e2RvY3NMaW5rfSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub3JlZmVycmVyXCI+XG4gICAgICAgICAgdmlldyB0aGUgZG9jdW1lbnRhdGlvblxuICAgICAgICA8L2E+XG4gICAgICAgIC5cbiAgICAgIDwvcD5cbiAgICAgIHtoYXNSZXF1aXJlZEZpZWxkcyAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT17c3R5bGVzLnRleHR9PlxuICAgICAgICAgIDxpPkZpZWxkcyBtYXJrZWQgd2l0aCAqIGFyZSByZXF1aXJlZDwvaT5cbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjeCIsImNzcyIsInVzZVRoZW1lMiIsIkRhdGFTb3VyY2VEZXNjcmlwdGlvbiIsImRhdGFTb3VyY2VOYW1lIiwiZG9jc0xpbmsiLCJoYXNSZXF1aXJlZEZpZWxkcyIsImNsYXNzTmFtZSIsInRoZW1lIiwic3R5bGVzIiwiY29udGFpbmVyIiwicCIsIm1hcmdpbiIsIm1hcmdpblRvcCIsInNwYWNpbmciLCJ0ZXh0IiwidHlwb2dyYXBoeSIsImJvZHkiLCJjb2xvciIsImNvbG9ycyIsInNlY29uZGFyeSIsImEiLCJsaW5rIiwidGV4dERlY29yYXRpb24iLCJkaXYiLCJocmVmIiwidGFyZ2V0IiwicmVsIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/experimental/ConfigSection/DataSourceDescription.tsx\n");

/***/ }),

/***/ "./components/experimental/ConfigSection/GenericConfigSection.tsx":
/*!************************************************************************!*\
  !*** ./components/experimental/ConfigSection/GenericConfigSection.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenericConfigSection: () => (/* binding */ GenericConfigSection)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\nconst GenericConfigSection = ({ children, title, description, isCollapsible = false, isInitiallyOpen = true, kind = 'section', className })=>{\n    const { colors, typography, spacing } = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useTheme2)();\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(isCollapsible ? isInitiallyOpen : true);\n    const iconName = isOpen ? 'angle-up' : 'angle-down';\n    const isSubSection = kind === 'sub-section';\n    const collapsibleButtonAriaLabel = `${isOpen ? 'Collapse' : 'Expand'} section ${title}`;\n    const styles = {\n        header: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)({\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center'\n        }),\n        title: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)({\n            margin: 0\n        }),\n        subtitle: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)({\n            margin: 0,\n            fontWeight: typography.fontWeightRegular\n        }),\n        descriptionText: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)(_object_spread_props(_object_spread({\n            marginTop: spacing(isSubSection ? 0.25 : 0.5),\n            marginBottom: 0\n        }, typography.bodySmall), {\n            color: colors.text.secondary\n        })),\n        content: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.css)({\n            marginTop: spacing(2)\n        })\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: className\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.header\n    }, kind === 'section' ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h3\", {\n        className: styles.title\n    }, title) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"h6\", {\n        className: styles.subtitle\n    }, title), isCollapsible && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.IconButton, {\n        name: iconName,\n        onClick: ()=>setIsOpen(!isOpen),\n        type: \"button\",\n        size: \"xl\",\n        \"aria-label\": collapsibleButtonAriaLabel\n    })), description && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"p\", {\n        className: styles.descriptionText\n    }, description), isOpen && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: styles.content\n    }, children));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2V4cGVyaW1lbnRhbC9Db25maWdTZWN0aW9uL0dlbmVyaWNDb25maWdTZWN0aW9uLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFtRDtBQUNoQjtBQUMyQjtBQVl2RCxNQUFNSyx1QkFBdUIsQ0FBQyxFQUNuQ0MsUUFBUSxFQUNSQyxLQUFLLEVBQ0xDLFdBQVcsRUFDWEMsZ0JBQWdCLEtBQUssRUFDckJDLGtCQUFrQixJQUFJLEVBQ3RCQyxPQUFPLFNBQVMsRUFDaEJDLFNBQVMsRUFDSDtJQUNOLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxVQUFVLEVBQUVDLE9BQU8sRUFBRSxHQUFHWixzREFBU0E7SUFDakQsTUFBTSxDQUFDYSxRQUFRQyxVQUFVLEdBQUdoQiwrQ0FBUUEsQ0FBQ1EsZ0JBQWdCQyxrQkFBa0I7SUFDdkUsTUFBTVEsV0FBcUJGLFNBQVMsYUFBYTtJQUNqRCxNQUFNRyxlQUFlUixTQUFTO0lBQzlCLE1BQU1TLDZCQUE2QixDQUFDLEVBQUVKLFNBQVMsYUFBYSxTQUFTLFNBQVMsRUFBRVQsTUFBTSxDQUFDO0lBRXZGLE1BQU1jLFNBQVM7UUFDYkMsUUFBUXBCLGlEQUFHQSxDQUFDO1lBQ1ZxQixTQUFTO1lBQ1RDLGdCQUFnQjtZQUNoQkMsWUFBWTtRQUNkO1FBQ0FsQixPQUFPTCxpREFBR0EsQ0FBQztZQUNUd0IsUUFBUTtRQUNWO1FBQ0FDLFVBQVV6QixpREFBR0EsQ0FBQztZQUNad0IsUUFBUTtZQUNSRSxZQUFZZCxXQUFXZSxpQkFBaUI7UUFDMUM7UUFDQUMsaUJBQWlCNUIsaURBQUdBLENBQUM7WUFDbkI2QixXQUFXaEIsUUFBUUksZUFBZSxPQUFPO1lBQ3pDYSxjQUFjO1dBQ1hsQixXQUFXbUIsU0FBUztZQUN2QkMsT0FBT3JCLE9BQU9zQixJQUFJLENBQUNDLFNBQVM7O1FBRTlCQyxTQUFTbkMsaURBQUdBLENBQUM7WUFDWDZCLFdBQVdoQixRQUFRO1FBQ3JCO0lBQ0Y7SUFFQSxxQkFDRSwyREFBQ3VCO1FBQUkxQixXQUFXQTtxQkFDZCwyREFBQzBCO1FBQUkxQixXQUFXUyxPQUFPQyxNQUFNO09BQzFCWCxTQUFTLDBCQUFZLDJEQUFDNEI7UUFBRzNCLFdBQVdTLE9BQU9kLEtBQUs7T0FBR0EsdUJBQWMsMkRBQUNpQztRQUFHNUIsV0FBV1MsT0FBT00sUUFBUTtPQUFHcEIsUUFDbEdFLCtCQUNDLDJEQUFDTCxtREFBVUE7UUFDVHFDLE1BQU12QjtRQUNOd0IsU0FBUyxJQUFNekIsVUFBVSxDQUFDRDtRQUMxQjJCLE1BQUs7UUFDTEMsTUFBSztRQUNMQyxjQUFZekI7U0FJakJaLDZCQUFlLDJEQUFDc0M7UUFBRWxDLFdBQVdTLE9BQU9TLGVBQWU7T0FBR3RCLGNBQ3REUSx3QkFBVSwyREFBQ3NCO1FBQUkxQixXQUFXUyxPQUFPZ0IsT0FBTztPQUFHL0I7QUFHbEQsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9leHBlcmltZW50YWwvQ29uZmlnU2VjdGlvbi9HZW5lcmljQ29uZmlnU2VjdGlvbi50c3g/NTQ0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgeyB1c2VUaGVtZTIsIEljb25CdXR0b24sIEljb25OYW1lIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBSZWFjdE5vZGU7XG4gIGlzQ29sbGFwc2libGU/OiBib29sZWFuO1xuICBpc0luaXRpYWxseU9wZW4/OiBib29sZWFuO1xuICBraW5kPzogJ3NlY3Rpb24nIHwgJ3N1Yi1zZWN0aW9uJztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xufTtcblxuZXhwb3J0IGNvbnN0IEdlbmVyaWNDb25maWdTZWN0aW9uID0gKHtcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICBkZXNjcmlwdGlvbixcbiAgaXNDb2xsYXBzaWJsZSA9IGZhbHNlLFxuICBpc0luaXRpYWxseU9wZW4gPSB0cnVlLFxuICBraW5kID0gJ3NlY3Rpb24nLFxuICBjbGFzc05hbWUsXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IGNvbG9ycywgdHlwb2dyYXBoeSwgc3BhY2luZyB9ID0gdXNlVGhlbWUyKCk7XG4gIGNvbnN0IFtpc09wZW4sIHNldElzT3Blbl0gPSB1c2VTdGF0ZShpc0NvbGxhcHNpYmxlID8gaXNJbml0aWFsbHlPcGVuIDogdHJ1ZSk7XG4gIGNvbnN0IGljb25OYW1lOiBJY29uTmFtZSA9IGlzT3BlbiA/ICdhbmdsZS11cCcgOiAnYW5nbGUtZG93bic7XG4gIGNvbnN0IGlzU3ViU2VjdGlvbiA9IGtpbmQgPT09ICdzdWItc2VjdGlvbic7XG4gIGNvbnN0IGNvbGxhcHNpYmxlQnV0dG9uQXJpYUxhYmVsID0gYCR7aXNPcGVuID8gJ0NvbGxhcHNlJyA6ICdFeHBhbmQnfSBzZWN0aW9uICR7dGl0bGV9YDtcblxuICBjb25zdCBzdHlsZXMgPSB7XG4gICAgaGVhZGVyOiBjc3Moe1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIH0pLFxuICAgIHRpdGxlOiBjc3Moe1xuICAgICAgbWFyZ2luOiAwLFxuICAgIH0pLFxuICAgIHN1YnRpdGxlOiBjc3Moe1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgZm9udFdlaWdodDogdHlwb2dyYXBoeS5mb250V2VpZ2h0UmVndWxhcixcbiAgICB9KSxcbiAgICBkZXNjcmlwdGlvblRleHQ6IGNzcyh7XG4gICAgICBtYXJnaW5Ub3A6IHNwYWNpbmcoaXNTdWJTZWN0aW9uID8gMC4yNSA6IDAuNSksXG4gICAgICBtYXJnaW5Cb3R0b206IDAsXG4gICAgICAuLi50eXBvZ3JhcGh5LmJvZHlTbWFsbCxcbiAgICAgIGNvbG9yOiBjb2xvcnMudGV4dC5zZWNvbmRhcnksXG4gICAgfSksXG4gICAgY29udGVudDogY3NzKHtcbiAgICAgIG1hcmdpblRvcDogc3BhY2luZygyKSxcbiAgICB9KSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5oZWFkZXJ9PlxuICAgICAgICB7a2luZCA9PT0gJ3NlY3Rpb24nID8gPGgzIGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlfT57dGl0bGV9PC9oMz4gOiA8aDYgY2xhc3NOYW1lPXtzdHlsZXMuc3VidGl0bGV9Pnt0aXRsZX08L2g2Pn1cbiAgICAgICAge2lzQ29sbGFwc2libGUgJiYgKFxuICAgICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgICBuYW1lPXtpY29uTmFtZX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzT3BlbighaXNPcGVuKX1cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgc2l6ZT1cInhsXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9e2NvbGxhcHNpYmxlQnV0dG9uQXJpYUxhYmVsfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIHtkZXNjcmlwdGlvbiAmJiA8cCBjbGFzc05hbWU9e3N0eWxlcy5kZXNjcmlwdGlvblRleHR9PntkZXNjcmlwdGlvbn08L3A+fVxuICAgICAge2lzT3BlbiAmJiA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmNvbnRlbnR9PntjaGlsZHJlbn08L2Rpdj59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJjc3MiLCJ1c2VUaGVtZTIiLCJJY29uQnV0dG9uIiwiR2VuZXJpY0NvbmZpZ1NlY3Rpb24iLCJjaGlsZHJlbiIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJpc0NvbGxhcHNpYmxlIiwiaXNJbml0aWFsbHlPcGVuIiwia2luZCIsImNsYXNzTmFtZSIsImNvbG9ycyIsInR5cG9ncmFwaHkiLCJzcGFjaW5nIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwiaWNvbk5hbWUiLCJpc1N1YlNlY3Rpb24iLCJjb2xsYXBzaWJsZUJ1dHRvbkFyaWFMYWJlbCIsInN0eWxlcyIsImhlYWRlciIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJtYXJnaW4iLCJzdWJ0aXRsZSIsImZvbnRXZWlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImRlc2NyaXB0aW9uVGV4dCIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImJvZHlTbWFsbCIsImNvbG9yIiwidGV4dCIsInNlY29uZGFyeSIsImNvbnRlbnQiLCJkaXYiLCJoMyIsImg2IiwibmFtZSIsIm9uQ2xpY2siLCJ0eXBlIiwic2l6ZSIsImFyaWEtbGFiZWwiLCJwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/experimental/ConfigSection/GenericConfigSection.tsx\n");

/***/ }),

/***/ "./components/experimental/ConfigSection/index.ts":
/*!********************************************************!*\
  !*** ./components/experimental/ConfigSection/index.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigSection: () => (/* reexport safe */ _ConfigSection__WEBPACK_IMPORTED_MODULE_0__.ConfigSection),\n/* harmony export */   ConfigSubSection: () => (/* reexport safe */ _ConfigSubSection__WEBPACK_IMPORTED_MODULE_1__.ConfigSubSection),\n/* harmony export */   DataSourceDescription: () => (/* reexport safe */ _DataSourceDescription__WEBPACK_IMPORTED_MODULE_2__.DataSourceDescription)\n/* harmony export */ });\n/* harmony import */ var _ConfigSection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ConfigSection */ \"./components/experimental/ConfigSection/ConfigSection.tsx\");\n/* harmony import */ var _ConfigSubSection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConfigSubSection */ \"./components/experimental/ConfigSection/ConfigSubSection.tsx\");\n/* harmony import */ var _DataSourceDescription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataSourceDescription */ \"./components/experimental/ConfigSection/DataSourceDescription.tsx\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL2V4cGVyaW1lbnRhbC9Db25maWdTZWN0aW9uL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnRDtBQUNNO0FBQ1MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvZXhwZXJpbWVudGFsL0NvbmZpZ1NlY3Rpb24vaW5kZXgudHM/Mjk0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBDb25maWdTZWN0aW9uIH0gZnJvbSAnLi9Db25maWdTZWN0aW9uJztcbmV4cG9ydCB7IENvbmZpZ1N1YlNlY3Rpb24gfSBmcm9tICcuL0NvbmZpZ1N1YlNlY3Rpb24nO1xuZXhwb3J0IHsgRGF0YVNvdXJjZURlc2NyaXB0aW9uIH0gZnJvbSAnLi9EYXRhU291cmNlRGVzY3JpcHRpb24nXG4iXSwibmFtZXMiOlsiQ29uZmlnU2VjdGlvbiIsIkNvbmZpZ1N1YlNlY3Rpb24iLCJEYXRhU291cmNlRGVzY3JpcHRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/experimental/ConfigSection/index.ts\n");

/***/ }),

/***/ "./components/queryBuilder/AggregateEditor.tsx":
/*!*****************************************************!*\
  !*** ./components/queryBuilder/AggregateEditor.tsx ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AggregateEditor: () => (/* binding */ AggregateEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\nconst allAggregateOptions = [\n    {\n        label: 'Count',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Count\n    },\n    {\n        label: 'Sum',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Sum\n    },\n    {\n        label: 'Min',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Min\n    },\n    {\n        label: 'Max',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Max\n    },\n    {\n        label: 'Average',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Average\n    },\n    {\n        label: 'Any',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Any\n    }\n];\nconst Aggregate = (props)=>{\n    const { index, aggregate, updateAggregate, removeAggregate } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [alias, setAlias] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(aggregate.alias || '');\n    const { aliasLabel } = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.AggregatesEditor;\n    // Add current value to aggregate functions\n    const aggregateOptions = allAggregateOptions.slice();\n    if (!aggregateOptions.find((a)=>a.value === aggregate.aggregateType)) {\n        aggregateOptions.push({\n            label: aggregate.aggregateType,\n            value: aggregate.aggregateType\n        });\n    }\n    // Add current value to column options\n    const columnOptions = props.columnOptions.slice();\n    if (!columnOptions.find((c)=>c.value === aggregate.column)) {\n        columnOptions.push({\n            label: aggregate.column,\n            value: aggregate.column\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.HorizontalGroup, {\n        wrap: true,\n        align: \"flex-start\",\n        justify: \"flex-start\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        width: 20,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.inlineSelect,\n        options: aggregateOptions,\n        value: aggregate.aggregateType,\n        onChange: (e)=>updateAggregate(index, _object_spread_props(_object_spread({}, aggregate), {\n                aggregateType: e.value\n            })),\n        menuPlacement: 'bottom',\n        allowCustomValue: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        width: 40,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.inlineSelect,\n        options: columnOptions,\n        isOpen: isOpen,\n        onOpenMenu: ()=>setIsOpen(true),\n        onCloseMenu: ()=>setIsOpen(false),\n        onChange: (e)=>updateAggregate(index, _object_spread_props(_object_spread({}, aggregate), {\n                column: e.value\n            })),\n        value: aggregate.column,\n        menuPlacement: 'bottom',\n        allowCustomValue: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 2,\n        className: \"query-keyword\"\n    }, aliasLabel), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        width: 20,\n        value: alias,\n        onChange: (e)=>setAlias(e.currentTarget.value),\n        onBlur: (e)=>updateAggregate(index, _object_spread_props(_object_spread({}, aggregate), {\n                alias: e.currentTarget.value\n            })),\n        placeholder: \"alias\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_4__.selectors.components.QueryBuilder.AggregateEditor.itemRemoveButton,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.smallBtn,\n        variant: \"destructive\",\n        size: \"sm\",\n        icon: \"trash-alt\",\n        onClick: ()=>removeAggregate(index)\n    }));\n};\nconst allColumnName = '*';\nconst AggregateEditor = (props)=>{\n    const { allColumns, aggregates, onAggregatesChange } = props;\n    const { label, tooltip, addLabel } = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.AggregatesEditor;\n    const columnOptions = allColumns.map((c)=>({\n            label: c.label || c.name,\n            value: c.name\n        }));\n    columnOptions.push({\n        label: allColumnName,\n        value: allColumnName\n    });\n    const addAggregate = ()=>{\n        const nextAggregates = aggregates.slice();\n        nextAggregates.push({\n            column: '',\n            aggregateType: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType.Count\n        });\n        onAggregatesChange(nextAggregates);\n    };\n    const removeAggregate = (index)=>{\n        const nextAggregates = aggregates.slice();\n        nextAggregates.splice(index, 1);\n        onAggregatesChange(nextAggregates);\n    };\n    const updateAggregate = (index, aggregatesItem)=>{\n        const nextAggregates = aggregates.slice();\n        nextAggregates[index] = aggregatesItem;\n        onAggregatesChange(nextAggregates);\n    };\n    const fieldLabel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_4__.selectors.components.QueryBuilder.AggregateEditor.sectionLabel,\n        tooltip: tooltip\n    }, label);\n    const fieldSpacer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: `width-8 ${_styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.firstLabel}`\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, aggregates.map((aggregate, index)=>{\n        const key = `${index}-${aggregate.column}-${aggregate.aggregateType}-${aggregate.alias}`;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"gf-form\",\n            key: key,\n            \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_4__.selectors.components.QueryBuilder.AggregateEditor.itemWrapper\n        }, index === 0 ? fieldLabel : fieldSpacer, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Aggregate, {\n            columnOptions: columnOptions,\n            index: index,\n            aggregate: aggregate,\n            updateAggregate: updateAggregate,\n            removeAggregate: removeAggregate\n        }));\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, aggregates.length === 0 ? fieldLabel : fieldSpacer, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_4__.selectors.components.QueryBuilder.AggregateEditor.addButton,\n        icon: \"plus-circle\",\n        variant: \"secondary\",\n        size: \"sm\",\n        onClick: addAggregate,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.smallBtn\n    }, addLabel)));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9BZ2dyZWdhdGVFZGl0b3IudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFFOEM7QUFDTDtBQUNyRDtBQUNVO0FBQ047QUFVaEMsTUFBTVcsc0JBQTZEO0lBQ2pFO1FBQUVDLE9BQU87UUFBU0MsT0FBT04sOERBQWFBLENBQUNPLEtBQUs7SUFBQztJQUM3QztRQUFFRixPQUFPO1FBQU9DLE9BQU9OLDhEQUFhQSxDQUFDUSxHQUFHO0lBQUM7SUFDekM7UUFBRUgsT0FBTztRQUFPQyxPQUFPTiw4REFBYUEsQ0FBQ1MsR0FBRztJQUFDO0lBQ3pDO1FBQUVKLE9BQU87UUFBT0MsT0FBT04sOERBQWFBLENBQUNVLEdBQUc7SUFBQztJQUN6QztRQUFFTCxPQUFPO1FBQVdDLE9BQU9OLDhEQUFhQSxDQUFDVyxPQUFPO0lBQUM7SUFDakQ7UUFBRU4sT0FBTztRQUFPQyxPQUFPTiw4REFBYUEsQ0FBQ1ksR0FBRztJQUFDO0NBRTFDO0FBRUQsTUFBTUMsWUFBWSxDQUFDQztJQUNqQixNQUFNLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxlQUFlLEVBQUVDLGVBQWUsRUFBRSxHQUFHSjtJQUMvRCxNQUFNLENBQUNLLFFBQVFDLFVBQVUsR0FBRzFCLCtDQUFRQSxDQUFDO0lBQ3JDLE1BQU0sQ0FBQzJCLE9BQU9DLFNBQVMsR0FBRzVCLCtDQUFRQSxDQUFDc0IsVUFBVUssS0FBSyxJQUFJO0lBQ3RELE1BQU0sRUFBRUUsVUFBVSxFQUFFLEdBQUd0QiwrQ0FBTUEsQ0FBQ3VCLFVBQVUsQ0FBQ0MsZ0JBQWdCO0lBRXpELDJDQUEyQztJQUMzQyxNQUFNQyxtQkFBbUJ0QixvQkFBb0J1QixLQUFLO0lBQ2xELElBQUksQ0FBQ0QsaUJBQWlCRSxJQUFJLENBQUNDLENBQUFBLElBQUtBLEVBQUV2QixLQUFLLEtBQUtVLFVBQVVjLGFBQWEsR0FBRztRQUNwRUosaUJBQWlCSyxJQUFJLENBQUM7WUFBRTFCLE9BQU9XLFVBQVVjLGFBQWE7WUFBRXhCLE9BQU9VLFVBQVVjLGFBQWE7UUFBQztJQUN6RjtJQUVBLHNDQUFzQztJQUN0QyxNQUFNRSxnQkFBZ0JsQixNQUFNa0IsYUFBYSxDQUFDTCxLQUFLO0lBQy9DLElBQUksQ0FBQ0ssY0FBY0osSUFBSSxDQUFDSyxDQUFBQSxJQUFLQSxFQUFFM0IsS0FBSyxLQUFLVSxVQUFVa0IsTUFBTSxHQUFHO1FBQzFERixjQUFjRCxJQUFJLENBQUM7WUFBRTFCLE9BQU9XLFVBQVVrQixNQUFNO1lBQUU1QixPQUFPVSxVQUFVa0IsTUFBTTtRQUFDO0lBQ3hFO0lBRUEscUJBQ0UsMkRBQUNuQyx3REFBZUE7UUFBQ29DLE1BQUFBO1FBQUtDLE9BQU07UUFBYUMsU0FBUTtxQkFDL0MsMkRBQUN6QywrQ0FBTUE7UUFDTDBDLE9BQU87UUFDUEMsV0FBV3BDLDJDQUFNQSxDQUFDcUMsTUFBTSxDQUFDQyxZQUFZO1FBQ3JDQyxTQUFTaEI7UUFDVHBCLE9BQU9VLFVBQVVjLGFBQWE7UUFDOUJhLFVBQVVDLENBQUFBLElBQUszQixnQkFBZ0JGLE9BQU8sd0NBQUtDO2dCQUFXYyxlQUFlYyxFQUFFdEMsS0FBSzs7UUFDNUV1QyxlQUFlO1FBQ2ZDLGtCQUFBQTtzQkFFRiwyREFBQ2xELCtDQUFNQTtRQUNMMEMsT0FBTztRQUNQQyxXQUFXcEMsMkNBQU1BLENBQUNxQyxNQUFNLENBQUNDLFlBQVk7UUFDckNDLFNBQVNWO1FBQ1RiLFFBQVFBO1FBQ1I0QixZQUFZLElBQU0zQixVQUFVO1FBQzVCNEIsYUFBYSxJQUFNNUIsVUFBVTtRQUM3QnVCLFVBQVVDLENBQUFBLElBQUszQixnQkFBZ0JGLE9BQU8sd0NBQUtDO2dCQUFXa0IsUUFBUVUsRUFBRXRDLEtBQUs7O1FBQ3JFQSxPQUFPVSxVQUFVa0IsTUFBTTtRQUN2QlcsZUFBZTtRQUNmQyxrQkFBQUE7c0JBRUYsMkRBQUNuRCx3REFBZUE7UUFBQzJDLE9BQU87UUFBR0MsV0FBVTtPQUNsQ2hCLDJCQUVILDJEQUFDekIsOENBQUtBO1FBQ0p3QyxPQUFPO1FBQ1BoQyxPQUFPZTtRQUNQc0IsVUFBVUMsQ0FBQUEsSUFBS3RCLFNBQVNzQixFQUFFSyxhQUFhLENBQUMzQyxLQUFLO1FBQzdDNEMsUUFBUU4sQ0FBQUEsSUFBSzNCLGdCQUFnQkYsT0FBTyx3Q0FBS0M7Z0JBQVdLLE9BQU91QixFQUFFSyxhQUFhLENBQUMzQyxLQUFLOztRQUNoRjZDLGFBQVk7c0JBRWQsMkRBQUN0RCwrQ0FBTUE7UUFDTHVELGVBQWFsRCxpREFBU0EsQ0FBQ3NCLFVBQVUsQ0FBQzZCLFlBQVksQ0FBQ0MsZUFBZSxDQUFDQyxnQkFBZ0I7UUFDL0VoQixXQUFXcEMsMkNBQU1BLENBQUNxQyxNQUFNLENBQUNnQixRQUFRO1FBQ2pDQyxTQUFRO1FBQ1JDLE1BQUs7UUFDTEMsTUFBSztRQUNMQyxTQUFTLElBQU0xQyxnQkFBZ0JIOztBQUl2QztBQVFBLE1BQU04QyxnQkFBZ0I7QUFFZixNQUFNUCxrQkFBa0IsQ0FBQ3hDO0lBQzlCLE1BQU0sRUFBRWdELFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxrQkFBa0IsRUFBRSxHQUFHbEQ7SUFDdkQsTUFBTSxFQUFFVCxLQUFLLEVBQUU0RCxPQUFPLEVBQUVDLFFBQVEsRUFBRSxHQUFHakUsK0NBQU1BLENBQUN1QixVQUFVLENBQUNDLGdCQUFnQjtJQUN2RSxNQUFNTyxnQkFBZ0Q4QixXQUFXSyxHQUFHLENBQUNsQyxDQUFBQSxJQUFNO1lBQUU1QixPQUFPNEIsRUFBRTVCLEtBQUssSUFBSTRCLEVBQUVtQyxJQUFJO1lBQUU5RCxPQUFPMkIsRUFBRW1DLElBQUk7UUFBQztJQUNySHBDLGNBQWNELElBQUksQ0FBQztRQUFFMUIsT0FBT3dEO1FBQWV2RCxPQUFPdUQ7SUFBYztJQUVoRSxNQUFNUSxlQUFlO1FBQ25CLE1BQU1DLGlCQUFvQ1AsV0FBV3BDLEtBQUs7UUFDMUQyQyxlQUFldkMsSUFBSSxDQUFDO1lBQUVHLFFBQVE7WUFBSUosZUFBZTlCLDhEQUFhQSxDQUFDTyxLQUFLO1FBQUM7UUFDckV5RCxtQkFBbUJNO0lBQ3JCO0lBQ0EsTUFBTXBELGtCQUFrQixDQUFDSDtRQUN2QixNQUFNdUQsaUJBQW9DUCxXQUFXcEMsS0FBSztRQUMxRDJDLGVBQWVDLE1BQU0sQ0FBQ3hELE9BQU87UUFDN0JpRCxtQkFBbUJNO0lBQ3JCO0lBQ0EsTUFBTXJELGtCQUFrQixDQUFDRixPQUFleUQ7UUFDdEMsTUFBTUYsaUJBQW9DUCxXQUFXcEMsS0FBSztRQUMxRDJDLGNBQWMsQ0FBQ3ZELE1BQU0sR0FBR3lEO1FBQ3hCUixtQkFBbUJNO0lBQ3JCO0lBRUEsTUFBTUcsMkJBQ0osMkRBQUM5RSx3REFBZUE7UUFDZDJDLE9BQU87UUFDUEMsV0FBVTtRQUNWYSxlQUFhbEQsaURBQVNBLENBQUNzQixVQUFVLENBQUM2QixZQUFZLENBQUNDLGVBQWUsQ0FBQ29CLFlBQVk7UUFDM0VULFNBQVNBO09BRVI1RDtJQUdMLE1BQU1zRSw0QkFBYywyREFBQ0M7UUFBSXJDLFdBQVcsQ0FBQyxRQUFRLEVBQUVwQywyQ0FBTUEsQ0FBQ3FDLE1BQU0sQ0FBQ3FDLFVBQVUsQ0FBQyxDQUFDOztJQUV6RSxxQkFDRSwwSEFDR2QsV0FBV0ksR0FBRyxDQUFDLENBQUNuRCxXQUFXRDtRQUMxQixNQUFNK0QsTUFBTSxDQUFDLEVBQUUvRCxNQUFNLENBQUMsRUFBRUMsVUFBVWtCLE1BQU0sQ0FBQyxDQUFDLEVBQUVsQixVQUFVYyxhQUFhLENBQUMsQ0FBQyxFQUFFZCxVQUFVSyxLQUFLLENBQUMsQ0FBQztRQUN4RixxQkFDRSwyREFBQ3VEO1lBQUlyQyxXQUFVO1lBQVV1QyxLQUFLQTtZQUFLMUIsZUFBYWxELGlEQUFTQSxDQUFDc0IsVUFBVSxDQUFDNkIsWUFBWSxDQUFDQyxlQUFlLENBQUN5QixXQUFXO1dBQ3pHaEUsVUFBVSxJQUFJMEQsYUFBYUUsMkJBQzdCLDJEQUFDOUQ7WUFDQ21CLGVBQWVBO1lBQ2ZqQixPQUFPQTtZQUNQQyxXQUFXQTtZQUNYQyxpQkFBaUJBO1lBQ2pCQyxpQkFBaUJBOztJQUl6QixrQkFFQSwyREFBQzBEO1FBQUlyQyxXQUFVO09BQ1p3QixXQUFXaUIsTUFBTSxLQUFLLElBQUlQLGFBQWFFLDJCQUN4QywyREFBQzlFLCtDQUFNQTtRQUNMdUQsZUFBYWxELGlEQUFTQSxDQUFDc0IsVUFBVSxDQUFDNkIsWUFBWSxDQUFDQyxlQUFlLENBQUMyQixTQUFTO1FBQ3hFdEIsTUFBSztRQUNMRixTQUFRO1FBQ1JDLE1BQUs7UUFDTEUsU0FBU1M7UUFDVDlCLFdBQVdwQywyQ0FBTUEsQ0FBQ3FDLE1BQU0sQ0FBQ2dCLFFBQVE7T0FFaENVO0FBS1gsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9xdWVyeUJ1aWxkZXIvQWdncmVnYXRlRWRpdG9yLnRzeD9mZjZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgSW5saW5lRm9ybUxhYmVsLCBTZWxlY3QsIEJ1dHRvbiwgSW5wdXQsIEhvcml6b250YWxHcm91cCB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZUNvbHVtbiwgQWdncmVnYXRlVHlwZSwgVGFibGVDb2x1bW4gfSBmcm9tICd0eXBlcy9xdWVyeUJ1aWxkZXInO1xuaW1wb3J0IGxhYmVscyBmcm9tICdsYWJlbHMnO1xuaW1wb3J0IHsgc2VsZWN0b3JzIH0gZnJvbSAnc2VsZWN0b3JzJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJ3N0eWxlcyc7XG5cbmludGVyZmFjZSBBZ2dyZWdhdGVQcm9wcyB7XG4gIGNvbHVtbk9wdGlvbnM6IEFycmF5PFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+PjtcbiAgaW5kZXg6IG51bWJlcixcbiAgYWdncmVnYXRlOiBBZ2dyZWdhdGVDb2x1bW47XG4gIHVwZGF0ZUFnZ3JlZ2F0ZTogKGluZGV4OiBudW1iZXIsIGFnZ3JlZ2F0ZTogQWdncmVnYXRlQ29sdW1uKSA9PiB2b2lkO1xuICByZW1vdmVBZ2dyZWdhdGU6IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5jb25zdCBhbGxBZ2dyZWdhdGVPcHRpb25zOiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8QWdncmVnYXRlVHlwZT4+ID0gW1xuICB7IGxhYmVsOiAnQ291bnQnLCB2YWx1ZTogQWdncmVnYXRlVHlwZS5Db3VudCB9LFxuICB7IGxhYmVsOiAnU3VtJywgdmFsdWU6IEFnZ3JlZ2F0ZVR5cGUuU3VtIH0sXG4gIHsgbGFiZWw6ICdNaW4nLCB2YWx1ZTogQWdncmVnYXRlVHlwZS5NaW4gfSxcbiAgeyBsYWJlbDogJ01heCcsIHZhbHVlOiBBZ2dyZWdhdGVUeXBlLk1heCB9LFxuICB7IGxhYmVsOiAnQXZlcmFnZScsIHZhbHVlOiBBZ2dyZWdhdGVUeXBlLkF2ZXJhZ2UgfSxcbiAgeyBsYWJlbDogJ0FueScsIHZhbHVlOiBBZ2dyZWdhdGVUeXBlLkFueSB9LFxuICAvLyB7IGxhYmVsOiAnRGlzdGluY3QgQ291bnQnLCB2YWx1ZTogQWdncmVnYXRlVHlwZS5Db3VudF9EaXN0aW5jdCB9LFxuXTtcblxuY29uc3QgQWdncmVnYXRlID0gKHByb3BzOiBBZ2dyZWdhdGVQcm9wcykgPT4ge1xuICBjb25zdCB7IGluZGV4LCBhZ2dyZWdhdGUsIHVwZGF0ZUFnZ3JlZ2F0ZSwgcmVtb3ZlQWdncmVnYXRlIH0gPSBwcm9wcztcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2FsaWFzLCBzZXRBbGlhc10gPSB1c2VTdGF0ZShhZ2dyZWdhdGUuYWxpYXMgfHwgJycpO1xuICBjb25zdCB7IGFsaWFzTGFiZWwgfSA9IGxhYmVscy5jb21wb25lbnRzLkFnZ3JlZ2F0ZXNFZGl0b3I7XG5cbiAgLy8gQWRkIGN1cnJlbnQgdmFsdWUgdG8gYWdncmVnYXRlIGZ1bmN0aW9uc1xuICBjb25zdCBhZ2dyZWdhdGVPcHRpb25zID0gYWxsQWdncmVnYXRlT3B0aW9ucy5zbGljZSgpO1xuICBpZiAoIWFnZ3JlZ2F0ZU9wdGlvbnMuZmluZChhID0+IGEudmFsdWUgPT09IGFnZ3JlZ2F0ZS5hZ2dyZWdhdGVUeXBlKSkge1xuICAgIGFnZ3JlZ2F0ZU9wdGlvbnMucHVzaCh7IGxhYmVsOiBhZ2dyZWdhdGUuYWdncmVnYXRlVHlwZSwgdmFsdWU6IGFnZ3JlZ2F0ZS5hZ2dyZWdhdGVUeXBlIH0pO1xuICB9XG5cbiAgLy8gQWRkIGN1cnJlbnQgdmFsdWUgdG8gY29sdW1uIG9wdGlvbnNcbiAgY29uc3QgY29sdW1uT3B0aW9ucyA9IHByb3BzLmNvbHVtbk9wdGlvbnMuc2xpY2UoKTtcbiAgaWYgKCFjb2x1bW5PcHRpb25zLmZpbmQoYyA9PiBjLnZhbHVlID09PSBhZ2dyZWdhdGUuY29sdW1uKSkge1xuICAgIGNvbHVtbk9wdGlvbnMucHVzaCh7IGxhYmVsOiBhZ2dyZWdhdGUuY29sdW1uLCB2YWx1ZTogYWdncmVnYXRlLmNvbHVtbiB9KTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPEhvcml6b250YWxHcm91cCB3cmFwIGFsaWduPVwiZmxleC1zdGFydFwiIGp1c3RpZnk9XCJmbGV4LXN0YXJ0XCI+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIHdpZHRoPXsyMH1cbiAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuQ29tbW9uLmlubGluZVNlbGVjdH1cbiAgICAgICAgb3B0aW9ucz17YWdncmVnYXRlT3B0aW9uc31cbiAgICAgICAgdmFsdWU9e2FnZ3JlZ2F0ZS5hZ2dyZWdhdGVUeXBlfVxuICAgICAgICBvbkNoYW5nZT17ZSA9PiB1cGRhdGVBZ2dyZWdhdGUoaW5kZXgsIHsgLi4uYWdncmVnYXRlLCBhZ2dyZWdhdGVUeXBlOiBlLnZhbHVlISB9KX1cbiAgICAgICAgbWVudVBsYWNlbWVudD17J2JvdHRvbSd9XG4gICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgIC8+XG4gICAgICA8U2VsZWN0PHN0cmluZz5cbiAgICAgICAgd2lkdGg9ezQwfVxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5Db21tb24uaW5saW5lU2VsZWN0fVxuICAgICAgICBvcHRpb25zPXtjb2x1bW5PcHRpb25zfVxuICAgICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgICAgb25PcGVuTWVudT17KCkgPT4gc2V0SXNPcGVuKHRydWUpfVxuICAgICAgICBvbkNsb3NlTWVudT17KCkgPT4gc2V0SXNPcGVuKGZhbHNlKX1cbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gdXBkYXRlQWdncmVnYXRlKGluZGV4LCB7IC4uLmFnZ3JlZ2F0ZSwgY29sdW1uOiBlLnZhbHVlISB9KX1cbiAgICAgICAgdmFsdWU9e2FnZ3JlZ2F0ZS5jb2x1bW59XG4gICAgICAgIG1lbnVQbGFjZW1lbnQ9eydib3R0b20nfVxuICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAvPlxuICAgICAgPElubGluZUZvcm1MYWJlbCB3aWR0aD17Mn0gY2xhc3NOYW1lPVwicXVlcnkta2V5d29yZFwiPlxuICAgICAgICB7YWxpYXNMYWJlbH1cbiAgICAgIDwvSW5saW5lRm9ybUxhYmVsPlxuICAgICAgPElucHV0XG4gICAgICAgIHdpZHRoPXsyMH1cbiAgICAgICAgdmFsdWU9e2FsaWFzfVxuICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRBbGlhcyhlLmN1cnJlbnRUYXJnZXQudmFsdWUpfVxuICAgICAgICBvbkJsdXI9e2UgPT4gdXBkYXRlQWdncmVnYXRlKGluZGV4LCB7IC4uLmFnZ3JlZ2F0ZSwgYWxpYXM6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX1cbiAgICAgICAgcGxhY2Vob2xkZXI9XCJhbGlhc1wiXG4gICAgICAvPlxuICAgICAgPEJ1dHRvblxuICAgICAgICBkYXRhLXRlc3RpZD17c2VsZWN0b3JzLmNvbXBvbmVudHMuUXVlcnlCdWlsZGVyLkFnZ3JlZ2F0ZUVkaXRvci5pdGVtUmVtb3ZlQnV0dG9ufVxuICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5Db21tb24uc21hbGxCdG59XG4gICAgICAgIHZhcmlhbnQ9XCJkZXN0cnVjdGl2ZVwiXG4gICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgIGljb249XCJ0cmFzaC1hbHRcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVBZ2dyZWdhdGUoaW5kZXgpfVxuICAgICAgLz5cbiAgICA8L0hvcml6b250YWxHcm91cD5cbiAgKTtcbn07XG5cbmludGVyZmFjZSBBZ2dyZWdhdGVFZGl0b3JQcm9wcyB7XG4gIGFsbENvbHVtbnM6IHJlYWRvbmx5IFRhYmxlQ29sdW1uW107XG4gIGFnZ3JlZ2F0ZXM6IEFnZ3JlZ2F0ZUNvbHVtbltdO1xuICBvbkFnZ3JlZ2F0ZXNDaGFuZ2U6IChhZ2dyZWdhdGVzOiBBZ2dyZWdhdGVDb2x1bW5bXSkgPT4gdm9pZDtcbn1cblxuY29uc3QgYWxsQ29sdW1uTmFtZSA9ICcqJztcblxuZXhwb3J0IGNvbnN0IEFnZ3JlZ2F0ZUVkaXRvciA9IChwcm9wczogQWdncmVnYXRlRWRpdG9yUHJvcHMpID0+IHtcbiAgY29uc3QgeyBhbGxDb2x1bW5zLCBhZ2dyZWdhdGVzLCBvbkFnZ3JlZ2F0ZXNDaGFuZ2UgfSA9IHByb3BzO1xuICBjb25zdCB7IGxhYmVsLCB0b29sdGlwLCBhZGRMYWJlbCB9ID0gbGFiZWxzLmNvbXBvbmVudHMuQWdncmVnYXRlc0VkaXRvcjtcbiAgY29uc3QgY29sdW1uT3B0aW9uczogQXJyYXk8U2VsZWN0YWJsZVZhbHVlPHN0cmluZz4+ID0gYWxsQ29sdW1ucy5tYXAoYyA9PiAoeyBsYWJlbDogYy5sYWJlbCB8fCBjLm5hbWUsIHZhbHVlOiBjLm5hbWUgfSkpO1xuICBjb2x1bW5PcHRpb25zLnB1c2goeyBsYWJlbDogYWxsQ29sdW1uTmFtZSwgdmFsdWU6IGFsbENvbHVtbk5hbWUgfSk7XG5cbiAgY29uc3QgYWRkQWdncmVnYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IG5leHRBZ2dyZWdhdGVzOiBBZ2dyZWdhdGVDb2x1bW5bXSA9IGFnZ3JlZ2F0ZXMuc2xpY2UoKTtcbiAgICBuZXh0QWdncmVnYXRlcy5wdXNoKHsgY29sdW1uOiAnJywgYWdncmVnYXRlVHlwZTogQWdncmVnYXRlVHlwZS5Db3VudCB9KTtcbiAgICBvbkFnZ3JlZ2F0ZXNDaGFuZ2UobmV4dEFnZ3JlZ2F0ZXMpO1xuICB9O1xuICBjb25zdCByZW1vdmVBZ2dyZWdhdGUgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IG5leHRBZ2dyZWdhdGVzOiBBZ2dyZWdhdGVDb2x1bW5bXSA9IGFnZ3JlZ2F0ZXMuc2xpY2UoKTtcbiAgICBuZXh0QWdncmVnYXRlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIG9uQWdncmVnYXRlc0NoYW5nZShuZXh0QWdncmVnYXRlcyk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUFnZ3JlZ2F0ZSA9IChpbmRleDogbnVtYmVyLCBhZ2dyZWdhdGVzSXRlbTogQWdncmVnYXRlQ29sdW1uKSA9PiB7XG4gICAgY29uc3QgbmV4dEFnZ3JlZ2F0ZXM6IEFnZ3JlZ2F0ZUNvbHVtbltdID0gYWdncmVnYXRlcy5zbGljZSgpO1xuICAgIG5leHRBZ2dyZWdhdGVzW2luZGV4XSA9IGFnZ3JlZ2F0ZXNJdGVtO1xuICAgIG9uQWdncmVnYXRlc0NoYW5nZShuZXh0QWdncmVnYXRlcyk7XG4gIH07XG5cbiAgY29uc3QgZmllbGRMYWJlbCA9IChcbiAgICA8SW5saW5lRm9ybUxhYmVsXG4gICAgICB3aWR0aD17OH1cbiAgICAgIGNsYXNzTmFtZT1cInF1ZXJ5LWtleXdvcmRcIlxuICAgICAgZGF0YS10ZXN0aWQ9e3NlbGVjdG9ycy5jb21wb25lbnRzLlF1ZXJ5QnVpbGRlci5BZ2dyZWdhdGVFZGl0b3Iuc2VjdGlvbkxhYmVsfVxuICAgICAgdG9vbHRpcD17dG9vbHRpcH1cbiAgICA+XG4gICAgICB7bGFiZWx9XG4gICAgPC9JbmxpbmVGb3JtTGFiZWw+XG4gICk7XG4gIGNvbnN0IGZpZWxkU3BhY2VyID0gPGRpdiBjbGFzc05hbWU9e2B3aWR0aC04ICR7c3R5bGVzLkNvbW1vbi5maXJzdExhYmVsfWB9PjwvZGl2PjtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7YWdncmVnYXRlcy5tYXAoKGFnZ3JlZ2F0ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7aW5kZXh9LSR7YWdncmVnYXRlLmNvbHVtbn0tJHthZ2dyZWdhdGUuYWdncmVnYXRlVHlwZX0tJHthZ2dyZWdhdGUuYWxpYXN9YDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIiBrZXk9e2tleX0gZGF0YS10ZXN0aWQ9e3NlbGVjdG9ycy5jb21wb25lbnRzLlF1ZXJ5QnVpbGRlci5BZ2dyZWdhdGVFZGl0b3IuaXRlbVdyYXBwZXJ9PlxuICAgICAgICAgICAgeyBpbmRleCA9PT0gMCA/IGZpZWxkTGFiZWwgOiBmaWVsZFNwYWNlciB9XG4gICAgICAgICAgICA8QWdncmVnYXRlXG4gICAgICAgICAgICAgIGNvbHVtbk9wdGlvbnM9e2NvbHVtbk9wdGlvbnN9XG4gICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgYWdncmVnYXRlPXthZ2dyZWdhdGV9XG4gICAgICAgICAgICAgIHVwZGF0ZUFnZ3JlZ2F0ZT17dXBkYXRlQWdncmVnYXRlfVxuICAgICAgICAgICAgICByZW1vdmVBZ2dyZWdhdGU9e3JlbW92ZUFnZ3JlZ2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgICB9KX1cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICAgIHthZ2dyZWdhdGVzLmxlbmd0aCA9PT0gMCA/IGZpZWxkTGFiZWwgOiBmaWVsZFNwYWNlcn1cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtzZWxlY3RvcnMuY29tcG9uZW50cy5RdWVyeUJ1aWxkZXIuQWdncmVnYXRlRWRpdG9yLmFkZEJ1dHRvbn1cbiAgICAgICAgICBpY29uPVwicGx1cy1jaXJjbGVcIlxuICAgICAgICAgIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAgICAgICAgb25DbGljaz17YWRkQWdncmVnYXRlfVxuICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLkNvbW1vbi5zbWFsbEJ0bn1cbiAgICAgICAgPlxuICAgICAgICAgIHthZGRMYWJlbH1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsIklubGluZUZvcm1MYWJlbCIsIlNlbGVjdCIsIkJ1dHRvbiIsIklucHV0IiwiSG9yaXpvbnRhbEdyb3VwIiwiQWdncmVnYXRlVHlwZSIsImxhYmVscyIsInNlbGVjdG9ycyIsInN0eWxlcyIsImFsbEFnZ3JlZ2F0ZU9wdGlvbnMiLCJsYWJlbCIsInZhbHVlIiwiQ291bnQiLCJTdW0iLCJNaW4iLCJNYXgiLCJBdmVyYWdlIiwiQW55IiwiQWdncmVnYXRlIiwicHJvcHMiLCJpbmRleCIsImFnZ3JlZ2F0ZSIsInVwZGF0ZUFnZ3JlZ2F0ZSIsInJlbW92ZUFnZ3JlZ2F0ZSIsImlzT3BlbiIsInNldElzT3BlbiIsImFsaWFzIiwic2V0QWxpYXMiLCJhbGlhc0xhYmVsIiwiY29tcG9uZW50cyIsIkFnZ3JlZ2F0ZXNFZGl0b3IiLCJhZ2dyZWdhdGVPcHRpb25zIiwic2xpY2UiLCJmaW5kIiwiYSIsImFnZ3JlZ2F0ZVR5cGUiLCJwdXNoIiwiY29sdW1uT3B0aW9ucyIsImMiLCJjb2x1bW4iLCJ3cmFwIiwiYWxpZ24iLCJqdXN0aWZ5Iiwid2lkdGgiLCJjbGFzc05hbWUiLCJDb21tb24iLCJpbmxpbmVTZWxlY3QiLCJvcHRpb25zIiwib25DaGFuZ2UiLCJlIiwibWVudVBsYWNlbWVudCIsImFsbG93Q3VzdG9tVmFsdWUiLCJvbk9wZW5NZW51Iiwib25DbG9zZU1lbnUiLCJjdXJyZW50VGFyZ2V0Iiwib25CbHVyIiwicGxhY2Vob2xkZXIiLCJkYXRhLXRlc3RpZCIsIlF1ZXJ5QnVpbGRlciIsIkFnZ3JlZ2F0ZUVkaXRvciIsIml0ZW1SZW1vdmVCdXR0b24iLCJzbWFsbEJ0biIsInZhcmlhbnQiLCJzaXplIiwiaWNvbiIsIm9uQ2xpY2siLCJhbGxDb2x1bW5OYW1lIiwiYWxsQ29sdW1ucyIsImFnZ3JlZ2F0ZXMiLCJvbkFnZ3JlZ2F0ZXNDaGFuZ2UiLCJ0b29sdGlwIiwiYWRkTGFiZWwiLCJtYXAiLCJuYW1lIiwiYWRkQWdncmVnYXRlIiwibmV4dEFnZ3JlZ2F0ZXMiLCJzcGxpY2UiLCJhZ2dyZWdhdGVzSXRlbSIsImZpZWxkTGFiZWwiLCJzZWN0aW9uTGFiZWwiLCJmaWVsZFNwYWNlciIsImRpdiIsImZpcnN0TGFiZWwiLCJrZXkiLCJpdGVtV3JhcHBlciIsImxlbmd0aCIsImFkZEJ1dHRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/queryBuilder/AggregateEditor.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/ColumnSelect.tsx":
/*!**************************************************!*\
  !*** ./components/queryBuilder/ColumnSelect.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnSelect: () => (/* binding */ ColumnSelect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n\n\n\nconst defaultFilterFn = ()=>true;\nconst ColumnSelect = (props)=>{\n    const { allColumns, selectedColumn, onColumnChange, columnFilterFn, columnHint, label, tooltip, disabled, invalid, wide, inline, clearable } = props;\n    const selectedColumnName = selectedColumn === null || selectedColumn === void 0 ? void 0 : selectedColumn.name;\n    const columns = allColumns.filter(columnFilterFn || defaultFilterFn).map((c)=>({\n            label: c.label || c.name,\n            value: c.name\n        }));\n    // Select component WILL NOT display the value if it isn't present in the options.\n    let staleOption = false;\n    if (selectedColumn && !columns.find((c)=>c.value === selectedColumn.name)) {\n        columns.push({\n            label: selectedColumn.alias || selectedColumn.name,\n            value: selectedColumn.name\n        });\n        staleOption = true;\n    }\n    const onChange = (selected)=>{\n        if (!selected || !selected.value) {\n            onColumnChange(undefined);\n            return;\n        }\n        const column = allColumns.find((c)=>c.name === selected.value);\n        const nextColumn = {\n            name: (column === null || column === void 0 ? void 0 : column.name) || selected.value,\n            type: column === null || column === void 0 ? void 0 : column.type,\n            hint: columnHint\n        };\n        if (column && column.label !== undefined) {\n            nextColumn.alias = column.label;\n        }\n        onColumnChange(nextColumn);\n    };\n    const labelStyle = 'query-keyword ' + (inline ? _styles__WEBPACK_IMPORTED_MODULE_2__.styles.QueryEditor.inlineField : '');\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: wide ? 12 : 8,\n        className: labelStyle,\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        disabled: disabled,\n        invalid: invalid || staleOption,\n        options: columns,\n        value: selectedColumnName,\n        placeholder: selectedColumnName || undefined,\n        onChange: onChange,\n        width: wide ? 25 : 20,\n        menuPlacement: 'bottom',\n        isClearable: clearable === undefined || clearable,\n        allowCustomValue: true\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9Db2x1bW5TZWxlY3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwQjtBQUU0QjtBQUV0QjtBQWlCaEMsTUFBTUksa0JBQWtCLElBQU07QUFFdkIsTUFBTUMsZUFBZSxDQUFDQztJQUMzQixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsY0FBYyxFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxTQUFTLEVBQUUsR0FBR1o7SUFDL0ksTUFBTWEscUJBQXFCWCwyQkFBQUEscUNBQUFBLGVBQWdCWSxJQUFJO0lBQy9DLE1BQU1DLFVBQTBDZCxXQUM5Q2UsTUFBTSxDQUFDWixrQkFBa0JOLGlCQUN6Qm1CLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBTTtZQUFFWixPQUFPWSxFQUFFWixLQUFLLElBQUlZLEVBQUVKLElBQUk7WUFBRUssT0FBT0QsRUFBRUosSUFBSTtRQUFDO0lBRXRELGtGQUFrRjtJQUNsRixJQUFJTSxjQUFjO0lBQ2xCLElBQUlsQixrQkFBa0IsQ0FBQ2EsUUFBUU0sSUFBSSxDQUFDSCxDQUFBQSxJQUFLQSxFQUFFQyxLQUFLLEtBQUtqQixlQUFlWSxJQUFJLEdBQUc7UUFDekVDLFFBQVFPLElBQUksQ0FBQztZQUFFaEIsT0FBT0osZUFBZXFCLEtBQUssSUFBSXJCLGVBQWVZLElBQUk7WUFBRUssT0FBT2pCLGVBQWVZLElBQUk7UUFBQztRQUM5Rk0sY0FBYztJQUNoQjtJQUVBLE1BQU1JLFdBQVcsQ0FBQ0M7UUFDaEIsSUFBSSxDQUFDQSxZQUFZLENBQUNBLFNBQVNOLEtBQUssRUFBRTtZQUNoQ2hCLGVBQWV1QjtZQUNmO1FBQ0Y7UUFFQSxNQUFNQyxTQUFTMUIsV0FBV29CLElBQUksQ0FBQ0gsQ0FBQUEsSUFBS0EsRUFBRUosSUFBSSxLQUFLVyxTQUFVTixLQUFLO1FBQzlELE1BQU1TLGFBQTZCO1lBQ2pDZCxNQUFNYSxDQUFBQSxtQkFBQUEsNkJBQUFBLE9BQVFiLElBQUksS0FBSVcsU0FBVU4sS0FBSztZQUNyQ1UsSUFBSSxFQUFFRixtQkFBQUEsNkJBQUFBLE9BQVFFLElBQUk7WUFDbEJDLE1BQU16QjtRQUNSO1FBRUEsSUFBSXNCLFVBQVVBLE9BQU9yQixLQUFLLEtBQUtvQixXQUFXO1lBQ3hDRSxXQUFXTCxLQUFLLEdBQUdJLE9BQU9yQixLQUFLO1FBQ2pDO1FBRUFILGVBQWV5QjtJQUNqQjtJQUVBLE1BQU1HLGFBQWEsbUJBQW9CcEIsQ0FBQUEsU0FBU2QsMkNBQU1BLENBQUNtQyxXQUFXLENBQUNDLFdBQVcsR0FBRyxFQUFDO0lBRWxGLHFCQUNFLDJEQUFDQztRQUFJQyxXQUFVO3FCQUNiLDJEQUFDeEMsd0RBQWVBO1FBQUN5QyxPQUFPMUIsT0FBTyxLQUFLO1FBQUd5QixXQUFXSjtRQUFZeEIsU0FBU0E7T0FDcEVELHNCQUVILDJEQUFDViwrQ0FBTUE7UUFDTFksVUFBVUE7UUFDVkMsU0FBU0EsV0FBV1c7UUFDcEJpQixTQUFTdEI7UUFDVEksT0FBT047UUFDUHlCLGFBQWF6QixzQkFBc0JhO1FBQ25DRixVQUFVQTtRQUNWWSxPQUFPMUIsT0FBTyxLQUFLO1FBQ25CNkIsZUFBZTtRQUNmQyxhQUFhNUIsY0FBY2MsYUFBYWQ7UUFDeEM2QixrQkFBQUE7O0FBSVIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9xdWVyeUJ1aWxkZXIvQ29sdW1uU2VsZWN0LnRzeD8wNDhkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTZWxlY3RhYmxlVmFsdWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IElubGluZUZvcm1MYWJlbCwgU2VsZWN0IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuaW1wb3J0IHsgQ29sdW1uSGludCwgU2VsZWN0ZWRDb2x1bW4sIFRhYmxlQ29sdW1uIH0gZnJvbSAndHlwZXMvcXVlcnlCdWlsZGVyJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJ3N0eWxlcyc7XG5cbmludGVyZmFjZSBDb2x1bW5TZWxlY3RQcm9wcyB7XG4gIGFsbENvbHVtbnM6IHJlYWRvbmx5IFRhYmxlQ29sdW1uW107XG4gIHNlbGVjdGVkQ29sdW1uOiBTZWxlY3RlZENvbHVtbiB8IHVuZGVmaW5lZDtcbiAgb25Db2x1bW5DaGFuZ2U6IChjOiBTZWxlY3RlZENvbHVtbiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgY29sdW1uRmlsdGVyRm4/OiAoYzogVGFibGVDb2x1bW4pID0+IGJvb2xlYW47XG4gIGNvbHVtbkhpbnQ/OiBDb2x1bW5IaW50O1xuICBsYWJlbDogc3RyaW5nO1xuICB0b29sdGlwOiBzdHJpbmc7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgaW52YWxpZD86IGJvb2xlYW47XG4gIHdpZGU/OiBib29sZWFuO1xuICBpbmxpbmU/OiBib29sZWFuO1xuICBjbGVhcmFibGU/OiBib29sZWFuO1xufVxuXG5jb25zdCBkZWZhdWx0RmlsdGVyRm4gPSAoKSA9PiB0cnVlO1xuXG5leHBvcnQgY29uc3QgQ29sdW1uU2VsZWN0ID0gKHByb3BzOiBDb2x1bW5TZWxlY3RQcm9wcykgPT4ge1xuICBjb25zdCB7IGFsbENvbHVtbnMsIHNlbGVjdGVkQ29sdW1uLCBvbkNvbHVtbkNoYW5nZSwgY29sdW1uRmlsdGVyRm4sIGNvbHVtbkhpbnQsIGxhYmVsLCB0b29sdGlwLCBkaXNhYmxlZCwgaW52YWxpZCwgd2lkZSwgaW5saW5lLCBjbGVhcmFibGUgfSA9IHByb3BzO1xuICBjb25zdCBzZWxlY3RlZENvbHVtbk5hbWUgPSBzZWxlY3RlZENvbHVtbj8ubmFtZTtcbiAgY29uc3QgY29sdW1uczogQXJyYXk8U2VsZWN0YWJsZVZhbHVlPHN0cmluZz4+ID0gYWxsQ29sdW1ucy5cbiAgICBmaWx0ZXIoY29sdW1uRmlsdGVyRm4gfHwgZGVmYXVsdEZpbHRlckZuKS5cbiAgICBtYXAoYyA9PiAoeyBsYWJlbDogYy5sYWJlbCB8fCBjLm5hbWUsIHZhbHVlOiBjLm5hbWUgfSkpO1xuXG4gIC8vIFNlbGVjdCBjb21wb25lbnQgV0lMTCBOT1QgZGlzcGxheSB0aGUgdmFsdWUgaWYgaXQgaXNuJ3QgcHJlc2VudCBpbiB0aGUgb3B0aW9ucy5cbiAgbGV0IHN0YWxlT3B0aW9uID0gZmFsc2U7XG4gIGlmIChzZWxlY3RlZENvbHVtbiAmJiAhY29sdW1ucy5maW5kKGMgPT4gYy52YWx1ZSA9PT0gc2VsZWN0ZWRDb2x1bW4ubmFtZSkpIHtcbiAgICBjb2x1bW5zLnB1c2goeyBsYWJlbDogc2VsZWN0ZWRDb2x1bW4uYWxpYXMgfHwgc2VsZWN0ZWRDb2x1bW4ubmFtZSwgdmFsdWU6IHNlbGVjdGVkQ29sdW1uLm5hbWUgfSk7XG4gICAgc3RhbGVPcHRpb24gPSB0cnVlO1xuICB9XG5cbiAgY29uc3Qgb25DaGFuZ2UgPSAoc2VsZWN0ZWQ6IFNlbGVjdGFibGVWYWx1ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KSA9PiB7XG4gICAgaWYgKCFzZWxlY3RlZCB8fCAhc2VsZWN0ZWQudmFsdWUpIHtcbiAgICAgIG9uQ29sdW1uQ2hhbmdlKHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29sdW1uID0gYWxsQ29sdW1ucy5maW5kKGMgPT4gYy5uYW1lID09PSBzZWxlY3RlZCEudmFsdWUpITtcbiAgICBjb25zdCBuZXh0Q29sdW1uOiBTZWxlY3RlZENvbHVtbiA9IHtcbiAgICAgIG5hbWU6IGNvbHVtbj8ubmFtZSB8fCBzZWxlY3RlZCEudmFsdWUsXG4gICAgICB0eXBlOiBjb2x1bW4/LnR5cGUsXG4gICAgICBoaW50OiBjb2x1bW5IaW50LFxuICAgIH07XG5cbiAgICBpZiAoY29sdW1uICYmIGNvbHVtbi5sYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXh0Q29sdW1uLmFsaWFzID0gY29sdW1uLmxhYmVsO1xuICAgIH1cblxuICAgIG9uQ29sdW1uQ2hhbmdlKG5leHRDb2x1bW4pO1xuICB9XG5cbiAgY29uc3QgbGFiZWxTdHlsZSA9ICdxdWVyeS1rZXl3b3JkICcgKyAoaW5saW5lID8gc3R5bGVzLlF1ZXJ5RWRpdG9yLmlubGluZUZpZWxkIDogJycpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXt3aWRlID8gMTIgOiA4fSBjbGFzc05hbWU9e2xhYmVsU3R5bGV9IHRvb2x0aXA9e3Rvb2x0aXB9PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgIDxTZWxlY3Q8c3RyaW5nIHwgdW5kZWZpbmVkPlxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIGludmFsaWQ9e2ludmFsaWQgfHwgc3RhbGVPcHRpb259XG4gICAgICAgIG9wdGlvbnM9e2NvbHVtbnN9XG4gICAgICAgIHZhbHVlPXtzZWxlY3RlZENvbHVtbk5hbWV9XG4gICAgICAgIHBsYWNlaG9sZGVyPXtzZWxlY3RlZENvbHVtbk5hbWUgfHwgdW5kZWZpbmVkfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIHdpZHRoPXt3aWRlID8gMjUgOiAyMH1cbiAgICAgICAgbWVudVBsYWNlbWVudD17J2JvdHRvbSd9XG4gICAgICAgIGlzQ2xlYXJhYmxlPXtjbGVhcmFibGUgPT09IHVuZGVmaW5lZCB8fCBjbGVhcmFibGV9XG4gICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSW5saW5lRm9ybUxhYmVsIiwiU2VsZWN0Iiwic3R5bGVzIiwiZGVmYXVsdEZpbHRlckZuIiwiQ29sdW1uU2VsZWN0IiwicHJvcHMiLCJhbGxDb2x1bW5zIiwic2VsZWN0ZWRDb2x1bW4iLCJvbkNvbHVtbkNoYW5nZSIsImNvbHVtbkZpbHRlckZuIiwiY29sdW1uSGludCIsImxhYmVsIiwidG9vbHRpcCIsImRpc2FibGVkIiwiaW52YWxpZCIsIndpZGUiLCJpbmxpbmUiLCJjbGVhcmFibGUiLCJzZWxlY3RlZENvbHVtbk5hbWUiLCJuYW1lIiwiY29sdW1ucyIsImZpbHRlciIsIm1hcCIsImMiLCJ2YWx1ZSIsInN0YWxlT3B0aW9uIiwiZmluZCIsInB1c2giLCJhbGlhcyIsIm9uQ2hhbmdlIiwic2VsZWN0ZWQiLCJ1bmRlZmluZWQiLCJjb2x1bW4iLCJuZXh0Q29sdW1uIiwidHlwZSIsImhpbnQiLCJsYWJlbFN0eWxlIiwiUXVlcnlFZGl0b3IiLCJpbmxpbmVGaWVsZCIsImRpdiIsImNsYXNzTmFtZSIsIndpZHRoIiwib3B0aW9ucyIsInBsYWNlaG9sZGVyIiwibWVudVBsYWNlbWVudCIsImlzQ2xlYXJhYmxlIiwiYWxsb3dDdXN0b21WYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/queryBuilder/ColumnSelect.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/ColumnsEditor.tsx":
/*!***************************************************!*\
  !*** ./components/queryBuilder/ColumnsEditor.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColumnsEditor: () => (/* binding */ ColumnsEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n\n\n\n\n\nfunction getCustomColumns(columnNames, allColumns) {\n    const columnNamesSet = new Set(columnNames);\n    return allColumns.filter((c)=>columnNamesSet.has(c.name)).map((c)=>({\n            label: c.label || c.name,\n            value: c.name\n        }));\n}\nconst allColumnName = '*';\nconst ColumnsEditor = (props)=>{\n    const { allColumns, selectedColumns, onSelectedColumnsChange, disabled, showAllOption } = props;\n    const [customColumns, setCustomColumns] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const allColumnNames = allColumns.map((c)=>({\n            label: c.label || c.name,\n            value: c.name\n        }));\n    if (showAllOption) {\n        allColumnNames.push({\n            label: allColumnName,\n            value: allColumnName\n        });\n    }\n    const selectedColumnNames = (selectedColumns || []).map((c)=>({\n            label: c.alias || c.name,\n            value: c.name\n        }));\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.ColumnsEditor;\n    const options = [\n        ...allColumnNames,\n        ...customColumns\n    ];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (allColumns.length === 0) {\n            return;\n        }\n        const columnNames = selectedColumns.map((c)=>c.name);\n        const customColumns = getCustomColumns(columnNames, allColumns);\n        setCustomColumns(customColumns);\n    }, [\n        allColumns,\n        selectedColumns\n    ]);\n    const onChange = (selected)=>{\n        setIsOpen(false);\n        const selectedColumnNames = new Set(selected.map((s)=>s.value));\n        const customColumnNames = new Set(customColumns.map((c)=>c.value));\n        const columnMap = new Map();\n        const currentColumnMap = new Map();\n        allColumns.forEach((c)=>columnMap.set(c.name, c));\n        selectedColumns.forEach((c)=>currentColumnMap.set(c.name, c));\n        const excludeAllColumn = selectedColumnNames.size > 1;\n        const nextSelectedColumns = [];\n        for (let columnName of selectedColumnNames){\n            if (excludeAllColumn && columnName === allColumnName) {\n                continue;\n            }\n            const tableColumn = columnMap.get(columnName);\n            const existingColumn = currentColumnMap.get(columnName);\n            if (existingColumn) {\n                nextSelectedColumns.push(existingColumn);\n            } else {\n                nextSelectedColumns.push({\n                    name: columnName,\n                    type: (tableColumn === null || tableColumn === void 0 ? void 0 : tableColumn.type) || 'String',\n                    custom: customColumnNames.has(columnName),\n                    alias: (tableColumn === null || tableColumn === void 0 ? void 0 : tableColumn.label) || columnName\n                });\n            }\n        }\n        onSelectedColumnsChange(nextSelectedColumns);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_3__.selectors.components.QueryBuilder.ColumnsEditor.multiSelectWrapper,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.selectWrapper\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.MultiSelect, {\n        disabled: disabled,\n        options: options,\n        value: selectedColumnNames,\n        isOpen: isOpen,\n        onOpenMenu: ()=>setIsOpen(true),\n        onCloseMenu: ()=>setIsOpen(false),\n        onChange: onChange,\n        allowCustomValue: true,\n        menuPlacement: 'bottom'\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/ColumnsEditor.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/DatabaseTableSelect.tsx":
/*!*********************************************************!*\
  !*** ./components/queryBuilder/DatabaseTableSelect.tsx ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseSelect: () => (/* binding */ DatabaseSelect),\n/* harmony export */   DatabaseTableSelect: () => (/* binding */ DatabaseTableSelect),\n/* harmony export */   TableSelect: () => (/* binding */ TableSelect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _hooks_useTables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../hooks/useTables */ \"./hooks/useTables.ts\");\n/* harmony import */ var _hooks_useDatabases__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../hooks/useDatabases */ \"./hooks/useDatabases.ts\");\n\n\n\n\n\n\nconst DatabaseSelect = (props)=>{\n    const { datasource, onDatabaseChange, database } = props;\n    const databases = (0,_hooks_useDatabases__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(datasource);\n    const { label, tooltip, empty } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.DatabaseSelect;\n    const options = databases.map((d)=>({\n            label: d,\n            value: d\n        }));\n    options.push({\n        label: empty,\n        value: ''\n    }); // Allow a blank value\n    // Add selected value to the list if it does not exist.\n    // When loading an existing query, the saved value may no longer be in the list\n    if (database && !databases.includes(database)) {\n        options.push({\n            label: database,\n            value: database\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Auto select default db\n        if (!database) {\n            onDatabaseChange(datasource.getDefaultDatabase());\n        }\n    }, [\n        datasource,\n        database,\n        onDatabaseChange\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        className: `width-15 ${_styles__WEBPACK_IMPORTED_MODULE_3__.styles.Common.inlineSelect}`,\n        options: options,\n        value: database,\n        onChange: (e)=>onDatabaseChange(e.value),\n        menuPlacement: 'bottom',\n        allowCustomValue: true\n    }));\n};\nconst TableSelect = (props)=>{\n    const { datasource, onTableChange, database, table } = props;\n    const tables = (0,_hooks_useTables__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(datasource, database);\n    const { label, tooltip, empty } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.TableSelect;\n    const options = tables.map((t)=>({\n            label: t,\n            value: t\n        }));\n    options.push({\n        label: empty,\n        value: ''\n    }); // Allow a blank value\n    // Include saved value in case it's no longer listed\n    if (table && !tables.includes(table)) {\n        options.push({\n            label: table,\n            value: table\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Auto select first/default table\n        if (database && !table && tables.length > 0) {\n            onTableChange(datasource.getDefaultTable() || tables[0]);\n        }\n    }, [\n        database,\n        table,\n        tables,\n        datasource,\n        onTableChange\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        className: `width-15 ${_styles__WEBPACK_IMPORTED_MODULE_3__.styles.Common.inlineSelect}`,\n        options: options,\n        value: table,\n        onChange: (e)=>onTableChange(e.value),\n        menuPlacement: 'bottom',\n        allowCustomValue: true\n    }));\n};\nconst DatabaseTableSelect = (props)=>{\n    const { datasource, database, onDatabaseChange, table, onTableChange } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DatabaseSelect, {\n        datasource: datasource,\n        database: database,\n        onDatabaseChange: onDatabaseChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TableSelect, {\n        datasource: datasource,\n        database: database,\n        table: table,\n        onTableChange: onTableChange\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/DatabaseTableSelect.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/DurationUnitSelect.tsx":
/*!********************************************************!*\
  !*** ./components/queryBuilder/DurationUnitSelect.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DurationUnitSelect: () => (/* binding */ DurationUnitSelect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n\n\n\n\n\nconst durationUnitOptions = [\n    {\n        label: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Seconds,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Seconds\n    },\n    {\n        label: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Milliseconds,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Milliseconds\n    },\n    {\n        label: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Microseconds,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Microseconds\n    },\n    {\n        label: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Nanoseconds,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Nanoseconds\n    }\n];\nconst DurationUnitSelect = (props)=>{\n    const { unit, onChange, disabled, inline } = props;\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.TraceQueryBuilder.columns.durationUnit;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.InlineFormLabel, {\n        width: 12,\n        className: `query-keyword ${inline ? _styles__WEBPACK_IMPORTED_MODULE_4__.styles.QueryEditor.inlineField : ''}`,\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Select, {\n        disabled: disabled,\n        options: durationUnitOptions,\n        value: unit,\n        onChange: (v)=>onChange(v.value),\n        width: inline ? 25 : 30,\n        menuPlacement: 'bottom'\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9EdXJhdGlvblVuaXRTZWxlY3QudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ29CO0FBQ2Y7QUFDdUI7QUFFdEI7QUFTaEMsTUFBTU0sc0JBQWdFO0lBQ3BFO1FBQUVDLE9BQU9OLHlEQUFRQSxDQUFDTyxPQUFPO1FBQUVDLE9BQU9SLHlEQUFRQSxDQUFDTyxPQUFPO0lBQUM7SUFDbkQ7UUFBRUQsT0FBT04seURBQVFBLENBQUNTLFlBQVk7UUFBRUQsT0FBT1IseURBQVFBLENBQUNTLFlBQVk7SUFBQztJQUM3RDtRQUFFSCxPQUFPTix5REFBUUEsQ0FBQ1UsWUFBWTtRQUFFRixPQUFPUix5REFBUUEsQ0FBQ1UsWUFBWTtJQUFDO0lBQzdEO1FBQUVKLE9BQU9OLHlEQUFRQSxDQUFDVyxXQUFXO1FBQUVILE9BQU9SLHlEQUFRQSxDQUFDVyxXQUFXO0lBQUM7Q0FDNUQ7QUFFTSxNQUFNQyxxQkFBcUIsQ0FBQ0M7SUFDakMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUUsR0FBR0o7SUFDN0MsTUFBTSxFQUFFUCxLQUFLLEVBQUVZLE9BQU8sRUFBRSxHQUFHakIsK0NBQVNBLENBQUNrQixVQUFVLENBQUNDLGlCQUFpQixDQUFDQyxPQUFPLENBQUNDLFlBQVk7SUFFdEYscUJBQ0UsMkRBQUNDO1FBQUlDLFdBQVU7cUJBQ2IsMkRBQUN0Qix3REFBZUE7UUFBQ3VCLE9BQU87UUFBSUQsV0FBVyxDQUFDLGNBQWMsRUFBRVAsU0FBU2IsMkNBQU1BLENBQUNzQixXQUFXLENBQUNDLFdBQVcsR0FBRyxHQUFHLENBQUM7UUFBRVQsU0FBU0E7T0FDOUdaLHNCQUVILDJEQUFDSCwrQ0FBTUE7UUFDTGEsVUFBVUE7UUFDVlksU0FBU3ZCO1FBQ1RHLE9BQU9NO1FBQ1BDLFVBQVVjLENBQUFBLElBQUtkLFNBQVNjLEVBQUVyQixLQUFLO1FBQy9CaUIsT0FBT1IsU0FBUyxLQUFLO1FBQ3JCYSxlQUFlOztBQUl2QixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9EdXJhdGlvblVuaXRTZWxlY3QudHN4PzIyMTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVGltZVVuaXQgfSBmcm9tIFwidHlwZXMvcXVlcnlCdWlsZGVyXCI7XG5pbXBvcnQgYWxsTGFiZWxzIGZyb20gJ2xhYmVscyc7XG5pbXBvcnQgeyBJbmxpbmVGb3JtTGFiZWwsIFNlbGVjdCB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgc3R5bGVzIH0gZnJvbSAnc3R5bGVzJztcblxuaW50ZXJmYWNlIER1cmF0aW9uVW5pdFNlbGVjdFByb3BzIHtcbiAgdW5pdDogVGltZVVuaXQ7XG4gIG9uQ2hhbmdlOiAodTogVGltZVVuaXQpID0+IHZvaWQ7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgaW5saW5lPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGR1cmF0aW9uVW5pdE9wdGlvbnM6IFJlYWRvbmx5QXJyYXk8U2VsZWN0YWJsZVZhbHVlPFRpbWVVbml0Pj4gPSBbXG4gIHsgbGFiZWw6IFRpbWVVbml0LlNlY29uZHMsIHZhbHVlOiBUaW1lVW5pdC5TZWNvbmRzIH0sXG4gIHsgbGFiZWw6IFRpbWVVbml0Lk1pbGxpc2Vjb25kcywgdmFsdWU6IFRpbWVVbml0Lk1pbGxpc2Vjb25kcyB9LFxuICB7IGxhYmVsOiBUaW1lVW5pdC5NaWNyb3NlY29uZHMsIHZhbHVlOiBUaW1lVW5pdC5NaWNyb3NlY29uZHMgfSxcbiAgeyBsYWJlbDogVGltZVVuaXQuTmFub3NlY29uZHMsIHZhbHVlOiBUaW1lVW5pdC5OYW5vc2Vjb25kcyB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IER1cmF0aW9uVW5pdFNlbGVjdCA9IChwcm9wczogRHVyYXRpb25Vbml0U2VsZWN0UHJvcHMpID0+IHtcbiAgY29uc3QgeyB1bml0LCBvbkNoYW5nZSwgZGlzYWJsZWQsIGlubGluZSB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgbGFiZWwsIHRvb2x0aXAgfSA9IGFsbExhYmVscy5jb21wb25lbnRzLlRyYWNlUXVlcnlCdWlsZGVyLmNvbHVtbnMuZHVyYXRpb25Vbml0O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXsxMn0gY2xhc3NOYW1lPXtgcXVlcnkta2V5d29yZCAke2lubGluZSA/IHN0eWxlcy5RdWVyeUVkaXRvci5pbmxpbmVGaWVsZCA6ICcnfWB9IHRvb2x0aXA9e3Rvb2x0aXB9PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgIDxTZWxlY3Q8VGltZVVuaXQ+XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgb3B0aW9ucz17ZHVyYXRpb25Vbml0T3B0aW9ucyBhcyBBcnJheTxTZWxlY3RhYmxlVmFsdWU8VGltZVVuaXQ+Pn1cbiAgICAgICAgdmFsdWU9e3VuaXR9XG4gICAgICAgIG9uQ2hhbmdlPXt2ID0+IG9uQ2hhbmdlKHYudmFsdWUhKX1cbiAgICAgICAgd2lkdGg9e2lubGluZSA/IDI1IDogMzB9XG4gICAgICAgIG1lbnVQbGFjZW1lbnQ9eydib3R0b20nfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJUaW1lVW5pdCIsImFsbExhYmVscyIsIklubGluZUZvcm1MYWJlbCIsIlNlbGVjdCIsInN0eWxlcyIsImR1cmF0aW9uVW5pdE9wdGlvbnMiLCJsYWJlbCIsIlNlY29uZHMiLCJ2YWx1ZSIsIk1pbGxpc2Vjb25kcyIsIk1pY3Jvc2Vjb25kcyIsIk5hbm9zZWNvbmRzIiwiRHVyYXRpb25Vbml0U2VsZWN0IiwicHJvcHMiLCJ1bml0Iiwib25DaGFuZ2UiLCJkaXNhYmxlZCIsImlubGluZSIsInRvb2x0aXAiLCJjb21wb25lbnRzIiwiVHJhY2VRdWVyeUJ1aWxkZXIiLCJjb2x1bW5zIiwiZHVyYXRpb25Vbml0IiwiZGl2IiwiY2xhc3NOYW1lIiwid2lkdGgiLCJRdWVyeUVkaXRvciIsImlubGluZUZpZWxkIiwib3B0aW9ucyIsInYiLCJtZW51UGxhY2VtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/queryBuilder/DurationUnitSelect.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/EditorTypeSwitcher.tsx":
/*!********************************************************!*\
  !*** ./components/queryBuilder/EditorTypeSwitcher.tsx ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorTypeSwitcher: () => (/* binding */ EditorTypeSwitcher)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./components/queryBuilder/utils.ts\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../data/utils */ \"./data/utils.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\nconst options = [\n    {\n        label: _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].types.EditorType.sql,\n        value: _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.SQL\n    },\n    {\n        label: _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].types.EditorType.builder,\n        value: _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder\n    }\n];\n/**\n * Component for switching between the SQL and Query Builder editors.\n */ const EditorTypeSwitcher = (props)=>{\n    const { datasource, query, onChange } = props;\n    const { label, tooltip, switcher, cannotConvert } = _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].components.EditorTypeSwitcher;\n    const editorType = query.editorType || _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder;\n    const [confirmModalState, setConfirmModalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [cannotConvertModalState, setCannotConvertModalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const onEditorTypeChange = (editorType, confirmed = false)=>{\n        // TODO: component state has updated, but not local state.\n        if (query.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.SQL && editorType === _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder && !confirmed) {\n            try {\n                (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryOptionsFromSql)(query.rawSql, query.queryType, datasource);\n                setConfirmModalState(true);\n            } catch (err) {\n                setCannotConvertModalState(true);\n                setErrorMessage(err.message);\n            }\n        } else {\n            let builderOptions;\n            switch(query.editorType){\n                case _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder:\n                    builderOptions = query.builderOptions;\n                    break;\n                case _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.SQL:\n                    builderOptions = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getQueryOptionsFromSql)(query.rawSql, query.queryType, datasource);\n                    break;\n                default:\n                    builderOptions = _types_sql__WEBPACK_IMPORTED_MODULE_5__.defaultCHBuilderQuery.builderOptions;\n                    break;\n            }\n            if (editorType === _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.SQL) {\n                onChange(_object_spread_props(_object_spread({}, query), {\n                    editorType: _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.SQL,\n                    queryType: builderOptions.queryType,\n                    rawSql: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_3__.generateSql)(builderOptions),\n                    format: (0,_data_utils__WEBPACK_IMPORTED_MODULE_6__.mapQueryTypeToGrafanaFormat)(builderOptions.queryType),\n                    meta: {\n                        builderOptions\n                    }\n                }));\n            } else if (editorType === _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder) {\n                onChange(_object_spread_props(_object_spread({}, query), {\n                    editorType: _types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder,\n                    queryType: builderOptions.queryType,\n                    rawSql: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_3__.generateSql)(builderOptions),\n                    builderOptions\n                }));\n            }\n        }\n    };\n    const onConfirmEditorTypeChange = ()=>{\n        onEditorTypeChange(_types_sql__WEBPACK_IMPORTED_MODULE_5__.EditorType.Builder, true);\n        setConfirmModalState(false);\n        setCannotConvertModalState(false);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.RadioButtonGroup, {\n        options: options,\n        value: editorType,\n        onChange: (e)=>onEditorTypeChange(e)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.ConfirmModal, {\n        isOpen: confirmModalState,\n        title: switcher.title,\n        body: switcher.body,\n        confirmText: switcher.confirmText,\n        dismissText: switcher.dismissText,\n        icon: \"exclamation-triangle\",\n        onConfirm: onConfirmEditorTypeChange,\n        onDismiss: ()=>setConfirmModalState(false)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.ConfirmModal, {\n        title: cannotConvert.title,\n        body: `${errorMessage}\\n${cannotConvert.message}`,\n        isOpen: cannotConvertModalState,\n        icon: \"exclamation-triangle\",\n        onConfirm: onConfirmEditorTypeChange,\n        confirmText: switcher.confirmText,\n        onDismiss: ()=>setCannotConvertModalState(false)\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/EditorTypeSwitcher.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/FilterEditor.tsx":
/*!**************************************************!*\
  !*** ./components/queryBuilder/FilterEditor.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterEditor: () => (/* binding */ FilterEditor),\n/* harmony export */   FilterValueEditor: () => (/* binding */ FilterValueEditor),\n/* harmony export */   FiltersEditor: () => (/* binding */ FiltersEditor),\n/* harmony export */   defaultNewFilter: () => (/* binding */ defaultNewFilter)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./components/queryBuilder/utils.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _hooks_useUniqueMapKeys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../hooks/useUniqueMapKeys */ \"./hooks/useUniqueMapKeys.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\nconst boolValues = [\n    {\n        value: true,\n        label: 'True'\n    },\n    {\n        value: false,\n        label: 'False'\n    }\n];\nconst conditions = [\n    {\n        value: 'AND',\n        label: 'AND'\n    },\n    {\n        value: 'OR',\n        label: 'OR'\n    }\n];\nconst filterOperators = [\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange,\n        label: 'Within dashboard time range'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.OutsideGrafanaTimeRange,\n        label: 'Outside dashboard time range'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything,\n        label: 'IS ANYTHING'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n        label: '='\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotEquals,\n        label: '!='\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThan,\n        label: '<'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThanOrEqual,\n        label: '<='\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThan,\n        label: '>'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThanOrEqual,\n        label: '>='\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Like,\n        label: 'LIKE'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotLike,\n        label: 'NOT LIKE'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsEmpty,\n        label: 'IS EMPTY'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotEmpty,\n        label: 'IS NOT EMPTY'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.In,\n        label: 'IN'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotIn,\n        label: 'NOT IN'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNull,\n        label: 'IS NULL'\n    },\n    {\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull,\n        label: 'IS NOT NULL'\n    }\n];\nconst standardTimeOptions = [\n    {\n        value: 'today()',\n        label: 'TODAY'\n    },\n    {\n        value: 'yesterday()',\n        label: 'YESTERDAY'\n    },\n    {\n        value: 'now()',\n        label: 'NOW'\n    },\n    {\n        value: 'GRAFANA_START_TIME',\n        label: 'DASHBOARD START TIME'\n    },\n    {\n        value: 'GRAFANA_END_TIME',\n        label: 'DASHBOARD END TIME'\n    }\n];\nconst defaultNewFilter = {\n    filterType: 'custom',\n    condition: 'AND',\n    key: '',\n    type: '',\n    operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything\n};\nconst FilterValueNumberItem = (props)=>{\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.value || 0);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": \"query-builder-filters-number-value-container\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        \"data-testid\": \"query-builder-filters-number-value-input\",\n        type: \"number\",\n        value: value,\n        onChange: (e)=>setValue(e.currentTarget.valueAsNumber || 0),\n        onBlur: ()=>props.onChange(value)\n    }));\n};\nconst FilterValueSingleStringItem = (props)=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": \"query-builder-filters-single-string-value-container\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        \"data-testid\": \"query-builder-filters-single-string-value-input\",\n        type: \"text\",\n        defaultValue: props.value,\n        width: 70,\n        onBlur: (e)=>props.onChange(e.currentTarget.value)\n    }));\n};\nconst FilterValueMultiStringItem = (props)=>{\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.value || []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": \"query-builder-filters-multi-string-value-container\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        type: \"text\",\n        value: value.join(','),\n        placeholder: \"comma separated values\",\n        onChange: (e)=>setValue((e.currentTarget.value || '').split(',')),\n        onBlur: ()=>props.onChange(value)\n    }));\n};\nconst FilterValueEditor = (props)=>{\n    const { filter, onFilterChange, allColumns: fieldsList } = props;\n    const getOptions = ()=>{\n        const matchedFilter = fieldsList.find((f)=>f.name === filter.key);\n        return (matchedFilter === null || matchedFilter === void 0 ? void 0 : matchedFilter.picklistValues) || [];\n    };\n    if (_utils__WEBPACK_IMPORTED_MODULE_3__.isNullFilter(filter)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null);\n    } else if ([\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything,\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsEmpty,\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotEmpty\n    ].includes(filter.operator)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null);\n    } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isBooleanFilter(filter)) {\n        const onBoolFilterValueChange = (value)=>{\n            onFilterChange(_object_spread_props(_object_spread({}, filter), {\n                value\n            }));\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            \"data-testid\": \"query-builder-filters-boolean-value-container\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.RadioButtonGroup, {\n            options: boolValues,\n            value: filter.value,\n            onChange: (e)=>onBoolFilterValueChange(e)\n        }));\n    } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isNumberFilter(filter)) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FilterValueNumberItem, {\n            value: filter.value,\n            onChange: (value)=>onFilterChange(_object_spread_props(_object_spread({}, filter), {\n                    value\n                }))\n        });\n    } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isDateFilter(filter)) {\n        if (_utils__WEBPACK_IMPORTED_MODULE_3__.isDateFilterWithOutValue(filter)) {\n            return null;\n        }\n        const onDateFilterValueChange = (value)=>{\n            onFilterChange(_object_spread_props(_object_spread({}, filter), {\n                value\n            }));\n        };\n        const dateOptions = [\n            ...standardTimeOptions\n        ];\n        if (filter.value && !standardTimeOptions.find((o)=>o.value === filter.value)) {\n            dateOptions.push({\n                label: filter.value,\n                value: filter.value\n            });\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            \"data-testid\": \"query-builder-filters-date-value-container\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n            value: filter.value || 'TODAY',\n            onChange: (e)=>onDateFilterValueChange(e.value),\n            options: dateOptions,\n            width: 40,\n            allowCustomValue: true\n        }));\n    } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isStringFilter(filter)) {\n        const onStringFilterValueChange = (value)=>{\n            onFilterChange(_object_spread_props(_object_spread({}, filter), {\n                value\n            }));\n        };\n        if (filter.type === 'picklist' && (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals || filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotEquals)) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                \"data-testid\": \"query-builder-filters-single-picklist-value-container\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n                value: filter.value,\n                onChange: (e)=>onStringFilterValueChange(e.value),\n                options: getOptions()\n            }));\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FilterValueSingleStringItem, {\n            value: filter.value,\n            onChange: onStringFilterValueChange,\n            // enforce input re-render when filter changes to avoid stale input value\n            key: filter.value\n        });\n    } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isMultiFilter(filter)) {\n        const onMultiFilterValueChange = (value)=>{\n            onFilterChange(_object_spread_props(_object_spread({}, filter), {\n                value\n            }));\n        };\n        if (filter.type === 'picklist') {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                \"data-testid\": \"query-builder-filters-multi-picklist-value-container\"\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.MultiSelect, {\n                value: filter.value,\n                options: getOptions(),\n                onChange: (e)=>onMultiFilterValueChange(e.map((v)=>v.value))\n            }));\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FilterValueMultiStringItem, {\n            value: filter.value,\n            onChange: onMultiFilterValueChange\n        });\n    } else {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null);\n    }\n};\nconst FilterEditor = (props)=>{\n    const { index, filter, allColumns: fieldsList, onFilterChange, removeFilter } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const isMapType = filter.type.startsWith('Map');\n    const mapKeys = (0,_hooks_useUniqueMapKeys__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(props.datasource, isMapType ? filter.key : '', props.database, props.table);\n    const mapKeyOptions = mapKeys.map((k)=>({\n            label: k,\n            value: k\n        }));\n    if (filter.mapKey && !mapKeys.includes(filter.mapKey)) {\n        mapKeyOptions.push({\n            label: filter.mapKey,\n            value: filter.mapKey\n        });\n    }\n    const getFields = ()=>{\n        const values = (filter.restrictToFields || fieldsList).map((f)=>{\n            let label = f.label || f.name;\n            if (f.type.startsWith('Map')) {\n                label += '[]';\n            }\n            return {\n                label,\n                value: f.name\n            };\n        });\n        // Add selected value to the list if it does not exist.\n        if ((filter === null || filter === void 0 ? void 0 : filter.key) && !values.find((x)=>x.value === filter.key)) {\n            values.push({\n                label: filter.label || filter.key,\n                value: filter.key\n            });\n        }\n        return values;\n    };\n    const getFilterOperatorsByType = (type = 'string')=>{\n        if (_utils__WEBPACK_IMPORTED_MODULE_3__.isBooleanType(type)) {\n            return filterOperators.filter((f)=>[\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotEquals\n                ].includes(f.value));\n        } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isNumberType(type)) {\n            return filterOperators.filter((f)=>[\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNull,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotEquals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThan,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThanOrEqual,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThan,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThanOrEqual\n                ].includes(f.value));\n        } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isDateType(type)) {\n            return filterOperators.filter((f)=>[\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNull,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotEquals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThan,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThanOrEqual,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThan,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThanOrEqual,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.OutsideGrafanaTimeRange\n                ].includes(f.value));\n        } else {\n            return filterOperators.filter((f)=>[\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Like,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotLike,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.In,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotIn,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNull,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotEquals,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsEmpty,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotEmpty,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThan,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.LessThanOrEqual,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThan,\n                    _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThanOrEqual\n                ].includes(f.value));\n        }\n    };\n    const onFilterNameChange = (fieldName)=>{\n        setIsOpen(false);\n        const matchingField = fieldsList.find((f)=>f.name === fieldName);\n        const filterData = {\n            key: (matchingField === null || matchingField === void 0 ? void 0 : matchingField.name) || fieldName,\n            type: (matchingField === null || matchingField === void 0 ? void 0 : matchingField.type) || 'String',\n            label: matchingField === null || matchingField === void 0 ? void 0 : matchingField.label\n        };\n        let newFilter;\n        // this is an auto-generated TimeRange filter\n        if (filter.restrictToFields) {\n            newFilter = {\n                filterType: 'custom',\n                key: filterData.key || filter.key,\n                type: 'datetime',\n                condition: filter.condition || 'AND',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange,\n                restrictToFields: filter.restrictToFields,\n                label: filterData.label\n            };\n        } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isBooleanType(filterData.type)) {\n            newFilter = {\n                filterType: 'custom',\n                key: filterData.key,\n                type: 'boolean',\n                condition: filter.condition || 'AND',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n                value: false,\n                label: filterData.label\n            };\n        } else if (_utils__WEBPACK_IMPORTED_MODULE_3__.isDateType(filterData.type)) {\n            newFilter = {\n                filterType: 'custom',\n                key: filterData.key,\n                type: filterData.type,\n                condition: filter.condition || 'AND',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals,\n                value: 'TODAY',\n                label: filterData.label\n            };\n        } else {\n            newFilter = {\n                filterType: 'custom',\n                key: filterData.key,\n                type: filterData.type,\n                condition: filter.condition || 'AND',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull,\n                label: filterData.label\n            };\n        }\n        onFilterChange(index, newFilter);\n    };\n    const onFilterMapKeyChange = (mapKey)=>{\n        const newFilter = _object_spread({}, filter);\n        newFilter.mapKey = mapKey;\n        onFilterChange(index, newFilter);\n    };\n    const onFilterOperatorChange = (operator)=>{\n        const newFilter = _object_spread({}, filter);\n        newFilter.operator = operator;\n        if (_utils__WEBPACK_IMPORTED_MODULE_3__.isMultiFilter(newFilter)) {\n            if (!Array.isArray(newFilter.value)) {\n                newFilter.value = [\n                    newFilter.value || ''\n                ];\n            }\n        }\n        onFilterChange(index, newFilter);\n    };\n    const onFilterConditionChange = (condition)=>{\n        const newFilter = _object_spread({}, filter);\n        newFilter.condition = condition;\n        onFilterChange(index, newFilter);\n    };\n    const onFilterValueChange = (filter)=>{\n        onFilterChange(index, filter);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.HorizontalGroup, {\n        wrap: true,\n        align: \"flex-start\",\n        justify: \"flex-start\"\n    }, index !== 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.RadioButtonGroup, {\n        options: conditions,\n        value: filter.condition,\n        onChange: (e)=>onFilterConditionChange(e)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        disabled: Boolean(filter.hint),\n        placeholder: filter.hint ? _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].types.ColumnHint[filter.hint] : undefined,\n        value: filter.key,\n        width: 40,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.inlineSelect,\n        options: getFields(),\n        isOpen: isOpen,\n        onOpenMenu: ()=>setIsOpen(true),\n        onCloseMenu: ()=>setIsOpen(false),\n        onChange: (e)=>onFilterNameChange(e.value),\n        allowCustomValue: true,\n        menuPlacement: 'bottom'\n    }), isMapType && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        value: filter.mapKey,\n        placeholder: _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].components.FilterEditor.mapKeyPlaceholder,\n        width: 40,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.inlineSelect,\n        options: mapKeyOptions,\n        onChange: (e)=>onFilterMapKeyChange(e.value),\n        allowCustomValue: true,\n        menuPlacement: 'bottom'\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        value: filter.operator,\n        width: 40,\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.inlineSelect,\n        options: getFilterOperatorsByType(filter.type),\n        onChange: (e)=>onFilterOperatorChange(e.value),\n        menuPlacement: 'bottom'\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FilterValueEditor, {\n        filter: filter,\n        onFilterChange: onFilterValueChange,\n        allColumns: fieldsList\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": \"query-builder-filters-remove-button\",\n        icon: \"trash-alt\",\n        variant: \"destructive\",\n        size: \"sm\",\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.smallBtn,\n        onClick: ()=>removeFilter(index)\n    }));\n};\nconst FiltersEditor = (props)=>{\n    const { filters = [], onFiltersChange, allColumns: fieldsList = [], datasource, database, table } = props;\n    const { label, tooltip, addLabel } = _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].components.FilterEditor;\n    const addFilter = ()=>{\n        onFiltersChange([\n            ...filters,\n            _object_spread({}, defaultNewFilter)\n        ]);\n    };\n    const removeFilter = (index)=>{\n        const newFilters = [\n            ...filters\n        ];\n        newFilters.splice(index, 1);\n        onFiltersChange(newFilters);\n    };\n    const onFilterChange = (index, filter)=>{\n        const newFilters = [\n            ...filters\n        ];\n        newFilters[index] = filter;\n        onFiltersChange(newFilters);\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, filters.length === 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": \"query-builder-filters-add-button\",\n        icon: \"plus-circle\",\n        variant: \"secondary\",\n        size: \"sm\",\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.smallBtn,\n        onClick: addFilter\n    }, addLabel)), filters.map((filter, index)=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"gf-form\",\n            key: index\n        }, index === 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n            width: 8,\n            className: \"query-keyword\",\n            tooltip: tooltip\n        }, label) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: `width-8 ${_styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.firstLabel}`\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(FilterEditor, {\n            allColumns: fieldsList,\n            filter: filter,\n            onFilterChange: onFilterChange,\n            removeFilter: removeFilter,\n            index: index,\n            datasource: datasource,\n            database: database,\n            table: table\n        }));\n    }), filters.length !== 0 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: `width-8 ${_styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.firstLabel}`\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": \"query-builder-filters-inline-add-button\",\n        icon: \"plus-circle\",\n        variant: \"secondary\",\n        size: \"sm\",\n        className: _styles__WEBPACK_IMPORTED_MODULE_5__.styles.Common.smallBtn,\n        onClick: addFilter\n    }, addLabel)));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9GaWx0ZXJFZGl0b3IudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDO0FBRTZFO0FBQ2hDO0FBQzlCO0FBQzNCO0FBQ0k7QUFFc0I7QUFFdEQsTUFBTWMsYUFBOEM7SUFDbEQ7UUFBRUMsT0FBTztRQUFNQyxPQUFPO0lBQU87SUFDN0I7UUFBRUQsT0FBTztRQUFPQyxPQUFPO0lBQVE7Q0FDaEM7QUFDRCxNQUFNQyxhQUFtRDtJQUN2RDtRQUFFRixPQUFPO1FBQU9DLE9BQU87SUFBTTtJQUM3QjtRQUFFRCxPQUFPO1FBQU1DLE9BQU87SUFBSztDQUM1QjtBQUNELE1BQU1FLGtCQUEwRDtJQUM5RDtRQUFFSCxPQUFPTiwrREFBY0EsQ0FBQ1Usc0JBQXNCO1FBQUVILE9BQU87SUFBOEI7SUFDckY7UUFBRUQsT0FBT04sK0RBQWNBLENBQUNXLHVCQUF1QjtRQUFFSixPQUFPO0lBQStCO0lBQ3ZGO1FBQUVELE9BQU9OLCtEQUFjQSxDQUFDWSxVQUFVO1FBQUVMLE9BQU87SUFBYztJQUN6RDtRQUFFRCxPQUFPTiwrREFBY0EsQ0FBQ2EsTUFBTTtRQUFFTixPQUFPO0lBQUk7SUFDM0M7UUFBRUQsT0FBT04sK0RBQWNBLENBQUNjLFNBQVM7UUFBRVAsT0FBTztJQUFLO0lBQy9DO1FBQUVELE9BQU9OLCtEQUFjQSxDQUFDZSxRQUFRO1FBQUVSLE9BQU87SUFBSTtJQUM3QztRQUFFRCxPQUFPTiwrREFBY0EsQ0FBQ2dCLGVBQWU7UUFBRVQsT0FBTztJQUFLO0lBQ3JEO1FBQUVELE9BQU9OLCtEQUFjQSxDQUFDaUIsV0FBVztRQUFFVixPQUFPO0lBQUk7SUFDaEQ7UUFBRUQsT0FBT04sK0RBQWNBLENBQUNrQixrQkFBa0I7UUFBRVgsT0FBTztJQUFLO0lBQ3hEO1FBQUVELE9BQU9OLCtEQUFjQSxDQUFDbUIsSUFBSTtRQUFFWixPQUFPO0lBQU87SUFDNUM7UUFBRUQsT0FBT04sK0RBQWNBLENBQUNvQixPQUFPO1FBQUViLE9BQU87SUFBVztJQUNuRDtRQUFFRCxPQUFPTiwrREFBY0EsQ0FBQ3FCLE9BQU87UUFBRWQsT0FBTztJQUFXO0lBQ25EO1FBQUVELE9BQU9OLCtEQUFjQSxDQUFDc0IsVUFBVTtRQUFFZixPQUFPO0lBQWU7SUFDMUQ7UUFBRUQsT0FBT04sK0RBQWNBLENBQUN1QixFQUFFO1FBQUVoQixPQUFPO0lBQUs7SUFDeEM7UUFBRUQsT0FBT04sK0RBQWNBLENBQUN3QixLQUFLO1FBQUVqQixPQUFPO0lBQVM7SUFDL0M7UUFBRUQsT0FBT04sK0RBQWNBLENBQUN5QixNQUFNO1FBQUVsQixPQUFPO0lBQVU7SUFDakQ7UUFBRUQsT0FBT04sK0RBQWNBLENBQUMwQixTQUFTO1FBQUVuQixPQUFPO0lBQWM7Q0FDekQ7QUFDRCxNQUFNb0Isc0JBQXNEO0lBQzFEO1FBQUVyQixPQUFPO1FBQVdDLE9BQU87SUFBUTtJQUNuQztRQUFFRCxPQUFPO1FBQWVDLE9BQU87SUFBWTtJQUMzQztRQUFFRCxPQUFPO1FBQVNDLE9BQU87SUFBTTtJQUMvQjtRQUFFRCxPQUFPO1FBQXNCQyxPQUFPO0lBQXVCO0lBQzdEO1FBQUVELE9BQU87UUFBb0JDLE9BQU87SUFBcUI7Q0FDMUQ7QUFDTSxNQUFNcUIsbUJBQStCO0lBQzFDQyxZQUFZO0lBQ1pDLFdBQVc7SUFDWEMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLFVBQVVqQywrREFBY0EsQ0FBQ1ksVUFBVTtBQUNyQyxFQUFFO0FBS0YsTUFBTXNCLHdCQUF3QixDQUFDQztJQUM3QixNQUFNLENBQUM3QixPQUFPOEIsU0FBUyxHQUFHNUMsK0NBQVFBLENBQUMyQyxNQUFNN0IsS0FBSyxJQUFJO0lBQ2xELHFCQUNFLDJEQUFDK0I7UUFBSUMsZUFBWTtxQkFDZiwyREFBQzFDLDhDQUFLQTtRQUNKMEMsZUFBWTtRQUNaTixNQUFLO1FBQ0wxQixPQUFPQTtRQUNQaUMsVUFBVSxDQUFDQyxJQUFNSixTQUFTSSxFQUFFQyxhQUFhLENBQUNDLGFBQWEsSUFBSTtRQUMzREMsUUFBUSxJQUFNUixNQUFNSSxRQUFRLENBQUNqQzs7QUFJckM7QUFFQSxNQUFNc0MsOEJBQThCLENBQUNUO0lBQ25DLHFCQUNFLDJEQUFDRTtRQUFJQyxlQUFZO3FCQUNmLDJEQUFDMUMsOENBQUtBO1FBQ0owQyxlQUFZO1FBQ1pOLE1BQUs7UUFDTGEsY0FBY1YsTUFBTTdCLEtBQUs7UUFDekJ3QyxPQUFPO1FBQ1BILFFBQVEsQ0FBQ0gsSUFBTUwsTUFBTUksUUFBUSxDQUFDQyxFQUFFQyxhQUFhLENBQUNuQyxLQUFLOztBQUkzRDtBQUVBLE1BQU15Qyw2QkFBNkIsQ0FBQ1o7SUFDbEMsTUFBTSxDQUFDN0IsT0FBTzhCLFNBQVMsR0FBRzVDLCtDQUFRQSxDQUFDMkMsTUFBTTdCLEtBQUssSUFBSSxFQUFFO0lBQ3BELHFCQUNFLDJEQUFDK0I7UUFBSUMsZUFBWTtxQkFDZiwyREFBQzFDLDhDQUFLQTtRQUNKb0MsTUFBSztRQUNMMUIsT0FBT0EsTUFBTTBDLElBQUksQ0FBQztRQUNsQkMsYUFBWTtRQUNaVixVQUFVLENBQUNDLElBQU1KLFNBQVMsQ0FBQ0ksRUFBRUMsYUFBYSxDQUFDbkMsS0FBSyxJQUFJLEVBQUMsRUFBRzRDLEtBQUssQ0FBQztRQUM5RFAsUUFBUSxJQUFNUixNQUFNSSxRQUFRLENBQUNqQzs7QUFJckM7QUFFTyxNQUFNNkMsb0JBQW9CLENBQUNoQjtJQUtoQyxNQUFNLEVBQUVpQixNQUFNLEVBQUVDLGNBQWMsRUFBRUMsWUFBWUMsVUFBVSxFQUFFLEdBQUdwQjtJQUMzRCxNQUFNcUIsYUFBYTtRQUNqQixNQUFNQyxnQkFBZ0JGLFdBQVdHLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJLEtBQUtSLE9BQU9yQixHQUFHO1FBQ2xFLE9BQU8wQixDQUFBQSwwQkFBQUEsb0NBQUFBLGNBQWVJLGNBQWMsS0FBSSxFQUFFO0lBQzVDO0lBQ0EsSUFBSTVELGdEQUFrQixDQUFDbUQsU0FBUztRQUM5QixxQkFBTztJQUNULE9BQU8sSUFBSTtRQUFDcEQsK0RBQWNBLENBQUNZLFVBQVU7UUFBRVosK0RBQWNBLENBQUNxQixPQUFPO1FBQUVyQiwrREFBY0EsQ0FBQ3NCLFVBQVU7S0FBQyxDQUFDeUMsUUFBUSxDQUFDWCxPQUFPbkIsUUFBUSxHQUFHO1FBQ25ILHFCQUFPO0lBQ1QsT0FBTyxJQUFJaEMsbURBQXFCLENBQUNtRCxTQUFTO1FBQ3hDLE1BQU1hLDBCQUEwQixDQUFDM0Q7WUFDL0IrQyxlQUFlLHdDQUFLRDtnQkFBUTlDOztRQUM5QjtRQUNBLHFCQUNFLDJEQUFDK0I7WUFBSUMsZUFBWTt5QkFDZiwyREFBQ3hDLHlEQUFnQkE7WUFBQ29FLFNBQVM3RDtZQUFZQyxPQUFPOEMsT0FBTzlDLEtBQUs7WUFBRWlDLFVBQVUsQ0FBQ0MsSUFBTXlCLHdCQUF3QnpCOztJQUczRyxPQUFPLElBQUl2QyxrREFBb0IsQ0FBQ21ELFNBQVM7UUFDdkMscUJBQU8sMkRBQUNsQjtZQUFzQjVCLE9BQU84QyxPQUFPOUMsS0FBSztZQUFFaUMsVUFBVSxDQUFDakMsUUFBVStDLGVBQWUsd0NBQUtEO29CQUFROUM7OztJQUN0RyxPQUFPLElBQUlMLGdEQUFrQixDQUFDbUQsU0FBUztRQUNyQyxJQUFJbkQsNERBQThCLENBQUNtRCxTQUFTO1lBQzFDLE9BQU87UUFDVDtRQUVBLE1BQU1rQiwwQkFBMEIsQ0FBQ2hFO1lBQy9CK0MsZUFBZSx3Q0FBS0Q7Z0JBQVE5Qzs7UUFDOUI7UUFDQSxNQUFNaUUsY0FBYztlQUFJNUM7U0FBb0I7UUFDNUMsSUFBSXlCLE9BQU85QyxLQUFLLElBQUksQ0FBQ3FCLG9CQUFvQitCLElBQUksQ0FBQ2MsQ0FBQUEsSUFBS0EsRUFBRWxFLEtBQUssS0FBSzhDLE9BQU85QyxLQUFLLEdBQUc7WUFDNUVpRSxZQUFZRSxJQUFJLENBQUM7Z0JBQUVsRSxPQUFPNkMsT0FBTzlDLEtBQUs7Z0JBQUVBLE9BQU84QyxPQUFPOUMsS0FBSztZQUFDO1FBQzlEO1FBRUEscUJBQ0UsMkRBQUMrQjtZQUFJQyxlQUFZO3lCQUNmLDJEQUFDdkMsK0NBQU1BO1lBQ0xPLE9BQU84QyxPQUFPOUMsS0FBSyxJQUFJO1lBQ3ZCaUMsVUFBVUMsQ0FBQUEsSUFBSzhCLHdCQUF3QjlCLEVBQUVsQyxLQUFLO1lBQzlDNEQsU0FBU0s7WUFDVHpCLE9BQU87WUFDUDRCLGtCQUFBQTs7SUFJUixPQUFPLElBQUl6RSxrREFBb0IsQ0FBQ21ELFNBQVM7UUFDdkMsTUFBTXdCLDRCQUE0QixDQUFDdEU7WUFDakMrQyxlQUFlLHdDQUFLRDtnQkFBUTlDOztRQUM5QjtRQUNBLElBQ0U4QyxPQUFPcEIsSUFBSSxLQUFLLGNBQ2ZvQixDQUFBQSxPQUFPbkIsUUFBUSxLQUFLakMsK0RBQWNBLENBQUNhLE1BQU0sSUFBSXVDLE9BQU9uQixRQUFRLEtBQUtqQywrREFBY0EsQ0FBQ2MsU0FBUyxHQUMxRjtZQUNBLHFCQUNFLDJEQUFDdUI7Z0JBQUlDLGVBQVk7NkJBQ2YsMkRBQUN2QywrQ0FBTUE7Z0JBQUNPLE9BQU84QyxPQUFPOUMsS0FBSztnQkFBRWlDLFVBQVUsQ0FBQ0MsSUFBTW9DLDBCQUEwQnBDLEVBQUVsQyxLQUFLO2dCQUFJNEQsU0FBU1Y7O1FBR2xHO1FBRUEscUJBQ0UsMkRBQUNaO1lBQ0N0QyxPQUFPOEMsT0FBTzlDLEtBQUs7WUFDbkJpQyxVQUFVcUM7WUFDVix5RUFBeUU7WUFDekU3QyxLQUFLcUIsT0FBTzlDLEtBQUs7O0lBR3ZCLE9BQU8sSUFBSUwsaURBQW1CLENBQUNtRCxTQUFTO1FBQ3RDLE1BQU0wQiwyQkFBMkIsQ0FBQ3hFO1lBQ2hDK0MsZUFBZSx3Q0FBS0Q7Z0JBQVE5Qzs7UUFDOUI7UUFDQSxJQUFJOEMsT0FBT3BCLElBQUksS0FBSyxZQUFZO1lBQzlCLHFCQUNFLDJEQUFDSztnQkFBSUMsZUFBWTs2QkFDZiwyREFBQ3pDLG9EQUFXQTtnQkFDVlMsT0FBTzhDLE9BQU85QyxLQUFLO2dCQUNuQjRELFNBQVNWO2dCQUNUakIsVUFBVSxDQUFDQyxJQUFNc0MseUJBQXlCdEMsRUFBRXVDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFMUUsS0FBSzs7UUFJdEU7UUFDQSxxQkFBTywyREFBQ3lDO1lBQTJCekMsT0FBTzhDLE9BQU85QyxLQUFLO1lBQUVpQyxVQUFVdUM7O0lBQ3BFLE9BQU87UUFDTCxxQkFBTztJQUNUO0FBQ0YsRUFBRTtBQUVLLE1BQU1HLGVBQWUsQ0FBQzlDO0lBVTNCLE1BQU0sRUFBRStDLEtBQUssRUFBRTlCLE1BQU0sRUFBRUUsWUFBWUMsVUFBVSxFQUFFRixjQUFjLEVBQUU4QixZQUFZLEVBQUUsR0FBR2hEO0lBQ2hGLE1BQU0sQ0FBQ2lELFFBQVFDLFVBQVUsR0FBRzdGLCtDQUFRQSxDQUFDO0lBQ3JDLE1BQU04RixZQUFZbEMsT0FBT3BCLElBQUksQ0FBQ3VELFVBQVUsQ0FBQztJQUN6QyxNQUFNQyxVQUFVcEYsbUVBQWdCQSxDQUFDK0IsTUFBTXNELFVBQVUsRUFBRUgsWUFBWWxDLE9BQU9yQixHQUFHLEdBQUcsSUFBSUksTUFBTXVELFFBQVEsRUFBRXZELE1BQU13RCxLQUFLO0lBQzNHLE1BQU1DLGdCQUFnQkosUUFBUVQsR0FBRyxDQUFDYyxDQUFBQSxJQUFNO1lBQUV0RixPQUFPc0Y7WUFBR3ZGLE9BQU91RjtRQUFFO0lBQzdELElBQUl6QyxPQUFPMEMsTUFBTSxJQUFJLENBQUNOLFFBQVF6QixRQUFRLENBQUNYLE9BQU8wQyxNQUFNLEdBQUc7UUFDckRGLGNBQWNuQixJQUFJLENBQUM7WUFBRWxFLE9BQU82QyxPQUFPMEMsTUFBTTtZQUFFeEYsT0FBTzhDLE9BQU8wQyxNQUFNO1FBQUM7SUFDbEU7SUFFQSxNQUFNQyxZQUFZO1FBQ2hCLE1BQU1DLFNBQVMsQ0FBQzVDLE9BQU82QyxnQkFBZ0IsSUFBSTFDLFVBQVMsRUFBR3dCLEdBQUcsQ0FBQ3BCLENBQUFBO1lBQ3pELElBQUlwRCxRQUFRb0QsRUFBRXBELEtBQUssSUFBSW9ELEVBQUVDLElBQUk7WUFDN0IsSUFBSUQsRUFBRTNCLElBQUksQ0FBQ3VELFVBQVUsQ0FBQyxRQUFRO2dCQUM1QmhGLFNBQVM7WUFDWDtZQUVBLE9BQU87Z0JBQUVBO2dCQUFPRCxPQUFPcUQsRUFBRUMsSUFBSTtZQUFDO1FBQ2hDO1FBQ0EsdURBQXVEO1FBQ3ZELElBQUlSLENBQUFBLG1CQUFBQSw2QkFBQUEsT0FBUXJCLEdBQUcsS0FBSSxDQUFDaUUsT0FBT3RDLElBQUksQ0FBQyxDQUFDd0MsSUFBTUEsRUFBRTVGLEtBQUssS0FBSzhDLE9BQU9yQixHQUFHLEdBQUc7WUFDOURpRSxPQUFPdkIsSUFBSSxDQUFDO2dCQUFFbEUsT0FBTzZDLE9BQU83QyxLQUFLLElBQUk2QyxPQUFPckIsR0FBRztnQkFBR3pCLE9BQU84QyxPQUFPckIsR0FBRztZQUFFO1FBQ3ZFO1FBQ0EsT0FBT2lFO0lBQ1Q7SUFDQSxNQUFNRywyQkFBMkIsQ0FBQ25FLE9BQU8sUUFBUTtRQUMvQyxJQUFJL0IsaURBQW1CLENBQUMrQixPQUFPO1lBQzdCLE9BQU92QixnQkFBZ0IyQyxNQUFNLENBQUMsQ0FBQ08sSUFBTTtvQkFBQzNELCtEQUFjQSxDQUFDYSxNQUFNO29CQUFFYiwrREFBY0EsQ0FBQ2MsU0FBUztpQkFBQyxDQUFDaUQsUUFBUSxDQUFDSixFQUFFckQsS0FBSztRQUN6RyxPQUFPLElBQUlMLGdEQUFrQixDQUFDK0IsT0FBTztZQUNuQyxPQUFPdkIsZ0JBQWdCMkMsTUFBTSxDQUFDLENBQUNPLElBQzdCO29CQUNFM0QsK0RBQWNBLENBQUNZLFVBQVU7b0JBQ3pCWiwrREFBY0EsQ0FBQ3lCLE1BQU07b0JBQ3JCekIsK0RBQWNBLENBQUMwQixTQUFTO29CQUN4QjFCLCtEQUFjQSxDQUFDYSxNQUFNO29CQUNyQmIsK0RBQWNBLENBQUNjLFNBQVM7b0JBQ3hCZCwrREFBY0EsQ0FBQ2UsUUFBUTtvQkFDdkJmLCtEQUFjQSxDQUFDZ0IsZUFBZTtvQkFDOUJoQiwrREFBY0EsQ0FBQ2lCLFdBQVc7b0JBQzFCakIsK0RBQWNBLENBQUNrQixrQkFBa0I7aUJBQ2xDLENBQUM2QyxRQUFRLENBQUNKLEVBQUVyRCxLQUFLO1FBRXRCLE9BQU8sSUFBSUwsOENBQWdCLENBQUMrQixPQUFPO1lBQ2pDLE9BQU92QixnQkFBZ0IyQyxNQUFNLENBQUMsQ0FBQ08sSUFDN0I7b0JBQ0UzRCwrREFBY0EsQ0FBQ1ksVUFBVTtvQkFDekJaLCtEQUFjQSxDQUFDeUIsTUFBTTtvQkFDckJ6QiwrREFBY0EsQ0FBQzBCLFNBQVM7b0JBQ3hCMUIsK0RBQWNBLENBQUNhLE1BQU07b0JBQ3JCYiwrREFBY0EsQ0FBQ2MsU0FBUztvQkFDeEJkLCtEQUFjQSxDQUFDZSxRQUFRO29CQUN2QmYsK0RBQWNBLENBQUNnQixlQUFlO29CQUM5QmhCLCtEQUFjQSxDQUFDaUIsV0FBVztvQkFDMUJqQiwrREFBY0EsQ0FBQ2tCLGtCQUFrQjtvQkFDakNsQiwrREFBY0EsQ0FBQ1Usc0JBQXNCO29CQUNyQ1YsK0RBQWNBLENBQUNXLHVCQUF1QjtpQkFDdkMsQ0FBQ29ELFFBQVEsQ0FBQ0osRUFBRXJELEtBQUs7UUFFdEIsT0FBTztZQUNMLE9BQU9HLGdCQUFnQjJDLE1BQU0sQ0FBQyxDQUFDTyxJQUM3QjtvQkFDRTNELCtEQUFjQSxDQUFDWSxVQUFVO29CQUN6QlosK0RBQWNBLENBQUNtQixJQUFJO29CQUNuQm5CLCtEQUFjQSxDQUFDb0IsT0FBTztvQkFDdEJwQiwrREFBY0EsQ0FBQ3VCLEVBQUU7b0JBQ2pCdkIsK0RBQWNBLENBQUN3QixLQUFLO29CQUNwQnhCLCtEQUFjQSxDQUFDeUIsTUFBTTtvQkFDckJ6QiwrREFBY0EsQ0FBQzBCLFNBQVM7b0JBQ3hCMUIsK0RBQWNBLENBQUNhLE1BQU07b0JBQ3JCYiwrREFBY0EsQ0FBQ2MsU0FBUztvQkFDeEJkLCtEQUFjQSxDQUFDcUIsT0FBTztvQkFDdEJyQiwrREFBY0EsQ0FBQ3NCLFVBQVU7b0JBQ3pCdEIsK0RBQWNBLENBQUNlLFFBQVE7b0JBQ3ZCZiwrREFBY0EsQ0FBQ2dCLGVBQWU7b0JBQzlCaEIsK0RBQWNBLENBQUNpQixXQUFXO29CQUMxQmpCLCtEQUFjQSxDQUFDa0Isa0JBQWtCO2lCQUNsQyxDQUFDNkMsUUFBUSxDQUFDSixFQUFFckQsS0FBSztRQUV0QjtJQUNGO0lBQ0EsTUFBTWlHLHFCQUFxQixDQUFDQztRQUMxQm5CLFVBQVU7UUFDVixNQUFNb0IsZ0JBQWdCbEQsV0FBV0csSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJLEtBQUs0QztRQUN0RCxNQUFNRSxhQUFhO1lBQ2pCM0UsS0FBSzBFLENBQUFBLDBCQUFBQSxvQ0FBQUEsY0FBZTdDLElBQUksS0FBSTRDO1lBQzVCeEUsTUFBTXlFLENBQUFBLDBCQUFBQSxvQ0FBQUEsY0FBZXpFLElBQUksS0FBSTtZQUM3QnpCLEtBQUssRUFBRWtHLDBCQUFBQSxvQ0FBQUEsY0FBZWxHLEtBQUs7UUFDN0I7UUFFQSxJQUFJb0c7UUFDSiw2Q0FBNkM7UUFDN0MsSUFBSXZELE9BQU82QyxnQkFBZ0IsRUFBRTtZQUMzQlUsWUFBWTtnQkFDVjlFLFlBQVk7Z0JBQ1pFLEtBQUsyRSxXQUFXM0UsR0FBRyxJQUFJcUIsT0FBT3JCLEdBQUc7Z0JBQ2pDQyxNQUFNO2dCQUNORixXQUFXc0IsT0FBT3RCLFNBQVMsSUFBSTtnQkFDL0JHLFVBQVVqQywrREFBY0EsQ0FBQ1Usc0JBQXNCO2dCQUMvQ3VGLGtCQUFrQjdDLE9BQU82QyxnQkFBZ0I7Z0JBQ3pDMUYsT0FBT21HLFdBQVduRyxLQUFLO1lBQ3pCO1FBQ0YsT0FBTyxJQUFJTixpREFBbUIsQ0FBQ3lHLFdBQVcxRSxJQUFJLEdBQUc7WUFDL0MyRSxZQUFZO2dCQUNWOUUsWUFBWTtnQkFDWkUsS0FBSzJFLFdBQVczRSxHQUFHO2dCQUNuQkMsTUFBTTtnQkFDTkYsV0FBV3NCLE9BQU90QixTQUFTLElBQUk7Z0JBQy9CRyxVQUFVakMsK0RBQWNBLENBQUNhLE1BQU07Z0JBQy9CUCxPQUFPO2dCQUNQQyxPQUFPbUcsV0FBV25HLEtBQUs7WUFDekI7UUFDRixPQUFPLElBQUlOLDhDQUFnQixDQUFDeUcsV0FBVzFFLElBQUksR0FBRztZQUM1QzJFLFlBQVk7Z0JBQ1Y5RSxZQUFZO2dCQUNaRSxLQUFLMkUsV0FBVzNFLEdBQUc7Z0JBQ25CQyxNQUFNMEUsV0FBVzFFLElBQUk7Z0JBQ3JCRixXQUFXc0IsT0FBT3RCLFNBQVMsSUFBSTtnQkFDL0JHLFVBQVVqQywrREFBY0EsQ0FBQ2EsTUFBTTtnQkFDL0JQLE9BQU87Z0JBQ1BDLE9BQU9tRyxXQUFXbkcsS0FBSztZQUN6QjtRQUNGLE9BQU87WUFDTG9HLFlBQVk7Z0JBQ1Y5RSxZQUFZO2dCQUNaRSxLQUFLMkUsV0FBVzNFLEdBQUc7Z0JBQ25CQyxNQUFNMEUsV0FBVzFFLElBQUk7Z0JBQ3JCRixXQUFXc0IsT0FBT3RCLFNBQVMsSUFBSTtnQkFDL0JHLFVBQVVqQywrREFBY0EsQ0FBQzBCLFNBQVM7Z0JBQ2xDbkIsT0FBT21HLFdBQVduRyxLQUFLO1lBQ3pCO1FBQ0Y7UUFDQThDLGVBQWU2QixPQUFPeUI7SUFDeEI7SUFDQSxNQUFNQyx1QkFBdUIsQ0FBQ2Q7UUFDNUIsTUFBTWEsWUFBb0IsbUJBQUt2RDtRQUMvQnVELFVBQVViLE1BQU0sR0FBR0E7UUFDbkJ6QyxlQUFlNkIsT0FBT3lCO0lBQ3hCO0lBQ0EsTUFBTUUseUJBQXlCLENBQUM1RTtRQUM5QixNQUFNMEUsWUFBb0IsbUJBQUt2RDtRQUMvQnVELFVBQVUxRSxRQUFRLEdBQUdBO1FBQ3JCLElBQUloQyxpREFBbUIsQ0FBQzBHLFlBQVk7WUFDbEMsSUFBSSxDQUFDRyxNQUFNQyxPQUFPLENBQUNKLFVBQVVyRyxLQUFLLEdBQUc7Z0JBQ25DcUcsVUFBVXJHLEtBQUssR0FBRztvQkFBQ3FHLFVBQVVyRyxLQUFLLElBQUk7aUJBQUc7WUFDM0M7UUFDRjtRQUNBK0MsZUFBZTZCLE9BQU95QjtJQUN4QjtJQUNBLE1BQU1LLDBCQUEwQixDQUFDbEY7UUFDL0IsTUFBTTZFLFlBQW9CLG1CQUFLdkQ7UUFDL0J1RCxVQUFVN0UsU0FBUyxHQUFHQTtRQUN0QnVCLGVBQWU2QixPQUFPeUI7SUFDeEI7SUFDQSxNQUFNTSxzQkFBc0IsQ0FBQzdEO1FBQzNCQyxlQUFlNkIsT0FBTzlCO0lBQ3hCO0lBRUEscUJBQ0UsMkRBQUMxRCx3REFBZUE7UUFBQ3dILE1BQUFBO1FBQUtDLE9BQU07UUFBYUMsU0FBUTtPQUM5Q2xDLFVBQVUsbUJBQ1QsMkRBQUNwRix5REFBZ0JBO1FBQUNvRSxTQUFTMUQ7UUFBWUYsT0FBTzhDLE9BQU90QixTQUFTO1FBQUVTLFVBQVUsQ0FBQ0MsSUFBTXdFLHdCQUF3QnhFO3NCQUUzRywyREFBQ3pDLCtDQUFNQTtRQUNMc0gsVUFBVUMsUUFBUWxFLE9BQU9tRSxJQUFJO1FBQzdCdEUsYUFBYUcsT0FBT21FLElBQUksR0FBR3JILCtDQUFNQSxDQUFDc0gsS0FBSyxDQUFDQyxVQUFVLENBQUNyRSxPQUFPbUUsSUFBSSxDQUFDLEdBQUdHO1FBQ2xFcEgsT0FBTzhDLE9BQU9yQixHQUFHO1FBQ2pCZSxPQUFPO1FBQ1A2RSxXQUFXeEgsMkNBQU1BLENBQUN5SCxNQUFNLENBQUNDLFlBQVk7UUFDckMzRCxTQUFTNkI7UUFDVFgsUUFBUUE7UUFDUjBDLFlBQVksSUFBTXpDLFVBQVU7UUFDNUIwQyxhQUFhLElBQU0xQyxVQUFVO1FBQzdCOUMsVUFBVSxDQUFDQyxJQUFNK0QsbUJBQW1CL0QsRUFBRWxDLEtBQUs7UUFDM0NvRSxrQkFBQUE7UUFDQXNELGVBQWU7UUFFZjFDLDJCQUNBLDJEQUFDdkYsK0NBQU1BO1FBQ0xPLE9BQU84QyxPQUFPMEMsTUFBTTtRQUNwQjdDLGFBQWEvQywrQ0FBTUEsQ0FBQytILFVBQVUsQ0FBQ2hELFlBQVksQ0FBQ2lELGlCQUFpQjtRQUM3RHBGLE9BQU87UUFDUDZFLFdBQVd4SCwyQ0FBTUEsQ0FBQ3lILE1BQU0sQ0FBQ0MsWUFBWTtRQUNyQzNELFNBQVMwQjtRQUNUckQsVUFBVUMsQ0FBQUEsSUFBS29FLHFCQUFxQnBFLEVBQUVsQyxLQUFLO1FBQzNDb0Usa0JBQUFBO1FBQ0FzRCxlQUFlO3NCQUduQiwyREFBQ2pJLCtDQUFNQTtRQUNMTyxPQUFPOEMsT0FBT25CLFFBQVE7UUFDdEJhLE9BQU87UUFDUDZFLFdBQVd4SCwyQ0FBTUEsQ0FBQ3lILE1BQU0sQ0FBQ0MsWUFBWTtRQUNyQzNELFNBQVNpQyx5QkFBeUIvQyxPQUFPcEIsSUFBSTtRQUM3Q08sVUFBVSxDQUFDQyxJQUFNcUUsdUJBQXVCckUsRUFBRWxDLEtBQUs7UUFDL0MwSCxlQUFlO3NCQUVqQiwyREFBQzdFO1FBQWtCQyxRQUFRQTtRQUFRQyxnQkFBZ0I0RDtRQUFxQjNELFlBQVlDO3NCQUNwRiwyREFBQzlELCtDQUFNQTtRQUNMNkMsZUFBWTtRQUNaNkYsTUFBSztRQUNMQyxTQUFRO1FBQ1JDLE1BQUs7UUFDTFYsV0FBV3hILDJDQUFNQSxDQUFDeUgsTUFBTSxDQUFDVSxRQUFRO1FBQ2pDQyxTQUFTLElBQU1wRCxhQUFhRDs7QUFJcEMsRUFBRTtBQUVLLE1BQU1zRCxnQkFBZ0IsQ0FBQ3JHO0lBUTVCLE1BQU0sRUFBRXNHLFVBQVUsRUFBRSxFQUFFQyxlQUFlLEVBQUVwRixZQUFZQyxhQUFhLEVBQUUsRUFBRWtDLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxLQUFLLEVBQUUsR0FBR3hEO0lBQ3BHLE1BQU0sRUFBRTVCLEtBQUssRUFBRW9JLE9BQU8sRUFBRUMsUUFBUSxFQUFFLEdBQUcxSSwrQ0FBTUEsQ0FBQytILFVBQVUsQ0FBQ2hELFlBQVk7SUFDbkUsTUFBTTRELFlBQVk7UUFDaEJILGdCQUFnQjtlQUFJRDtZQUFTLG1CQUFLN0c7U0FBbUI7SUFDdkQ7SUFDQSxNQUFNdUQsZUFBZSxDQUFDRDtRQUNwQixNQUFNNEQsYUFBYTtlQUFJTDtTQUFRO1FBQy9CSyxXQUFXQyxNQUFNLENBQUM3RCxPQUFPO1FBQ3pCd0QsZ0JBQWdCSTtJQUNsQjtJQUNBLE1BQU16RixpQkFBaUIsQ0FBQzZCLE9BQWU5QjtRQUNyQyxNQUFNMEYsYUFBYTtlQUFJTDtTQUFRO1FBQy9CSyxVQUFVLENBQUM1RCxNQUFNLEdBQUc5QjtRQUNwQnNGLGdCQUFnQkk7SUFDbEI7SUFFQSxxQkFDRSwwSEFDR0wsUUFBUU8sTUFBTSxLQUFLLG1CQUNsQiwyREFBQzNHO1FBQUlzRixXQUFVO3FCQUNiLDJEQUFDaEksd0RBQWVBO1FBQUNtRCxPQUFPO1FBQUc2RSxXQUFVO1FBQWdCZ0IsU0FBU0E7T0FDM0RwSSxzQkFFSCwyREFBQ2QsK0NBQU1BO1FBQ0w2QyxlQUFZO1FBQ1o2RixNQUFLO1FBQ0xDLFNBQVE7UUFDUkMsTUFBSztRQUNMVixXQUFXeEgsMkNBQU1BLENBQUN5SCxNQUFNLENBQUNVLFFBQVE7UUFDakNDLFNBQVNNO09BRVJELFlBSU5ILFFBQVExRCxHQUFHLENBQUMsQ0FBQzNCLFFBQVE4QjtRQUNwQixxQkFDRSwyREFBQzdDO1lBQUlzRixXQUFVO1lBQVU1RixLQUFLbUQ7V0FDM0JBLFVBQVUsa0JBQ1QsMkRBQUN2Rix3REFBZUE7WUFBQ21ELE9BQU87WUFBRzZFLFdBQVU7WUFBZ0JnQixTQUFTQTtXQUMzRHBJLHVCQUdILDJEQUFDOEI7WUFBSXNGLFdBQVcsQ0FBQyxRQUFRLEVBQUV4SCwyQ0FBTUEsQ0FBQ3lILE1BQU0sQ0FBQ3FCLFVBQVUsQ0FBQyxDQUFDOzBCQUV2RCwyREFBQ2hFO1lBQ0MzQixZQUFZQztZQUNaSCxRQUFRQTtZQUNSQyxnQkFBZ0JBO1lBQ2hCOEIsY0FBY0E7WUFDZEQsT0FBT0E7WUFDUE8sWUFBWUE7WUFDWkMsVUFBVUE7WUFDVkMsT0FBT0E7O0lBSWYsSUFDQzhDLFFBQVFPLE1BQU0sS0FBSyxtQkFDbEIsMkRBQUMzRztRQUFJc0YsV0FBVTtxQkFDYiwyREFBQ3RGO1FBQUlzRixXQUFXLENBQUMsUUFBUSxFQUFFeEgsMkNBQU1BLENBQUN5SCxNQUFNLENBQUNxQixVQUFVLENBQUMsQ0FBQztzQkFDckQsMkRBQUN4SiwrQ0FBTUE7UUFDTDZDLGVBQVk7UUFDWjZGLE1BQUs7UUFDTEMsU0FBUTtRQUNSQyxNQUFLO1FBQ0xWLFdBQVd4SCwyQ0FBTUEsQ0FBQ3lILE1BQU0sQ0FBQ1UsUUFBUTtRQUNqQ0MsU0FBU007T0FFUkQ7QUFNYixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9GaWx0ZXJFZGl0b3IudHN4P2MzODciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2VsZWN0YWJsZVZhbHVlIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBCdXR0b24sIEhvcml6b250YWxHcm91cCwgSW5saW5lRm9ybUxhYmVsLCBJbnB1dCwgTXVsdGlTZWxlY3QsIFJhZGlvQnV0dG9uR3JvdXAsIFNlbGVjdCB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCB7IEZpbHRlciwgRmlsdGVyT3BlcmF0b3IsIFRhYmxlQ29sdW1uLCBOdWxsRmlsdGVyIH0gZnJvbSAndHlwZXMvcXVlcnlCdWlsZGVyJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJ2NvbXBvbmVudHMvcXVlcnlCdWlsZGVyL3V0aWxzJztcbmltcG9ydCBsYWJlbHMgZnJvbSAnbGFiZWxzJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJ3N0eWxlcyc7XG5pbXBvcnQgeyBEYXRhc291cmNlIH0gZnJvbSAnZGF0YS9DSERhdGFzb3VyY2UnO1xuaW1wb3J0IHVzZVVuaXF1ZU1hcEtleXMgZnJvbSAnaG9va3MvdXNlVW5pcXVlTWFwS2V5cyc7XG5cbmNvbnN0IGJvb2xWYWx1ZXM6IEFycmF5PFNlbGVjdGFibGVWYWx1ZTxib29sZWFuPj4gPSBbXG4gIHsgdmFsdWU6IHRydWUsIGxhYmVsOiAnVHJ1ZScgfSxcbiAgeyB2YWx1ZTogZmFsc2UsIGxhYmVsOiAnRmFsc2UnIH0sXG5dO1xuY29uc3QgY29uZGl0aW9uczogQXJyYXk8U2VsZWN0YWJsZVZhbHVlPCdBTkQnIHwgJ09SJz4+ID0gW1xuICB7IHZhbHVlOiAnQU5EJywgbGFiZWw6ICdBTkQnIH0sXG4gIHsgdmFsdWU6ICdPUicsIGxhYmVsOiAnT1InIH0sXG5dO1xuY29uc3QgZmlsdGVyT3BlcmF0b3JzOiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8RmlsdGVyT3BlcmF0b3I+PiA9IFtcbiAgeyB2YWx1ZTogRmlsdGVyT3BlcmF0b3IuV2l0aEluR3JhZmFuYVRpbWVSYW5nZSwgbGFiZWw6ICdXaXRoaW4gZGFzaGJvYXJkIHRpbWUgcmFuZ2UnIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLk91dHNpZGVHcmFmYW5hVGltZVJhbmdlLCBsYWJlbDogJ091dHNpZGUgZGFzaGJvYXJkIHRpbWUgcmFuZ2UnIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLklzQW55dGhpbmcsIGxhYmVsOiAnSVMgQU5ZVEhJTkcnIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLkVxdWFscywgbGFiZWw6ICc9JyB9LFxuICB7IHZhbHVlOiBGaWx0ZXJPcGVyYXRvci5Ob3RFcXVhbHMsIGxhYmVsOiAnIT0nIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLkxlc3NUaGFuLCBsYWJlbDogJzwnIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLkxlc3NUaGFuT3JFcXVhbCwgbGFiZWw6ICc8PScgfSxcbiAgeyB2YWx1ZTogRmlsdGVyT3BlcmF0b3IuR3JlYXRlclRoYW4sIGxhYmVsOiAnPicgfSxcbiAgeyB2YWx1ZTogRmlsdGVyT3BlcmF0b3IuR3JlYXRlclRoYW5PckVxdWFsLCBsYWJlbDogJz49JyB9LFxuICB7IHZhbHVlOiBGaWx0ZXJPcGVyYXRvci5MaWtlLCBsYWJlbDogJ0xJS0UnIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLk5vdExpa2UsIGxhYmVsOiAnTk9UIExJS0UnIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLklzRW1wdHksIGxhYmVsOiAnSVMgRU1QVFknIH0sXG4gIHsgdmFsdWU6IEZpbHRlck9wZXJhdG9yLklzTm90RW1wdHksIGxhYmVsOiAnSVMgTk9UIEVNUFRZJyB9LFxuICB7IHZhbHVlOiBGaWx0ZXJPcGVyYXRvci5JbiwgbGFiZWw6ICdJTicgfSxcbiAgeyB2YWx1ZTogRmlsdGVyT3BlcmF0b3IuTm90SW4sIGxhYmVsOiAnTk9UIElOJyB9LFxuICB7IHZhbHVlOiBGaWx0ZXJPcGVyYXRvci5Jc051bGwsIGxhYmVsOiAnSVMgTlVMTCcgfSxcbiAgeyB2YWx1ZTogRmlsdGVyT3BlcmF0b3IuSXNOb3ROdWxsLCBsYWJlbDogJ0lTIE5PVCBOVUxMJyB9LFxuXTtcbmNvbnN0IHN0YW5kYXJkVGltZU9wdGlvbnM6IEFycmF5PFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+PiA9IFtcbiAgeyB2YWx1ZTogJ3RvZGF5KCknLCBsYWJlbDogJ1RPREFZJyB9LFxuICB7IHZhbHVlOiAneWVzdGVyZGF5KCknLCBsYWJlbDogJ1lFU1RFUkRBWScgfSxcbiAgeyB2YWx1ZTogJ25vdygpJywgbGFiZWw6ICdOT1cnIH0sXG4gIHsgdmFsdWU6ICdHUkFGQU5BX1NUQVJUX1RJTUUnLCBsYWJlbDogJ0RBU0hCT0FSRCBTVEFSVCBUSU1FJyB9LFxuICB7IHZhbHVlOiAnR1JBRkFOQV9FTkRfVElNRScsIGxhYmVsOiAnREFTSEJPQVJEIEVORCBUSU1FJyB9LFxuXTtcbmV4cG9ydCBjb25zdCBkZWZhdWx0TmV3RmlsdGVyOiBOdWxsRmlsdGVyID0ge1xuICBmaWx0ZXJUeXBlOiAnY3VzdG9tJyxcbiAgY29uZGl0aW9uOiAnQU5EJyxcbiAga2V5OiAnJyxcbiAgdHlwZTogJycsXG4gIG9wZXJhdG9yOiBGaWx0ZXJPcGVyYXRvci5Jc0FueXRoaW5nLFxufTtcbmV4cG9ydCBpbnRlcmZhY2UgUHJlZGVmaW5lZEZpbHRlciB7XG4gIHJlc3RyaWN0VG9GaWVsZHM/OiByZWFkb25seSBUYWJsZUNvbHVtbltdO1xufVxuXG5jb25zdCBGaWx0ZXJWYWx1ZU51bWJlckl0ZW0gPSAocHJvcHM6IHsgdmFsdWU6IG51bWJlcjsgb25DaGFuZ2U6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkIH0pID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZShwcm9wcy52YWx1ZSB8fCAwKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGRhdGEtdGVzdGlkPVwicXVlcnktYnVpbGRlci1maWx0ZXJzLW51bWJlci12YWx1ZS1jb250YWluZXJcIj5cbiAgICAgIDxJbnB1dFxuICAgICAgICBkYXRhLXRlc3RpZD1cInF1ZXJ5LWJ1aWxkZXItZmlsdGVycy1udW1iZXItdmFsdWUtaW5wdXRcIlxuICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFZhbHVlKGUuY3VycmVudFRhcmdldC52YWx1ZUFzTnVtYmVyIHx8IDApfVxuICAgICAgICBvbkJsdXI9eygpID0+IHByb3BzLm9uQ2hhbmdlKHZhbHVlKX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBGaWx0ZXJWYWx1ZVNpbmdsZVN0cmluZ0l0ZW0gPSAocHJvcHM6IHsgdmFsdWU6IHN0cmluZzsgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGRhdGEtdGVzdGlkPVwicXVlcnktYnVpbGRlci1maWx0ZXJzLXNpbmdsZS1zdHJpbmctdmFsdWUtY29udGFpbmVyXCI+XG4gICAgICA8SW5wdXRcbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJxdWVyeS1idWlsZGVyLWZpbHRlcnMtc2luZ2xlLXN0cmluZy12YWx1ZS1pbnB1dFwiXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgZGVmYXVsdFZhbHVlPXtwcm9wcy52YWx1ZX1cbiAgICAgICAgd2lkdGg9ezcwfVxuICAgICAgICBvbkJsdXI9eyhlKSA9PiBwcm9wcy5vbkNoYW5nZShlLmN1cnJlbnRUYXJnZXQudmFsdWUpfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEZpbHRlclZhbHVlTXVsdGlTdHJpbmdJdGVtID0gKHByb3BzOiB7IHZhbHVlOiBzdHJpbmdbXTsgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nW10pID0+IHZvaWQgfSkgPT4ge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlKHByb3BzLnZhbHVlIHx8IFtdKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGRhdGEtdGVzdGlkPVwicXVlcnktYnVpbGRlci1maWx0ZXJzLW11bHRpLXN0cmluZy12YWx1ZS1jb250YWluZXJcIj5cbiAgICAgIDxJbnB1dFxuICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgIHZhbHVlPXt2YWx1ZS5qb2luKCcsJyl9XG4gICAgICAgIHBsYWNlaG9sZGVyPVwiY29tbWEgc2VwYXJhdGVkIHZhbHVlc1wiXG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0VmFsdWUoKGUuY3VycmVudFRhcmdldC52YWx1ZSB8fCAnJykuc3BsaXQoJywnKSl9XG4gICAgICAgIG9uQmx1cj17KCkgPT4gcHJvcHMub25DaGFuZ2UodmFsdWUpfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBGaWx0ZXJWYWx1ZUVkaXRvciA9IChwcm9wczoge1xuICBhbGxDb2x1bW5zOiByZWFkb25seSBUYWJsZUNvbHVtbltdO1xuICBmaWx0ZXI6IEZpbHRlcjtcbiAgb25GaWx0ZXJDaGFuZ2U6IChmaWx0ZXI6IEZpbHRlcikgPT4gdm9pZDtcbn0pID0+IHtcbiAgY29uc3QgeyBmaWx0ZXIsIG9uRmlsdGVyQ2hhbmdlLCBhbGxDb2x1bW5zOiBmaWVsZHNMaXN0IH0gPSBwcm9wcztcbiAgY29uc3QgZ2V0T3B0aW9ucyA9ICgpID0+IHtcbiAgICBjb25zdCBtYXRjaGVkRmlsdGVyID0gZmllbGRzTGlzdC5maW5kKChmKSA9PiBmLm5hbWUgPT09IGZpbHRlci5rZXkpO1xuICAgIHJldHVybiBtYXRjaGVkRmlsdGVyPy5waWNrbGlzdFZhbHVlcyB8fCBbXTtcbiAgfTtcbiAgaWYgKHV0aWxzLmlzTnVsbEZpbHRlcihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIDw+PC8+O1xuICB9IGVsc2UgaWYgKFtGaWx0ZXJPcGVyYXRvci5Jc0FueXRoaW5nLCBGaWx0ZXJPcGVyYXRvci5Jc0VtcHR5LCBGaWx0ZXJPcGVyYXRvci5Jc05vdEVtcHR5XS5pbmNsdWRlcyhmaWx0ZXIub3BlcmF0b3IpKSB7XG4gICAgcmV0dXJuIDw+PC8+O1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzQm9vbGVhbkZpbHRlcihmaWx0ZXIpKSB7XG4gICAgY29uc3Qgb25Cb29sRmlsdGVyVmFsdWVDaGFuZ2UgPSAodmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIG9uRmlsdGVyQ2hhbmdlKHsgLi4uZmlsdGVyLCB2YWx1ZSB9KTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwicXVlcnktYnVpbGRlci1maWx0ZXJzLWJvb2xlYW4tdmFsdWUtY29udGFpbmVyXCI+XG4gICAgICAgIDxSYWRpb0J1dHRvbkdyb3VwIG9wdGlvbnM9e2Jvb2xWYWx1ZXN9IHZhbHVlPXtmaWx0ZXIudmFsdWV9IG9uQ2hhbmdlPXsoZSkgPT4gb25Cb29sRmlsdGVyVmFsdWVDaGFuZ2UoZSEpfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc051bWJlckZpbHRlcihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIDxGaWx0ZXJWYWx1ZU51bWJlckl0ZW0gdmFsdWU9e2ZpbHRlci52YWx1ZX0gb25DaGFuZ2U9eyh2YWx1ZSkgPT4gb25GaWx0ZXJDaGFuZ2UoeyAuLi5maWx0ZXIsIHZhbHVlIH0pfSAvPjtcbiAgfSBlbHNlIGlmICh1dGlscy5pc0RhdGVGaWx0ZXIoZmlsdGVyKSkge1xuICAgIGlmICh1dGlscy5pc0RhdGVGaWx0ZXJXaXRoT3V0VmFsdWUoZmlsdGVyKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qgb25EYXRlRmlsdGVyVmFsdWVDaGFuZ2UgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgb25GaWx0ZXJDaGFuZ2UoeyAuLi5maWx0ZXIsIHZhbHVlIH0pO1xuICAgIH07XG4gICAgY29uc3QgZGF0ZU9wdGlvbnMgPSBbLi4uc3RhbmRhcmRUaW1lT3B0aW9uc107XG4gICAgaWYgKGZpbHRlci52YWx1ZSAmJiAhc3RhbmRhcmRUaW1lT3B0aW9ucy5maW5kKG8gPT4gby52YWx1ZSA9PT0gZmlsdGVyLnZhbHVlKSkge1xuICAgICAgZGF0ZU9wdGlvbnMucHVzaCh7IGxhYmVsOiBmaWx0ZXIudmFsdWUsIHZhbHVlOiBmaWx0ZXIudmFsdWUgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJxdWVyeS1idWlsZGVyLWZpbHRlcnMtZGF0ZS12YWx1ZS1jb250YWluZXJcIj5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIHZhbHVlPXtmaWx0ZXIudmFsdWUgfHwgJ1RPREFZJ31cbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiBvbkRhdGVGaWx0ZXJWYWx1ZUNoYW5nZShlLnZhbHVlISl9XG4gICAgICAgICAgb3B0aW9ucz17ZGF0ZU9wdGlvbnN9XG4gICAgICAgICAgd2lkdGg9ezQwfVxuICAgICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNTdHJpbmdGaWx0ZXIoZmlsdGVyKSkge1xuICAgIGNvbnN0IG9uU3RyaW5nRmlsdGVyVmFsdWVDaGFuZ2UgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgb25GaWx0ZXJDaGFuZ2UoeyAuLi5maWx0ZXIsIHZhbHVlIH0pO1xuICAgIH07XG4gICAgaWYgKFxuICAgICAgZmlsdGVyLnR5cGUgPT09ICdwaWNrbGlzdCcgJiZcbiAgICAgIChmaWx0ZXIub3BlcmF0b3IgPT09IEZpbHRlck9wZXJhdG9yLkVxdWFscyB8fCBmaWx0ZXIub3BlcmF0b3IgPT09IEZpbHRlck9wZXJhdG9yLk5vdEVxdWFscylcbiAgICApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJxdWVyeS1idWlsZGVyLWZpbHRlcnMtc2luZ2xlLXBpY2tsaXN0LXZhbHVlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxTZWxlY3QgdmFsdWU9e2ZpbHRlci52YWx1ZX0gb25DaGFuZ2U9eyhlKSA9PiBvblN0cmluZ0ZpbHRlclZhbHVlQ2hhbmdlKGUudmFsdWUhKX0gb3B0aW9ucz17Z2V0T3B0aW9ucygpfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxGaWx0ZXJWYWx1ZVNpbmdsZVN0cmluZ0l0ZW1cbiAgICAgICAgdmFsdWU9e2ZpbHRlci52YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9e29uU3RyaW5nRmlsdGVyVmFsdWVDaGFuZ2V9XG4gICAgICAgIC8vIGVuZm9yY2UgaW5wdXQgcmUtcmVuZGVyIHdoZW4gZmlsdGVyIGNoYW5nZXMgdG8gYXZvaWQgc3RhbGUgaW5wdXQgdmFsdWVcbiAgICAgICAga2V5PXtmaWx0ZXIudmFsdWV9XG4gICAgICAvPlxuICAgICk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNNdWx0aUZpbHRlcihmaWx0ZXIpKSB7XG4gICAgY29uc3Qgb25NdWx0aUZpbHRlclZhbHVlQ2hhbmdlID0gKHZhbHVlOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgb25GaWx0ZXJDaGFuZ2UoeyAuLi5maWx0ZXIsIHZhbHVlIH0pO1xuICAgIH07XG4gICAgaWYgKGZpbHRlci50eXBlID09PSAncGlja2xpc3QnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwicXVlcnktYnVpbGRlci1maWx0ZXJzLW11bHRpLXBpY2tsaXN0LXZhbHVlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxNdWx0aVNlbGVjdFxuICAgICAgICAgICAgdmFsdWU9e2ZpbHRlci52YWx1ZX1cbiAgICAgICAgICAgIG9wdGlvbnM9e2dldE9wdGlvbnMoKX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25NdWx0aUZpbHRlclZhbHVlQ2hhbmdlKGUubWFwKCh2KSA9PiB2LnZhbHVlISkpfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIDxGaWx0ZXJWYWx1ZU11bHRpU3RyaW5nSXRlbSB2YWx1ZT17ZmlsdGVyLnZhbHVlfSBvbkNoYW5nZT17b25NdWx0aUZpbHRlclZhbHVlQ2hhbmdlfSAvPjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gPD48Lz47XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBGaWx0ZXJFZGl0b3IgPSAocHJvcHM6IHtcbiAgYWxsQ29sdW1uczogcmVhZG9ubHkgVGFibGVDb2x1bW5bXTtcbiAgaW5kZXg6IG51bWJlcjtcbiAgZmlsdGVyOiBGaWx0ZXIgJiBQcmVkZWZpbmVkRmlsdGVyO1xuICBvbkZpbHRlckNoYW5nZTogKGluZGV4OiBudW1iZXIsIGZpbHRlcjogRmlsdGVyKSA9PiB2b2lkO1xuICByZW1vdmVGaWx0ZXI6IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xuICBkYXRhc291cmNlOiBEYXRhc291cmNlO1xuICBkYXRhYmFzZTogc3RyaW5nO1xuICB0YWJsZTogc3RyaW5nO1xufSkgPT4ge1xuICBjb25zdCB7IGluZGV4LCBmaWx0ZXIsIGFsbENvbHVtbnM6IGZpZWxkc0xpc3QsIG9uRmlsdGVyQ2hhbmdlLCByZW1vdmVGaWx0ZXIgfSA9IHByb3BzO1xuICBjb25zdCBbaXNPcGVuLCBzZXRJc09wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBpc01hcFR5cGUgPSBmaWx0ZXIudHlwZS5zdGFydHNXaXRoKCdNYXAnKTtcbiAgY29uc3QgbWFwS2V5cyA9IHVzZVVuaXF1ZU1hcEtleXMocHJvcHMuZGF0YXNvdXJjZSwgaXNNYXBUeXBlID8gZmlsdGVyLmtleSA6ICcnLCBwcm9wcy5kYXRhYmFzZSwgcHJvcHMudGFibGUpO1xuICBjb25zdCBtYXBLZXlPcHRpb25zID0gbWFwS2V5cy5tYXAoayA9PiAoeyBsYWJlbDogaywgdmFsdWU6IGsgfSkpO1xuICBpZiAoZmlsdGVyLm1hcEtleSAmJiAhbWFwS2V5cy5pbmNsdWRlcyhmaWx0ZXIubWFwS2V5KSkge1xuICAgIG1hcEtleU9wdGlvbnMucHVzaCh7IGxhYmVsOiBmaWx0ZXIubWFwS2V5LCB2YWx1ZTogZmlsdGVyLm1hcEtleSB9KTtcbiAgfVxuXG4gIGNvbnN0IGdldEZpZWxkcyA9ICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZXMgPSAoZmlsdGVyLnJlc3RyaWN0VG9GaWVsZHMgfHwgZmllbGRzTGlzdCkubWFwKGYgPT4ge1xuICAgICAgbGV0IGxhYmVsID0gZi5sYWJlbCB8fCBmLm5hbWU7XG4gICAgICBpZiAoZi50eXBlLnN0YXJ0c1dpdGgoJ01hcCcpKSB7XG4gICAgICAgIGxhYmVsICs9ICdbXSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IGxhYmVsLCB2YWx1ZTogZi5uYW1lIH07XG4gICAgfSk7XG4gICAgLy8gQWRkIHNlbGVjdGVkIHZhbHVlIHRvIHRoZSBsaXN0IGlmIGl0IGRvZXMgbm90IGV4aXN0LlxuICAgIGlmIChmaWx0ZXI/LmtleSAmJiAhdmFsdWVzLmZpbmQoKHgpID0+IHgudmFsdWUgPT09IGZpbHRlci5rZXkpKSB7XG4gICAgICB2YWx1ZXMucHVzaCh7IGxhYmVsOiBmaWx0ZXIubGFiZWwgfHwgZmlsdGVyLmtleSEsIHZhbHVlOiBmaWx0ZXIua2V5ISB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcbiAgY29uc3QgZ2V0RmlsdGVyT3BlcmF0b3JzQnlUeXBlID0gKHR5cGUgPSAnc3RyaW5nJyk6IEFycmF5PFNlbGVjdGFibGVWYWx1ZTxGaWx0ZXJPcGVyYXRvcj4+ID0+IHtcbiAgICBpZiAodXRpbHMuaXNCb29sZWFuVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGZpbHRlck9wZXJhdG9ycy5maWx0ZXIoKGYpID0+IFtGaWx0ZXJPcGVyYXRvci5FcXVhbHMsIEZpbHRlck9wZXJhdG9yLk5vdEVxdWFsc10uaW5jbHVkZXMoZi52YWx1ZSEpKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzTnVtYmVyVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGZpbHRlck9wZXJhdG9ycy5maWx0ZXIoKGYpID0+XG4gICAgICAgIFtcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Jc0FueXRoaW5nLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLklzTnVsbCxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Jc05vdE51bGwsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuRXF1YWxzLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLk5vdEVxdWFscyxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5MZXNzVGhhbixcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5MZXNzVGhhbk9yRXF1YWwsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuR3JlYXRlclRoYW4sXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuR3JlYXRlclRoYW5PckVxdWFsLFxuICAgICAgICBdLmluY2x1ZGVzKGYudmFsdWUhKVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzRGF0ZVR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBmaWx0ZXJPcGVyYXRvcnMuZmlsdGVyKChmKSA9PlxuICAgICAgICBbXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuSXNBbnl0aGluZyxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Jc051bGwsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuSXNOb3ROdWxsLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkVxdWFscyxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Ob3RFcXVhbHMsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuTGVzc1RoYW4sXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuTGVzc1RoYW5PckVxdWFsLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkdyZWF0ZXJUaGFuLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkdyZWF0ZXJUaGFuT3JFcXVhbCxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5XaXRoSW5HcmFmYW5hVGltZVJhbmdlLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLk91dHNpZGVHcmFmYW5hVGltZVJhbmdlLFxuICAgICAgICBdLmluY2x1ZGVzKGYudmFsdWUhKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbHRlck9wZXJhdG9ycy5maWx0ZXIoKGYpID0+XG4gICAgICAgIFtcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Jc0FueXRoaW5nLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkxpa2UsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuTm90TGlrZSxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5JbixcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Ob3RJbixcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Jc051bGwsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuSXNOb3ROdWxsLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkVxdWFscyxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Ob3RFcXVhbHMsXG4gICAgICAgICAgRmlsdGVyT3BlcmF0b3IuSXNFbXB0eSxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5Jc05vdEVtcHR5LFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkxlc3NUaGFuLFxuICAgICAgICAgIEZpbHRlck9wZXJhdG9yLkxlc3NUaGFuT3JFcXVhbCxcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5HcmVhdGVyVGhhbixcbiAgICAgICAgICBGaWx0ZXJPcGVyYXRvci5HcmVhdGVyVGhhbk9yRXF1YWwsXG4gICAgICAgIF0uaW5jbHVkZXMoZi52YWx1ZSEpXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25GaWx0ZXJOYW1lQ2hhbmdlID0gKGZpZWxkTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgc2V0SXNPcGVuKGZhbHNlKTtcbiAgICBjb25zdCBtYXRjaGluZ0ZpZWxkID0gZmllbGRzTGlzdC5maW5kKGYgPT4gZi5uYW1lID09PSBmaWVsZE5hbWUpO1xuICAgIGNvbnN0IGZpbHRlckRhdGEgPSB7XG4gICAgICBrZXk6IG1hdGNoaW5nRmllbGQ/Lm5hbWUgfHwgZmllbGROYW1lLFxuICAgICAgdHlwZTogbWF0Y2hpbmdGaWVsZD8udHlwZSB8fCAnU3RyaW5nJyxcbiAgICAgIGxhYmVsOiBtYXRjaGluZ0ZpZWxkPy5sYWJlbCxcbiAgICB9O1xuXG4gICAgbGV0IG5ld0ZpbHRlcjogRmlsdGVyICYgUHJlZGVmaW5lZEZpbHRlcjtcbiAgICAvLyB0aGlzIGlzIGFuIGF1dG8tZ2VuZXJhdGVkIFRpbWVSYW5nZSBmaWx0ZXJcbiAgICBpZiAoZmlsdGVyLnJlc3RyaWN0VG9GaWVsZHMpIHtcbiAgICAgIG5ld0ZpbHRlciA9IHtcbiAgICAgICAgZmlsdGVyVHlwZTogJ2N1c3RvbScsXG4gICAgICAgIGtleTogZmlsdGVyRGF0YS5rZXkgfHwgZmlsdGVyLmtleSxcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgY29uZGl0aW9uOiBmaWx0ZXIuY29uZGl0aW9uIHx8ICdBTkQnLFxuICAgICAgICBvcGVyYXRvcjogRmlsdGVyT3BlcmF0b3IuV2l0aEluR3JhZmFuYVRpbWVSYW5nZSxcbiAgICAgICAgcmVzdHJpY3RUb0ZpZWxkczogZmlsdGVyLnJlc3RyaWN0VG9GaWVsZHMsXG4gICAgICAgIGxhYmVsOiBmaWx0ZXJEYXRhLmxhYmVsLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQm9vbGVhblR5cGUoZmlsdGVyRGF0YS50eXBlKSkge1xuICAgICAgbmV3RmlsdGVyID0ge1xuICAgICAgICBmaWx0ZXJUeXBlOiAnY3VzdG9tJyxcbiAgICAgICAga2V5OiBmaWx0ZXJEYXRhLmtleSxcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBjb25kaXRpb246IGZpbHRlci5jb25kaXRpb24gfHwgJ0FORCcsXG4gICAgICAgIG9wZXJhdG9yOiBGaWx0ZXJPcGVyYXRvci5FcXVhbHMsXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6IGZpbHRlckRhdGEubGFiZWwsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNEYXRlVHlwZShmaWx0ZXJEYXRhLnR5cGUpKSB7XG4gICAgICBuZXdGaWx0ZXIgPSB7XG4gICAgICAgIGZpbHRlclR5cGU6ICdjdXN0b20nLFxuICAgICAgICBrZXk6IGZpbHRlckRhdGEua2V5LFxuICAgICAgICB0eXBlOiBmaWx0ZXJEYXRhLnR5cGUgYXMgJ2RhdGUnLFxuICAgICAgICBjb25kaXRpb246IGZpbHRlci5jb25kaXRpb24gfHwgJ0FORCcsXG4gICAgICAgIG9wZXJhdG9yOiBGaWx0ZXJPcGVyYXRvci5FcXVhbHMsXG4gICAgICAgIHZhbHVlOiAnVE9EQVknLFxuICAgICAgICBsYWJlbDogZmlsdGVyRGF0YS5sYWJlbCxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0ZpbHRlciA9IHtcbiAgICAgICAgZmlsdGVyVHlwZTogJ2N1c3RvbScsXG4gICAgICAgIGtleTogZmlsdGVyRGF0YS5rZXksXG4gICAgICAgIHR5cGU6IGZpbHRlckRhdGEudHlwZSxcbiAgICAgICAgY29uZGl0aW9uOiBmaWx0ZXIuY29uZGl0aW9uIHx8ICdBTkQnLFxuICAgICAgICBvcGVyYXRvcjogRmlsdGVyT3BlcmF0b3IuSXNOb3ROdWxsLFxuICAgICAgICBsYWJlbDogZmlsdGVyRGF0YS5sYWJlbCxcbiAgICAgIH07XG4gICAgfVxuICAgIG9uRmlsdGVyQ2hhbmdlKGluZGV4LCBuZXdGaWx0ZXIpO1xuICB9O1xuICBjb25zdCBvbkZpbHRlck1hcEtleUNoYW5nZSA9IChtYXBLZXk6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IG5ld0ZpbHRlcjogRmlsdGVyID0geyAuLi5maWx0ZXIgfTtcbiAgICBuZXdGaWx0ZXIubWFwS2V5ID0gbWFwS2V5O1xuICAgIG9uRmlsdGVyQ2hhbmdlKGluZGV4LCBuZXdGaWx0ZXIpO1xuICB9O1xuICBjb25zdCBvbkZpbHRlck9wZXJhdG9yQ2hhbmdlID0gKG9wZXJhdG9yOiBGaWx0ZXJPcGVyYXRvcikgPT4ge1xuICAgIGNvbnN0IG5ld0ZpbHRlcjogRmlsdGVyID0geyAuLi5maWx0ZXIgfTtcbiAgICBuZXdGaWx0ZXIub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICBpZiAodXRpbHMuaXNNdWx0aUZpbHRlcihuZXdGaWx0ZXIpKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3RmlsdGVyLnZhbHVlKSkge1xuICAgICAgICBuZXdGaWx0ZXIudmFsdWUgPSBbbmV3RmlsdGVyLnZhbHVlIHx8ICcnXTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25GaWx0ZXJDaGFuZ2UoaW5kZXgsIG5ld0ZpbHRlcik7XG4gIH07XG4gIGNvbnN0IG9uRmlsdGVyQ29uZGl0aW9uQ2hhbmdlID0gKGNvbmRpdGlvbjogJ0FORCcgfCAnT1InKSA9PiB7XG4gICAgY29uc3QgbmV3RmlsdGVyOiBGaWx0ZXIgPSB7IC4uLmZpbHRlciB9O1xuICAgIG5ld0ZpbHRlci5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgb25GaWx0ZXJDaGFuZ2UoaW5kZXgsIG5ld0ZpbHRlcik7XG4gIH07XG4gIGNvbnN0IG9uRmlsdGVyVmFsdWVDaGFuZ2UgPSAoZmlsdGVyOiBGaWx0ZXIpID0+IHtcbiAgICBvbkZpbHRlckNoYW5nZShpbmRleCwgZmlsdGVyKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxIb3Jpem9udGFsR3JvdXAgd3JhcCBhbGlnbj1cImZsZXgtc3RhcnRcIiBqdXN0aWZ5PVwiZmxleC1zdGFydFwiPlxuICAgICAge2luZGV4ICE9PSAwICYmIChcbiAgICAgICAgPFJhZGlvQnV0dG9uR3JvdXAgb3B0aW9ucz17Y29uZGl0aW9uc30gdmFsdWU9e2ZpbHRlci5jb25kaXRpb259IG9uQ2hhbmdlPXsoZSkgPT4gb25GaWx0ZXJDb25kaXRpb25DaGFuZ2UoZSEpfSAvPlxuICAgICAgKX1cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgZGlzYWJsZWQ9e0Jvb2xlYW4oZmlsdGVyLmhpbnQpfVxuICAgICAgICBwbGFjZWhvbGRlcj17ZmlsdGVyLmhpbnQgPyBsYWJlbHMudHlwZXMuQ29sdW1uSGludFtmaWx0ZXIuaGludF0gOiB1bmRlZmluZWR9XG4gICAgICAgIHZhbHVlPXtmaWx0ZXIua2V5fVxuICAgICAgICB3aWR0aD17NDB9XG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLkNvbW1vbi5pbmxpbmVTZWxlY3R9XG4gICAgICAgIG9wdGlvbnM9e2dldEZpZWxkcygpfVxuICAgICAgICBpc09wZW49e2lzT3Blbn1cbiAgICAgICAgb25PcGVuTWVudT17KCkgPT4gc2V0SXNPcGVuKHRydWUpfVxuICAgICAgICBvbkNsb3NlTWVudT17KCkgPT4gc2V0SXNPcGVuKGZhbHNlKX1cbiAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkZpbHRlck5hbWVDaGFuZ2UoZS52YWx1ZSEpfVxuICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAgIG1lbnVQbGFjZW1lbnQ9eydib3R0b20nfVxuICAgICAgLz5cbiAgICAgIHsgaXNNYXBUeXBlICYmXG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICB2YWx1ZT17ZmlsdGVyLm1hcEtleX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj17bGFiZWxzLmNvbXBvbmVudHMuRmlsdGVyRWRpdG9yLm1hcEtleVBsYWNlaG9sZGVyfVxuICAgICAgICAgIHdpZHRoPXs0MH1cbiAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5Db21tb24uaW5saW5lU2VsZWN0fVxuICAgICAgICAgIG9wdGlvbnM9e21hcEtleU9wdGlvbnN9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25GaWx0ZXJNYXBLZXlDaGFuZ2UoZS52YWx1ZSEpfVxuICAgICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgICAgICBtZW51UGxhY2VtZW50PXsnYm90dG9tJ31cbiAgICAgICAgLz4gIFxuICAgICAgfVxuICAgICAgPFNlbGVjdFxuICAgICAgICB2YWx1ZT17ZmlsdGVyLm9wZXJhdG9yfVxuICAgICAgICB3aWR0aD17NDB9XG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLkNvbW1vbi5pbmxpbmVTZWxlY3R9XG4gICAgICAgIG9wdGlvbnM9e2dldEZpbHRlck9wZXJhdG9yc0J5VHlwZShmaWx0ZXIudHlwZSl9XG4gICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25GaWx0ZXJPcGVyYXRvckNoYW5nZShlLnZhbHVlISl9XG4gICAgICAgIG1lbnVQbGFjZW1lbnQ9eydib3R0b20nfVxuICAgICAgLz5cbiAgICAgIDxGaWx0ZXJWYWx1ZUVkaXRvciBmaWx0ZXI9e2ZpbHRlcn0gb25GaWx0ZXJDaGFuZ2U9e29uRmlsdGVyVmFsdWVDaGFuZ2V9IGFsbENvbHVtbnM9e2ZpZWxkc0xpc3R9IC8+XG4gICAgICA8QnV0dG9uXG4gICAgICAgIGRhdGEtdGVzdGlkPVwicXVlcnktYnVpbGRlci1maWx0ZXJzLXJlbW92ZS1idXR0b25cIlxuICAgICAgICBpY29uPVwidHJhc2gtYWx0XCJcbiAgICAgICAgdmFyaWFudD1cImRlc3RydWN0aXZlXCJcbiAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuQ29tbW9uLnNtYWxsQnRufVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVGaWx0ZXIoaW5kZXgpfVxuICAgICAgLz5cbiAgICA8L0hvcml6b250YWxHcm91cD5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBGaWx0ZXJzRWRpdG9yID0gKHByb3BzOiB7XG4gIGFsbENvbHVtbnM6IHJlYWRvbmx5IFRhYmxlQ29sdW1uW107XG4gIGZpbHRlcnM6IEZpbHRlcltdO1xuICBvbkZpbHRlcnNDaGFuZ2U6IChmaWx0ZXJzOiBGaWx0ZXJbXSkgPT4gdm9pZDtcbiAgZGF0YXNvdXJjZTogRGF0YXNvdXJjZTtcbiAgZGF0YWJhc2U6IHN0cmluZztcbiAgdGFibGU6IHN0cmluZztcbn0pID0+IHtcbiAgY29uc3QgeyBmaWx0ZXJzID0gW10sIG9uRmlsdGVyc0NoYW5nZSwgYWxsQ29sdW1uczogZmllbGRzTGlzdCA9IFtdLCBkYXRhc291cmNlLCBkYXRhYmFzZSwgdGFibGUgfSA9IHByb3BzO1xuICBjb25zdCB7IGxhYmVsLCB0b29sdGlwLCBhZGRMYWJlbCB9ID0gbGFiZWxzLmNvbXBvbmVudHMuRmlsdGVyRWRpdG9yO1xuICBjb25zdCBhZGRGaWx0ZXIgPSAoKSA9PiB7XG4gICAgb25GaWx0ZXJzQ2hhbmdlKFsuLi5maWx0ZXJzLCB7IC4uLmRlZmF1bHROZXdGaWx0ZXIgfV0pO1xuICB9O1xuICBjb25zdCByZW1vdmVGaWx0ZXIgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IG5ld0ZpbHRlcnMgPSBbLi4uZmlsdGVyc107XG4gICAgbmV3RmlsdGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIG9uRmlsdGVyc0NoYW5nZShuZXdGaWx0ZXJzKTtcbiAgfTtcbiAgY29uc3Qgb25GaWx0ZXJDaGFuZ2UgPSAoaW5kZXg6IG51bWJlciwgZmlsdGVyOiBGaWx0ZXIpID0+IHtcbiAgICBjb25zdCBuZXdGaWx0ZXJzID0gWy4uLmZpbHRlcnNdO1xuICAgIG5ld0ZpbHRlcnNbaW5kZXhdID0gZmlsdGVyO1xuICAgIG9uRmlsdGVyc0NoYW5nZShuZXdGaWx0ZXJzKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7ZmlsdGVycy5sZW5ndGggPT09IDAgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXs4fSBjbGFzc05hbWU9XCJxdWVyeS1rZXl3b3JkXCIgdG9vbHRpcD17dG9vbHRpcH0+XG4gICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJxdWVyeS1idWlsZGVyLWZpbHRlcnMtYWRkLWJ1dHRvblwiXG4gICAgICAgICAgICBpY29uPVwicGx1cy1jaXJjbGVcIlxuICAgICAgICAgICAgdmFyaWFudD1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuQ29tbW9uLnNtYWxsQnRufVxuICAgICAgICAgICAgb25DbGljaz17YWRkRmlsdGVyfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHthZGRMYWJlbH1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAge2ZpbHRlcnMubWFwKChmaWx0ZXIsIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCIga2V5PXtpbmRleH0+XG4gICAgICAgICAgICB7aW5kZXggPT09IDAgPyAoXG4gICAgICAgICAgICAgIDxJbmxpbmVGb3JtTGFiZWwgd2lkdGg9ezh9IGNsYXNzTmFtZT1cInF1ZXJ5LWtleXdvcmRcIiB0b29sdGlwPXt0b29sdGlwfT5cbiAgICAgICAgICAgICAgICB7bGFiZWx9XG4gICAgICAgICAgICAgIDwvSW5saW5lRm9ybUxhYmVsPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B3aWR0aC04ICR7c3R5bGVzLkNvbW1vbi5maXJzdExhYmVsfWB9PjwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxGaWx0ZXJFZGl0b3JcbiAgICAgICAgICAgICAgYWxsQ29sdW1ucz17ZmllbGRzTGlzdH1cbiAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgICAgIG9uRmlsdGVyQ2hhbmdlPXtvbkZpbHRlckNoYW5nZX1cbiAgICAgICAgICAgICAgcmVtb3ZlRmlsdGVyPXtyZW1vdmVGaWx0ZXJ9XG4gICAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgICAgZGF0YWJhc2U9e2RhdGFiYXNlfVxuICAgICAgICAgICAgICB0YWJsZT17dGFibGV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgICB7ZmlsdGVycy5sZW5ndGggIT09IDAgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHdpZHRoLTggJHtzdHlsZXMuQ29tbW9uLmZpcnN0TGFiZWx9YH0+PC9kaXY+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJxdWVyeS1idWlsZGVyLWZpbHRlcnMtaW5saW5lLWFkZC1idXR0b25cIlxuICAgICAgICAgICAgaWNvbj1cInBsdXMtY2lyY2xlXCJcbiAgICAgICAgICAgIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLkNvbW1vbi5zbWFsbEJ0bn1cbiAgICAgICAgICAgIG9uQ2xpY2s9e2FkZEZpbHRlcn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7YWRkTGFiZWx9XG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsIkJ1dHRvbiIsIkhvcml6b250YWxHcm91cCIsIklubGluZUZvcm1MYWJlbCIsIklucHV0IiwiTXVsdGlTZWxlY3QiLCJSYWRpb0J1dHRvbkdyb3VwIiwiU2VsZWN0IiwiRmlsdGVyT3BlcmF0b3IiLCJ1dGlscyIsImxhYmVscyIsInN0eWxlcyIsInVzZVVuaXF1ZU1hcEtleXMiLCJib29sVmFsdWVzIiwidmFsdWUiLCJsYWJlbCIsImNvbmRpdGlvbnMiLCJmaWx0ZXJPcGVyYXRvcnMiLCJXaXRoSW5HcmFmYW5hVGltZVJhbmdlIiwiT3V0c2lkZUdyYWZhbmFUaW1lUmFuZ2UiLCJJc0FueXRoaW5nIiwiRXF1YWxzIiwiTm90RXF1YWxzIiwiTGVzc1RoYW4iLCJMZXNzVGhhbk9yRXF1YWwiLCJHcmVhdGVyVGhhbiIsIkdyZWF0ZXJUaGFuT3JFcXVhbCIsIkxpa2UiLCJOb3RMaWtlIiwiSXNFbXB0eSIsIklzTm90RW1wdHkiLCJJbiIsIk5vdEluIiwiSXNOdWxsIiwiSXNOb3ROdWxsIiwic3RhbmRhcmRUaW1lT3B0aW9ucyIsImRlZmF1bHROZXdGaWx0ZXIiLCJmaWx0ZXJUeXBlIiwiY29uZGl0aW9uIiwia2V5IiwidHlwZSIsIm9wZXJhdG9yIiwiRmlsdGVyVmFsdWVOdW1iZXJJdGVtIiwicHJvcHMiLCJzZXRWYWx1ZSIsImRpdiIsImRhdGEtdGVzdGlkIiwib25DaGFuZ2UiLCJlIiwiY3VycmVudFRhcmdldCIsInZhbHVlQXNOdW1iZXIiLCJvbkJsdXIiLCJGaWx0ZXJWYWx1ZVNpbmdsZVN0cmluZ0l0ZW0iLCJkZWZhdWx0VmFsdWUiLCJ3aWR0aCIsIkZpbHRlclZhbHVlTXVsdGlTdHJpbmdJdGVtIiwiam9pbiIsInBsYWNlaG9sZGVyIiwic3BsaXQiLCJGaWx0ZXJWYWx1ZUVkaXRvciIsImZpbHRlciIsIm9uRmlsdGVyQ2hhbmdlIiwiYWxsQ29sdW1ucyIsImZpZWxkc0xpc3QiLCJnZXRPcHRpb25zIiwibWF0Y2hlZEZpbHRlciIsImZpbmQiLCJmIiwibmFtZSIsInBpY2tsaXN0VmFsdWVzIiwiaXNOdWxsRmlsdGVyIiwiaW5jbHVkZXMiLCJpc0Jvb2xlYW5GaWx0ZXIiLCJvbkJvb2xGaWx0ZXJWYWx1ZUNoYW5nZSIsIm9wdGlvbnMiLCJpc051bWJlckZpbHRlciIsImlzRGF0ZUZpbHRlciIsImlzRGF0ZUZpbHRlcldpdGhPdXRWYWx1ZSIsIm9uRGF0ZUZpbHRlclZhbHVlQ2hhbmdlIiwiZGF0ZU9wdGlvbnMiLCJvIiwicHVzaCIsImFsbG93Q3VzdG9tVmFsdWUiLCJpc1N0cmluZ0ZpbHRlciIsIm9uU3RyaW5nRmlsdGVyVmFsdWVDaGFuZ2UiLCJpc011bHRpRmlsdGVyIiwib25NdWx0aUZpbHRlclZhbHVlQ2hhbmdlIiwibWFwIiwidiIsIkZpbHRlckVkaXRvciIsImluZGV4IiwicmVtb3ZlRmlsdGVyIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwiaXNNYXBUeXBlIiwic3RhcnRzV2l0aCIsIm1hcEtleXMiLCJkYXRhc291cmNlIiwiZGF0YWJhc2UiLCJ0YWJsZSIsIm1hcEtleU9wdGlvbnMiLCJrIiwibWFwS2V5IiwiZ2V0RmllbGRzIiwidmFsdWVzIiwicmVzdHJpY3RUb0ZpZWxkcyIsIngiLCJnZXRGaWx0ZXJPcGVyYXRvcnNCeVR5cGUiLCJpc0Jvb2xlYW5UeXBlIiwiaXNOdW1iZXJUeXBlIiwiaXNEYXRlVHlwZSIsIm9uRmlsdGVyTmFtZUNoYW5nZSIsImZpZWxkTmFtZSIsIm1hdGNoaW5nRmllbGQiLCJmaWx0ZXJEYXRhIiwibmV3RmlsdGVyIiwib25GaWx0ZXJNYXBLZXlDaGFuZ2UiLCJvbkZpbHRlck9wZXJhdG9yQ2hhbmdlIiwiQXJyYXkiLCJpc0FycmF5Iiwib25GaWx0ZXJDb25kaXRpb25DaGFuZ2UiLCJvbkZpbHRlclZhbHVlQ2hhbmdlIiwid3JhcCIsImFsaWduIiwianVzdGlmeSIsImRpc2FibGVkIiwiQm9vbGVhbiIsImhpbnQiLCJ0eXBlcyIsIkNvbHVtbkhpbnQiLCJ1bmRlZmluZWQiLCJjbGFzc05hbWUiLCJDb21tb24iLCJpbmxpbmVTZWxlY3QiLCJvbk9wZW5NZW51Iiwib25DbG9zZU1lbnUiLCJtZW51UGxhY2VtZW50IiwiY29tcG9uZW50cyIsIm1hcEtleVBsYWNlaG9sZGVyIiwiaWNvbiIsInZhcmlhbnQiLCJzaXplIiwic21hbGxCdG4iLCJvbkNsaWNrIiwiRmlsdGVyc0VkaXRvciIsImZpbHRlcnMiLCJvbkZpbHRlcnNDaGFuZ2UiLCJ0b29sdGlwIiwiYWRkTGFiZWwiLCJhZGRGaWx0ZXIiLCJuZXdGaWx0ZXJzIiwic3BsaWNlIiwibGVuZ3RoIiwiZmlyc3RMYWJlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/queryBuilder/FilterEditor.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/GroupByEditor.tsx":
/*!***************************************************!*\
  !*** ./components/queryBuilder/GroupByEditor.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroupByEditor: () => (/* binding */ GroupByEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n\n\n\n\n\nconst GroupByEditor = (props)=>{\n    const { allColumns, groupBy, onGroupByChange } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.GroupByEditor;\n    const options = allColumns.map((c)=>({\n            label: c.name,\n            value: c.name\n        }));\n    const onChange = (selection)=>{\n        setIsOpen(false);\n        onGroupByChange(selection.map((s)=>s.value));\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_4__.selectors.components.QueryBuilder.GroupByEditor.multiSelectWrapper,\n        className: _styles__WEBPACK_IMPORTED_MODULE_3__.styles.Common.selectWrapper\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.MultiSelect, {\n        options: options,\n        isOpen: isOpen,\n        onOpenMenu: ()=>setIsOpen(true),\n        onCloseMenu: ()=>setIsOpen(false),\n        value: groupBy,\n        onChange: onChange,\n        allowCustomValue: true,\n        menuPlacement: 'bottom'\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9Hcm91cEJ5RWRpdG9yLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF3QztBQUNtQjtBQUcvQjtBQUNJO0FBQ007QUFRL0IsTUFBTU8sZ0JBQWdCLENBQUNDO0lBQzVCLE1BQU0sRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLGVBQWUsRUFBRSxHQUFHSDtJQUNqRCxNQUFNLENBQUNJLFFBQVFDLFVBQVUsR0FBR1osK0NBQVFBLENBQUM7SUFDckMsTUFBTSxFQUFFYSxLQUFLLEVBQUVDLE9BQU8sRUFBRSxHQUFHWCwrQ0FBTUEsQ0FBQ1ksVUFBVSxDQUFDVCxhQUFhO0lBQzFELE1BQU1VLFVBQTBDUixXQUFXUyxHQUFHLENBQUNDLENBQUFBLElBQU07WUFBRUwsT0FBT0ssRUFBRUMsSUFBSTtZQUFFQyxPQUFPRixFQUFFQyxJQUFJO1FBQUM7SUFFcEcsTUFBTUUsV0FBVyxDQUFDQztRQUNoQlYsVUFBVTtRQUNWRixnQkFBZ0JZLFVBQVVMLEdBQUcsQ0FBQ00sQ0FBQUEsSUFBS0EsRUFBRUgsS0FBSztJQUM1QztJQUVBLHFCQUNFLDJEQUFDSTtRQUFJQyxXQUFVO3FCQUNiLDJEQUFDeEIsd0RBQWVBO1FBQUN5QixPQUFPO1FBQUdELFdBQVU7UUFBZ0JYLFNBQVNBO09BQzNERCxzQkFFSCwyREFBQ1c7UUFBSUcsZUFBYXRCLGlEQUFTQSxDQUFDVSxVQUFVLENBQUNhLFlBQVksQ0FBQ3RCLGFBQWEsQ0FBQ3VCLGtCQUFrQjtRQUFFSixXQUFXckIsMkNBQU1BLENBQUMwQixNQUFNLENBQUNDLGFBQWE7cUJBQzFILDJEQUFDN0Isb0RBQVdBO1FBQ1ZjLFNBQVNBO1FBQ1RMLFFBQVFBO1FBQ1JxQixZQUFZLElBQU1wQixVQUFVO1FBQzVCcUIsYUFBYSxJQUFNckIsVUFBVTtRQUM3QlEsT0FBT1g7UUFDUFksVUFBVUE7UUFDVmEsa0JBQWtCO1FBQ2xCQyxlQUFlOztBQUt6QixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9Hcm91cEJ5RWRpdG9yLnRzeD8zMmZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IElubGluZUZvcm1MYWJlbCwgTXVsdGlTZWxlY3QgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgeyBTZWxlY3RhYmxlVmFsdWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IFRhYmxlQ29sdW1uIH0gZnJvbSAndHlwZXMvcXVlcnlCdWlsZGVyJztcbmltcG9ydCBsYWJlbHMgZnJvbSAnbGFiZWxzJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJ3N0eWxlcyc7XG5pbXBvcnQgeyBzZWxlY3RvcnMgfSBmcm9tICdzZWxlY3RvcnMnO1xuXG5pbnRlcmZhY2UgR3JvdXBCeUVkaXRvclByb3BzIHtcbiAgYWxsQ29sdW1uczogcmVhZG9ubHkgVGFibGVDb2x1bW5bXTtcbiAgZ3JvdXBCeTogc3RyaW5nW107XG4gIG9uR3JvdXBCeUNoYW5nZTogKGdyb3VwQnk6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgR3JvdXBCeUVkaXRvciA9IChwcm9wczogR3JvdXBCeUVkaXRvclByb3BzKSA9PiB7XG4gIGNvbnN0IHsgYWxsQ29sdW1ucywgZ3JvdXBCeSwgb25Hcm91cEJ5Q2hhbmdlIH0gPSBwcm9wcztcbiAgY29uc3QgW2lzT3Blbiwgc2V0SXNPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgeyBsYWJlbCwgdG9vbHRpcCB9ID0gbGFiZWxzLmNvbXBvbmVudHMuR3JvdXBCeUVkaXRvcjtcbiAgY29uc3Qgb3B0aW9uczogQXJyYXk8U2VsZWN0YWJsZVZhbHVlPHN0cmluZz4+ID0gYWxsQ29sdW1ucy5tYXAoYyA9PiAoeyBsYWJlbDogYy5uYW1lLCB2YWx1ZTogYy5uYW1lIH0pKTtcblxuICBjb25zdCBvbkNoYW5nZSA9IChzZWxlY3Rpb246IEFycmF5PFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+PikgPT4ge1xuICAgIHNldElzT3BlbihmYWxzZSk7XG4gICAgb25Hcm91cEJ5Q2hhbmdlKHNlbGVjdGlvbi5tYXAocyA9PiBzLnZhbHVlISkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXs4fSBjbGFzc05hbWU9XCJxdWVyeS1rZXl3b3JkXCIgdG9vbHRpcD17dG9vbHRpcH0+XG4gICAgICAgIHtsYWJlbH1cbiAgICAgIDwvSW5saW5lRm9ybUxhYmVsPlxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD17c2VsZWN0b3JzLmNvbXBvbmVudHMuUXVlcnlCdWlsZGVyLkdyb3VwQnlFZGl0b3IubXVsdGlTZWxlY3RXcmFwcGVyfSBjbGFzc05hbWU9e3N0eWxlcy5Db21tb24uc2VsZWN0V3JhcHBlcn0+XG4gICAgICAgIDxNdWx0aVNlbGVjdFxuICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgaXNPcGVuPXtpc09wZW59XG4gICAgICAgICAgb25PcGVuTWVudT17KCkgPT4gc2V0SXNPcGVuKHRydWUpfVxuICAgICAgICAgIG9uQ2xvc2VNZW51PXsoKSA9PiBzZXRJc09wZW4oZmFsc2UpfVxuICAgICAgICAgIHZhbHVlPXtncm91cEJ5fVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBhbGxvd0N1c3RvbVZhbHVlPXt0cnVlfVxuICAgICAgICAgIG1lbnVQbGFjZW1lbnQ9eydib3R0b20nfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJJbmxpbmVGb3JtTGFiZWwiLCJNdWx0aVNlbGVjdCIsImxhYmVscyIsInN0eWxlcyIsInNlbGVjdG9ycyIsIkdyb3VwQnlFZGl0b3IiLCJwcm9wcyIsImFsbENvbHVtbnMiLCJncm91cEJ5Iiwib25Hcm91cEJ5Q2hhbmdlIiwiaXNPcGVuIiwic2V0SXNPcGVuIiwibGFiZWwiLCJ0b29sdGlwIiwiY29tcG9uZW50cyIsIm9wdGlvbnMiLCJtYXAiLCJjIiwibmFtZSIsInZhbHVlIiwib25DaGFuZ2UiLCJzZWxlY3Rpb24iLCJzIiwiZGl2IiwiY2xhc3NOYW1lIiwid2lkdGgiLCJkYXRhLXRlc3RpZCIsIlF1ZXJ5QnVpbGRlciIsIm11bHRpU2VsZWN0V3JhcHBlciIsIkNvbW1vbiIsInNlbGVjdFdyYXBwZXIiLCJvbk9wZW5NZW51Iiwib25DbG9zZU1lbnUiLCJhbGxvd0N1c3RvbVZhbHVlIiwibWVudVBsYWNlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/queryBuilder/GroupByEditor.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/LimitEditor.tsx":
/*!*************************************************!*\
  !*** ./components/queryBuilder/LimitEditor.tsx ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LimitEditor: () => (/* binding */ LimitEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n\n\n\n\nconst LimitEditor = (props)=>{\n    const [limit, setLimit] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.limit || 0);\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.LimitEditor;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_3__.selectors.components.QueryBuilder.LimitEditor.input,\n        width: 10,\n        value: limit,\n        type: \"number\",\n        min: 0,\n        onChange: (e)=>setLimit(e.currentTarget.valueAsNumber),\n        onBlur: ()=>props.onLimitChange(limit)\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9MaW1pdEVkaXRvci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF3QztBQUNhO0FBQ3pCO0FBQ1U7QUFPL0IsTUFBTU0sY0FBYyxDQUFDQztJQUMxQixNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR1IsK0NBQVFBLENBQVNNLE1BQU1DLEtBQUssSUFBSTtJQUMxRCxNQUFNLEVBQUVFLEtBQUssRUFBRUMsT0FBTyxFQUFFLEdBQUdQLCtDQUFNQSxDQUFDUSxVQUFVLENBQUNOLFdBQVc7SUFFeEQscUJBQ0UsMkRBQUNPO1FBQUlDLFdBQVU7cUJBQ2IsMkRBQUNaLHdEQUFlQTtRQUFDYSxPQUFPO1FBQUdELFdBQVU7UUFBZ0JILFNBQVNBO09BQzNERCxzQkFFSCwyREFBQ1AsOENBQUtBO1FBQ0phLGVBQWFYLGlEQUFTQSxDQUFDTyxVQUFVLENBQUNLLFlBQVksQ0FBQ1gsV0FBVyxDQUFDWSxLQUFLO1FBQ2hFSCxPQUFPO1FBQ1BJLE9BQU9YO1FBQ1BZLE1BQUs7UUFDTEMsS0FBSztRQUNMQyxVQUFVQyxDQUFBQSxJQUFLZCxTQUFTYyxFQUFFQyxhQUFhLENBQUNDLGFBQWE7UUFDckRDLFFBQVEsSUFBTW5CLE1BQU1vQixhQUFhLENBQUNuQjs7QUFJMUMsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9xdWVyeUJ1aWxkZXIvTGltaXRFZGl0b3IudHN4PzVjZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW5saW5lRm9ybUxhYmVsLCBJbnB1dCB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCBsYWJlbHMgZnJvbSAnbGFiZWxzJztcbmltcG9ydCB7IHNlbGVjdG9ycyB9IGZyb20gJ3NlbGVjdG9ycyc7XG5cbmludGVyZmFjZSBMaW1pdEVkaXRvclByb3BzIHtcbiAgbGltaXQ6IG51bWJlcjtcbiAgb25MaW1pdENoYW5nZTogKGxpbWl0OiBudW1iZXIpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBMaW1pdEVkaXRvciA9IChwcm9wczogTGltaXRFZGl0b3JQcm9wcykgPT4ge1xuICBjb25zdCBbbGltaXQsIHNldExpbWl0XSA9IHVzZVN0YXRlPG51bWJlcj4ocHJvcHMubGltaXQgfHwgMCk7XG4gIGNvbnN0IHsgbGFiZWwsIHRvb2x0aXAgfSA9IGxhYmVscy5jb21wb25lbnRzLkxpbWl0RWRpdG9yO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXs4fSBjbGFzc05hbWU9XCJxdWVyeS1rZXl3b3JkXCIgdG9vbHRpcD17dG9vbHRpcH0+XG4gICAgICAgIHtsYWJlbH1cbiAgICAgIDwvSW5saW5lRm9ybUxhYmVsPlxuICAgICAgPElucHV0XG4gICAgICAgIGRhdGEtdGVzdGlkPXtzZWxlY3RvcnMuY29tcG9uZW50cy5RdWVyeUJ1aWxkZXIuTGltaXRFZGl0b3IuaW5wdXR9XG4gICAgICAgIHdpZHRoPXsxMH1cbiAgICAgICAgdmFsdWU9e2xpbWl0fVxuICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgbWluPXswfVxuICAgICAgICBvbkNoYW5nZT17ZSA9PiBzZXRMaW1pdChlLmN1cnJlbnRUYXJnZXQudmFsdWVBc051bWJlcil9XG4gICAgICAgIG9uQmx1cj17KCkgPT4gcHJvcHMub25MaW1pdENoYW5nZShsaW1pdCl9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwiSW5saW5lRm9ybUxhYmVsIiwiSW5wdXQiLCJsYWJlbHMiLCJzZWxlY3RvcnMiLCJMaW1pdEVkaXRvciIsInByb3BzIiwibGltaXQiLCJzZXRMaW1pdCIsImxhYmVsIiwidG9vbHRpcCIsImNvbXBvbmVudHMiLCJkaXYiLCJjbGFzc05hbWUiLCJ3aWR0aCIsImRhdGEtdGVzdGlkIiwiUXVlcnlCdWlsZGVyIiwiaW5wdXQiLCJ2YWx1ZSIsInR5cGUiLCJtaW4iLCJvbkNoYW5nZSIsImUiLCJjdXJyZW50VGFyZ2V0IiwidmFsdWVBc051bWJlciIsIm9uQmx1ciIsIm9uTGltaXRDaGFuZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/queryBuilder/LimitEditor.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/ModeSwitch.tsx":
/*!************************************************!*\
  !*** ./components/queryBuilder/ModeSwitch.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModeSwitch: () => (/* binding */ ModeSwitch)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * Component for switching between modes. Boxes are labeled unlike regular Switch.\n */ const ModeSwitch = (props)=>{\n    const { labelA, labelB, value, onChange, label, tooltip } = props;\n    const options = [\n        {\n            label: labelA,\n            value: false\n        },\n        {\n            label: labelB,\n            value: true\n        }\n    ];\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.RadioButtonGroup, {\n        options: options,\n        value: value,\n        onChange: (v)=>onChange(v)\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9Nb2RlU3dpdGNoLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEwQjtBQUNzQztBQVdoRTs7Q0FFQyxHQUNNLE1BQU1HLGFBQWEsQ0FBQ0M7SUFDekIsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFLEdBQUdOO0lBRTVELE1BQU1PLFVBQVU7UUFDZDtZQUNFRixPQUFPSjtZQUNQRSxPQUFPO1FBQ1Q7UUFDQTtZQUNFRSxPQUFPSDtZQUNQQyxPQUFPO1FBQ1Q7S0FDRDtJQUVELHFCQUNFLDJEQUFDSztRQUFJQyxXQUFVO3FCQUNiLDJEQUFDWCx3REFBZUE7UUFBQ1ksT0FBTztRQUFHRCxXQUFVO1FBQWdCSCxTQUFTQTtPQUMzREQsc0JBRUgsMkRBQUNSLHlEQUFnQkE7UUFDZlUsU0FBU0E7UUFDVEosT0FBT0E7UUFDUEMsVUFBVU8sQ0FBQUEsSUFBS1AsU0FBU087O0FBSWhDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvcXVlcnlCdWlsZGVyL01vZGVTd2l0Y2gudHN4PzY5MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJhZGlvQnV0dG9uR3JvdXAsIElubGluZUZvcm1MYWJlbCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuZXhwb3J0IGludGVyZmFjZSBNb2RlU3dpdGNoUHJvcHMge1xuICBsYWJlbEE6IHN0cmluZztcbiAgbGFiZWxCOiBzdHJpbmc7XG4gIHZhbHVlOiBib29sZWFuO1xuICBvbkNoYW5nZTogKHZhbHVlOiBib29sZWFuKSA9PiB2b2lkO1xuICBsYWJlbDogc3RyaW5nO1xuICB0b29sdGlwOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIENvbXBvbmVudCBmb3Igc3dpdGNoaW5nIGJldHdlZW4gbW9kZXMuIEJveGVzIGFyZSBsYWJlbGVkIHVubGlrZSByZWd1bGFyIFN3aXRjaC5cbiAqL1xuZXhwb3J0IGNvbnN0IE1vZGVTd2l0Y2ggPSAocHJvcHM6IE1vZGVTd2l0Y2hQcm9wcykgPT4ge1xuICBjb25zdCB7IGxhYmVsQSwgbGFiZWxCLCB2YWx1ZSwgb25DaGFuZ2UsIGxhYmVsLCB0b29sdGlwIH0gPSBwcm9wcztcblxuICBjb25zdCBvcHRpb25zID0gW1xuICAgIHtcbiAgICAgIGxhYmVsOiBsYWJlbEEsXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogbGFiZWxCLFxuICAgICAgdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgXTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2YtZm9ybVwiPlxuICAgICAgPElubGluZUZvcm1MYWJlbCB3aWR0aD17OH0gY2xhc3NOYW1lPVwicXVlcnkta2V5d29yZFwiIHRvb2x0aXA9e3Rvb2x0aXB9PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgIDxSYWRpb0J1dHRvbkdyb3VwPGJvb2xlYW4+XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9e3YgPT4gb25DaGFuZ2Uodil9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiUmFkaW9CdXR0b25Hcm91cCIsIklubGluZUZvcm1MYWJlbCIsIk1vZGVTd2l0Y2giLCJwcm9wcyIsImxhYmVsQSIsImxhYmVsQiIsInZhbHVlIiwib25DaGFuZ2UiLCJsYWJlbCIsInRvb2x0aXAiLCJvcHRpb25zIiwiZGl2IiwiY2xhc3NOYW1lIiwid2lkdGgiLCJ2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/queryBuilder/ModeSwitch.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/OrderByEditor.tsx":
/*!***************************************************!*\
  !*** ./components/queryBuilder/OrderByEditor.tsx ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrderByEditor: () => (/* binding */ OrderByEditor),\n/* harmony export */   getOrderByOptions: () => (/* binding */ getOrderByOptions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\nconst sortOptions = [\n    {\n        label: 'ASC',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.OrderByDirection.ASC\n    },\n    {\n        label: 'DESC',\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.OrderByDirection.DESC\n    }\n];\nconst OrderByItem = (props)=>{\n    const { columnOptions, index, orderByItem, updateOrderByItem, removeOrderByItem } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        disabled: Boolean(orderByItem.hint),\n        placeholder: orderByItem.hint ? _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].types.ColumnHint[orderByItem.hint] : undefined,\n        value: orderByItem.hint ? undefined : orderByItem.name,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.inlineSelect,\n        width: 36,\n        options: columnOptions,\n        onChange: (e)=>updateOrderByItem(index, _object_spread_props(_object_spread({}, orderByItem), {\n                name: e.value\n            })),\n        allowCustomValue: true,\n        menuPlacement: 'bottom'\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        value: orderByItem.dir,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.inlineSelect,\n        width: 12,\n        options: sortOptions,\n        onChange: (e)=>updateOrderByItem(index, _object_spread_props(_object_spread({}, orderByItem), {\n                dir: e.value\n            })),\n        menuPlacement: 'bottom'\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": \"query-builder-orderby-remove-button\",\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.smallBtn,\n        variant: \"destructive\",\n        size: \"sm\",\n        icon: \"trash-alt\",\n        onClick: ()=>removeOrderByItem(index)\n    }));\n};\nconst OrderByEditor = (props)=>{\n    const { orderByOptions, orderBy, onOrderByChange } = props;\n    const { label, tooltip, addLabel } = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.OrderByEditor;\n    const addOrderByItem = ()=>{\n        var _orderByOptions_;\n        const nextOrderBy = orderBy.slice();\n        nextOrderBy.push({\n            name: (_orderByOptions_ = orderByOptions[0]) === null || _orderByOptions_ === void 0 ? void 0 : _orderByOptions_.value,\n            dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.OrderByDirection.ASC\n        });\n        onOrderByChange(nextOrderBy);\n    };\n    const removeOrderByItem = (index)=>{\n        const nextOrderBy = orderBy.slice();\n        nextOrderBy.splice(index, 1);\n        onOrderByChange(nextOrderBy);\n    };\n    const updateOrderByItem = (index, orderByItem)=>{\n        const nextOrderBy = orderBy.slice();\n        nextOrderBy[index] = orderByItem;\n        onOrderByChange(nextOrderBy);\n    };\n    if (orderByOptions.length === 0) {\n        return null;\n    }\n    const fieldLabel = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        \"data-testid\": \"query-builder-orderby-item-label\",\n        tooltip: tooltip\n    }, label);\n    const fieldSpacer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: `width-8 ${_styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.firstLabel}`\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, orderBy.map((orderByItem, index)=>{\n        const key = `${index}-${orderByItem.name}-${orderByItem.hint || ''}-${orderByItem.dir}`;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"gf-form\",\n            key: key,\n            \"data-testid\": \"query-builder-orderby-item-wrapper\"\n        }, index === 0 ? fieldLabel : fieldSpacer, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(OrderByItem, {\n            columnOptions: orderByOptions,\n            index: index,\n            orderByItem: orderByItem,\n            updateOrderByItem: updateOrderByItem,\n            removeOrderByItem: removeOrderByItem\n        }));\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, orderBy.length === 0 ? fieldLabel : fieldSpacer, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        \"data-testid\": \"query-builder-orderby-add-button\",\n        icon: \"plus-circle\",\n        variant: \"secondary\",\n        size: \"sm\",\n        onClick: addOrderByItem,\n        className: _styles__WEBPACK_IMPORTED_MODULE_4__.styles.Common.smallBtn\n    }, addLabel)));\n};\nconst getOrderByOptions = (builder, allColumns)=>{\n    var _builder_orderBy;\n    let allOptions = [];\n    if ((0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_5__.isAggregateQuery)(builder)) {\n        var _builder_columns;\n        (_builder_columns = builder.columns) === null || _builder_columns === void 0 ? void 0 : _builder_columns.forEach((c)=>{\n            allOptions.push({\n                label: c.alias || c.name,\n                value: c.name\n            });\n        });\n        builder.aggregates.forEach((a)=>{\n            let label = `${a.aggregateType}(${a.column})`;\n            let value = label;\n            if (a.alias) {\n                label += ` as ${a.alias}`;\n                value = a.alias;\n            }\n            allOptions.push({\n                label,\n                value\n            });\n        });\n        if (builder.groupBy && builder.groupBy.length > 0) {\n            builder.groupBy.forEach((g)=>allOptions.push({\n                    label: g,\n                    value: g\n                }));\n        }\n    } else {\n        allColumns.forEach((c)=>allOptions.push({\n                label: c.label || c.name,\n                value: c.name\n            }));\n    }\n    // Add selected value to the list if it does not exist.\n    const allValues = new Set(allOptions.map((o)=>o.value));\n    const customValues = (_builder_orderBy = builder.orderBy) === null || _builder_orderBy === void 0 ? void 0 : _builder_orderBy.filter((o)=>!allValues.has(o.name));\n    customValues === null || customValues === void 0 ? void 0 : customValues.forEach((o)=>allOptions.push({\n            label: o.name,\n            value: o.name\n        }));\n    return allOptions;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/OrderByEditor.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/OtelVersionSelect.tsx":
/*!*******************************************************!*\
  !*** ./components/queryBuilder/OtelVersionSelect.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OtelVersionSelect: () => (/* binding */ OtelVersionSelect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../otel */ \"./otel.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n\n\n\n\nconst OtelVersionSelect = (props)=>{\n    const { enabled, onEnabledChange, selectedVersion, onVersionChange, wide } = props;\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_3__[\"default\"].components.OtelVersionSelect;\n    const options = _otel__WEBPACK_IMPORTED_MODULE_2__[\"default\"].versions.map((v)=>({\n            label: v.name,\n            value: v.version\n        }));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Use latest version if not set or doesn't exist (which may happen if config is broken)\n        if (selectedVersion === '' || !_otel__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getVersion(selectedVersion)) {\n            onVersionChange(_otel__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getLatestVersion().version);\n        }\n    }, [\n        selectedVersion,\n        onVersionChange\n    ]);\n    const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.useTheme)();\n    const switchContainerStyle = {\n        padding: `0 ${theme.spacing.sm}`,\n        height: `${theme.spacing.formInputHeight}px`,\n        display: 'flex',\n        alignItems: 'center'\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: wide ? 12 : 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: switchContainerStyle\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Switch, {\n        className: \"gf-form\",\n        value: enabled,\n        onChange: (e)=>onEnabledChange(e.currentTarget.checked),\n        role: \"checkbox\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {\n        disabled: !enabled,\n        options: options,\n        width: 20,\n        onChange: (e)=>onVersionChange(e.value),\n        value: selectedVersion,\n        menuPlacement: 'bottom'\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9PdGVsVmVyc2lvblNlbGVjdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF5QztBQUVnRDtBQUNqRTtBQUNPO0FBVXhCLE1BQU1TLG9CQUFvQixDQUFDQztJQUNoQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsZUFBZSxFQUFFQyxlQUFlLEVBQUVDLGVBQWUsRUFBRUMsSUFBSSxFQUFFLEdBQUdMO0lBQzdFLE1BQU0sRUFBRU0sS0FBSyxFQUFFQyxPQUFPLEVBQUUsR0FBR1QsK0NBQVNBLENBQUNVLFVBQVUsQ0FBQ1QsaUJBQWlCO0lBQ2pFLE1BQU1VLFVBQTZCWixzREFBYSxDQUFDYyxHQUFHLENBQUNDLENBQUFBLElBQU07WUFDekROLE9BQU9NLEVBQUVDLElBQUk7WUFDYkMsT0FBT0YsRUFBRUcsT0FBTztRQUNsQjtJQUVBeEIsZ0RBQVNBLENBQUM7UUFDUix3RkFBd0Y7UUFDeEYsSUFBSVksb0JBQW9CLE1BQU0sQ0FBQ04sd0RBQWUsQ0FBQ00sa0JBQWtCO1lBQy9EQyxnQkFBZ0JQLDhEQUFxQixHQUFHa0IsT0FBTztRQUNqRDtJQUNGLEdBQUc7UUFBQ1o7UUFBaUJDO0tBQWdCO0lBRXJDLE1BQU1jLFFBQVF0QixxREFBUUE7SUFDdEIsTUFBTXVCLHVCQUE0QztRQUNoREMsU0FBUyxDQUFDLEVBQUUsRUFBRUYsTUFBTUcsT0FBTyxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNoQ0MsUUFBUSxDQUFDLEVBQUVMLE1BQU1HLE9BQU8sQ0FBQ0csZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUM1Q0MsU0FBUztRQUNUQyxZQUFZO0lBQ2Q7SUFFQSxxQkFDRSwyREFBQ0M7UUFBSUMsV0FBVTtxQkFDYiwyREFBQ3BDLHdEQUFlQTtRQUFDcUMsT0FBT3hCLE9BQU8sS0FBSztRQUFHdUIsV0FBVTtRQUFnQnJCLFNBQVNBO09BQ3ZFRCxzQkFFSCwyREFBQ3FCO1FBQUlHLE9BQU9YO3FCQUNWLDJEQUFDeEIsK0NBQWFBO1FBQ1ppQyxXQUFVO1FBQ1ZkLE9BQU9iO1FBQ1A4QixVQUFVQyxDQUFBQSxJQUFLOUIsZ0JBQWdCOEIsRUFBRUMsYUFBYSxDQUFDQyxPQUFPO1FBQ3REQyxNQUFLO3VCQUdULDJEQUFDMUMsK0NBQU1BO1FBQ0wyQyxVQUFVLENBQUNuQztRQUNYUSxTQUFTQTtRQUNUb0IsT0FBTztRQUNQRSxVQUFVQyxDQUFBQSxJQUFLNUIsZ0JBQWdCNEIsRUFBRWxCLEtBQUs7UUFDdENBLE9BQU9YO1FBQ1BrQyxlQUFlOztBQUl2QixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9PdGVsVmVyc2lvblNlbGVjdC50c3g/OTRlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2VsZWN0YWJsZVZhbHVlIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBJbmxpbmVGb3JtTGFiZWwsIFNlbGVjdCwgU3dpdGNoIGFzIEdyYWZhbmFTd2l0Y2gsIHVzZVRoZW1lIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuaW1wb3J0IG90ZWwgZnJvbSAnb3RlbCc7XG5pbXBvcnQgc2VsZWN0b3JzIGZyb20gJ2xhYmVscyc7XG5cbmludGVyZmFjZSBPdGVsVmVyc2lvblNlbGVjdFByb3BzIHtcbiAgZW5hYmxlZDogYm9vbGVhbixcbiAgb25FbmFibGVkQ2hhbmdlOiAoZW5hYmxlZDogYm9vbGVhbikgPT4gdm9pZCxcbiAgc2VsZWN0ZWRWZXJzaW9uOiBzdHJpbmcsXG4gIG9uVmVyc2lvbkNoYW5nZTogKHZlcnNpb246IHN0cmluZykgPT4gdm9pZCxcbiAgd2lkZT86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBjb25zdCBPdGVsVmVyc2lvblNlbGVjdCA9IChwcm9wczogT3RlbFZlcnNpb25TZWxlY3RQcm9wcykgPT4ge1xuICBjb25zdCB7IGVuYWJsZWQsIG9uRW5hYmxlZENoYW5nZSwgc2VsZWN0ZWRWZXJzaW9uLCBvblZlcnNpb25DaGFuZ2UsIHdpZGUgfSA9IHByb3BzO1xuICBjb25zdCB7IGxhYmVsLCB0b29sdGlwIH0gPSBzZWxlY3RvcnMuY29tcG9uZW50cy5PdGVsVmVyc2lvblNlbGVjdDtcbiAgY29uc3Qgb3B0aW9uczogU2VsZWN0YWJsZVZhbHVlW10gPSBvdGVsLnZlcnNpb25zLm1hcCh2ID0+ICh7XG4gICAgbGFiZWw6IHYubmFtZSxcbiAgICB2YWx1ZTogdi52ZXJzaW9uXG4gIH0pKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFVzZSBsYXRlc3QgdmVyc2lvbiBpZiBub3Qgc2V0IG9yIGRvZXNuJ3QgZXhpc3QgKHdoaWNoIG1heSBoYXBwZW4gaWYgY29uZmlnIGlzIGJyb2tlbilcbiAgICBpZiAoc2VsZWN0ZWRWZXJzaW9uID09PSAnJyB8fCAhb3RlbC5nZXRWZXJzaW9uKHNlbGVjdGVkVmVyc2lvbikpIHtcbiAgICAgIG9uVmVyc2lvbkNoYW5nZShvdGVsLmdldExhdGVzdFZlcnNpb24oKS52ZXJzaW9uKTtcbiAgICB9XG4gIH0sIFtzZWxlY3RlZFZlcnNpb24sIG9uVmVyc2lvbkNoYW5nZV0pO1xuXG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3dpdGNoQ29udGFpbmVyU3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgcGFkZGluZzogYDAgJHt0aGVtZS5zcGFjaW5nLnNtfWAsXG4gICAgaGVpZ2h0OiBgJHt0aGVtZS5zcGFjaW5nLmZvcm1JbnB1dEhlaWdodH1weGAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXt3aWRlID8gMTIgOiA4fSBjbGFzc05hbWU9XCJxdWVyeS1rZXl3b3JkXCIgdG9vbHRpcD17dG9vbHRpcH0+XG4gICAgICAgIHtsYWJlbH1cbiAgICAgIDwvSW5saW5lRm9ybUxhYmVsPlxuICAgICAgPGRpdiBzdHlsZT17c3dpdGNoQ29udGFpbmVyU3R5bGV9PlxuICAgICAgICA8R3JhZmFuYVN3aXRjaFxuICAgICAgICAgIGNsYXNzTmFtZT1cImdmLWZvcm1cIlxuICAgICAgICAgIHZhbHVlPXtlbmFibGVkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IG9uRW5hYmxlZENoYW5nZShlLmN1cnJlbnRUYXJnZXQuY2hlY2tlZCl9XG4gICAgICAgICAgcm9sZT1cImNoZWNrYm94XCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPFNlbGVjdFxuICAgICAgICBkaXNhYmxlZD17IWVuYWJsZWR9XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgIHdpZHRoPXsyMH1cbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25WZXJzaW9uQ2hhbmdlKGUudmFsdWUpfVxuICAgICAgICB2YWx1ZT17c2VsZWN0ZWRWZXJzaW9ufVxuICAgICAgICBtZW51UGxhY2VtZW50PXsnYm90dG9tJ31cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwiSW5saW5lRm9ybUxhYmVsIiwiU2VsZWN0IiwiU3dpdGNoIiwiR3JhZmFuYVN3aXRjaCIsInVzZVRoZW1lIiwib3RlbCIsInNlbGVjdG9ycyIsIk90ZWxWZXJzaW9uU2VsZWN0IiwicHJvcHMiLCJlbmFibGVkIiwib25FbmFibGVkQ2hhbmdlIiwic2VsZWN0ZWRWZXJzaW9uIiwib25WZXJzaW9uQ2hhbmdlIiwid2lkZSIsImxhYmVsIiwidG9vbHRpcCIsImNvbXBvbmVudHMiLCJvcHRpb25zIiwidmVyc2lvbnMiLCJtYXAiLCJ2IiwibmFtZSIsInZhbHVlIiwidmVyc2lvbiIsImdldFZlcnNpb24iLCJnZXRMYXRlc3RWZXJzaW9uIiwidGhlbWUiLCJzd2l0Y2hDb250YWluZXJTdHlsZSIsInBhZGRpbmciLCJzcGFjaW5nIiwic20iLCJoZWlnaHQiLCJmb3JtSW5wdXRIZWlnaHQiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImRpdiIsImNsYXNzTmFtZSIsIndpZHRoIiwic3R5bGUiLCJvbkNoYW5nZSIsImUiLCJjdXJyZW50VGFyZ2V0IiwiY2hlY2tlZCIsInJvbGUiLCJkaXNhYmxlZCIsIm1lbnVQbGFjZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/queryBuilder/OtelVersionSelect.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/QueryBuilder.tsx":
/*!**************************************************!*\
  !*** ./components/queryBuilder/QueryBuilder.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _views_LogsQueryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/LogsQueryBuilder */ \"./components/queryBuilder/views/LogsQueryBuilder.tsx\");\n/* harmony import */ var _views_TimeSeriesQueryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/TimeSeriesQueryBuilder */ \"./components/queryBuilder/views/TimeSeriesQueryBuilder.tsx\");\n/* harmony import */ var _views_TableQueryBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./views/TableQueryBuilder */ \"./components/queryBuilder/views/TableQueryBuilder.tsx\");\n/* harmony import */ var _SqlPreview__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SqlPreview */ \"./components/queryBuilder/SqlPreview.tsx\");\n/* harmony import */ var _DatabaseTableSelect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DatabaseTableSelect */ \"./components/queryBuilder/DatabaseTableSelect.tsx\");\n/* harmony import */ var _QueryTypeSwitcher__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./QueryTypeSwitcher */ \"./components/queryBuilder/QueryTypeSwitcher.tsx\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n/* harmony import */ var _views_TraceQueryBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./views/TraceQueryBuilder */ \"./components/queryBuilder/views/TraceQueryBuilder.tsx\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var _TraceIdInput__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TraceIdInput */ \"./components/queryBuilder/TraceIdInput.tsx\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst QueryBuilder = (props)=>{\n    var _builderOptions_meta;\n    const { datasource, builderOptions, builderOptionsDispatch, generatedSql } = props;\n    const onDatabaseChange = (database)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_10__.setDatabase)(database));\n    const onTableChange = (table)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_10__.setTable)(table));\n    const onQueryTypeChange = (queryType)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_10__.setQueryType)(queryType));\n    if ((_builderOptions_meta = builderOptions.meta) === null || _builderOptions_meta === void 0 ? void 0 : _builderOptions_meta.minimized) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(MinimizedQueryViewer, {\n            builderOptions: builderOptions,\n            builderOptionsDispatch: builderOptionsDispatch,\n            datasource: datasource\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": \"query-editor-section-builder\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: 'gf-form ' + _styles__WEBPACK_IMPORTED_MODULE_8__.styles.QueryEditor.queryType\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_DatabaseTableSelect__WEBPACK_IMPORTED_MODULE_6__.DatabaseTableSelect, {\n        datasource: datasource,\n        database: builderOptions.database,\n        onDatabaseChange: onDatabaseChange,\n        table: builderOptions.table,\n        onTableChange: onTableChange\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: 'gf-form ' + _styles__WEBPACK_IMPORTED_MODULE_8__.styles.QueryEditor.queryType\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_QueryTypeSwitcher__WEBPACK_IMPORTED_MODULE_7__.QueryTypeSwitcher, {\n        queryType: builderOptions.queryType,\n        onChange: onQueryTypeChange\n    })), builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Table && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_views_TableQueryBuilder__WEBPACK_IMPORTED_MODULE_4__.TableQueryBuilder, {\n        datasource: datasource,\n        builderOptions: builderOptions,\n        builderOptionsDispatch: builderOptionsDispatch\n    }), builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_views_LogsQueryBuilder__WEBPACK_IMPORTED_MODULE_2__.LogsQueryBuilder, {\n        datasource: datasource,\n        builderOptions: builderOptions,\n        builderOptionsDispatch: builderOptionsDispatch\n    }), builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.TimeSeries && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_views_TimeSeriesQueryBuilder__WEBPACK_IMPORTED_MODULE_3__.TimeSeriesQueryBuilder, {\n        datasource: datasource,\n        builderOptions: builderOptions,\n        builderOptionsDispatch: builderOptionsDispatch\n    }), builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_views_TraceQueryBuilder__WEBPACK_IMPORTED_MODULE_9__.TraceQueryBuilder, {\n        datasource: datasource,\n        builderOptions: builderOptions,\n        builderOptionsDispatch: builderOptionsDispatch\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_SqlPreview__WEBPACK_IMPORTED_MODULE_5__.SqlPreview, {\n        sql: generatedSql\n    }));\n};\nconst MinimizedQueryViewer = (props)=>{\n    var _builderOptions_columns, _builderOptions_meta, _builderOptions_filters;\n    const { builderOptions, builderOptionsDispatch, datasource } = props;\n    const defaultColumns = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs) {\n            return datasource.getDefaultLogsColumns();\n        } else if (builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces) {\n            return datasource.getDefaultTraceColumns();\n        }\n        return undefined;\n    }, [\n        builderOptions.queryType,\n        datasource\n    ]);\n    const showConfigWarning = (defaultColumns === null || defaultColumns === void 0 ? void 0 : defaultColumns.size) === 0 && ((_builderOptions_columns = builderOptions.columns) === null || _builderOptions_columns === void 0 ? void 0 : _builderOptions_columns.length) === 0;\n    const configQueryType = builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs ? 'logs' : builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces ? 'trace' : builderOptions.queryType;\n    let traceId;\n    if (builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces && ((_builderOptions_meta = builderOptions.meta) === null || _builderOptions_meta === void 0 ? void 0 : _builderOptions_meta.isTraceIdMode) && builderOptions.meta.traceId) {\n        traceId = builderOptions.meta.traceId;\n    } else if (builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs && ((_builderOptions_filters = builderOptions.filters) === null || _builderOptions_filters === void 0 ? void 0 : _builderOptions_filters.find((f)=>f.hint === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceId && 'value' in f))) {\n        var _builderOptions_filters1;\n        const traceIdFilter = (_builderOptions_filters1 = builderOptions.filters) === null || _builderOptions_filters1 === void 0 ? void 0 : _builderOptions_filters1.find((f)=>f.hint === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceId && 'value' in f);\n        traceId = traceIdFilter.value;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        \"data-testid\": \"query-editor-minimized-viewer\"\n    }, showConfigWarning && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.Alert, {\n        title: \"\",\n        severity: \"warning\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.VerticalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, `To enable data linking, enter your default ${configQueryType} configuration in your `, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        style: {\n            textDecoration: 'underline'\n        },\n        href: `/connections/datasources/edit/${encodeURIComponent(datasource.uid)}#${builderOptions.queryType}-config`\n    }, \"ClickHouse Data Source settings\")))), !traceId && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.Alert, {\n        title: \"\",\n        severity: \"warning\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.VerticalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, \"Trace ID is empty\"))), traceId && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_TraceIdInput__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        traceId: traceId,\n        onChange: ()=>{},\n        disabled: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.Button, {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_13__.Components.QueryBuilder.expandBuilderButton,\n        icon: \"plus\",\n        variant: \"secondary\",\n        size: \"md\",\n        onClick: ()=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_10__.setBuilderMinimized)(false)),\n        className: _styles__WEBPACK_IMPORTED_MODULE_8__.styles.Common.smallBtn,\n        tooltip: _labels__WEBPACK_IMPORTED_MODULE_14__[\"default\"].components.expandBuilderButton.tooltip\n    }, _labels__WEBPACK_IMPORTED_MODULE_14__[\"default\"].components.expandBuilderButton.label));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/QueryBuilder.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/QueryTypeSwitcher.tsx":
/*!*******************************************************!*\
  !*** ./components/queryBuilder/QueryTypeSwitcher.tsx ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryTypeSwitcher: () => (/* binding */ QueryTypeSwitcher)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n\n\n\n\nconst options = [\n    {\n        label: _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].types.QueryType.table,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.QueryType.Table\n    },\n    {\n        label: _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].types.QueryType.logs,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.QueryType.Logs\n    },\n    {\n        label: _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].types.QueryType.timeseries,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.QueryType.TimeSeries\n    },\n    {\n        label: _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].types.QueryType.traces,\n        value: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.QueryType.Traces\n    }\n];\n/**\n * Component for switching between the different query builder interfaces\n */ const QueryTypeSwitcher = (props)=>{\n    const { queryType, onChange, sqlEditor } = props;\n    const { label, tooltip, sqlTooltip } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.QueryTypeSwitcher;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: sqlEditor ? sqlTooltip : tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.RadioButtonGroup, {\n        options: options,\n        value: queryType,\n        onChange: onChange\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9RdWVyeVR5cGVTd2l0Y2hlci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwQjtBQUNzQztBQUNwQztBQUNtQjtBQVEvQyxNQUFNSyxVQUFVO0lBQ2Q7UUFDRUMsT0FBT0gsK0NBQU1BLENBQUNJLEtBQUssQ0FBQ0gsU0FBUyxDQUFDSSxLQUFLO1FBQ25DQyxPQUFPTCwwREFBU0EsQ0FBQ00sS0FBSztJQUN4QjtJQUNBO1FBQ0VKLE9BQU9ILCtDQUFNQSxDQUFDSSxLQUFLLENBQUNILFNBQVMsQ0FBQ08sSUFBSTtRQUNsQ0YsT0FBT0wsMERBQVNBLENBQUNRLElBQUk7SUFDdkI7SUFDQTtRQUNFTixPQUFPSCwrQ0FBTUEsQ0FBQ0ksS0FBSyxDQUFDSCxTQUFTLENBQUNTLFVBQVU7UUFDeENKLE9BQU9MLDBEQUFTQSxDQUFDVSxVQUFVO0lBQzdCO0lBQ0E7UUFDRVIsT0FBT0gsK0NBQU1BLENBQUNJLEtBQUssQ0FBQ0gsU0FBUyxDQUFDVyxNQUFNO1FBQ3BDTixPQUFPTCwwREFBU0EsQ0FBQ1ksTUFBTTtJQUN6QjtDQUNEO0FBRUQ7O0NBRUMsR0FDTSxNQUFNQyxvQkFBb0IsQ0FBQ0M7SUFDaEMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFLEdBQUdIO0lBQzNDLE1BQU0sRUFBRVosS0FBSyxFQUFFZ0IsT0FBTyxFQUFFQyxVQUFVLEVBQUUsR0FBR3BCLCtDQUFNQSxDQUFDcUIsVUFBVSxDQUFDUCxpQkFBaUI7SUFFMUUscUJBQ0UsMkRBQUNRLDRCQUNDLDJEQUFDdkIsd0RBQWVBO1FBQUN3QixPQUFPO1FBQUdDLFdBQVU7UUFBZ0JMLFNBQVNELFlBQVlFLGFBQWFEO09BQ3BGaEIsc0JBRUgsMkRBQUNMLHlEQUFnQkE7UUFBQ0ksU0FBU0E7UUFBU0ksT0FBT1U7UUFBV0MsVUFBVUE7O0FBR3RFLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvcXVlcnlCdWlsZGVyL1F1ZXJ5VHlwZVN3aXRjaGVyLnRzeD9jMmQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSYWRpb0J1dHRvbkdyb3VwLCBJbmxpbmVGb3JtTGFiZWwgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgbGFiZWxzIGZyb20gJ2xhYmVscyc7XG5pbXBvcnQgeyBRdWVyeVR5cGUgfSBmcm9tICd0eXBlcy9xdWVyeUJ1aWxkZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXJ5VHlwZVN3aXRjaGVyUHJvcHMge1xuICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZTtcbiAgb25DaGFuZ2U6IChxdWVyeVR5cGU6IFF1ZXJ5VHlwZSkgPT4gdm9pZDtcbiAgc3FsRWRpdG9yPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IG9wdGlvbnMgPSBbXG4gIHtcbiAgICBsYWJlbDogbGFiZWxzLnR5cGVzLlF1ZXJ5VHlwZS50YWJsZSxcbiAgICB2YWx1ZTogUXVlcnlUeXBlLlRhYmxlLFxuICB9LFxuICB7XG4gICAgbGFiZWw6IGxhYmVscy50eXBlcy5RdWVyeVR5cGUubG9ncyxcbiAgICB2YWx1ZTogUXVlcnlUeXBlLkxvZ3MsXG4gIH0sXG4gIHtcbiAgICBsYWJlbDogbGFiZWxzLnR5cGVzLlF1ZXJ5VHlwZS50aW1lc2VyaWVzLFxuICAgIHZhbHVlOiBRdWVyeVR5cGUuVGltZVNlcmllcyxcbiAgfSxcbiAge1xuICAgIGxhYmVsOiBsYWJlbHMudHlwZXMuUXVlcnlUeXBlLnRyYWNlcyxcbiAgICB2YWx1ZTogUXVlcnlUeXBlLlRyYWNlcyxcbiAgfSxcbl07XG5cbi8qKlxuICogQ29tcG9uZW50IGZvciBzd2l0Y2hpbmcgYmV0d2VlbiB0aGUgZGlmZmVyZW50IHF1ZXJ5IGJ1aWxkZXIgaW50ZXJmYWNlc1xuICovXG5leHBvcnQgY29uc3QgUXVlcnlUeXBlU3dpdGNoZXIgPSAocHJvcHM6IFF1ZXJ5VHlwZVN3aXRjaGVyUHJvcHMpID0+IHtcbiAgY29uc3QgeyBxdWVyeVR5cGUsIG9uQ2hhbmdlLCBzcWxFZGl0b3IgfSA9IHByb3BzO1xuICBjb25zdCB7IGxhYmVsLCB0b29sdGlwLCBzcWxUb29sdGlwIH0gPSBsYWJlbHMuY29tcG9uZW50cy5RdWVyeVR5cGVTd2l0Y2hlcjtcblxuICByZXR1cm4gKFxuICAgIDxzcGFuPlxuICAgICAgPElubGluZUZvcm1MYWJlbCB3aWR0aD17OH0gY2xhc3NOYW1lPVwicXVlcnkta2V5d29yZFwiIHRvb2x0aXA9e3NxbEVkaXRvciA/IHNxbFRvb2x0aXAgOiB0b29sdGlwfT5cbiAgICAgICAge2xhYmVsfVxuICAgICAgPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICA8UmFkaW9CdXR0b25Hcm91cCBvcHRpb25zPXtvcHRpb25zfSB2YWx1ZT17cXVlcnlUeXBlfSBvbkNoYW5nZT17b25DaGFuZ2V9IC8+XG4gICAgPC9zcGFuPlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIlJhZGlvQnV0dG9uR3JvdXAiLCJJbmxpbmVGb3JtTGFiZWwiLCJsYWJlbHMiLCJRdWVyeVR5cGUiLCJvcHRpb25zIiwibGFiZWwiLCJ0eXBlcyIsInRhYmxlIiwidmFsdWUiLCJUYWJsZSIsImxvZ3MiLCJMb2dzIiwidGltZXNlcmllcyIsIlRpbWVTZXJpZXMiLCJ0cmFjZXMiLCJUcmFjZXMiLCJRdWVyeVR5cGVTd2l0Y2hlciIsInByb3BzIiwicXVlcnlUeXBlIiwib25DaGFuZ2UiLCJzcWxFZGl0b3IiLCJ0b29sdGlwIiwic3FsVG9vbHRpcCIsImNvbXBvbmVudHMiLCJzcGFuIiwid2lkdGgiLCJjbGFzc05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/queryBuilder/QueryTypeSwitcher.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/SqlPreview.tsx":
/*!************************************************!*\
  !*** ./components/queryBuilder/SqlPreview.tsx ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SqlPreview: () => (/* binding */ SqlPreview)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n\n\n\nconst SqlPreview = (props)=>{\n    const { sql } = props;\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_2__[\"default\"].components.SqlPreview;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"pre\", null, sql));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9TcWxQcmV2aWV3LnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMEI7QUFDb0I7QUFDbEI7QUFNckIsTUFBTUcsYUFBYSxDQUFDQztJQUN6QixNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHRDtJQUNoQixNQUFNLEVBQUVFLEtBQUssRUFBRUMsT0FBTyxFQUFFLEdBQUdMLCtDQUFNQSxDQUFDTSxVQUFVLENBQUNMLFVBQVU7SUFFdkQscUJBQ0UsMkRBQUNNO1FBQUlDLFdBQVU7cUJBQ2IsMkRBQUNULHdEQUFlQTtRQUFDVSxPQUFPO1FBQUdELFdBQVU7UUFBZ0JILFNBQVNBO09BQzNERCxzQkFFSCwyREFBQ00sYUFBS1A7QUFHWixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9TcWxQcmV2aWV3LnRzeD85YTQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJbmxpbmVGb3JtTGFiZWwgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgbGFiZWxzIGZyb20gJ2xhYmVscyc7XG5cbmludGVyZmFjZSBTcWxQcmV2aWV3UHJvcHMge1xuICBzcWw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IFNxbFByZXZpZXcgPSAocHJvcHM6IFNxbFByZXZpZXdQcm9wcykgPT4ge1xuICBjb25zdCB7IHNxbCB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgbGFiZWwsIHRvb2x0aXAgfSA9IGxhYmVscy5jb21wb25lbnRzLlNxbFByZXZpZXc7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgIDxJbmxpbmVGb3JtTGFiZWwgd2lkdGg9ezh9IGNsYXNzTmFtZT1cInF1ZXJ5LWtleXdvcmRcIiB0b29sdGlwPXt0b29sdGlwfT5cbiAgICAgICAge2xhYmVsfVxuICAgICAgPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICA8cHJlPntzcWx9PC9wcmU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSW5saW5lRm9ybUxhYmVsIiwibGFiZWxzIiwiU3FsUHJldmlldyIsInByb3BzIiwic3FsIiwibGFiZWwiLCJ0b29sdGlwIiwiY29tcG9uZW50cyIsImRpdiIsImNsYXNzTmFtZSIsIndpZHRoIiwicHJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/queryBuilder/SqlPreview.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/Switch.tsx":
/*!********************************************!*\
  !*** ./components/queryBuilder/Switch.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Switch: () => (/* binding */ Switch)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../styles */ \"./styles.ts\");\n\n\n\nconst Switch = (props)=>{\n    const { value, onChange, label, tooltip, inline, wide } = props;\n    const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.useTheme)();\n    const switchContainerStyle = {\n        padding: `0 ${theme.spacing.sm}`,\n        height: `${theme.spacing.formInputHeight}px`,\n        display: 'flex',\n        alignItems: 'center'\n    };\n    const labelStyle = 'query-keyword ' + (inline ? _styles__WEBPACK_IMPORTED_MODULE_2__.styles.QueryEditor.inlineField : '');\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {\n        width: wide ? 12 : 8,\n        className: labelStyle,\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: switchContainerStyle\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Switch, {\n        className: \"gf-form\",\n        value: value,\n        onChange: (e)=>onChange(e.currentTarget.checked)\n    })));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9Td2l0Y2gudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwQjtBQUN1RDtBQUNqRDtBQVd6QixNQUFNRSxTQUFTLENBQUNJO0lBQ3JCLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHTjtJQUUxRCxNQUFNTyxRQUFRVCxxREFBUUE7SUFDdEIsTUFBTVUsdUJBQTRDO1FBQ2hEQyxTQUFTLENBQUMsRUFBRSxFQUFFRixNQUFNRyxPQUFPLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDQyxRQUFRLENBQUMsRUFBRUwsTUFBTUcsT0FBTyxDQUFDRyxlQUFlLENBQUMsRUFBRSxDQUFDO1FBQzVDQyxTQUFTO1FBQ1RDLFlBQVk7SUFDZDtJQUVBLE1BQU1DLGFBQWEsbUJBQW9CWCxDQUFBQSxTQUFTTiwyQ0FBTUEsQ0FBQ2tCLFdBQVcsQ0FBQ0MsV0FBVyxHQUFHLEVBQUM7SUFFbEYscUJBQ0UsMkRBQUNDO1FBQUlDLFdBQVU7cUJBQ2IsMkRBQUN6Qix3REFBZUE7UUFBQzBCLE9BQU9mLE9BQU8sS0FBSztRQUFHYyxXQUFXSjtRQUFZWixTQUFTQTtPQUNwRUQsc0JBRUgsMkRBQUNnQjtRQUFJRyxPQUFPZDtxQkFDViwyREFBQ1gsK0NBQWFBO1FBQ1p1QixXQUFVO1FBQ1ZuQixPQUFPQTtRQUNQQyxVQUFVcUIsQ0FBQUEsSUFBS3JCLFNBQVNxQixFQUFFQyxhQUFhLENBQUNDLE9BQU87O0FBS3pELEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvcXVlcnlCdWlsZGVyL1N3aXRjaC50c3g/YjY2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW5saW5lRm9ybUxhYmVsLCBTd2l0Y2ggYXMgR3JhZmFuYVN3aXRjaCwgdXNlVGhlbWUgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgeyBzdHlsZXMgfSBmcm9tICdzdHlsZXMnO1xuXG5pbnRlcmZhY2UgU3dpdGNoUHJvcHMge1xuICB2YWx1ZTogYm9vbGVhbjtcbiAgb25DaGFuZ2U6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgbGFiZWw6IHN0cmluZztcbiAgdG9vbHRpcDogc3RyaW5nO1xuICBpbmxpbmU/OiBib29sZWFuO1xuICB3aWRlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IFN3aXRjaCA9IChwcm9wczogU3dpdGNoUHJvcHMpID0+IHtcbiAgY29uc3QgeyB2YWx1ZSwgb25DaGFuZ2UsIGxhYmVsLCB0b29sdGlwLCBpbmxpbmUsIHdpZGUgfSA9IHByb3BzO1xuXG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgc3dpdGNoQ29udGFpbmVyU3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XG4gICAgcGFkZGluZzogYDAgJHt0aGVtZS5zcGFjaW5nLnNtfWAsXG4gICAgaGVpZ2h0OiBgJHt0aGVtZS5zcGFjaW5nLmZvcm1JbnB1dEhlaWdodH1weGAsXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9O1xuXG4gIGNvbnN0IGxhYmVsU3R5bGUgPSAncXVlcnkta2V5d29yZCAnICsgKGlubGluZSA/IHN0eWxlcy5RdWVyeUVkaXRvci5pbmxpbmVGaWVsZCA6ICcnKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICA8SW5saW5lRm9ybUxhYmVsIHdpZHRoPXt3aWRlID8gMTIgOiA4fSBjbGFzc05hbWU9e2xhYmVsU3R5bGV9IHRvb2x0aXA9e3Rvb2x0aXB9PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgIDxkaXYgc3R5bGU9e3N3aXRjaENvbnRhaW5lclN0eWxlfT5cbiAgICAgICAgPEdyYWZhbmFTd2l0Y2hcbiAgICAgICAgICBjbGFzc05hbWU9XCJnZi1mb3JtXCJcbiAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZS5jdXJyZW50VGFyZ2V0LmNoZWNrZWQpfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSW5saW5lRm9ybUxhYmVsIiwiU3dpdGNoIiwiR3JhZmFuYVN3aXRjaCIsInVzZVRoZW1lIiwic3R5bGVzIiwicHJvcHMiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwibGFiZWwiLCJ0b29sdGlwIiwiaW5saW5lIiwid2lkZSIsInRoZW1lIiwic3dpdGNoQ29udGFpbmVyU3R5bGUiLCJwYWRkaW5nIiwic3BhY2luZyIsInNtIiwiaGVpZ2h0IiwiZm9ybUlucHV0SGVpZ2h0IiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJsYWJlbFN0eWxlIiwiUXVlcnlFZGl0b3IiLCJpbmxpbmVGaWVsZCIsImRpdiIsImNsYXNzTmFtZSIsIndpZHRoIiwic3R5bGUiLCJlIiwiY3VycmVudFRhcmdldCIsImNoZWNrZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/queryBuilder/Switch.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/TraceIdInput.tsx":
/*!**************************************************!*\
  !*** ./components/queryBuilder/TraceIdInput.tsx ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../labels */ \"./labels.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../selectors */ \"./selectors.ts\");\n\n\n\n\nconst TraceIdInput = (props)=>{\n    const [inputId, setInputId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const { traceId, onChange, disabled } = props;\n    const { label, tooltip } = _labels__WEBPACK_IMPORTED_MODULE_1__[\"default\"].components.TraceQueryBuilder.columns.traceIdFilter;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setInputId(traceId);\n    }, [\n        traceId\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_3__.selectors.components.QueryBuilder.TraceIdInput.input,\n        width: 40,\n        value: inputId,\n        disabled: disabled,\n        type: \"string\",\n        onChange: (e)=>setInputId(e.currentTarget.value),\n        onBlur: ()=>onChange(inputId)\n    }));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TraceIdInput);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci9UcmFjZUlkSW5wdXQudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUQ7QUFDcEI7QUFDc0I7QUFDZjtBQVF0QyxNQUFNTyxlQUFlLENBQUNDO0lBQ3BCLE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxHQUFHUiwrQ0FBUUEsQ0FBUztJQUMvQyxNQUFNLEVBQUVTLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUUsR0FBR0w7SUFDeEMsTUFBTSxFQUFFTSxLQUFLLEVBQUVDLE9BQU8sRUFBRSxHQUFHWiwrQ0FBU0EsQ0FBQ2EsVUFBVSxDQUFDQyxpQkFBaUIsQ0FBQ0MsT0FBTyxDQUFDQyxhQUFhO0lBRXZGbEIsZ0RBQVNBLENBQUM7UUFDUlMsV0FBV0M7SUFDYixHQUFHO1FBQUNBO0tBQVE7SUFFWixxQkFDRSwyREFBQ1M7UUFBSUMsV0FBVTtxQkFDYiwyREFBQ2pCLHdEQUFlQTtRQUFDa0IsT0FBTztRQUFHRCxXQUFVO1FBQWdCTixTQUFTQTtPQUMzREQsc0JBRUgsMkRBQUNULDhDQUFLQTtRQUNKa0IsZUFBYWpCLGlEQUFTQSxDQUFDVSxVQUFVLENBQUNRLFlBQVksQ0FBQ2pCLFlBQVksQ0FBQ2tCLEtBQUs7UUFDakVILE9BQU87UUFDUEksT0FBT2pCO1FBQ1BJLFVBQVVBO1FBQ1ZjLE1BQUs7UUFDTGYsVUFBVWdCLENBQUFBLElBQUtsQixXQUFXa0IsRUFBRUMsYUFBYSxDQUFDSCxLQUFLO1FBQy9DSSxRQUFRLElBQU1sQixTQUFTSDs7QUFJL0I7QUFFQSxpRUFBZUYsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vY29tcG9uZW50cy9xdWVyeUJ1aWxkZXIvVHJhY2VJZElucHV0LnRzeD8yNmQyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGFsbExhYmVscyBmcm9tICdsYWJlbHMnO1xuaW1wb3J0IHsgSW5saW5lRm9ybUxhYmVsLCBJbnB1dCB9IGZyb20gJ0BncmFmYW5hL3VpJztcbmltcG9ydCB7IHNlbGVjdG9ycyB9IGZyb20gJ3NlbGVjdG9ycyc7XG5cbmludGVyZmFjZSBUcmFjZUlkSW5wdXRQcm9wcyB7XG4gIHRyYWNlSWQ6IHN0cmluZztcbiAgb25DaGFuZ2U6ICh0cmFjZUlkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IFRyYWNlSWRJbnB1dCA9IChwcm9wczogVHJhY2VJZElucHV0UHJvcHMpID0+IHtcbiAgY29uc3QgW2lucHV0SWQsIHNldElucHV0SWRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IHsgdHJhY2VJZCwgb25DaGFuZ2UsIGRpc2FibGVkIH0gPSBwcm9wcztcbiAgY29uc3QgeyBsYWJlbCwgdG9vbHRpcCB9ID0gYWxsTGFiZWxzLmNvbXBvbmVudHMuVHJhY2VRdWVyeUJ1aWxkZXIuY29sdW1ucy50cmFjZUlkRmlsdGVyO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SW5wdXRJZCh0cmFjZUlkKTtcbiAgfSwgW3RyYWNlSWRdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2YtZm9ybVwiPlxuICAgICAgPElubGluZUZvcm1MYWJlbCB3aWR0aD17OH0gY2xhc3NOYW1lPVwicXVlcnkta2V5d29yZFwiIHRvb2x0aXA9e3Rvb2x0aXB9PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgIDxJbnB1dFxuICAgICAgICBkYXRhLXRlc3RpZD17c2VsZWN0b3JzLmNvbXBvbmVudHMuUXVlcnlCdWlsZGVyLlRyYWNlSWRJbnB1dC5pbnB1dH1cbiAgICAgICAgd2lkdGg9ezQwfVxuICAgICAgICB2YWx1ZT17aW5wdXRJZH1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICB0eXBlPVwic3RyaW5nXCJcbiAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0SW5wdXRJZChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfVxuICAgICAgICBvbkJsdXI9eygpID0+IG9uQ2hhbmdlKGlucHV0SWQpfVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUcmFjZUlkSW5wdXQ7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImFsbExhYmVscyIsIklubGluZUZvcm1MYWJlbCIsIklucHV0Iiwic2VsZWN0b3JzIiwiVHJhY2VJZElucHV0IiwicHJvcHMiLCJpbnB1dElkIiwic2V0SW5wdXRJZCIsInRyYWNlSWQiLCJvbkNoYW5nZSIsImRpc2FibGVkIiwibGFiZWwiLCJ0b29sdGlwIiwiY29tcG9uZW50cyIsIlRyYWNlUXVlcnlCdWlsZGVyIiwiY29sdW1ucyIsInRyYWNlSWRGaWx0ZXIiLCJkaXYiLCJjbGFzc05hbWUiLCJ3aWR0aCIsImRhdGEtdGVzdGlkIiwiUXVlcnlCdWlsZGVyIiwiaW5wdXQiLCJ2YWx1ZSIsInR5cGUiLCJlIiwiY3VycmVudFRhcmdldCIsIm9uQmx1ciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/queryBuilder/TraceIdInput.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/utils.ts":
/*!******************************************!*\
  !*** ./components/queryBuilder/utils.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOper: () => (/* binding */ getOper),\n/* harmony export */   getQueryOptionsFromSql: () => (/* binding */ getQueryOptionsFromSql),\n/* harmony export */   isBooleanFilter: () => (/* binding */ isBooleanFilter),\n/* harmony export */   isBooleanType: () => (/* binding */ isBooleanType),\n/* harmony export */   isDateFilter: () => (/* binding */ isDateFilter),\n/* harmony export */   isDateFilterWithOutValue: () => (/* binding */ isDateFilterWithOutValue),\n/* harmony export */   isDateTimeType: () => (/* binding */ isDateTimeType),\n/* harmony export */   isDateType: () => (/* binding */ isDateType),\n/* harmony export */   isMultiFilter: () => (/* binding */ isMultiFilter),\n/* harmony export */   isNullFilter: () => (/* binding */ isNullFilter),\n/* harmony export */   isNumberFilter: () => (/* binding */ isNumberFilter),\n/* harmony export */   isNumberType: () => (/* binding */ isNumberType),\n/* harmony export */   isStringFilter: () => (/* binding */ isStringFilter),\n/* harmony export */   isStringType: () => (/* binding */ isStringType),\n/* harmony export */   operMap: () => (/* binding */ operMap)\n/* harmony export */ });\n/* harmony import */ var pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pgsql-ast-parser */ \"../node_modules/pgsql-ast-parser/index.js\");\n/* harmony import */ var pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _data_ast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../data/ast */ \"./data/ast.ts\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../data/utils */ \"./data/utils.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\nconst isBooleanType = (type)=>{\n    return [\n        'boolean'\n    ].includes(type === null || type === void 0 ? void 0 : type.toLowerCase());\n};\nconst isNumberType = (type)=>{\n    return [\n        'int',\n        'float',\n        'decimal'\n    ].some((t)=>type === null || type === void 0 ? void 0 : type.toLowerCase().includes(t));\n};\nconst isDateType = (type)=>{\n    const normalizedName = type === null || type === void 0 ? void 0 : type.toLowerCase();\n    return (normalizedName === null || normalizedName === void 0 ? void 0 : normalizedName.startsWith('date')) || (normalizedName === null || normalizedName === void 0 ? void 0 : normalizedName.startsWith('nullable(date'));\n};\nconst isDateTimeType = (type)=>{\n    const normalizedName = type === null || type === void 0 ? void 0 : type.toLowerCase();\n    return (normalizedName === null || normalizedName === void 0 ? void 0 : normalizedName.startsWith('datetime')) || (normalizedName === null || normalizedName === void 0 ? void 0 : normalizedName.startsWith('nullable(datetime'));\n};\nconst isStringType = (type)=>{\n    return !(isBooleanType(type) || isNumberType(type) || isDateType(type));\n};\nconst isNullFilter = (filter)=>{\n    return [\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNull,\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull\n    ].includes(filter.operator);\n};\nconst isBooleanFilter = (filter)=>{\n    return isBooleanType(filter.type);\n};\nconst isNumberFilter = (filter)=>{\n    return isNumberType(filter.type);\n};\nconst isDateFilterWithOutValue = (filter)=>{\n    return isDateType(filter.type) && [\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange,\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.OutsideGrafanaTimeRange\n    ].includes(filter.operator);\n};\nconst isDateFilter = (filter)=>{\n    return isDateType(filter.type);\n};\nconst isStringFilter = (filter)=>{\n    return isStringType(filter.type) && ![\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.In,\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotIn\n    ].includes(filter.operator);\n};\nconst isMultiFilter = (filter)=>{\n    return isStringType(filter.type) && [\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.In,\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotIn\n    ].includes(filter.operator);\n};\nfunction getQueryOptionsFromSql(sql, queryType, datasource) {\n    var _ast_orderBy, _ast_limit_limit, _ast_limit, _ast_limit1, _ast_groupBy;\n    const ast = (0,_data_ast__WEBPACK_IMPORTED_MODULE_3__.sqlToStatement)(sql);\n    if (!ast) {\n        throw new Error('The query is not valid SQL.');\n    }\n    if (ast.type !== 'select') {\n        throw new Error('The query is not a select statement.');\n    }\n    if (!ast.from || ast.from.length !== 1) {\n        throw new Error(`The query has too many 'FROM' clauses.`);\n    }\n    if (ast.from[0].type !== 'table') {\n        throw new Error(`The 'FROM' clause is not a table.`);\n    }\n    const fromTable = ast.from[0];\n    const columnsAndAggregates = getAggregatesFromAst(ast.columns || null);\n    const builderOptions = {\n        database: fromTable.name.schema || '',\n        table: fromTable.name.name || '',\n        queryType: queryType || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Table,\n        mode: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.List,\n        columns: [],\n        aggregates: []\n    };\n    if (columnsAndAggregates.columns.length > 0) {\n        builderOptions.columns = columnsAndAggregates.columns || [];\n    }\n    // Reconstruct column hints based off of known column names / aliases\n    if (queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Logs) {\n        (0,_data_utils__WEBPACK_IMPORTED_MODULE_5__.tryApplyColumnHints)(builderOptions.columns, datasource === null || datasource === void 0 ? void 0 : datasource.getDefaultLogsColumns()); // Try match default log columns\n        (0,_data_utils__WEBPACK_IMPORTED_MODULE_5__.tryApplyColumnHints)(builderOptions.columns, _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_4__.logColumnHintsToAlias); // Try match Grafana aliases\n    } else if (queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Traces) {\n        (0,_data_utils__WEBPACK_IMPORTED_MODULE_5__.tryApplyColumnHints)(builderOptions.columns, datasource === null || datasource === void 0 ? void 0 : datasource.getDefaultTraceColumns());\n    }\n    if (columnsAndAggregates.aggregates.length > 0) {\n        builderOptions.mode = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Aggregate;\n        builderOptions.aggregates = columnsAndAggregates.aggregates;\n    }\n    const timeColumn = (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_4__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time);\n    if (!queryType && timeColumn) {\n        var _builderOptions_aggregates;\n        builderOptions.queryType = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.TimeSeries;\n        if (((_builderOptions_aggregates = builderOptions.aggregates) === null || _builderOptions_aggregates === void 0 ? void 0 : _builderOptions_aggregates.length) || 0) {\n            builderOptions.mode = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Trend;\n        }\n    }\n    if (ast.where) {\n        builderOptions.filters = getFiltersFromAst(ast.where, (timeColumn === null || timeColumn === void 0 ? void 0 : timeColumn.name) || '');\n    }\n    const orderBy = (_ast_orderBy = ast.orderBy) === null || _ast_orderBy === void 0 ? void 0 : _ast_orderBy.map((ob)=>{\n        if (ob.by.type !== 'ref') {\n            return {};\n        }\n        return {\n            name: ob.by.name,\n            dir: ob.order\n        };\n    }).filter((x)=>x.name);\n    if (orderBy && orderBy.length > 0) {\n        builderOptions.orderBy = orderBy;\n    }\n    builderOptions.limit = ((_ast_limit = ast.limit) === null || _ast_limit === void 0 ? void 0 : (_ast_limit_limit = _ast_limit.limit) === null || _ast_limit_limit === void 0 ? void 0 : _ast_limit_limit.type) === 'integer' ? (_ast_limit1 = ast.limit) === null || _ast_limit1 === void 0 ? void 0 : _ast_limit1.limit.value : undefined;\n    const groupBy = (_ast_groupBy = ast.groupBy) === null || _ast_groupBy === void 0 ? void 0 : _ast_groupBy.map((gb)=>{\n        if (gb.type !== 'ref') {\n            return '';\n        }\n        return gb.name;\n    }).filter((x)=>x !== '');\n    if (groupBy && groupBy.length > 0) {\n        builderOptions.groupBy = groupBy;\n    }\n    return builderOptions;\n}\nfunction getFiltersFromAst(expr, timeField) {\n    const filters = [];\n    let i = 0;\n    let notFlag = false;\n    const visitor = (0,pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__.astVisitor)((map)=>({\n            expr: (e)=>{\n                switch(e === null || e === void 0 ? void 0 : e.type){\n                    case 'binary':\n                        notFlag = getBinaryFilter(e, filters, i, notFlag);\n                        map.super().expr(e);\n                        break;\n                    case 'ref':\n                        ({ i, notFlag } = getRefFilter(e, filters, i, notFlag));\n                        break;\n                    case 'string':\n                        i = getStringFilter(filters, i, e);\n                        break;\n                    case 'integer':\n                        i = getIntFilter(filters, i, e);\n                        break;\n                    case 'unary':\n                        notFlag = getUnaryFilter(e, notFlag, i, filters);\n                        map.super().expr(e);\n                        break;\n                    case 'call':\n                        i = getCallFilter(e, timeField, filters, i);\n                        break;\n                    case 'list':\n                        i = getListFilter(filters, i, e);\n                        break;\n                    default:\n                        console.error(`${e === null || e === void 0 ? void 0 : e.type} is not supported. This is likely a bug.`);\n                        break;\n                }\n            }\n        }));\n    visitor.expr(expr);\n    return filters;\n}\nfunction getRefFilter(e, filters, i, notFlag) {\n    var _e_name, _e_name1;\n    if (((_e_name = e.name) === null || _e_name === void 0 ? void 0 : _e_name.toLowerCase()) === '$__fromtime' && filters[i].operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThanOrEqual) {\n        if (notFlag) {\n            filters[i].operator = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.OutsideGrafanaTimeRange;\n            notFlag = false;\n        } else {\n            filters[i].operator = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange;\n        }\n        filters[i].type = 'datetime';\n        i++;\n        return {\n            i,\n            notFlag\n        };\n    }\n    if (((_e_name1 = e.name) === null || _e_name1 === void 0 ? void 0 : _e_name1.toLowerCase()) === '$__totime') {\n        filters.splice(i, 1);\n        return {\n            i,\n            notFlag\n        };\n    }\n    if (!filters[i].key) {\n        filters[i].key = e.name;\n        if (filters[i].operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsNotNull) {\n            i++;\n        }\n        return {\n            i,\n            notFlag\n        };\n    }\n    filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n        value: [\n            e.name\n        ],\n        type: 'string'\n    });\n    i++;\n    return {\n        i,\n        notFlag\n    };\n}\nfunction getListFilter(filters, i, e) {\n    filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n        value: e.expressions.map((x)=>{\n            const k = x;\n            return k.value;\n        }),\n        type: 'string'\n    });\n    i++;\n    return i;\n}\nfunction getCallFilter(e, timeField, filters, i) {\n    const val = `${e.function.name}(${e.args.map((x)=>x.name).join(',')})`;\n    //do not add the timeFilter that is used when using time series and remove the condition\n    if (val === `$__timefilter(${timeField})`) {\n        filters.splice(i, 1);\n        return i;\n    }\n    if (val.startsWith('$__timefilter(')) {\n        filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n            key: e.args[0].name,\n            operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange,\n            type: 'datetime'\n        });\n        i++;\n        return i;\n    }\n    filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n        value: val,\n        type: 'datetime'\n    });\n    if (!val) {\n        i++;\n    }\n    return i;\n}\nfunction getUnaryFilter(e, notFlag, i, filters) {\n    if (e.op === 'NOT') {\n        return true;\n    }\n    if (i === 0) {\n        filters.unshift({});\n    }\n    filters[i].operator = e.op;\n    return notFlag;\n}\nfunction getStringFilter(filters, i, e) {\n    if (!filters[i].key) {\n        filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n            key: e.value\n        });\n        return i;\n    }\n    filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n        value: e.value,\n        type: 'string'\n    });\n    i++;\n    return i;\n}\nfunction getIntFilter(filters, i, e) {\n    if (!filters[i].key) {\n        filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n            key: e.value.toString()\n        });\n        return i;\n    }\n    filters[i] = _object_spread_props(_object_spread({}, filters[i]), {\n        value: e.value,\n        type: 'int'\n    });\n    i++;\n    return i;\n}\nfunction getBinaryFilter(e, filters, i, notFlag) {\n    if (e.op === 'AND' || e.op === 'OR') {\n        filters.unshift({\n            condition: e.op\n        });\n    } else if (Object.values(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator).find((x)=>e.op === x)) {\n        if (i === 0) {\n            filters.unshift({});\n        } else if (!filters[i]) {\n            filters.push({\n                condition: 'AND'\n            });\n        }\n        filters[i].operator = e.op;\n        if (notFlag && filters[i].operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Like) {\n            filters[i].operator = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.NotLike;\n            notFlag = false;\n        }\n    }\n    return notFlag;\n}\nfunction selectCallFunc(s) {\n    var _s_alias;\n    if (s.expr.type !== 'call') {\n        return [\n            {},\n            undefined\n        ];\n    }\n    let fields = s.expr.args.map((x)=>{\n        if (x.type !== 'ref') {\n            return '';\n        }\n        return x.name;\n    });\n    if (fields.length > 1) {\n        return [\n            '',\n            undefined\n        ];\n    }\n    if (Object.values(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.AggregateType).includes(s.expr.function.name.toLowerCase())) {\n        var _s_alias1, _s_alias2;\n        return [\n            {\n                aggregateType: s.expr.function.name,\n                column: fields[0],\n                alias: (_s_alias1 = s.alias) === null || _s_alias1 === void 0 ? void 0 : _s_alias1.name\n            },\n            (_s_alias2 = s.alias) === null || _s_alias2 === void 0 ? void 0 : _s_alias2.name\n        ];\n    }\n    return [\n        fields[0],\n        (_s_alias = s.alias) === null || _s_alias === void 0 ? void 0 : _s_alias.name\n    ];\n}\nfunction getAggregatesFromAst(selectClauses) {\n    if (!selectClauses) {\n        return {\n            columns: [],\n            aggregates: []\n        };\n    }\n    const columns = [];\n    const aggregates = [];\n    for (let s of selectClauses){\n        switch(s.expr.type){\n            case 'ref':\n                var _s_alias;\n                columns.push({\n                    name: s.expr.name,\n                    alias: (_s_alias = s.alias) === null || _s_alias === void 0 ? void 0 : _s_alias.name\n                });\n                break;\n            case 'call':\n                const [columnOrAggregate, alias] = selectCallFunc(s);\n                if (!columnOrAggregate) {\n                    break;\n                }\n                if ((0,lodash__WEBPACK_IMPORTED_MODULE_1__.isString)(columnOrAggregate)) {\n                    columns.push({\n                        name: columnOrAggregate,\n                        type: 'datetime',\n                        alias,\n                        hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time\n                    });\n                } else {\n                    aggregates.push(columnOrAggregate);\n                }\n                break;\n        }\n    }\n    return {\n        columns,\n        aggregates\n    };\n}\nconst operMap = new Map([\n    [\n        'equals',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals\n    ],\n    [\n        'contains',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Like\n    ]\n]);\nfunction getOper(v) {\n    return operMap.get(v) || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.Equals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/utils.ts\n");

/***/ }),

/***/ "./components/queryBuilder/views/LogsQueryBuilder.tsx":
/*!************************************************************!*\
  !*** ./components/queryBuilder/views/LogsQueryBuilder.tsx ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogsQueryBuilder: () => (/* binding */ LogsQueryBuilder)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ColumnsEditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ColumnsEditor */ \"./components/queryBuilder/ColumnsEditor.tsx\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _ColumnSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ColumnSelect */ \"./components/queryBuilder/ColumnSelect.tsx\");\n/* harmony import */ var _OtelVersionSelect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../OtelVersionSelect */ \"./components/queryBuilder/OtelVersionSelect.tsx\");\n/* harmony import */ var _OrderByEditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../OrderByEditor */ \"./components/queryBuilder/OrderByEditor.tsx\");\n/* harmony import */ var _LimitEditor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../LimitEditor */ \"./components/queryBuilder/LimitEditor.tsx\");\n/* harmony import */ var _FilterEditor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../FilterEditor */ \"./components/queryBuilder/FilterEditor.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../labels */ \"./labels.ts\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _data_columnFilters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../data/columnFilters */ \"./data/columnFilters.ts\");\n/* harmony import */ var _hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionChanges */ \"./hooks/useBuilderOptionChanges.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var _hooks_useColumns__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useColumns */ \"./hooks/useColumns.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var _hooks_useIsNewQuery__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useIsNewQuery */ \"./hooks/useIsNewQuery.ts\");\n/* harmony import */ var _logsQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./logsQueryBuilderHooks */ \"./components/queryBuilder/views/logsQueryBuilderHooks.ts\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../styles */ \"./styles.ts\");\n/* harmony import */ var _selectors__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../selectors */ \"./selectors.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst LogsQueryBuilder = (props)=>{\n    var _builderOptions_columns;\n    const { datasource, builderOptions, builderOptionsDispatch } = props;\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_8__[\"default\"].components.LogsQueryBuilder;\n    const allColumns = (0,_hooks_useColumns__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(datasource, builderOptions.database, builderOptions.table);\n    const isNewQuery = (0,_hooks_useIsNewQuery__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(builderOptions);\n    const builderState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        var _builderOptions_meta, _builderOptions_meta1, _builderOptions_columns, _builderOptions_meta2;\n        return {\n            otelEnabled: ((_builderOptions_meta = builderOptions.meta) === null || _builderOptions_meta === void 0 ? void 0 : _builderOptions_meta.otelEnabled) || false,\n            otelVersion: ((_builderOptions_meta1 = builderOptions.meta) === null || _builderOptions_meta1 === void 0 ? void 0 : _builderOptions_meta1.otelVersion) || '',\n            timeColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_9__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time),\n            logLevelColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_9__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogLevel),\n            messageColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_9__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogMessage),\n            labelsColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_9__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogLabels),\n            selectedColumns: ((_builderOptions_columns = builderOptions.columns) === null || _builderOptions_columns === void 0 ? void 0 : _builderOptions_columns.filter((c)=>// Only select columns that don't have their own box\n                c.hint !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time && c.hint !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogLevel && c.hint !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogMessage && c.hint !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogLabels)) || [],\n            // liveView: builderOptions.meta?.liveView || false,\n            filters: builderOptions.filters || [],\n            orderBy: builderOptions.orderBy || [],\n            limit: builderOptions.limit || 0,\n            logMessageLike: ((_builderOptions_meta2 = builderOptions.meta) === null || _builderOptions_meta2 === void 0 ? void 0 : _builderOptions_meta2.logMessageLike) || ''\n        };\n    }, [\n        builderOptions\n    ]);\n    const [showConfigWarning, setConfigWarningOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(datasource.getDefaultLogsColumns().size === 0 && ((_builderOptions_columns = builderOptions.columns) === null || _builderOptions_columns === void 0 ? void 0 : _builderOptions_columns.length) === 0);\n    const onOptionChange = (0,_hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_11__.useBuilderOptionChanges)((next)=>{\n        const nextColumns = next.selectedColumns.slice();\n        if (next.timeColumn) {\n            nextColumns.push(next.timeColumn);\n        }\n        if (next.logLevelColumn) {\n            nextColumns.push(next.logLevelColumn);\n        }\n        if (next.messageColumn) {\n            nextColumns.push(next.messageColumn);\n        }\n        if (next.labelsColumn) {\n            nextColumns.push(next.labelsColumn);\n        }\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_14__.setOptions)({\n            columns: nextColumns,\n            filters: next.filters,\n            orderBy: next.orderBy,\n            limit: next.limit,\n            meta: {\n                logMessageLike: next.logMessageLike\n            }\n        }));\n    }, builderState);\n    (0,_logsQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__.useLogDefaultsOnMount)(datasource, isNewQuery, builderOptions, builderOptionsDispatch);\n    (0,_logsQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__.useOtelColumns)(datasource, builderState.otelEnabled, builderState.otelVersion, builderOptionsDispatch);\n    (0,_logsQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__.useDefaultTimeColumn)(datasource, allColumns, builderOptions.table, builderState.timeColumn, builderState.otelEnabled, builderOptionsDispatch);\n    (0,_logsQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__.useDefaultFilters)(builderOptions.table, isNewQuery, builderOptionsDispatch);\n    const configWarning = showConfigWarning && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.Alert, {\n        title: \"\",\n        severity: \"warning\",\n        buttonContent: \"Close\",\n        onRemove: ()=>setConfigWarningOpen(false)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.VerticalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, 'To speed up your query building, enter your default logs configuration in your ', /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        style: {\n            textDecoration: 'underline'\n        },\n        href: `/connections/datasources/edit/${encodeURIComponent(datasource.uid)}#logs-config`\n    }, \"ClickHouse Data Source settings\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, configWarning, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_OtelVersionSelect__WEBPACK_IMPORTED_MODULE_4__.OtelVersionSelect, {\n        enabled: builderState.otelEnabled,\n        onEnabledChange: (e)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_14__.setOtelEnabled)(e)),\n        selectedVersion: builderState.otelVersion,\n        onVersionChange: (v)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_14__.setOtelVersion)(v))\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnsEditor__WEBPACK_IMPORTED_MODULE_1__.ColumnsEditor, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumns: builderState.selectedColumns,\n        onSelectedColumnsChange: onOptionChange('selectedColumns')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_3__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.timeColumn,\n        invalid: !builderState.timeColumn,\n        onColumnChange: onOptionChange('timeColumn'),\n        columnFilterFn: _data_columnFilters__WEBPACK_IMPORTED_MODULE_10__.columnFilterDateTime,\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time,\n        label: labels.logTimeColumn.label,\n        tooltip: labels.logTimeColumn.tooltip\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_3__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.logLevelColumn,\n        invalid: !builderState.logLevelColumn,\n        onColumnChange: onOptionChange('logLevelColumn'),\n        columnFilterFn: _data_columnFilters__WEBPACK_IMPORTED_MODULE_10__.columnFilterString,\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogLevel,\n        label: labels.logLevelColumn.label,\n        tooltip: labels.logLevelColumn.tooltip,\n        inline: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_3__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.messageColumn,\n        invalid: !builderState.messageColumn,\n        onColumnChange: onOptionChange('messageColumn'),\n        columnFilterFn: _data_columnFilters__WEBPACK_IMPORTED_MODULE_10__.columnFilterString,\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogMessage,\n        label: labels.logMessageColumn.label,\n        tooltip: labels.logMessageColumn.tooltip\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_3__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.labelsColumn,\n        invalid: !builderState.labelsColumn,\n        onColumnChange: onOptionChange('labelsColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.LogLabels,\n        label: labels.logLabelsColumn.label,\n        tooltip: labels.logLabelsColumn.tooltip,\n        inline: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_OrderByEditor__WEBPACK_IMPORTED_MODULE_5__.OrderByEditor, {\n        orderByOptions: (0,_OrderByEditor__WEBPACK_IMPORTED_MODULE_5__.getOrderByOptions)(builderOptions, allColumns),\n        orderBy: builderState.orderBy,\n        onOrderByChange: onOptionChange('orderBy')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LimitEditor__WEBPACK_IMPORTED_MODULE_6__.LimitEditor, {\n        limit: builderState.limit,\n        onLimitChange: onOptionChange('limit')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_FilterEditor__WEBPACK_IMPORTED_MODULE_7__.FiltersEditor, {\n        filters: builderState.filters,\n        onFiltersChange: onOptionChange('filters'),\n        allColumns: allColumns,\n        datasource: datasource,\n        database: builderOptions.database,\n        table: builderOptions.table\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LogMessageLikeInput, {\n        logMessageLike: builderState.logMessageLike,\n        onChange: onOptionChange('logMessageLike')\n    }));\n};\nconst LogMessageLikeInput = (props)=>{\n    const [input, setInput] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');\n    const { logMessageLike, onChange } = props;\n    const { label, tooltip, clearButton } = _labels__WEBPACK_IMPORTED_MODULE_8__[\"default\"].components.LogsQueryBuilder.logMessageFilter;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setInput(logMessageLike);\n    }, [\n        logMessageLike\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.InlineFormLabel, {\n        width: 8,\n        className: \"query-keyword\",\n        tooltip: tooltip\n    }, label), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.Input, {\n        width: 200,\n        value: input,\n        type: \"string\",\n        onChange: (e)=>setInput(e.currentTarget.value),\n        onBlur: ()=>onChange(input)\n    }), logMessageLike && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_12__.Button, {\n        \"data-testid\": _selectors__WEBPACK_IMPORTED_MODULE_18__.Components.QueryBuilder.LogsQueryBuilder.LogMessageLikeInput.input,\n        variant: \"secondary\",\n        size: \"md\",\n        onClick: ()=>onChange(''),\n        className: _styles__WEBPACK_IMPORTED_MODULE_17__.styles.Common.smallBtn,\n        tooltip: _labels__WEBPACK_IMPORTED_MODULE_8__[\"default\"].components.expandBuilderButton.tooltip\n    }, clearButton));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/LogsQueryBuilder.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/views/TableQueryBuilder.tsx":
/*!*************************************************************!*\
  !*** ./components/queryBuilder/views/TableQueryBuilder.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableQueryBuilder: () => (/* binding */ TableQueryBuilder)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ColumnsEditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ColumnsEditor */ \"./components/queryBuilder/ColumnsEditor.tsx\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _OrderByEditor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OrderByEditor */ \"./components/queryBuilder/OrderByEditor.tsx\");\n/* harmony import */ var _LimitEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../LimitEditor */ \"./components/queryBuilder/LimitEditor.tsx\");\n/* harmony import */ var _FilterEditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../FilterEditor */ \"./components/queryBuilder/FilterEditor.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../labels */ \"./labels.ts\");\n/* harmony import */ var _ModeSwitch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ModeSwitch */ \"./components/queryBuilder/ModeSwitch.tsx\");\n/* harmony import */ var _AggregateEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../AggregateEditor */ \"./components/queryBuilder/AggregateEditor.tsx\");\n/* harmony import */ var _GroupByEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../GroupByEditor */ \"./components/queryBuilder/GroupByEditor.tsx\");\n/* harmony import */ var _hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionChanges */ \"./hooks/useBuilderOptionChanges.ts\");\n/* harmony import */ var _hooks_useColumns__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useColumns */ \"./hooks/useColumns.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TableQueryBuilder = (props)=>{\n    const { datasource, builderOptions, builderOptionsDispatch } = props;\n    const allColumns = (0,_hooks_useColumns__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(datasource, builderOptions.database, builderOptions.table);\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_6__[\"default\"].components.TableQueryBuilder;\n    const builderState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            isAggregateMode: builderOptions.mode === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Aggregate,\n            selectedColumns: builderOptions.columns || [],\n            aggregates: builderOptions.aggregates || [],\n            groupBy: builderOptions.groupBy || [],\n            orderBy: builderOptions.orderBy || [],\n            limit: builderOptions.limit || 0,\n            filters: builderOptions.filters || []\n        }), [\n        builderOptions\n    ]);\n    const onOptionChange = (0,_hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_10__.useBuilderOptionChanges)((next)=>{\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_12__.setOptions)({\n            mode: next.isAggregateMode ? _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Aggregate : _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.List,\n            columns: next.selectedColumns,\n            aggregates: next.aggregates,\n            groupBy: next.groupBy,\n            filters: next.filters,\n            orderBy: next.orderBy,\n            limit: next.limit\n        }));\n    }, builderState);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ModeSwitch__WEBPACK_IMPORTED_MODULE_7__.ModeSwitch, {\n        labelA: labels.simpleQueryModeLabel,\n        labelB: labels.aggregateQueryModeLabel,\n        value: builderState.isAggregateMode,\n        onChange: onOptionChange('isAggregateMode'),\n        label: labels.builderModeLabel,\n        tooltip: labels.builderModeTooltip\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnsEditor__WEBPACK_IMPORTED_MODULE_1__.ColumnsEditor, {\n        allColumns: allColumns,\n        selectedColumns: builderState.selectedColumns,\n        onSelectedColumnsChange: onOptionChange('selectedColumns'),\n        showAllOption: true\n    }), builderState.isAggregateMode && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_AggregateEditor__WEBPACK_IMPORTED_MODULE_8__.AggregateEditor, {\n        allColumns: allColumns,\n        aggregates: builderState.aggregates,\n        onAggregatesChange: onOptionChange('aggregates')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_GroupByEditor__WEBPACK_IMPORTED_MODULE_9__.GroupByEditor, {\n        groupBy: builderState.groupBy,\n        onGroupByChange: onOptionChange('groupBy'),\n        allColumns: allColumns\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_OrderByEditor__WEBPACK_IMPORTED_MODULE_3__.OrderByEditor, {\n        orderByOptions: (0,_OrderByEditor__WEBPACK_IMPORTED_MODULE_3__.getOrderByOptions)(builderOptions, allColumns),\n        orderBy: builderState.orderBy,\n        onOrderByChange: onOptionChange('orderBy')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LimitEditor__WEBPACK_IMPORTED_MODULE_4__.LimitEditor, {\n        limit: builderState.limit,\n        onLimitChange: onOptionChange('limit')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_FilterEditor__WEBPACK_IMPORTED_MODULE_5__.FiltersEditor, {\n        filters: builderState.filters,\n        onFiltersChange: onOptionChange('filters'),\n        allColumns: allColumns,\n        datasource: datasource,\n        database: builderOptions.database,\n        table: builderOptions.table\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/TableQueryBuilder.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/views/TimeSeriesQueryBuilder.tsx":
/*!******************************************************************!*\
  !*** ./components/queryBuilder/views/TimeSeriesQueryBuilder.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeSeriesQueryBuilder: () => (/* binding */ TimeSeriesQueryBuilder)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ColumnsEditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ColumnsEditor */ \"./components/queryBuilder/ColumnsEditor.tsx\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _OrderByEditor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OrderByEditor */ \"./components/queryBuilder/OrderByEditor.tsx\");\n/* harmony import */ var _LimitEditor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../LimitEditor */ \"./components/queryBuilder/LimitEditor.tsx\");\n/* harmony import */ var _FilterEditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../FilterEditor */ \"./components/queryBuilder/FilterEditor.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../labels */ \"./labels.ts\");\n/* harmony import */ var _ModeSwitch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ModeSwitch */ \"./components/queryBuilder/ModeSwitch.tsx\");\n/* harmony import */ var _AggregateEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../AggregateEditor */ \"./components/queryBuilder/AggregateEditor.tsx\");\n/* harmony import */ var _GroupByEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../GroupByEditor */ \"./components/queryBuilder/GroupByEditor.tsx\");\n/* harmony import */ var _ColumnSelect__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../ColumnSelect */ \"./components/queryBuilder/ColumnSelect.tsx\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _data_columnFilters__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../data/columnFilters */ \"./data/columnFilters.ts\");\n/* harmony import */ var _hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionChanges */ \"./hooks/useBuilderOptionChanges.ts\");\n/* harmony import */ var _hooks_useColumns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../hooks/useColumns */ \"./hooks/useColumns.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var _timeSeriesQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./timeSeriesQueryBuilderHooks */ \"./components/queryBuilder/views/timeSeriesQueryBuilderHooks.ts\");\n/* harmony import */ var _hooks_useIsNewQuery__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../hooks/useIsNewQuery */ \"./hooks/useIsNewQuery.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TimeSeriesQueryBuilder = (props)=>{\n    const { datasource, builderOptions, builderOptionsDispatch } = props;\n    const isNewQuery = (0,_hooks_useIsNewQuery__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(builderOptions);\n    const allColumns = (0,_hooks_useColumns__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(datasource, builderOptions.database, builderOptions.table);\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_6__[\"default\"].components.TimeSeriesQueryBuilder;\n    const builderState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            // TODO: do not depend on \"mode\"\n            isAggregateMode: builderOptions.mode === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Trend,\n            timeColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_11__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time),\n            selectedColumns: (builderOptions.columns || []).filter((c)=>c.hint !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time),\n            aggregates: builderOptions.aggregates || [],\n            groupBy: builderOptions.groupBy || [],\n            orderBy: builderOptions.orderBy || [],\n            limit: builderOptions.limit || 0,\n            filters: builderOptions.filters || []\n        }), [\n        builderOptions\n    ]);\n    const onOptionChange = (0,_hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_13__.useBuilderOptionChanges)((next)=>{\n        let nextColumns = next.selectedColumns.slice();\n        if (next.isAggregateMode) {\n            nextColumns = [];\n        }\n        if (next.timeColumn) {\n            nextColumns.push(next.timeColumn);\n        }\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_15__.setOptions)({\n            mode: next.isAggregateMode ? _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Trend : _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Aggregate,\n            columns: nextColumns,\n            aggregates: next.isAggregateMode ? next.aggregates : [],\n            groupBy: next.isAggregateMode ? next.groupBy : [],\n            filters: next.filters,\n            orderBy: next.orderBy,\n            limit: next.limit\n        }));\n    }, builderState);\n    (0,_timeSeriesQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__.useDefaultTimeColumn)(allColumns, builderOptions.table, builderState.timeColumn, builderOptionsDispatch);\n    (0,_timeSeriesQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_16__.useDefaultFilters)(builderOptions.table, isNewQuery, builderOptionsDispatch);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ModeSwitch__WEBPACK_IMPORTED_MODULE_7__.ModeSwitch, {\n        labelA: labels.simpleQueryModeLabel,\n        labelB: labels.aggregateQueryModeLabel,\n        value: builderState.isAggregateMode,\n        onChange: onOptionChange('isAggregateMode'),\n        label: labels.builderModeLabel,\n        tooltip: labels.builderModeTooltip\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_10__.ColumnSelect, {\n        allColumns: allColumns,\n        selectedColumn: builderState.timeColumn,\n        invalid: !builderState.timeColumn,\n        onColumnChange: onOptionChange('timeColumn'),\n        columnFilterFn: _data_columnFilters__WEBPACK_IMPORTED_MODULE_12__.columnFilterDateTime,\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time,\n        label: labels.timeColumn.label,\n        tooltip: labels.timeColumn.tooltip,\n        clearable: false\n    }), builderState.isAggregateMode ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_AggregateEditor__WEBPACK_IMPORTED_MODULE_8__.AggregateEditor, {\n        allColumns: allColumns,\n        aggregates: builderState.aggregates,\n        onAggregatesChange: onOptionChange('aggregates')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_GroupByEditor__WEBPACK_IMPORTED_MODULE_9__.GroupByEditor, {\n        groupBy: builderState.groupBy,\n        onGroupByChange: onOptionChange('groupBy'),\n        allColumns: allColumns\n    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnsEditor__WEBPACK_IMPORTED_MODULE_1__.ColumnsEditor, {\n        allColumns: allColumns,\n        selectedColumns: builderState.selectedColumns,\n        onSelectedColumnsChange: onOptionChange('selectedColumns')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_OrderByEditor__WEBPACK_IMPORTED_MODULE_3__.OrderByEditor, {\n        orderByOptions: (0,_OrderByEditor__WEBPACK_IMPORTED_MODULE_3__.getOrderByOptions)(builderOptions, allColumns),\n        orderBy: builderState.orderBy,\n        onOrderByChange: onOptionChange('orderBy')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LimitEditor__WEBPACK_IMPORTED_MODULE_4__.LimitEditor, {\n        limit: builderState.limit,\n        onLimitChange: onOptionChange('limit')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_FilterEditor__WEBPACK_IMPORTED_MODULE_5__.FiltersEditor, {\n        filters: builderState.filters,\n        onFiltersChange: onOptionChange('filters'),\n        allColumns: allColumns,\n        datasource: datasource,\n        database: builderOptions.database,\n        table: builderOptions.table\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/TimeSeriesQueryBuilder.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/views/TraceQueryBuilder.tsx":
/*!*************************************************************!*\
  !*** ./components/queryBuilder/views/TraceQueryBuilder.tsx ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceQueryBuilder: () => (/* binding */ TraceQueryBuilder)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _ColumnSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ColumnSelect */ \"./components/queryBuilder/ColumnSelect.tsx\");\n/* harmony import */ var _FilterEditor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../FilterEditor */ \"./components/queryBuilder/FilterEditor.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../labels */ \"./labels.ts\");\n/* harmony import */ var _ModeSwitch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ModeSwitch */ \"./components/queryBuilder/ModeSwitch.tsx\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _DurationUnitSelect__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../DurationUnitSelect */ \"./components/queryBuilder/DurationUnitSelect.tsx\");\n/* harmony import */ var _hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionChanges */ \"./hooks/useBuilderOptionChanges.ts\");\n/* harmony import */ var _hooks_useColumns__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../hooks/useColumns */ \"./hooks/useColumns.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var _hooks_useIsNewQuery__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../hooks/useIsNewQuery */ \"./hooks/useIsNewQuery.ts\");\n/* harmony import */ var _OtelVersionSelect__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../OtelVersionSelect */ \"./components/queryBuilder/OtelVersionSelect.tsx\");\n/* harmony import */ var _traceQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./traceQueryBuilderHooks */ \"./components/queryBuilder/views/traceQueryBuilderHooks.ts\");\n/* harmony import */ var _TraceIdInput__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../TraceIdInput */ \"./components/queryBuilder/TraceIdInput.tsx\");\n/* harmony import */ var _OrderByEditor__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../OrderByEditor */ \"./components/queryBuilder/OrderByEditor.tsx\");\n/* harmony import */ var _LimitEditor__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../LimitEditor */ \"./components/queryBuilder/LimitEditor.tsx\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst TraceQueryBuilder = (props)=>{\n    var _builderOptions_columns, _builderOptions_meta;\n    const { datasource, builderOptions, builderOptionsDispatch } = props;\n    const allColumns = (0,_hooks_useColumns__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(datasource, builderOptions.database, builderOptions.table);\n    const isNewQuery = (0,_hooks_useIsNewQuery__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(builderOptions);\n    const [showConfigWarning, setConfigWarningOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(datasource.getDefaultTraceColumns().size === 0 && ((_builderOptions_columns = builderOptions.columns) === null || _builderOptions_columns === void 0 ? void 0 : _builderOptions_columns.length) === 0);\n    const [isColumnsOpen, setColumnsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(showConfigWarning); // Toggle Columns collapse section\n    const [isFiltersOpen, setFiltersOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!(((_builderOptions_meta = builderOptions.meta) === null || _builderOptions_meta === void 0 ? void 0 : _builderOptions_meta.isTraceIdMode) && builderOptions.meta.traceId)); // Toggle Filters collapse section\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_4__[\"default\"].components.TraceQueryBuilder;\n    const builderState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        var _builderOptions_meta, _builderOptions_meta1, _builderOptions_meta2, _builderOptions_meta3, _builderOptions_meta4;\n        return {\n            isTraceIdMode: ((_builderOptions_meta = builderOptions.meta) === null || _builderOptions_meta === void 0 ? void 0 : _builderOptions_meta.isTraceIdMode) || false,\n            otelEnabled: ((_builderOptions_meta1 = builderOptions.meta) === null || _builderOptions_meta1 === void 0 ? void 0 : _builderOptions_meta1.otelEnabled) || false,\n            otelVersion: ((_builderOptions_meta2 = builderOptions.meta) === null || _builderOptions_meta2 === void 0 ? void 0 : _builderOptions_meta2.otelVersion) || '',\n            traceIdColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceId),\n            spanIdColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceSpanId),\n            parentSpanIdColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceParentSpanId),\n            serviceNameColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceServiceName),\n            operationNameColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceOperationName),\n            startTimeColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.Time),\n            durationTimeColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceDurationTime),\n            durationUnit: ((_builderOptions_meta3 = builderOptions.meta) === null || _builderOptions_meta3 === void 0 ? void 0 : _builderOptions_meta3.traceDurationUnit) || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.TimeUnit.Nanoseconds,\n            tagsColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceTags),\n            serviceTagsColumn: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceServiceTags),\n            traceId: ((_builderOptions_meta4 = builderOptions.meta) === null || _builderOptions_meta4 === void 0 ? void 0 : _builderOptions_meta4.traceId) || '',\n            orderBy: builderOptions.orderBy || [],\n            limit: builderOptions.limit || 0,\n            filters: builderOptions.filters || []\n        };\n    }, [\n        builderOptions\n    ]);\n    const onOptionChange = (0,_hooks_useBuilderOptionChanges__WEBPACK_IMPORTED_MODULE_9__.useBuilderOptionChanges)((next)=>{\n        const nextColumns = [\n            next.traceIdColumn,\n            next.spanIdColumn,\n            next.parentSpanIdColumn,\n            next.serviceNameColumn,\n            next.operationNameColumn,\n            next.startTimeColumn,\n            next.durationTimeColumn,\n            next.tagsColumn,\n            next.serviceTagsColumn\n        ].filter((c)=>c !== undefined);\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_11__.setOptions)({\n            columns: nextColumns,\n            orderBy: next.orderBy,\n            limit: next.limit,\n            filters: next.filters,\n            meta: {\n                isTraceIdMode: next.isTraceIdMode,\n                traceDurationUnit: next.durationUnit,\n                traceId: next.traceId\n            }\n        }));\n    }, builderState);\n    (0,_traceQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_14__.useTraceDefaultsOnMount)(datasource, isNewQuery, builderOptions, builderOptionsDispatch);\n    (0,_traceQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_14__.useOtelColumns)(builderState.otelEnabled, builderState.otelVersion, builderOptionsDispatch);\n    (0,_traceQueryBuilderHooks__WEBPACK_IMPORTED_MODULE_14__.useDefaultFilters)(builderOptions.table, builderState.isTraceIdMode, isNewQuery, builderOptionsDispatch);\n    const configWarning = showConfigWarning && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__.Alert, {\n        title: \"\",\n        severity: \"warning\",\n        buttonContent: \"Close\",\n        onRemove: ()=>setConfigWarningOpen(false)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__.VerticalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, 'To speed up your query building, enter your default trace configuration in your ', /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        style: {\n            textDecoration: 'underline'\n        },\n        href: `/connections/datasources/edit/${encodeURIComponent(datasource.uid)}#traces-config`\n    }, \"ClickHouse Data Source settings\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ModeSwitch__WEBPACK_IMPORTED_MODULE_5__.ModeSwitch, {\n        labelA: labels.traceSearchModeLabel,\n        labelB: labels.traceIdModeLabel,\n        value: builderState.isTraceIdMode,\n        onChange: onOptionChange('isTraceIdMode'),\n        label: labels.traceModeLabel,\n        tooltip: labels.traceModeTooltip\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__.Collapse, {\n        label: labels.columnsSection,\n        collapsible: true,\n        isOpen: isColumnsOpen,\n        onToggle: setColumnsOpen\n    }, configWarning, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_OtelVersionSelect__WEBPACK_IMPORTED_MODULE_13__.OtelVersionSelect, {\n        enabled: builderState.otelEnabled,\n        onEnabledChange: (e)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_11__.setOtelEnabled)(e)),\n        selectedVersion: builderState.otelVersion,\n        onVersionChange: (v)=>builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_11__.setOtelVersion)(v)),\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.traceIdColumn,\n        invalid: !builderState.traceIdColumn,\n        onColumnChange: onOptionChange('traceIdColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceId,\n        label: labels.columns.traceId.label,\n        tooltip: labels.columns.traceId.tooltip,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.spanIdColumn,\n        invalid: !builderState.spanIdColumn,\n        onColumnChange: onOptionChange('spanIdColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceSpanId,\n        label: labels.columns.spanId.label,\n        tooltip: labels.columns.spanId.tooltip,\n        wide: true,\n        inline: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.parentSpanIdColumn,\n        invalid: !builderState.parentSpanIdColumn,\n        onColumnChange: onOptionChange('parentSpanIdColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceParentSpanId,\n        label: labels.columns.parentSpanId.label,\n        tooltip: labels.columns.parentSpanId.tooltip,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.serviceNameColumn,\n        invalid: !builderState.serviceNameColumn,\n        onColumnChange: onOptionChange('serviceNameColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceServiceName,\n        label: labels.columns.serviceName.label,\n        tooltip: labels.columns.serviceName.tooltip,\n        wide: true,\n        inline: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.operationNameColumn,\n        invalid: !builderState.operationNameColumn,\n        onColumnChange: onOptionChange('operationNameColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceOperationName,\n        label: labels.columns.operationName.label,\n        tooltip: labels.columns.operationName.tooltip,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.startTimeColumn,\n        invalid: !builderState.startTimeColumn,\n        onColumnChange: onOptionChange('startTimeColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.Time,\n        label: labels.columns.startTime.label,\n        tooltip: labels.columns.startTime.tooltip,\n        wide: true,\n        inline: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.durationTimeColumn,\n        invalid: !builderState.durationTimeColumn,\n        onColumnChange: onOptionChange('durationTimeColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceDurationTime,\n        label: labels.columns.durationTime.label,\n        tooltip: labels.columns.durationTime.tooltip,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_DurationUnitSelect__WEBPACK_IMPORTED_MODULE_8__.DurationUnitSelect, {\n        disabled: builderState.otelEnabled,\n        unit: builderState.durationUnit,\n        onChange: onOptionChange('durationUnit'),\n        inline: true\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"gf-form\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.tagsColumn,\n        invalid: !builderState.tagsColumn,\n        onColumnChange: onOptionChange('tagsColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceTags,\n        label: labels.columns.tags.label,\n        tooltip: labels.columns.tags.tooltip,\n        wide: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_ColumnSelect__WEBPACK_IMPORTED_MODULE_2__.ColumnSelect, {\n        disabled: builderState.otelEnabled,\n        allColumns: allColumns,\n        selectedColumn: builderState.serviceTagsColumn,\n        invalid: !builderState.serviceTagsColumn,\n        onColumnChange: onOptionChange('serviceTagsColumn'),\n        columnHint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceServiceTags,\n        label: labels.columns.serviceTags.label,\n        tooltip: labels.columns.serviceTags.tooltip,\n        wide: true,\n        inline: true\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__.Collapse, {\n        label: labels.filtersSection,\n        collapsible: true,\n        isOpen: isFiltersOpen,\n        onToggle: setFiltersOpen\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_OrderByEditor__WEBPACK_IMPORTED_MODULE_16__.OrderByEditor, {\n        orderByOptions: (0,_OrderByEditor__WEBPACK_IMPORTED_MODULE_16__.getOrderByOptions)(builderOptions, allColumns),\n        orderBy: builderState.orderBy,\n        onOrderByChange: onOptionChange('orderBy')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_LimitEditor__WEBPACK_IMPORTED_MODULE_17__.LimitEditor, {\n        limit: builderState.limit,\n        onLimitChange: onOptionChange('limit')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_FilterEditor__WEBPACK_IMPORTED_MODULE_3__.FiltersEditor, {\n        allColumns: allColumns,\n        filters: builderState.filters,\n        onFiltersChange: onOptionChange('filters'),\n        datasource: datasource,\n        database: builderOptions.database,\n        table: builderOptions.table\n    })), builderState.isTraceIdMode && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_TraceIdInput__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        traceId: builderState.traceId,\n        onChange: onOptionChange('traceId')\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/TraceQueryBuilder.tsx\n");

/***/ }),

/***/ "./components/queryBuilder/views/logsQueryBuilderHooks.ts":
/*!****************************************************************!*\
  !*** ./components/queryBuilder/views/logsQueryBuilderHooks.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDefaultFilters: () => (/* binding */ useDefaultFilters),\n/* harmony export */   useDefaultTimeColumn: () => (/* binding */ useDefaultTimeColumn),\n/* harmony export */   useLogDefaultsOnMount: () => (/* binding */ useLogDefaultsOnMount),\n/* harmony export */   useOtelColumns: () => (/* binding */ useOtelColumns)\n/* harmony export */ });\n/* harmony import */ var _data_columnFilters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../data/columnFilters */ \"./data/columnFilters.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../otel */ \"./otel.ts\");\n\n\n\n\n\n/**\n * Loads the default configuration for new queries. (Only runs on new queries)\n */ const useLogDefaultsOnMount = (datasource, isNewQuery, builderOptions, builderOptionsDispatch)=>{\n    const didSetDefaults = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!isNewQuery || didSetDefaults.current) {\n            return;\n        }\n        const defaultDb = datasource.getDefaultLogsDatabase() || datasource.getDefaultDatabase();\n        const defaultTable = datasource.getDefaultLogsTable() || datasource.getDefaultTable();\n        const otelVersion = datasource.getLogsOtelVersion();\n        const defaultColumns = datasource.getDefaultLogsColumns();\n        const nextColumns = [];\n        const includedColumns = new Set();\n        for (let [hint, colName] of defaultColumns){\n            nextColumns.push({\n                name: colName,\n                hint\n            });\n            includedColumns.add(colName);\n        }\n        if (datasource.shouldSelectLogContextColumns()) {\n            const contextColumnNames = datasource.getLogContextColumnNames();\n            for (let columnName of contextColumnNames){\n                if (includedColumns.has(columnName)) {\n                    continue;\n                }\n                nextColumns.push({\n                    name: columnName\n                });\n                includedColumns.add(columnName);\n            }\n        }\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__.setOptions)({\n            database: defaultDb,\n            table: defaultTable || builderOptions.table,\n            columns: nextColumns,\n            meta: {\n                otelEnabled: Boolean(otelVersion),\n                otelVersion\n            }\n        }));\n        didSetDefaults.current = true;\n    }, [\n        builderOptions.columns,\n        builderOptions.orderBy,\n        builderOptions.table,\n        builderOptionsDispatch,\n        datasource,\n        isNewQuery\n    ]);\n};\n/**\n * Sets OTEL Logs columns automatically when OTEL is enabled.\n * Does not run if OTEL is already enabled, only when it's changed.\n */ const useOtelColumns = (datasource, otelEnabled, otelVersion, builderOptionsDispatch)=>{\n    const didSetColumns = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(otelEnabled);\n    if (!otelEnabled) {\n        didSetColumns.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!otelEnabled || didSetColumns.current) {\n            return;\n        }\n        const otelConfig = _otel__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getVersion(otelVersion);\n        const logColumnMap = otelConfig === null || otelConfig === void 0 ? void 0 : otelConfig.logColumnMap;\n        if (!logColumnMap) {\n            return;\n        }\n        const columns = [];\n        const includedColumns = new Set();\n        logColumnMap.forEach((name, hint)=>{\n            columns.push({\n                name,\n                hint\n            });\n            includedColumns.add(name);\n        });\n        if (datasource.shouldSelectLogContextColumns()) {\n            const contextColumnNames = datasource.getLogContextColumnNames();\n            for (let columnName of contextColumnNames){\n                if (includedColumns.has(columnName)) {\n                    continue;\n                }\n                columns.push({\n                    name: columnName\n                });\n                includedColumns.add(columnName);\n            }\n        }\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__.setOptions)({\n            columns\n        }));\n        didSetColumns.current = true;\n    }, [\n        datasource,\n        otelEnabled,\n        otelVersion,\n        builderOptionsDispatch\n    ]);\n};\n// Finds and selects a default log time column, updates when table changes\nconst useDefaultTimeColumn = (datasource, allColumns, table, timeColumn, otelEnabled, builderOptionsDispatch)=>{\n    const hasDefaultColumnConfigured = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(()=>Boolean(datasource.getDefaultLogsTable()) && datasource.getDefaultLogsColumns().has(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time), [\n        datasource\n    ]);\n    const didSetDefaultTime = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(Boolean(timeColumn) || hasDefaultColumnConfigured);\n    const lastTable = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(table || '');\n    if (table !== lastTable.current) {\n        didSetDefaultTime.current = false;\n    }\n    if (Boolean(timeColumn) || otelEnabled) {\n        lastTable.current = table;\n        didSetDefaultTime.current = true;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (didSetDefaultTime.current || allColumns.length === 0 || !table) {\n            return;\n        }\n        const col = allColumns.filter(_data_columnFilters__WEBPACK_IMPORTED_MODULE_0__.columnFilterDateTime)[0];\n        if (!col) {\n            return;\n        }\n        const timeColumn = {\n            name: col.name,\n            type: col.type,\n            hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time\n        };\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__.setColumnByHint)(timeColumn));\n        lastTable.current = table;\n        didSetDefaultTime.current = true;\n    }, [\n        datasource,\n        allColumns,\n        table,\n        builderOptionsDispatch\n    ]);\n};\n// Apply default filters/orderBy on table change\nconst useDefaultFilters = (table, isNewQuery, builderOptionsDispatch)=>{\n    const appliedDefaultFilters = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(!isNewQuery);\n    const lastTable = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(table || '');\n    if (table !== lastTable.current) {\n        appliedDefaultFilters.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!table || appliedDefaultFilters.current) {\n            return;\n        }\n        const defaultFilters = [\n            {\n                type: 'datetime',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.FilterOperator.WithInGrafanaTimeRange,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time,\n                condition: 'AND'\n            },\n            {\n                type: 'string',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.FilterOperator.IsAnything,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.LogLevel,\n                condition: 'AND'\n            }\n        ];\n        const defaultOrderBy = [\n            {\n                name: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time,\n                dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.OrderByDirection.DESC,\n                default: true\n            }\n        ];\n        lastTable.current = table;\n        appliedDefaultFilters.current = true;\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__.setOptions)({\n            filters: defaultFilters,\n            orderBy: defaultOrderBy\n        }));\n    }, [\n        table,\n        builderOptionsDispatch\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/logsQueryBuilderHooks.ts\n");

/***/ }),

/***/ "./components/queryBuilder/views/timeSeriesQueryBuilderHooks.ts":
/*!**********************************************************************!*\
  !*** ./components/queryBuilder/views/timeSeriesQueryBuilderHooks.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDefaultFilters: () => (/* binding */ useDefaultFilters),\n/* harmony export */   useDefaultTimeColumn: () => (/* binding */ useDefaultTimeColumn)\n/* harmony export */ });\n/* harmony import */ var _data_columnFilters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../data/columnFilters */ \"./data/columnFilters.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n\n\n\n\n// Finds and selects a default log time column, updates when table changes\nconst useDefaultTimeColumn = (allColumns, table, timeColumn, builderOptionsDispatch)=>{\n    const didSetDefaultTime = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(Boolean(timeColumn));\n    const lastTable = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(table || '');\n    if (table !== lastTable.current) {\n        didSetDefaultTime.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (didSetDefaultTime.current || allColumns.length === 0 || !table) {\n            return;\n        }\n        const col = allColumns.filter(_data_columnFilters__WEBPACK_IMPORTED_MODULE_0__.columnFilterDateTime)[0];\n        if (!col) {\n            return;\n        }\n        const timeColumn = {\n            name: col.name,\n            type: col.type,\n            hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time\n        };\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__.setColumnByHint)(timeColumn));\n        lastTable.current = table;\n        didSetDefaultTime.current = true;\n    }, [\n        allColumns,\n        table,\n        builderOptionsDispatch\n    ]);\n};\n// Apply default filters on table change\nconst useDefaultFilters = (table, isNewQuery, builderOptionsDispatch)=>{\n    const appliedDefaultFilters = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(!isNewQuery);\n    const lastTable = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(table || '');\n    if (table !== lastTable.current) {\n        appliedDefaultFilters.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (!table || appliedDefaultFilters.current) {\n            return;\n        }\n        const defaultFilters = [\n            {\n                type: 'datetime',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.FilterOperator.WithInGrafanaTimeRange,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time,\n                condition: 'AND'\n            }\n        ];\n        const defaultOrderBy = [\n            {\n                name: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.ColumnHint.Time,\n                dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_3__.OrderByDirection.ASC,\n                default: true\n            }\n        ];\n        lastTable.current = table;\n        appliedDefaultFilters.current = true;\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_1__.setOptions)({\n            filters: defaultFilters,\n            orderBy: defaultOrderBy\n        }));\n    }, [\n        table,\n        builderOptionsDispatch\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3F1ZXJ5QnVpbGRlci92aWV3cy90aW1lU2VyaWVzUXVlcnlCdWlsZGVySG9va3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwRDtBQUM4QztBQUN2RDtBQUN1RztBQUV4SiwwRUFBMEU7QUFDbkUsTUFBTVMsdUJBQXVCLENBQUNDLFlBQW9DQyxPQUFlQyxZQUF3Q0M7SUFDOUgsTUFBTUMsb0JBQW9CVCw2Q0FBTUEsQ0FBVVUsUUFBUUg7SUFDbEQsTUFBTUksWUFBWVgsNkNBQU1BLENBQVNNLFNBQVM7SUFDMUMsSUFBSUEsVUFBVUssVUFBVUMsT0FBTyxFQUFFO1FBQy9CSCxrQkFBa0JHLE9BQU8sR0FBRztJQUM5QjtJQUVBYixnREFBU0EsQ0FBQztRQUNSLElBQUlVLGtCQUFrQkcsT0FBTyxJQUFJUCxXQUFXUSxNQUFNLEtBQUssS0FBSyxDQUFDUCxPQUFPO1lBQ2xFO1FBQ0Y7UUFFQSxNQUFNUSxNQUFNVCxXQUFXVSxNQUFNLENBQUNwQixxRUFBb0JBLENBQUMsQ0FBQyxFQUFFO1FBQ3RELElBQUksQ0FBQ21CLEtBQUs7WUFDUjtRQUNGO1FBRUEsTUFBTVAsYUFBNkI7WUFDakNTLE1BQU1GLElBQUlFLElBQUk7WUFDZEMsTUFBTUgsSUFBSUcsSUFBSTtZQUNkQyxNQUFNakIsMkRBQVVBLENBQUNrQixJQUFJO1FBQ3ZCO1FBRUFYLHVCQUF1QlosOEVBQWVBLENBQUNXO1FBQ3ZDSSxVQUFVQyxPQUFPLEdBQUdOO1FBQ3BCRyxrQkFBa0JHLE9BQU8sR0FBRztJQUM5QixHQUFHO1FBQUNQO1FBQVlDO1FBQU9FO0tBQXVCO0FBQ2hELEVBQUU7QUFFRix3Q0FBd0M7QUFDakMsTUFBTVksb0JBQW9CLENBQUNkLE9BQWVlLFlBQXFCYjtJQUNwRSxNQUFNYyx3QkFBd0J0Qiw2Q0FBTUEsQ0FBVSxDQUFDcUI7SUFDL0MsTUFBTVYsWUFBWVgsNkNBQU1BLENBQVNNLFNBQVM7SUFDMUMsSUFBSUEsVUFBVUssVUFBVUMsT0FBTyxFQUFFO1FBQy9CVSxzQkFBc0JWLE9BQU8sR0FBRztJQUNsQztJQUVBYixnREFBU0EsQ0FBQztRQUNSLElBQUksQ0FBQ08sU0FBU2dCLHNCQUFzQlYsT0FBTyxFQUFFO1lBQzNDO1FBQ0Y7UUFFQSxNQUFNVyxpQkFBMkI7WUFDL0I7Z0JBQ0VOLE1BQU07Z0JBQ05PLFVBQVV0QiwrREFBY0EsQ0FBQ3VCLHNCQUFzQjtnQkFDL0NDLFlBQVk7Z0JBQ1pDLEtBQUs7Z0JBQ0xULE1BQU1qQiwyREFBVUEsQ0FBQ2tCLElBQUk7Z0JBQ3JCUyxXQUFXO1lBQ2I7U0FDRDtRQUVELE1BQU1DLGlCQUE0QjtZQUNoQztnQkFBRWIsTUFBTTtnQkFBSUUsTUFBTWpCLDJEQUFVQSxDQUFDa0IsSUFBSTtnQkFBRVcsS0FBSzNCLGlFQUFnQkEsQ0FBQzRCLEdBQUc7Z0JBQUVDLFNBQVM7WUFBSztTQUM3RTtRQUVEckIsVUFBVUMsT0FBTyxHQUFHTjtRQUNwQmdCLHNCQUFzQlYsT0FBTyxHQUFHO1FBQ2hDSix1QkFBdUJYLHlFQUFVQSxDQUFDO1lBQ2hDb0MsU0FBU1Y7WUFDVFcsU0FBU0w7UUFDWDtJQUNGLEdBQUc7UUFBQ3ZCO1FBQU9FO0tBQXVCO0FBQ3BDLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2NvbXBvbmVudHMvcXVlcnlCdWlsZGVyL3ZpZXdzL3RpbWVTZXJpZXNRdWVyeUJ1aWxkZXJIb29rcy50cz8yYjc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbHVtbkZpbHRlckRhdGVUaW1lIH0gZnJvbSAnZGF0YS9jb2x1bW5GaWx0ZXJzJztcbmltcG9ydCB7IEJ1aWxkZXJPcHRpb25zUmVkdWNlckFjdGlvbiwgc2V0Q29sdW1uQnlIaW50LCBzZXRPcHRpb25zIH0gZnJvbSAnaG9va3MvdXNlQnVpbGRlck9wdGlvbnNTdGF0ZSc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb2x1bW5IaW50LCBEYXRlRmlsdGVyV2l0aG91dFZhbHVlLCBGaWx0ZXIsIEZpbHRlck9wZXJhdG9yLCBPcmRlckJ5LCBPcmRlckJ5RGlyZWN0aW9uLCBTZWxlY3RlZENvbHVtbiwgVGFibGVDb2x1bW4gfSBmcm9tICd0eXBlcy9xdWVyeUJ1aWxkZXInO1xuXG4vLyBGaW5kcyBhbmQgc2VsZWN0cyBhIGRlZmF1bHQgbG9nIHRpbWUgY29sdW1uLCB1cGRhdGVzIHdoZW4gdGFibGUgY2hhbmdlc1xuZXhwb3J0IGNvbnN0IHVzZURlZmF1bHRUaW1lQ29sdW1uID0gKGFsbENvbHVtbnM6IHJlYWRvbmx5IFRhYmxlQ29sdW1uW10sIHRhYmxlOiBzdHJpbmcsIHRpbWVDb2x1bW46IFNlbGVjdGVkQ29sdW1uIHwgdW5kZWZpbmVkLCBidWlsZGVyT3B0aW9uc0Rpc3BhdGNoOiBSZWFjdC5EaXNwYXRjaDxCdWlsZGVyT3B0aW9uc1JlZHVjZXJBY3Rpb24+KSA9PiB7XG4gIGNvbnN0IGRpZFNldERlZmF1bHRUaW1lID0gdXNlUmVmPGJvb2xlYW4+KEJvb2xlYW4odGltZUNvbHVtbikpO1xuICBjb25zdCBsYXN0VGFibGUgPSB1c2VSZWY8c3RyaW5nPih0YWJsZSB8fCAnJyk7XG4gIGlmICh0YWJsZSAhPT0gbGFzdFRhYmxlLmN1cnJlbnQpIHtcbiAgICBkaWRTZXREZWZhdWx0VGltZS5jdXJyZW50ID0gZmFsc2U7XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkaWRTZXREZWZhdWx0VGltZS5jdXJyZW50IHx8IGFsbENvbHVtbnMubGVuZ3RoID09PSAwIHx8ICF0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbCA9IGFsbENvbHVtbnMuZmlsdGVyKGNvbHVtbkZpbHRlckRhdGVUaW1lKVswXTtcbiAgICBpZiAoIWNvbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRpbWVDb2x1bW46IFNlbGVjdGVkQ29sdW1uID0ge1xuICAgICAgbmFtZTogY29sLm5hbWUsXG4gICAgICB0eXBlOiBjb2wudHlwZSxcbiAgICAgIGhpbnQ6IENvbHVtbkhpbnQuVGltZVxuICAgIH07XG5cbiAgICBidWlsZGVyT3B0aW9uc0Rpc3BhdGNoKHNldENvbHVtbkJ5SGludCh0aW1lQ29sdW1uKSk7XG4gICAgbGFzdFRhYmxlLmN1cnJlbnQgPSB0YWJsZTtcbiAgICBkaWRTZXREZWZhdWx0VGltZS5jdXJyZW50ID0gdHJ1ZTtcbiAgfSwgW2FsbENvbHVtbnMsIHRhYmxlLCBidWlsZGVyT3B0aW9uc0Rpc3BhdGNoXSk7XG59O1xuXG4vLyBBcHBseSBkZWZhdWx0IGZpbHRlcnMgb24gdGFibGUgY2hhbmdlXG5leHBvcnQgY29uc3QgdXNlRGVmYXVsdEZpbHRlcnMgPSAodGFibGU6IHN0cmluZywgaXNOZXdRdWVyeTogYm9vbGVhbiwgYnVpbGRlck9wdGlvbnNEaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8QnVpbGRlck9wdGlvbnNSZWR1Y2VyQWN0aW9uPikgPT4ge1xuICBjb25zdCBhcHBsaWVkRGVmYXVsdEZpbHRlcnMgPSB1c2VSZWY8Ym9vbGVhbj4oIWlzTmV3UXVlcnkpO1xuICBjb25zdCBsYXN0VGFibGUgPSB1c2VSZWY8c3RyaW5nPih0YWJsZSB8fCAnJyk7XG4gIGlmICh0YWJsZSAhPT0gbGFzdFRhYmxlLmN1cnJlbnQpIHtcbiAgICBhcHBsaWVkRGVmYXVsdEZpbHRlcnMuY3VycmVudCA9IGZhbHNlO1xuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXRhYmxlIHx8IGFwcGxpZWREZWZhdWx0RmlsdGVycy5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdEZpbHRlcnM6IEZpbHRlcltdID0gW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICBvcGVyYXRvcjogRmlsdGVyT3BlcmF0b3IuV2l0aEluR3JhZmFuYVRpbWVSYW5nZSxcbiAgICAgICAgZmlsdGVyVHlwZTogJ2N1c3RvbScsXG4gICAgICAgIGtleTogJycsXG4gICAgICAgIGhpbnQ6IENvbHVtbkhpbnQuVGltZSxcbiAgICAgICAgY29uZGl0aW9uOiAnQU5EJ1xuICAgICAgfSBhcyBEYXRlRmlsdGVyV2l0aG91dFZhbHVlXG4gICAgXTtcblxuICAgIGNvbnN0IGRlZmF1bHRPcmRlckJ5OiBPcmRlckJ5W10gPSBbXG4gICAgICB7IG5hbWU6ICcnLCBoaW50OiBDb2x1bW5IaW50LlRpbWUsIGRpcjogT3JkZXJCeURpcmVjdGlvbi5BU0MsIGRlZmF1bHQ6IHRydWUgfVxuICAgIF07XG4gICAgXG4gICAgbGFzdFRhYmxlLmN1cnJlbnQgPSB0YWJsZTtcbiAgICBhcHBsaWVkRGVmYXVsdEZpbHRlcnMuY3VycmVudCA9IHRydWU7XG4gICAgYnVpbGRlck9wdGlvbnNEaXNwYXRjaChzZXRPcHRpb25zKHtcbiAgICAgIGZpbHRlcnM6IGRlZmF1bHRGaWx0ZXJzLFxuICAgICAgb3JkZXJCeTogZGVmYXVsdE9yZGVyQnksXG4gICAgfSkpO1xuICB9LCBbdGFibGUsIGJ1aWxkZXJPcHRpb25zRGlzcGF0Y2hdKTtcbn07XG4iXSwibmFtZXMiOlsiY29sdW1uRmlsdGVyRGF0ZVRpbWUiLCJzZXRDb2x1bW5CeUhpbnQiLCJzZXRPcHRpb25zIiwiUmVhY3QiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJDb2x1bW5IaW50IiwiRmlsdGVyT3BlcmF0b3IiLCJPcmRlckJ5RGlyZWN0aW9uIiwidXNlRGVmYXVsdFRpbWVDb2x1bW4iLCJhbGxDb2x1bW5zIiwidGFibGUiLCJ0aW1lQ29sdW1uIiwiYnVpbGRlck9wdGlvbnNEaXNwYXRjaCIsImRpZFNldERlZmF1bHRUaW1lIiwiQm9vbGVhbiIsImxhc3RUYWJsZSIsImN1cnJlbnQiLCJsZW5ndGgiLCJjb2wiLCJmaWx0ZXIiLCJuYW1lIiwidHlwZSIsImhpbnQiLCJUaW1lIiwidXNlRGVmYXVsdEZpbHRlcnMiLCJpc05ld1F1ZXJ5IiwiYXBwbGllZERlZmF1bHRGaWx0ZXJzIiwiZGVmYXVsdEZpbHRlcnMiLCJvcGVyYXRvciIsIldpdGhJbkdyYWZhbmFUaW1lUmFuZ2UiLCJmaWx0ZXJUeXBlIiwia2V5IiwiY29uZGl0aW9uIiwiZGVmYXVsdE9yZGVyQnkiLCJkaXIiLCJBU0MiLCJkZWZhdWx0IiwiZmlsdGVycyIsIm9yZGVyQnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/timeSeriesQueryBuilderHooks.ts\n");

/***/ }),

/***/ "./components/queryBuilder/views/traceQueryBuilderHooks.ts":
/*!*****************************************************************!*\
  !*** ./components/queryBuilder/views/traceQueryBuilderHooks.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useDefaultFilters: () => (/* binding */ useDefaultFilters),\n/* harmony export */   useOtelColumns: () => (/* binding */ useOtelColumns),\n/* harmony export */   useTraceDefaultsOnMount: () => (/* binding */ useTraceDefaultsOnMount)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../otel */ \"./otel.ts\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n\n\n\n\n/**\n * Loads the default configuration for new queries. (Only runs on new queries)\n */ const useTraceDefaultsOnMount = (datasource, isNewQuery, builderOptions, builderOptionsDispatch)=>{\n    const didSetDefaults = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!isNewQuery || didSetDefaults.current) {\n            return;\n        }\n        const defaultDb = datasource.getDefaultTraceDatabase() || datasource.getDefaultDatabase();\n        const defaultTable = datasource.getDefaultTraceTable() || datasource.getDefaultTable();\n        const defaultDurationUnit = datasource.getDefaultTraceDurationUnit();\n        const otelVersion = datasource.getTraceOtelVersion();\n        const defaultColumns = datasource.getDefaultTraceColumns();\n        const nextColumns = [];\n        for (let [hint, colName] of defaultColumns){\n            nextColumns.push({\n                name: colName,\n                hint\n            });\n        }\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_3__.setOptions)({\n            database: defaultDb,\n            table: defaultTable || builderOptions.table,\n            columns: nextColumns,\n            meta: {\n                otelEnabled: Boolean(otelVersion),\n                otelVersion,\n                traceDurationUnit: defaultDurationUnit\n            }\n        }));\n        didSetDefaults.current = true;\n    }, [\n        builderOptions.columns,\n        builderOptions.orderBy,\n        builderOptions.table,\n        builderOptionsDispatch,\n        datasource,\n        isNewQuery\n    ]);\n};\n/**\n * Sets OTEL Trace columns automatically when OTEL is enabled\n * Does not run if OTEL is already enabled, only when it's changed.\n */ const useOtelColumns = (otelEnabled, otelVersion, builderOptionsDispatch)=>{\n    const didSetColumns = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(otelEnabled);\n    if (!otelEnabled) {\n        didSetColumns.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!otelEnabled || didSetColumns.current) {\n            return;\n        }\n        const otelConfig = _otel__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getVersion(otelVersion);\n        const traceColumnMap = otelConfig === null || otelConfig === void 0 ? void 0 : otelConfig.traceColumnMap;\n        if (!traceColumnMap) {\n            return;\n        }\n        const columns = [];\n        traceColumnMap.forEach((name, hint)=>{\n            columns.push({\n                name,\n                hint\n            });\n        });\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_3__.setOptions)({\n            columns,\n            meta: {\n                traceDurationUnit: otelConfig.traceDurationUnit\n            }\n        }));\n        didSetColumns.current = true;\n    }, [\n        otelEnabled,\n        otelVersion,\n        builderOptionsDispatch\n    ]);\n};\n// Apply default filters on table change\nconst useDefaultFilters = (table, isTraceIdMode, isNewQuery, builderOptionsDispatch)=>{\n    const appliedDefaultFilters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!isNewQuery);\n    const lastTable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(table || '');\n    if (table !== lastTable.current) {\n        appliedDefaultFilters.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isTraceIdMode || !table || appliedDefaultFilters.current) {\n            return;\n        }\n        const defaultFilters = [\n            {\n                type: 'datetime',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.WithInGrafanaTimeRange,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time,\n                condition: 'AND'\n            },\n            {\n                type: 'string',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsEmpty,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.TraceParentSpanId,\n                condition: 'AND',\n                value: ''\n            },\n            {\n                type: 'UInt64',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.GreaterThan,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.TraceDurationTime,\n                condition: 'AND',\n                value: 0\n            },\n            {\n                type: 'string',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.FilterOperator.IsAnything,\n                filterType: 'custom',\n                key: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.TraceServiceName,\n                condition: 'AND',\n                value: ''\n            }\n        ];\n        const defaultOrderBy = [\n            {\n                name: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.Time,\n                dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.OrderByDirection.DESC,\n                default: true\n            },\n            {\n                name: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.ColumnHint.TraceDurationTime,\n                dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.OrderByDirection.DESC,\n                default: true\n            }\n        ];\n        lastTable.current = table;\n        appliedDefaultFilters.current = true;\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_3__.setOptions)({\n            filters: defaultFilters,\n            orderBy: defaultOrderBy\n        }));\n    }, [\n        table,\n        isTraceIdMode,\n        builderOptionsDispatch\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/queryBuilder/views/traceQueryBuilderHooks.ts\n");

/***/ }),

/***/ "./components/sqlProvider.ts":
/*!***********************************!*\
  !*** ./components/sqlProvider.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaKind: () => (/* binding */ SchemaKind),\n/* harmony export */   registerSQL: () => (/* binding */ registerSQL)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction registerSQL(lang, editor, fetchSuggestions) {\n    // so options are visible outside query editor\n    editor.updateOptions({\n        fixedOverflowWidgets: true,\n        scrollBeyondLastLine: false\n    });\n    const registeredLang = monaco.languages.getLanguages().find((l)=>l.id === lang);\n    if (registeredLang !== undefined) {\n        return monaco.editor;\n    }\n    monaco.languages.register({\n        id: lang\n    });\n    // just extend sql for now so we get syntax highlighting\n    monaco.languages.registerCompletionItemProvider('sql', {\n        triggerCharacters: [\n            ' ',\n            '$',\n            '.',\n            ','\n        ],\n        provideCompletionItems: /*#__PURE__*/ function() {\n            var _ref = _async_to_generator(function*(model, position) {\n                const word = model.getWordUntilPosition(position);\n                const textUntilPosition = model.getValueInRange({\n                    startLineNumber: 1,\n                    startColumn: 1,\n                    endLineNumber: position.lineNumber,\n                    endColumn: position.column\n                });\n                const range = {\n                    startLineNumber: position.lineNumber,\n                    endLineNumber: position.lineNumber,\n                    startColumn: word.startColumn,\n                    endColumn: word.endColumn\n                };\n                return fetchSuggestions(textUntilPosition, range);\n            });\n            return function(model, position) {\n                return _ref.apply(this, arguments);\n            };\n        }()\n    });\n    return monaco.editor;\n}\nvar SchemaKind;\n(function(SchemaKind) {\n    SchemaKind[SchemaKind[\"FIELD\"] = 3] = \"FIELD\";\n    SchemaKind[SchemaKind[\"DATABASE\"] = 8] = \"DATABASE\";\n    SchemaKind[SchemaKind[\"TABLE\"] = 5] = \"TABLE\";\n    SchemaKind[SchemaKind[\"VARIABLE\"] = 4] = \"VARIABLE\";\n})(SchemaKind || (SchemaKind = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3NxbFByb3ZpZGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5Q08sU0FBU0EsWUFBWUMsSUFBWSxFQUFFQyxNQUFXLEVBQUVDLGdCQUF5QjtJQUM5RSw4Q0FBOEM7SUFDOUNELE9BQU9FLGFBQWEsQ0FBQztRQUFFQyxzQkFBc0I7UUFBTUMsc0JBQXNCO0lBQU07SUFFL0UsTUFBTUMsaUJBQWlCQyxPQUFPQyxTQUFTLENBQUNDLFlBQVksR0FBR0MsSUFBSSxDQUFDLENBQUNDLElBQVlBLEVBQUVDLEVBQUUsS0FBS1o7SUFDbEYsSUFBSU0sbUJBQW1CTyxXQUFXO1FBQ2hDLE9BQU9OLE9BQU9OLE1BQU07SUFDdEI7SUFFQU0sT0FBT0MsU0FBUyxDQUFDTSxRQUFRLENBQUM7UUFBRUYsSUFBSVo7SUFBSztJQUVyQyx3REFBd0Q7SUFDeERPLE9BQU9DLFNBQVMsQ0FBQ08sOEJBQThCLENBQUMsT0FBTztRQUNyREMsbUJBQW1CO1lBQUM7WUFBSztZQUFLO1lBQUs7U0FBSTtRQUN2Q0Msc0JBQXNCO3VCQUFFLDhCQUFPQyxPQUFjQztnQkFDM0MsTUFBTUMsT0FBT0YsTUFBTUcsb0JBQW9CLENBQUNGO2dCQUN4QyxNQUFNRyxvQkFBb0JKLE1BQU1LLGVBQWUsQ0FBQztvQkFDOUNDLGlCQUFpQjtvQkFDakJDLGFBQWE7b0JBQ2JDLGVBQWVQLFNBQVNRLFVBQVU7b0JBQ2xDQyxXQUFXVCxTQUFTVSxNQUFNO2dCQUM1QjtnQkFFQSxNQUFNQyxRQUFlO29CQUNuQk4saUJBQWlCTCxTQUFTUSxVQUFVO29CQUNwQ0QsZUFBZVAsU0FBU1EsVUFBVTtvQkFDbENGLGFBQWFMLEtBQUtLLFdBQVc7b0JBQzdCRyxXQUFXUixLQUFLUSxTQUFTO2dCQUMzQjtnQkFFQSxPQUFPMUIsaUJBQWlCb0IsbUJBQW1CUTtZQUM3Qzs0QkFqQitCWixPQUFjQzs7OztJQWtCL0M7SUFFQSxPQUFPWixPQUFPTixNQUFNO0FBQ3RCOztVQUVZOEI7Ozs7O0dBQUFBLGVBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3NxbFByb3ZpZGVyLnRzP2NkODgiXSwic291cmNlc0NvbnRlbnQiOlsiZGVjbGFyZSBjb25zdCBtb25hY286IGFueTtcblxuaW50ZXJmYWNlIExhbmcge1xuICBpZDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgTW9kZWwge1xuICBnZXRWYWx1ZUluUmFuZ2U6IEZ1bmN0aW9uO1xuICBnZXRXb3JkVW50aWxQb3NpdGlvbjogRnVuY3Rpb247XG4gIGdldFZhbHVlOiBGdW5jdGlvbjtcbn1cblxuaW50ZXJmYWNlIFBvc2l0aW9uIHtcbiAgbGluZU51bWJlcjogbnVtYmVyO1xuICBjb2x1bW46IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYW5nZSB7XG4gIHN0YXJ0TGluZU51bWJlcjogbnVtYmVyO1xuICBlbmRMaW5lTnVtYmVyOiBudW1iZXI7XG4gIHN0YXJ0Q29sdW1uOiBudW1iZXI7XG4gIGVuZENvbHVtbjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1Z2dlc3Rpb25SZXNwb25zZSB7XG4gIHN1Z2dlc3Rpb25zOiBTdWdnZXN0aW9uW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VnZ2VzdGlvbiB7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGtpbmQ6IG51bWJlcjtcbiAgZG9jdW1lbnRhdGlvbjogc3RyaW5nO1xuICBpbnNlcnRUZXh0OiBzdHJpbmc7XG4gIHJhbmdlOiBSYW5nZTtcbiAgZGV0YWlsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBGZXRjaGVyID0ge1xuICAodGV4dDogc3RyaW5nLCByYW5nZTogUmFuZ2UpOiBQcm9taXNlPFN1Z2dlc3Rpb25SZXNwb25zZT47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJTUUwobGFuZzogc3RyaW5nLCBlZGl0b3I6IGFueSwgZmV0Y2hTdWdnZXN0aW9uczogRmV0Y2hlcikge1xuICAvLyBzbyBvcHRpb25zIGFyZSB2aXNpYmxlIG91dHNpZGUgcXVlcnkgZWRpdG9yXG4gIGVkaXRvci51cGRhdGVPcHRpb25zKHsgZml4ZWRPdmVyZmxvd1dpZGdldHM6IHRydWUsIHNjcm9sbEJleW9uZExhc3RMaW5lOiBmYWxzZSB9KTtcblxuICBjb25zdCByZWdpc3RlcmVkTGFuZyA9IG1vbmFjby5sYW5ndWFnZXMuZ2V0TGFuZ3VhZ2VzKCkuZmluZCgobDogTGFuZykgPT4gbC5pZCA9PT0gbGFuZyk7XG4gIGlmIChyZWdpc3RlcmVkTGFuZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG1vbmFjby5lZGl0b3I7XG4gIH1cblxuICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyKHsgaWQ6IGxhbmcgfSk7XG5cbiAgLy8ganVzdCBleHRlbmQgc3FsIGZvciBub3cgc28gd2UgZ2V0IHN5bnRheCBoaWdobGlnaHRpbmdcbiAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIoJ3NxbCcsIHtcbiAgICB0cmlnZ2VyQ2hhcmFjdGVyczogWycgJywgJyQnLCAnLicsICcsJ10sXG4gICAgcHJvdmlkZUNvbXBsZXRpb25JdGVtczogYXN5bmMgKG1vZGVsOiBNb2RlbCwgcG9zaXRpb246IFBvc2l0aW9uKSA9PiB7XG4gICAgICBjb25zdCB3b3JkID0gbW9kZWwuZ2V0V29yZFVudGlsUG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgY29uc3QgdGV4dFVudGlsUG9zaXRpb24gPSBtb2RlbC5nZXRWYWx1ZUluUmFuZ2Uoe1xuICAgICAgICBzdGFydExpbmVOdW1iZXI6IDEsXG4gICAgICAgIHN0YXJ0Q29sdW1uOiAxLFxuICAgICAgICBlbmRMaW5lTnVtYmVyOiBwb3NpdGlvbi5saW5lTnVtYmVyLFxuICAgICAgICBlbmRDb2x1bW46IHBvc2l0aW9uLmNvbHVtbixcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByYW5nZTogUmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0TGluZU51bWJlcjogcG9zaXRpb24ubGluZU51bWJlcixcbiAgICAgICAgZW5kTGluZU51bWJlcjogcG9zaXRpb24ubGluZU51bWJlcixcbiAgICAgICAgc3RhcnRDb2x1bW46IHdvcmQuc3RhcnRDb2x1bW4sXG4gICAgICAgIGVuZENvbHVtbjogd29yZC5lbmRDb2x1bW4sXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZmV0Y2hTdWdnZXN0aW9ucyh0ZXh0VW50aWxQb3NpdGlvbiwgcmFuZ2UpO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBtb25hY28uZWRpdG9yO1xufVxuXG5leHBvcnQgZW51bSBTY2hlbWFLaW5kIHtcbiAgRklFTEQgPSAzLCAvLyBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZCxcbiAgREFUQUJBU0UgPSA4LCAvLyBtb25hY28ubGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGUsXG4gIFRBQkxFID0gNSwgLy8gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQuQ2xhc3MsXG4gIFZBUklBQkxFID0gNCwgLy8gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUsXG59XG4iXSwibmFtZXMiOlsicmVnaXN0ZXJTUUwiLCJsYW5nIiwiZWRpdG9yIiwiZmV0Y2hTdWdnZXN0aW9ucyIsInVwZGF0ZU9wdGlvbnMiLCJmaXhlZE92ZXJmbG93V2lkZ2V0cyIsInNjcm9sbEJleW9uZExhc3RMaW5lIiwicmVnaXN0ZXJlZExhbmciLCJtb25hY28iLCJsYW5ndWFnZXMiLCJnZXRMYW5ndWFnZXMiLCJmaW5kIiwibCIsImlkIiwidW5kZWZpbmVkIiwicmVnaXN0ZXIiLCJyZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIiLCJ0cmlnZ2VyQ2hhcmFjdGVycyIsInByb3ZpZGVDb21wbGV0aW9uSXRlbXMiLCJtb2RlbCIsInBvc2l0aW9uIiwid29yZCIsImdldFdvcmRVbnRpbFBvc2l0aW9uIiwidGV4dFVudGlsUG9zaXRpb24iLCJnZXRWYWx1ZUluUmFuZ2UiLCJzdGFydExpbmVOdW1iZXIiLCJzdGFydENvbHVtbiIsImVuZExpbmVOdW1iZXIiLCJsaW5lTnVtYmVyIiwiZW5kQ29sdW1uIiwiY29sdW1uIiwicmFuZ2UiLCJTY2hlbWFLaW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/sqlProvider.ts\n");

/***/ }),

/***/ "./components/suggestions.ts":
/*!***********************************!*\
  !*** ./components/suggestions.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchSuggestions: () => (/* binding */ fetchSuggestions)\n/* harmony export */ });\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _sqlProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sqlProvider */ \"./components/sqlProvider.ts\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n\nfunction fetchSuggestions(text, schema, range) {\n    return _fetchSuggestions.apply(this, arguments);\n}\nfunction _fetchSuggestions() {\n    _fetchSuggestions = _async_to_generator(function*(text, schema, range) {\n        if (text.endsWith('$')) {\n            return getVariableSuggestions(range);\n        }\n        const keyWords = [\n            'select',\n            'from',\n            'where'\n        ];\n        let normalized = text.replace(/[\\n\\r]/g, ' '); // remove crlf;\n        for (const v of keyWords){\n            normalized = normalized.replace(v, v.toUpperCase());\n        }\n        if (normalized.endsWith('SELECT ') || normalized.endsWith('FROM ') || normalized.endsWith(', ')) {\n            if (schema.defaultDatabase !== undefined) {\n                return fetchTableSuggestions(schema, range);\n            }\n            return fetchDatabaseSuggestions(schema, range);\n        }\n        if (normalized.endsWith('WHERE ')) {\n            // only show the tables we selected from\n            // TODO: could also show the fields since where clause doesn't require the table name\n            const parts = normalized.split('FROM ');\n            const lastPart = parts[parts.length - 1];\n            const subparts = lastPart.split(' WHERE');\n            const tablesString = subparts[0];\n            const tables = tablesString.split(',').map((t)=>t.trim());\n            return tables.map((val)=>({\n                    label: val,\n                    kind: _sqlProvider__WEBPACK_IMPORTED_MODULE_1__.SchemaKind.TABLE,\n                    documentation: 'Table',\n                    insertText: val,\n                    range\n                }));\n        }\n        if (text.endsWith('.')) {\n            const parts = text.split(' ');\n            const current = parts[parts.length - 1];\n            const subparts = current.split('.');\n            if (schema.defaultDatabase !== undefined) {\n                // format: table. scenario - fetch the fields for the table\n                const table = subparts[0];\n                return fetchFieldSuggestions(schema, range, '', table);\n            }\n            // no default database defined - assume format: db.table.field\n            if (subparts.length === 2) {\n                // show tables\n                const db = subparts[0];\n                return fetchTableSuggestions(schema, range, db);\n            }\n            // show fields\n            const db = subparts[0];\n            const table = subparts[1];\n            return fetchFieldSuggestions(schema, range, db, table);\n        }\n        return [];\n    });\n    return _fetchSuggestions.apply(this, arguments);\n}\nfunction fetchDatabaseSuggestions(schema, range) {\n    return _fetchDatabaseSuggestions.apply(this, arguments);\n}\nfunction _fetchDatabaseSuggestions() {\n    _fetchDatabaseSuggestions = _async_to_generator(function*(schema, range) {\n        const databases = yield schema.databases();\n        return databases.map((val)=>({\n                label: val,\n                kind: _sqlProvider__WEBPACK_IMPORTED_MODULE_1__.SchemaKind.DATABASE,\n                documentation: 'Database',\n                insertText: val,\n                range\n            }));\n    });\n    return _fetchDatabaseSuggestions.apply(this, arguments);\n}\nfunction fetchTableSuggestions(schema, range, database) {\n    return _fetchTableSuggestions.apply(this, arguments);\n}\nfunction _fetchTableSuggestions() {\n    _fetchTableSuggestions = _async_to_generator(function*(schema, range, database) {\n        const tables = yield schema.tables(database);\n        return tables.map((val)=>({\n                label: val,\n                kind: _sqlProvider__WEBPACK_IMPORTED_MODULE_1__.SchemaKind.TABLE,\n                documentation: 'Table',\n                insertText: val,\n                range\n            }));\n    });\n    return _fetchTableSuggestions.apply(this, arguments);\n}\nfunction fetchFieldSuggestions(schema, range, db, table) {\n    return _fetchFieldSuggestions.apply(this, arguments);\n}\nfunction _fetchFieldSuggestions() {\n    _fetchFieldSuggestions = _async_to_generator(function*(schema, range, db, table) {\n        const fields = yield schema.fields(db, table);\n        return fields.map((val)=>({\n                label: val,\n                kind: _sqlProvider__WEBPACK_IMPORTED_MODULE_1__.SchemaKind.FIELD,\n                documentation: 'Field',\n                insertText: val,\n                range\n            }));\n    });\n    return _fetchFieldSuggestions.apply(this, arguments);\n}\nfunction getVariableSuggestions(range) {\n    const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.getTemplateSrv)();\n    if (!templateSrv) {\n        return [];\n    }\n    return templateSrv.getVariables().map((variable)=>{\n        const label = `\\${${variable.name}}`;\n        const val = templateSrv.replace(label);\n        return {\n            label,\n            detail: `(Template Variable) ${val}`,\n            kind: _sqlProvider__WEBPACK_IMPORTED_MODULE_1__.SchemaKind.VARIABLE,\n            documentation: `(Template Variable) ${val}`,\n            insertText: `{${variable.name}}`,\n            range\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/suggestions.ts\n");

/***/ }),

/***/ "./components/ui/CertificationKey.tsx":
/*!********************************************!*\
  !*** ./components/ui/CertificationKey.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CertificationKey: () => (/* binding */ CertificationKey)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst CertificationKey = ({ hasCert, label, onChange, onClick, placeholder })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Field, {\n        label: label\n    }, hasCert ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {\n        type: \"text\",\n        disabled: true,\n        value: \"configured\",\n        width: 24\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {\n        variant: \"secondary\",\n        onClick: onClick,\n        style: {\n            marginLeft: 4\n        }\n    }, \"Reset\")) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.TextArea, {\n        rows: 7,\n        onChange: onChange,\n        placeholder: placeholder,\n        required: true\n    }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3VpL0NlcnRpZmljYXRpb25LZXkudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ0U7QUFVdEQsTUFBTUssbUJBQThCLENBQUMsRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxXQUFXLEVBQUU7SUFDNUYscUJBQ0UsMkRBQUNOLDhDQUFLQTtRQUFDRyxPQUFPQTtPQUNYRCx3QkFDQyx3SUFDRSwyREFBQ0wsOENBQUtBO1FBQUNVLE1BQUs7UUFBT0MsVUFBQUE7UUFBU0MsT0FBTTtRQUFhQyxPQUFPO3NCQUN0RCwyREFBQ1osK0NBQU1BO1FBQUNhLFNBQVE7UUFBWU4sU0FBU0E7UUFBU08sT0FBTztZQUFFQyxZQUFZO1FBQUU7T0FBRywwQkFLMUUsMkRBQUNkLGlEQUFRQTtRQUFDZSxNQUFNO1FBQUdWLFVBQVVBO1FBQVVFLGFBQWFBO1FBQWFTLFVBQUFBOztBQUl6RSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9jb21wb25lbnRzL3VpL0NlcnRpZmljYXRpb25LZXkudHN4PzlmMzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENoYW5nZUV2ZW50LCBNb3VzZUV2ZW50LCBGQyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IElucHV0LCBCdXR0b24sIFRleHRBcmVhLCBGaWVsZCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbGFiZWw6IHN0cmluZztcbiAgaGFzQ2VydDogYm9vbGVhbjtcbiAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgb25DaGFuZ2U6IChldmVudDogQ2hhbmdlRXZlbnQ8SFRNTFRleHRBcmVhRWxlbWVudD4pID0+IHZvaWQ7XG4gIG9uQ2xpY2s6IChldmVudDogTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4pID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBDZXJ0aWZpY2F0aW9uS2V5OiBGQzxQcm9wcz4gPSAoeyBoYXNDZXJ0LCBsYWJlbCwgb25DaGFuZ2UsIG9uQ2xpY2ssIHBsYWNlaG9sZGVyIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9e2xhYmVsfT5cbiAgICAgIHtoYXNDZXJ0ID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIDxJbnB1dCB0eXBlPVwidGV4dFwiIGRpc2FibGVkIHZhbHVlPVwiY29uZmlndXJlZFwiIHdpZHRoPXsyNH0gLz5cbiAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIiBvbkNsaWNrPXtvbkNsaWNrfSBzdHlsZT17eyBtYXJnaW5MZWZ0OiA0IH19PlxuICAgICAgICAgICAgUmVzZXRcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC8+XG4gICAgICApIDogKFxuICAgICAgICA8VGV4dEFyZWEgcm93cz17N30gb25DaGFuZ2U9e29uQ2hhbmdlfSBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9IHJlcXVpcmVkIC8+XG4gICAgICApfVxuICAgIDwvRmllbGQ+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiSW5wdXQiLCJCdXR0b24iLCJUZXh0QXJlYSIsIkZpZWxkIiwiQ2VydGlmaWNhdGlvbktleSIsImhhc0NlcnQiLCJsYWJlbCIsIm9uQ2hhbmdlIiwib25DbGljayIsInBsYWNlaG9sZGVyIiwidHlwZSIsImRpc2FibGVkIiwidmFsdWUiLCJ3aWR0aCIsInZhcmlhbnQiLCJzdHlsZSIsIm1hcmdpbkxlZnQiLCJyb3dzIiwicmVxdWlyZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/ui/CertificationKey.tsx\n");

/***/ }),

/***/ "./data/CHDatasource.ts":
/*!******************************!*\
  !*** ./data/CHDatasource.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Datasource: () => (/* binding */ Datasource)\n/* harmony export */ });\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/data */ \"@grafana/data\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_data__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"rxjs\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _adHocFilter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./adHocFilter */ \"./data/adHocFilter.ts\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _logs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./logs */ \"./data/logs.ts\");\n/* harmony import */ var _sqlGenerator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../otel */ \"./otel.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils */ \"./data/utils.ts\");\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\n/* harmony import */ var _components_LogsContextPanel__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/LogsContextPanel */ \"./components/LogsContextPanel.tsx\");\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Datasource extends _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.DataSourceWithBackend {\n    getDataProvider(type, request) {\n        if (!this.getSupportedSupplementaryQueryTypes().includes(type)) {\n            return undefined;\n        }\n        switch(type){\n            case _grafana_data__WEBPACK_IMPORTED_MODULE_0__.SupplementaryQueryType.LogsVolume:\n                const logsVolumeRequest = (0,lodash__WEBPACK_IMPORTED_MODULE_6__.cloneDeep)(request);\n                const intervalInfo = (0,_logs__WEBPACK_IMPORTED_MODULE_7__.getIntervalInfo)(logsVolumeRequest.scopedVars);\n                logsVolumeRequest.interval = intervalInfo.interval;\n                logsVolumeRequest.scopedVars.__interval = {\n                    value: intervalInfo.interval,\n                    text: intervalInfo.interval\n                };\n                logsVolumeRequest.hideFromInspector = true;\n                if (intervalInfo.intervalMs !== undefined) {\n                    logsVolumeRequest.intervalMs = intervalInfo.intervalMs;\n                    logsVolumeRequest.scopedVars.__interval_ms = {\n                        value: intervalInfo.intervalMs,\n                        text: intervalInfo.intervalMs\n                    };\n                }\n                const targets = [];\n                logsVolumeRequest.targets.forEach((target)=>{\n                    const supplementaryQuery = this.getSupplementaryLogsVolumeQuery(logsVolumeRequest, target);\n                    if (supplementaryQuery !== undefined) {\n                        targets.push(supplementaryQuery);\n                    }\n                });\n                if (!targets.length) {\n                    return undefined;\n                }\n                return (0,_logs__WEBPACK_IMPORTED_MODULE_7__.queryLogsVolume)(this, _object_spread_props(_object_spread({}, logsVolumeRequest), {\n                    targets\n                }), {\n                    range: logsVolumeRequest.range,\n                    targets: logsVolumeRequest.targets\n                });\n            default:\n                return undefined;\n        }\n    }\n    getSupportedSupplementaryQueryTypes() {\n        return [\n            _grafana_data__WEBPACK_IMPORTED_MODULE_0__.SupplementaryQueryType.LogsVolume\n        ];\n    }\n    getSupplementaryLogsVolumeQuery(logsVolumeRequest, query) {\n        var _query_builderOptions_filters;\n        if (query.editorType !== _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.Builder || query.builderOptions.queryType !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.QueryType.Logs || query.builderOptions.mode !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.BuilderMode.List || query.builderOptions.database === '' || query.builderOptions.table === '') {\n            return undefined;\n        }\n        const timeColumn = (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.getColumnByHint)(query.builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time);\n        if (timeColumn === undefined) {\n            return undefined;\n        }\n        const columns = [];\n        const aggregates = [];\n        columns.push({\n            name: (0,_logs__WEBPACK_IMPORTED_MODULE_7__.getTimeFieldRoundingClause)(logsVolumeRequest.scopedVars, timeColumn.name),\n            alias: _logs__WEBPACK_IMPORTED_MODULE_7__.TIME_FIELD_ALIAS,\n            hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time\n        });\n        const logLevelColumn = (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.getColumnByHint)(query.builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.LogLevel);\n        if (logLevelColumn) {\n            // Generates aggregates like\n            // sum(toString(\"log_level\") IN ('dbug', 'debug', 'DBUG', 'DEBUG', 'Dbug', 'Debug')) AS debug\n            const llf = `toString(\"${logLevelColumn.name}\")`;\n            let level;\n            for(level in _logs__WEBPACK_IMPORTED_MODULE_7__.LOG_LEVEL_TO_IN_CLAUSE){\n                aggregates.push({\n                    aggregateType: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.AggregateType.Sum,\n                    column: `multiSearchAny(${llf}, [${_logs__WEBPACK_IMPORTED_MODULE_7__.LOG_LEVEL_TO_IN_CLAUSE[level]}])`,\n                    alias: level\n                });\n            }\n        } else {\n            // Count all logs if level column isn't selected\n            aggregates.push({\n                aggregateType: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.AggregateType.Count,\n                column: '*',\n                alias: _logs__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_LOGS_ALIAS\n            });\n        }\n        const filters = (((_query_builderOptions_filters = query.builderOptions.filters) === null || _query_builderOptions_filters === void 0 ? void 0 : _query_builderOptions_filters.slice()) || []).map((f)=>{\n            // In order for a hinted filter to work, the hinted column must be SELECTed OR provide \"key\"\n            // For this histogram query the \"level\" column isn't selected, so we must find the original column name\n            if (f.hint && !f.key) {\n                const originalColumn = (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.getColumnByHint)(query.builderOptions, f.hint);\n                f.key = (originalColumn === null || originalColumn === void 0 ? void 0 : originalColumn.alias) || (originalColumn === null || originalColumn === void 0 ? void 0 : originalColumn.name) || '';\n            }\n            return f;\n        });\n        const logVolumeSqlBuilderOptions = {\n            database: query.builderOptions.database,\n            table: query.builderOptions.table,\n            queryType: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.QueryType.TimeSeries,\n            filters,\n            columns,\n            aggregates,\n            orderBy: [\n                {\n                    name: '',\n                    hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time,\n                    dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.OrderByDirection.ASC\n                }\n            ]\n        };\n        const logVolumeSupplementaryQuery = (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.generateSql)(logVolumeSqlBuilderOptions);\n        return {\n            pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_12__.pluginVersion,\n            editorType: _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.Builder,\n            builderOptions: logVolumeSqlBuilderOptions,\n            rawSql: logVolumeSupplementaryQuery,\n            refId: ''\n        };\n    }\n    getSupplementaryQuery(options, originalQuery) {\n        return undefined;\n    }\n    metricFindQuery(query, options) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            var _frame_fields, _frame_fields1, _frame_fields_, _frame_fields_1;\n            if (_this.adHocFiltersStatus === 0) {\n                _this.adHocFiltersStatus = yield _this.canUseAdhocFilters();\n            }\n            const chQuery = (0,lodash__WEBPACK_IMPORTED_MODULE_6__.isString)(query) ? {\n                rawSql: query,\n                editorType: _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.SQL\n            } : query;\n            if (!(chQuery.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.SQL || chQuery.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.Builder || !chQuery.editorType)) {\n                return [];\n            }\n            if (!chQuery.rawSql) {\n                return [];\n            }\n            const frame = yield _this.runQuery(chQuery, options);\n            if (((_frame_fields = frame.fields) === null || _frame_fields === void 0 ? void 0 : _frame_fields.length) === 0) {\n                return [];\n            }\n            if ((frame === null || frame === void 0 ? void 0 : (_frame_fields1 = frame.fields) === null || _frame_fields1 === void 0 ? void 0 : _frame_fields1.length) === 1) {\n                var _frame_fields_2;\n                return frame === null || frame === void 0 ? void 0 : (_frame_fields_2 = frame.fields[0]) === null || _frame_fields_2 === void 0 ? void 0 : _frame_fields_2.values.map((text)=>({\n                        text,\n                        value: text\n                    }));\n            }\n            // convention - assume the first field is an id field\n            const ids = frame === null || frame === void 0 ? void 0 : (_frame_fields_ = frame.fields[0]) === null || _frame_fields_ === void 0 ? void 0 : _frame_fields_.values;\n            return frame === null || frame === void 0 ? void 0 : (_frame_fields_1 = frame.fields[1]) === null || _frame_fields_1 === void 0 ? void 0 : _frame_fields_1.values.map((text, i)=>({\n                    text,\n                    value: ids.get(i)\n                }));\n        })();\n    }\n    applyTemplateVariables(query, scoped) {\n        let rawQuery = query.rawSql || '';\n        // we want to skip applying ad hoc filters when we are getting values for ad hoc filters\n        const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)();\n        if (!this.skipAdHocFilter) {\n            const adHocFilters = templateSrv === null || templateSrv === void 0 ? void 0 : templateSrv.getAdhocFilters(this.name);\n            if (this.adHocFiltersStatus === 2 && (adHocFilters === null || adHocFilters === void 0 ? void 0 : adHocFilters.length) > 0) {\n                throw new Error(`Unable to apply ad hoc filters. Upgrade ClickHouse to >=${this.adHocCHVerReq.major}.${this.adHocCHVerReq.minor} or remove ad hoc filters for the dashboard.`);\n            }\n            rawQuery = this.adHocFilter.apply(rawQuery, adHocFilters);\n        }\n        this.skipAdHocFilter = false;\n        rawQuery = this.applyConditionalAll(rawQuery, (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().getVariables());\n        return _object_spread_props(_object_spread({}, query), {\n            rawSql: this.replace(rawQuery, scoped) || ''\n        });\n    }\n    applyConditionalAll(rawQuery, templateVars) {\n        if (!rawQuery) {\n            return rawQuery;\n        }\n        const macro = '$__conditionalAll(';\n        let macroIndex = rawQuery.lastIndexOf(macro);\n        while(macroIndex !== -1){\n            const params = this.getMacroArgs(rawQuery, macroIndex + macro.length - 1);\n            if (params.length !== 2) {\n                return rawQuery;\n            }\n            const templateVarParam = params[1].trim();\n            const varRegex = new RegExp(RegExp(\"(?<=\\\\$\\\\{)[\\\\w\\\\d]+(?=\\\\})|(?<=\\\\$)[\\\\w\\\\d]+\"));\n            const templateVar = varRegex.exec(templateVarParam);\n            let phrase = params[0];\n            if (templateVar) {\n                const key = templateVars.find((x)=>x.name === templateVar[0]);\n                let value = key === null || key === void 0 ? void 0 : key.current.value.toString();\n                if (value === '' || value === '$__all') {\n                    phrase = '1=1';\n                }\n            }\n            rawQuery = rawQuery.replace(`${macro}${params[0]},${params[1]})`, phrase);\n            macroIndex = rawQuery.lastIndexOf(macro);\n        }\n        return rawQuery;\n    }\n    // Support filtering by field value in Explore\n    modifyQuery(query, action) {\n        var _query_builderOptions_columns, _query_builderOptions_columns1, _query_builderOptions_filters;\n        if (query.editorType !== _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.Builder || !action.options || !action.options.key || !action.options.value) {\n            return query;\n        }\n        const columnName = action.options.key;\n        const actionFrame = action.frame;\n        const actionValue = action.options.value;\n        // Find selected column by alias/name\n        const lookupByAlias = (_query_builderOptions_columns = query.builderOptions.columns) === null || _query_builderOptions_columns === void 0 ? void 0 : _query_builderOptions_columns.find((c)=>c.alias === columnName); // Check all aliases first,\n        const lookupByName = (_query_builderOptions_columns1 = query.builderOptions.columns) === null || _query_builderOptions_columns1 === void 0 ? void 0 : _query_builderOptions_columns1.find((c)=>c.name === columnName); // then try matching column name\n        const lookupByLogsAlias = _sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.logAliasToColumnHints.has(columnName) ? (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.getColumnByHint)(query.builderOptions, _sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.logAliasToColumnHints.get(columnName)) : undefined;\n        const lookupByLogLabels = (0,_utils__WEBPACK_IMPORTED_MODULE_11__.dataFrameHasLogLabelWithName)(actionFrame, columnName) && (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.getColumnByHint)(query.builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.LogLabels);\n        const column = lookupByAlias || lookupByName || lookupByLogsAlias || lookupByLogLabels;\n        let nextFilters = ((_query_builderOptions_filters = query.builderOptions.filters) === null || _query_builderOptions_filters === void 0 ? void 0 : _query_builderOptions_filters.slice()) || [];\n        if (action.type === 'ADD_FILTER') {\n            // we need to remove *any other EQ or NE* for the same field,\n            // because we don't want to end up with two filters like `level=info` AND `level=error`\n            nextFilters = nextFilters.filter((f)=>!(f.type === 'string' && (column && column.hint && f.hint ? f.hint === column.hint : f.key === columnName) && (f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.IsAnything || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.Equals || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.NotEquals)) && !(f.type.toLowerCase().startsWith('map') && column && lookupByLogLabels && f.mapKey === columnName && (f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.IsAnything || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.Equals || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.NotEquals)));\n            nextFilters.push({\n                condition: 'AND',\n                key: column && column.hint ? '' : columnName,\n                hint: column && column.hint ? column.hint : undefined,\n                mapKey: lookupByLogLabels ? columnName : undefined,\n                type: lookupByLogLabels ? 'Map(String, String)' : 'string',\n                filterType: 'custom',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.Equals,\n                value: actionValue\n            });\n        } else if (action.type === 'ADD_FILTER_OUT') {\n            // with this we might want to add multiple values as NE filters\n            // for example, `level != info` AND `level != debug`\n            // thus, here we remove only exactly matching NE filters or an existing EQ filter for this field\n            nextFilters = nextFilters.filter((f)=>!(f.type === 'string' && (column && column.hint && f.hint ? f.hint === column.hint : f.key === columnName) && 'value' in f && f.value === actionValue && (f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.IsAnything || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.NotEquals) || f.type === 'string' && (column && column.hint && f.hint ? f.hint === column.hint : f.key === columnName) && (f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.IsAnything || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.Equals) || f.type.toLowerCase().startsWith('map') && column && lookupByLogLabels && f.mapKey === columnName && (f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.IsAnything || f.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.Equals)));\n            nextFilters.push({\n                condition: 'AND',\n                key: column && column.hint ? '' : columnName,\n                hint: column && column.hint ? column.hint : undefined,\n                mapKey: lookupByLogLabels ? columnName : undefined,\n                type: lookupByLogLabels ? 'Map(String, String)' : 'string',\n                filterType: 'custom',\n                operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.NotEquals,\n                value: actionValue\n            });\n        }\n        // the query is updated to trigger the URL update and propagation to the panels\n        const nextOptions = _object_spread_props(_object_spread({}, query.builderOptions), {\n            filters: nextFilters\n        });\n        return _object_spread_props(_object_spread({}, query), {\n            rawSql: (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.generateSql)(nextOptions),\n            builderOptions: nextOptions\n        });\n    }\n    getMacroArgs(query, argsIndex) {\n        const args = [];\n        const re = /\\(|\\)|,/g;\n        let bracketCount = 0;\n        let lastArgEndIndex = 1;\n        let regExpArray;\n        const argsSubstr = query.substring(argsIndex, query.length);\n        while((regExpArray = re.exec(argsSubstr)) !== null){\n            const foundNode = regExpArray[0];\n            if (foundNode === '(') {\n                bracketCount++;\n            } else if (foundNode === ')') {\n                bracketCount--;\n            }\n            if (foundNode === ',' && bracketCount === 1) {\n                args.push(argsSubstr.substring(lastArgEndIndex, re.lastIndex - 1));\n                lastArgEndIndex = re.lastIndex;\n            }\n            if (bracketCount === 0) {\n                args.push(argsSubstr.substring(lastArgEndIndex, re.lastIndex - 1));\n                return args;\n            }\n        }\n        return [];\n    }\n    replace(value, scopedVars) {\n        if (value !== undefined) {\n            return (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().replace(value, scopedVars, this.format);\n        }\n        return value;\n    }\n    format(value) {\n        if (Array.isArray(value)) {\n            return `'${value.join(\"','\")}'`;\n        }\n        return value;\n    }\n    getDefaultDatabase() {\n        return this.settings.jsonData.defaultDatabase || 'default';\n    }\n    getDefaultTable() {\n        return this.settings.jsonData.defaultTable;\n    }\n    getDefaultLogsDatabase() {\n        var _this_settings_jsonData_logs;\n        return (_this_settings_jsonData_logs = this.settings.jsonData.logs) === null || _this_settings_jsonData_logs === void 0 ? void 0 : _this_settings_jsonData_logs.defaultDatabase;\n    }\n    getDefaultLogsTable() {\n        var _this_settings_jsonData_logs;\n        return (_this_settings_jsonData_logs = this.settings.jsonData.logs) === null || _this_settings_jsonData_logs === void 0 ? void 0 : _this_settings_jsonData_logs.defaultTable;\n    }\n    getDefaultLogsColumns() {\n        const result = new Map();\n        const logsConfig = this.settings.jsonData.logs;\n        if (!logsConfig) {\n            return result;\n        }\n        const otelEnabled = logsConfig.otelEnabled;\n        const otelVersion = logsConfig.otelVersion;\n        const otelConfig = _otel__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getVersion(otelVersion);\n        if (otelEnabled && otelConfig) {\n            return otelConfig.logColumnMap;\n        }\n        logsConfig.timeColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time, logsConfig.timeColumn);\n        logsConfig.levelColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.LogLevel, logsConfig.levelColumn);\n        logsConfig.messageColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.LogMessage, logsConfig.messageColumn);\n        return result;\n    }\n    shouldSelectLogContextColumns() {\n        var _this_settings_jsonData_logs;\n        return ((_this_settings_jsonData_logs = this.settings.jsonData.logs) === null || _this_settings_jsonData_logs === void 0 ? void 0 : _this_settings_jsonData_logs.selectContextColumns) || false;\n    }\n    getLogContextColumnNames() {\n        var _this_settings_jsonData_logs;\n        return ((_this_settings_jsonData_logs = this.settings.jsonData.logs) === null || _this_settings_jsonData_logs === void 0 ? void 0 : _this_settings_jsonData_logs.contextColumns) || [];\n    }\n    /**\n   * Get configured OTEL version for logs. Returns undefined when versioning is disabled/unset.\n   */ getLogsOtelVersion() {\n        const logConfig = this.settings.jsonData.logs;\n        return (logConfig === null || logConfig === void 0 ? void 0 : logConfig.otelEnabled) ? logConfig.otelVersion || undefined : undefined;\n    }\n    getDefaultTraceDatabase() {\n        var _this_settings_jsonData_traces;\n        return (_this_settings_jsonData_traces = this.settings.jsonData.traces) === null || _this_settings_jsonData_traces === void 0 ? void 0 : _this_settings_jsonData_traces.defaultDatabase;\n    }\n    getDefaultTraceTable() {\n        var _this_settings_jsonData_traces;\n        return (_this_settings_jsonData_traces = this.settings.jsonData.traces) === null || _this_settings_jsonData_traces === void 0 ? void 0 : _this_settings_jsonData_traces.defaultTable;\n    }\n    getDefaultTraceColumns() {\n        const result = new Map();\n        const traceConfig = this.settings.jsonData.traces;\n        if (!traceConfig) {\n            return result;\n        }\n        const otelEnabled = traceConfig.otelEnabled;\n        const otelVersion = traceConfig.otelVersion;\n        const otelConfig = _otel__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getVersion(otelVersion);\n        if (otelEnabled && otelConfig) {\n            return otelConfig.traceColumnMap;\n        }\n        traceConfig.traceIdColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceId, traceConfig.traceIdColumn);\n        traceConfig.spanIdColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceSpanId, traceConfig.spanIdColumn);\n        traceConfig.operationNameColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceOperationName, traceConfig.operationNameColumn);\n        traceConfig.parentSpanIdColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceParentSpanId, traceConfig.parentSpanIdColumn);\n        traceConfig.serviceNameColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceServiceName, traceConfig.serviceNameColumn);\n        traceConfig.durationColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceDurationTime, traceConfig.durationColumn);\n        traceConfig.startTimeColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time, traceConfig.startTimeColumn);\n        traceConfig.tagsColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceTags, traceConfig.tagsColumn);\n        traceConfig.serviceTagsColumn && result.set(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.TraceServiceTags, traceConfig.serviceTagsColumn);\n        return result;\n    }\n    /**\n   * Get configured OTEL version for traces. Returns undefined when versioning is disabled/unset.\n   */ getTraceOtelVersion() {\n        const traceConfig = this.settings.jsonData.traces;\n        return (traceConfig === null || traceConfig === void 0 ? void 0 : traceConfig.otelEnabled) ? traceConfig.otelVersion || undefined : undefined;\n    }\n    getDefaultTraceDurationUnit() {\n        var _this_settings_jsonData_traces;\n        return ((_this_settings_jsonData_traces = this.settings.jsonData.traces) === null || _this_settings_jsonData_traces === void 0 ? void 0 : _this_settings_jsonData_traces.durationUnit) || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.TimeUnit.Nanoseconds;\n    }\n    fetchDatabases() {\n        var _this = this;\n        return _async_to_generator(function*() {\n            return _this.fetchData('SHOW DATABASES');\n        })();\n    }\n    fetchTables(db) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const rawSql = db ? `SHOW TABLES FROM \"${db}\"` : 'SHOW TABLES';\n            return _this.fetchData(rawSql);\n        })();\n    }\n    /**\n   * Used to populate suggestions in the filter editor for Map columns.\n   * \n   * Samples rows to get a unique set of keys for the map.\n   * May not include ALL keys for a given dataset.\n   * \n   * TODO: This query can be slow/expensive\n   */ fetchUniqueMapKeys(mapColumn, db, table) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const rawSql = `SELECT DISTINCT arrayJoin(${mapColumn}.keys) as keys FROM \"${db}\".\"${table}\" LIMIT 1000`;\n            return _this.fetchData(rawSql);\n        })();\n    }\n    fetchEntities() {\n        var _this = this;\n        return _async_to_generator(function*() {\n            return _this.fetchTables();\n        })();\n    }\n    fetchFields(database, table) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            return _this.fetchData(`DESC TABLE \"${database}\".\"${table}\"`);\n        })();\n    }\n    /**\n   * Fetches column suggestions from the table schema.\n   */ fetchColumnsFromTable(database, table) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            var _frame_fields;\n            const prefix = Boolean(database) ? `\"${database}\".` : '';\n            const rawSql = `DESC TABLE ${prefix}\"${table}\"`;\n            const frame = yield _this.runQuery({\n                rawSql\n            });\n            if (((_frame_fields = frame.fields) === null || _frame_fields === void 0 ? void 0 : _frame_fields.length) === 0) {\n                return [];\n            }\n            const view = new _grafana_data__WEBPACK_IMPORTED_MODULE_0__.DataFrameView(frame);\n            return view.map((item)=>({\n                    name: item[0],\n                    type: item[1],\n                    label: item[0],\n                    picklistValues: []\n                }));\n        })();\n    }\n    /**\n   * Fetches column suggestions from an alias definition table.\n   */ fetchColumnsFromAliasTable(fullTableName) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            var _frame_fields;\n            const rawSql = `SELECT alias, select, \"type\" FROM ${fullTableName}`;\n            const frame = yield _this.runQuery({\n                rawSql\n            });\n            if (((_frame_fields = frame.fields) === null || _frame_fields === void 0 ? void 0 : _frame_fields.length) === 0) {\n                return [];\n            }\n            const view = new _grafana_data__WEBPACK_IMPORTED_MODULE_0__.DataFrameView(frame);\n            return view.map((item)=>({\n                    name: item[1],\n                    type: item[2],\n                    label: item[0],\n                    picklistValues: []\n                }));\n        })();\n    }\n    getAliasTable(targetDatabase, targetTable) {\n        var _this_settings_jsonData, _this_settings;\n        const aliasEntries = ((_this_settings = this.settings) === null || _this_settings === void 0 ? void 0 : (_this_settings_jsonData = _this_settings.jsonData) === null || _this_settings_jsonData === void 0 ? void 0 : _this_settings_jsonData.aliasTables) || [];\n        const matchedEntry = aliasEntries.find((e)=>{\n            const matchDatabase = !e.targetDatabase || e.targetDatabase === targetDatabase;\n            const matchTable = e.targetTable === targetTable;\n            return matchDatabase && matchTable;\n        }) || null;\n        if (matchedEntry === null) {\n            return null;\n        }\n        const aliasDatabase = matchedEntry.aliasDatabase || targetDatabase || null;\n        const aliasTable = matchedEntry.aliasTable;\n        const prefix = Boolean(aliasDatabase) ? `\"${aliasDatabase}\".` : '';\n        return `${prefix}\"${aliasTable}\"`;\n    }\n    fetchColumns(database, table) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const fullAliasTableName = _this.getAliasTable(database, table);\n            if (fullAliasTableName !== null) {\n                return _this.fetchColumnsFromAliasTable(fullAliasTableName);\n            }\n            return _this.fetchColumnsFromTable(database, table);\n        })();\n    }\n    fetchData(rawSql) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const frame = yield _this.runQuery({\n                rawSql\n            });\n            return _this.values(frame);\n        })();\n    }\n    getTimezone(request) {\n        // timezone specified in the time picker\n        if (request.timezone && request.timezone !== 'browser') {\n            return request.timezone;\n        }\n        // fall back to the local timezone\n        const localTimezoneInfo = (0,_grafana_data__WEBPACK_IMPORTED_MODULE_0__.getTimeZoneInfo)((0,_grafana_data__WEBPACK_IMPORTED_MODULE_0__.getTimeZone)(), Date.now());\n        return localTimezoneInfo === null || localTimezoneInfo === void 0 ? void 0 : localTimezoneInfo.ianaName;\n    }\n    query(request) {\n        const targets = request.targets// filters out queries disabled in UI\n        .filter((t)=>t.hide !== true)// attach timezone information\n        .map((t)=>{\n            return _object_spread_props(_object_spread({}, t), {\n                meta: _object_spread_props(_object_spread({}, t === null || t === void 0 ? void 0 : t.meta), {\n                    timezone: this.getTimezone(request)\n                })\n            });\n        });\n        return super.query(_object_spread_props(_object_spread({}, request), {\n            targets\n        })).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_2__.map)((res)=>(0,_utils__WEBPACK_IMPORTED_MODULE_11__.transformQueryResponseWithTraceAndLogLinks)(this, request, res)));\n    }\n    runQuery(request, options) {\n        return new Promise((resolve)=>{\n            const req = {\n                targets: [\n                    _object_spread_props(_object_spread({}, request), {\n                        refId: String(Math.random())\n                    })\n                ],\n                range: options ? options.range : (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().timeRange\n            };\n            this.query(req).subscribe((res)=>{\n                resolve(res.data[0] || {\n                    fields: []\n                });\n            });\n        });\n    }\n    values(frame) {\n        var _frame_fields, _frame_fields_;\n        if (((_frame_fields = frame.fields) === null || _frame_fields === void 0 ? void 0 : _frame_fields.length) === 0) {\n            return [];\n        }\n        return frame === null || frame === void 0 ? void 0 : (_frame_fields_ = frame.fields[0]) === null || _frame_fields_ === void 0 ? void 0 : _frame_fields_.values.map((text)=>text);\n    }\n    getTagKeys() {\n        var _this = this;\n        return _async_to_generator(function*() {\n            if (_this.adHocFiltersStatus === 2 || _this.adHocFiltersStatus === 0) {\n                _this.adHocFiltersStatus = yield _this.canUseAdhocFilters();\n                if (_this.adHocFiltersStatus === 2) {\n                    return {};\n                }\n            }\n            const { type, frame } = yield _this.fetchTags();\n            if (type === 0) {\n                return frame.fields.map((f)=>({\n                        text: f.name\n                    }));\n            }\n            const view = new _grafana_data__WEBPACK_IMPORTED_MODULE_0__.DataFrameView(frame);\n            return view.map((item)=>({\n                    text: `${item[2]}.${item[0]}`\n                }));\n        })();\n    }\n    getTagValues({ key }) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const { type } = _this.getTagSource();\n            _this.skipAdHocFilter = true;\n            if (type === 0) {\n                return _this.fetchTagValuesFromQuery(key);\n            }\n            return _this.fetchTagValuesFromSchema(key);\n        })();\n    }\n    fetchTagValuesFromSchema(key) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            var _frame_fields;\n            const { from } = _this.getTagSource();\n            const [table, col] = key.split('.');\n            const source = (from === null || from === void 0 ? void 0 : from.includes('.')) ? `${from.split('.')[0]}.${table}` : table;\n            const rawSql = `select distinct ${col} from ${source} limit 1000`;\n            const frame = yield _this.runQuery({\n                rawSql\n            });\n            if (((_frame_fields = frame.fields) === null || _frame_fields === void 0 ? void 0 : _frame_fields.length) === 0) {\n                return [];\n            }\n            const field = frame.fields[0];\n            // Convert to string to avoid https://github.com/grafana/grafana/issues/12209\n            return field.values.filter((value)=>value !== null).map((value)=>{\n                return {\n                    text: String(value)\n                };\n            });\n        })();\n    }\n    fetchTagValuesFromQuery(key) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const { frame } = yield _this.fetchTags();\n            const field = frame.fields.find((f)=>f.name === key);\n            if (field) {\n                // Convert to string to avoid https://github.com/grafana/grafana/issues/12209\n                return field.values.filter((value)=>value !== null).map((value)=>{\n                    return {\n                        text: String(value)\n                    };\n                });\n            }\n            return [];\n        })();\n    }\n    fetchTags() {\n        var _this = this;\n        return _async_to_generator(function*() {\n            const tagSource = _this.getTagSource();\n            _this.skipAdHocFilter = true;\n            if (tagSource.source === undefined) {\n                const rawSql = 'SELECT name, type, table FROM system.columns';\n                const results = yield _this.runQuery({\n                    rawSql\n                });\n                return {\n                    type: 1,\n                    frame: results\n                };\n            }\n            if (tagSource.type === 0) {\n                _this.adHocFilter.setTargetTableFromQuery(tagSource.source);\n            }\n            const results = yield _this.runQuery({\n                rawSql: tagSource.source\n            });\n            return {\n                type: tagSource.type,\n                frame: results\n            };\n        })();\n    }\n    getTagSource() {\n        // @todo https://github.com/grafana/grafana/issues/13109\n        const ADHOC_VAR = '$clickhouse_adhoc_query';\n        const defaultDatabase = this.getDefaultDatabase();\n        let source = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().replace(ADHOC_VAR);\n        if (source === ADHOC_VAR && (0,lodash__WEBPACK_IMPORTED_MODULE_6__.isEmpty)(defaultDatabase)) {\n            return {\n                type: 1,\n                source: undefined\n            };\n        }\n        source = source === ADHOC_VAR ? defaultDatabase : source;\n        if (source.toLowerCase().startsWith('select')) {\n            return {\n                type: 0,\n                source\n            };\n        }\n        if (!source.includes('.')) {\n            const sql = `SELECT name, type, table FROM system.columns WHERE database IN ('${source}')`;\n            return {\n                type: 1,\n                source: sql,\n                from: source\n            };\n        }\n        const [db, table] = source.split('.');\n        const sql = `SELECT name, type, table FROM system.columns WHERE database IN ('${db}') AND table = '${table}'`;\n        return {\n            type: 1,\n            source: sql,\n            from: source\n        };\n    }\n    // Returns true if ClickHouse's version is greater than or equal to 22.7\n    // 22.7 added 'settings additional_table_filters' which is used for ad hoc filters\n    canUseAdhocFilters() {\n        var _this = this;\n        return _async_to_generator(function*() {\n            _this.skipAdHocFilter = true;\n            const data = yield _this.fetchData(`SELECT version()`);\n            try {\n                const verString = data[0].split('.');\n                const ver = {\n                    major: Number.parseInt(verString[0], 10),\n                    minor: Number.parseInt(verString[1], 10)\n                };\n                return ver.major > _this.adHocCHVerReq.major || ver.major === _this.adHocCHVerReq.major && ver.minor >= _this.adHocCHVerReq.minor ? 1 : 2;\n            } catch (err) {\n                console.error(`Unable to parse ClickHouse version: ${err}`);\n                throw err;\n            }\n        })();\n    }\n    // interface DataSourceWithLogsContextSupport\n    getLogContextColumnsFromLogRow(row) {\n        const contextColumnNames = this.getLogContextColumnNames();\n        const contextColumns = [];\n        for (let columnName of contextColumnNames){\n            const isMapKey = columnName.includes('[\\'') && columnName.includes('\\']');\n            let mapName = '';\n            let keyName = '';\n            if (isMapKey) {\n                mapName = columnName.substring(0, columnName.indexOf('['));\n                keyName = columnName.substring(columnName.indexOf('[\\'') + 2, columnName.lastIndexOf('\\']'));\n            }\n            const field = row.dataFrame.fields.find((f)=>// exact column name match\n                f.name === columnName || isMapKey && // entire map was selected\n                (f.name === mapName || // single key was selected from map\n                f.name === `arrayElement(${mapName}, '${keyName}')`));\n            if (!field) {\n                continue;\n            }\n            let value = field.values.get(row.rowIndex);\n            if (value && field.type === 'other' && isMapKey) {\n                value = value[keyName];\n            }\n            if (!value) {\n                continue;\n            }\n            let contextColumnName;\n            if (isMapKey) {\n                contextColumnName = `${mapName}['${keyName}']`;\n            } else {\n                contextColumnName = columnName;\n            }\n            contextColumns.push({\n                name: contextColumnName,\n                value\n            });\n        }\n        return contextColumns;\n    }\n    /**\n   * Runs a query based on a single log row and a direction (forward/backward)\n   * \n   * Will remove all filters and ORDER BYs, and will re-add them based on the configured context columns.\n   * Context columns are used to narrow down to a single logging unit as defined by your logging infrastructure.\n   * Typically this will be a single service, or container/pod in docker/k8s.\n   * \n   * If no context columns can be matched from the selected data frame, then the query is not run.\n   */ getLogRowContext(row, options, query, cacheFilters) {\n        var _this = this;\n        return _async_to_generator(function*() {\n            if (!query) {\n                throw new Error('Missing query for log context');\n            } else if (!options || !options.direction || options.limit === undefined) {\n                throw new Error('Missing log context options for query');\n            } else if (query.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_3__.EditorType.SQL || !query.builderOptions) {\n                throw new Error('Log context feature only works for builder queries');\n            }\n            const contextQuery = (0,lodash__WEBPACK_IMPORTED_MODULE_6__.cloneDeep)(query);\n            contextQuery.refId = '';\n            const builderOptions = contextQuery.builderOptions;\n            builderOptions.limit = options.limit;\n            if (!(0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.getColumnByHint)(builderOptions, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time)) {\n                throw new Error('Missing time column for log context');\n            }\n            builderOptions.orderBy = [];\n            builderOptions.orderBy.push({\n                name: '',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time,\n                dir: options.direction === _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogRowContextQueryDirection.Forward ? _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.OrderByDirection.ASC : _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.OrderByDirection.DESC\n            });\n            builderOptions.filters = [];\n            builderOptions.filters.push({\n                operator: options.direction === _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogRowContextQueryDirection.Forward ? _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.GreaterThanOrEqual : _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.LessThanOrEqual,\n                filterType: 'custom',\n                hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.ColumnHint.Time,\n                key: '',\n                value: `fromUnixTimestamp64Nano(${row.timeEpochNs})`,\n                type: 'datetime',\n                condition: 'AND'\n            });\n            const contextColumns = _this.getLogContextColumnsFromLogRow(row);\n            if (contextColumns.length < 1) {\n                throw new Error('Unable to match any log context columns');\n            }\n            const contextColumnFilters = contextColumns.map((c)=>({\n                    operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_4__.FilterOperator.Equals,\n                    filterType: 'custom',\n                    key: c.name,\n                    value: c.value,\n                    type: 'string',\n                    condition: 'AND'\n                }));\n            builderOptions.filters.push(...contextColumnFilters);\n            contextQuery.rawSql = (0,_sqlGenerator__WEBPACK_IMPORTED_MODULE_8__.generateSql)(builderOptions);\n            const req = {\n                targets: [\n                    contextQuery\n                ]\n            };\n            return yield (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.firstValueFrom)(_this.query(req));\n        })();\n    }\n    /**\n   * Unused + deprecated but required by interface, log context button is always visible now\n   * https://github.com/grafana/grafana/issues/66819\n   */ showContextToggle(row) {\n        return true;\n    }\n    /**\n   * Returns a React component that is displayed in the top portion of the log context panel\n   */ getLogRowContextUi(row, runContextQuery, query) {\n        const contextColumns = this.getLogContextColumnsFromLogRow(row);\n        return (0,react__WEBPACK_IMPORTED_MODULE_10__.createElement)(_components_LogsContextPanel__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n            columns: contextColumns,\n            datasourceUid: this.uid\n        });\n    }\n    constructor(instanceSettings){\n        super(instanceSettings), // This enables default annotation support for 7.2+\n        _define_property(this, \"annotations\", {}), _define_property(this, \"settings\", void 0), _define_property(this, \"adHocFilter\", void 0), _define_property(this, \"skipAdHocFilter\", false) // don't apply adhoc filters to the query\n        , _define_property(this, \"adHocFiltersStatus\", 0) // ad hoc filters only work with CH 22.7+\n        , _define_property(this, \"adHocCHVerReq\", {\n            major: 22,\n            minor: 7\n        });\n        this.settings = instanceSettings;\n        this.adHocFilter = new _adHocFilter__WEBPACK_IMPORTED_MODULE_5__.AdHocFilter();\n    }\n}\nvar TagType;\n(function(TagType) {\n    TagType[TagType[\"query\"] = 0] = \"query\";\n    TagType[TagType[\"schema\"] = 1] = \"schema\";\n})(TagType || (TagType = {}));\nvar AdHocFilterStatus;\n(function(AdHocFilterStatus) {\n    AdHocFilterStatus[AdHocFilterStatus[\"none\"] = 0] = \"none\";\n    AdHocFilterStatus[AdHocFilterStatus[\"enabled\"] = 1] = \"enabled\";\n    AdHocFilterStatus[AdHocFilterStatus[\"disabled\"] = 2] = \"disabled\";\n})(AdHocFilterStatus || (AdHocFilterStatus = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./data/CHDatasource.ts\n");

/***/ }),

/***/ "./data/adHocFilter.ts":
/*!*****************************!*\
  !*** ./data/adHocFilter.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdHocFilter: () => (/* binding */ AdHocFilter)\n/* harmony export */ });\n/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ast */ \"./data/ast.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n\nclass AdHocFilter {\n    setTargetTableFromQuery(query) {\n        this._targetTable = (0,_ast__WEBPACK_IMPORTED_MODULE_0__.getTable)(query);\n        if (this._targetTable === '') {\n            throw new Error('Failed to get table from adhoc query.');\n        }\n    }\n    apply(sql, adHocFilters) {\n        if (sql === '' || !adHocFilters || adHocFilters.length === 0) {\n            return sql;\n        }\n        // sql can contain a query with double quotes around the database and table name, e.g. \"default\".\"table\", so we remove those\n        if (this._targetTable !== '' && !sql.replace(/\"/g, '').match(new RegExp(`.*\\\\b${this._targetTable}\\\\b.*`, 'gi'))) {\n            return sql;\n        }\n        if (this._targetTable === '') {\n            this._targetTable = (0,_ast__WEBPACK_IMPORTED_MODULE_0__.getTable)(sql);\n        }\n        if (this._targetTable === '') {\n            return sql;\n        }\n        const filters = adHocFilters.filter((filter)=>{\n            const valid = isValid(filter);\n            if (!valid) {\n                console.warn('Invalid adhoc filter will be ignored:', filter);\n            }\n            return valid;\n        }).map((f, i)=>{\n            const key = f.key.includes('.') ? f.key.split('.')[1] : f.key;\n            const value = escapeValueBasedOnOperator(f.value, f.operator);\n            const condition = i !== adHocFilters.length - 1 ? f.condition ? f.condition : 'AND' : '';\n            const operator = convertOperatorToClickHouseOperator(f.operator);\n            return ` ${key} ${operator} ${value} ${condition}`;\n        }).join('');\n        if (filters === '') {\n            return sql;\n        }\n        // Semicolons are not required and cause problems when building the SQL\n        sql = sql.replace(';', '');\n        return `${sql} settings additional_table_filters={'${this._targetTable}' : '${filters}'}`;\n    }\n    constructor(){\n        _define_property(this, \"_targetTable\", '');\n    }\n}\nfunction isValid(filter) {\n    return filter.key !== undefined && filter.operator !== undefined && filter.value !== undefined;\n}\nfunction escapeValueBasedOnOperator(s, operator) {\n    if (operator === 'IN') {\n        // Allow list of values without parentheses\n        if (s.length > 2 && s[0] !== '(' && s[s.length - 1] !== ')') {\n            s = `(${s})`;\n        }\n        return s.replace(/'/g, \"\\\\'\");\n    } else {\n        return `\\\\'${s}\\\\'`;\n    }\n}\nfunction convertOperatorToClickHouseOperator(operator) {\n    if (operator === '=~') {\n        return 'ILIKE';\n    }\n    if (operator === '!~') {\n        return 'NOT ILIKE';\n    }\n    return operator;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kYXRhL2FkSG9jRmlsdGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFpQztBQUUxQixNQUFNQztJQUdYQyx3QkFBd0JDLEtBQWEsRUFBRTtRQUNyQyxJQUFJLENBQUNDLFlBQVksR0FBR0osOENBQVFBLENBQUNHO1FBQzdCLElBQUksSUFBSSxDQUFDQyxZQUFZLEtBQUssSUFBSTtZQUM1QixNQUFNLElBQUlDLE1BQU07UUFDbEI7SUFDRjtJQUVBQyxNQUFNQyxHQUFXLEVBQUVDLFlBQW1DLEVBQVU7UUFDOUQsSUFBSUQsUUFBUSxNQUFNLENBQUNDLGdCQUFnQkEsYUFBYUMsTUFBTSxLQUFLLEdBQUc7WUFDNUQsT0FBT0Y7UUFDVDtRQUVBLDRIQUE0SDtRQUM1SCxJQUFJLElBQUksQ0FBQ0gsWUFBWSxLQUFLLE1BQU0sQ0FBQ0csSUFBSUcsT0FBTyxDQUFDLE1BQU0sSUFBSUMsS0FBSyxDQUFDLElBQUlDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDUixZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUTtZQUNoSCxPQUFPRztRQUNUO1FBRUEsSUFBSSxJQUFJLENBQUNILFlBQVksS0FBSyxJQUFJO1lBQzVCLElBQUksQ0FBQ0EsWUFBWSxHQUFHSiw4Q0FBUUEsQ0FBQ087UUFDL0I7UUFFQSxJQUFJLElBQUksQ0FBQ0gsWUFBWSxLQUFLLElBQUk7WUFDNUIsT0FBT0c7UUFDVDtRQUVBLE1BQU1NLFVBQVVMLGFBQ2JNLE1BQU0sQ0FBQyxDQUFDQTtZQUNQLE1BQU1DLFFBQVFDLFFBQVFGO1lBQ3RCLElBQUksQ0FBQ0MsT0FBTztnQkFDVkUsUUFBUUMsSUFBSSxDQUFDLHlDQUF5Q0o7WUFDeEQ7WUFDQSxPQUFPQztRQUNULEdBQ0NJLEdBQUcsQ0FBQyxDQUFDQyxHQUFHQztZQUNQLE1BQU1DLE1BQU1GLEVBQUVFLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDLE9BQU9ILEVBQUVFLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUdKLEVBQUVFLEdBQUc7WUFDN0QsTUFBTUcsUUFBUUMsMkJBQTJCTixFQUFFSyxLQUFLLEVBQUVMLEVBQUVPLFFBQVE7WUFDNUQsTUFBTUMsWUFBWVAsTUFBTWIsYUFBYUMsTUFBTSxHQUFHLElBQUtXLEVBQUVRLFNBQVMsR0FBR1IsRUFBRVEsU0FBUyxHQUFHLFFBQVM7WUFDeEYsTUFBTUQsV0FBV0Usb0NBQW9DVCxFQUFFTyxRQUFRO1lBQy9ELE9BQU8sQ0FBQyxDQUFDLEVBQUVMLElBQUksQ0FBQyxFQUFFSyxTQUFTLENBQUMsRUFBRUYsTUFBTSxDQUFDLEVBQUVHLFVBQVUsQ0FBQztRQUNwRCxHQUNDRSxJQUFJLENBQUM7UUFFUixJQUFJakIsWUFBWSxJQUFJO1lBQ2xCLE9BQU9OO1FBQ1Q7UUFDQSx1RUFBdUU7UUFDdkVBLE1BQU1BLElBQUlHLE9BQU8sQ0FBQyxLQUFLO1FBQ3ZCLE9BQU8sQ0FBQyxFQUFFSCxJQUFJLHFDQUFxQyxFQUFFLElBQUksQ0FBQ0gsWUFBWSxDQUFDLEtBQUssRUFBRVMsUUFBUSxFQUFFLENBQUM7SUFDM0Y7O1FBbERBLHVCQUFRVCxnQkFBZTs7QUFtRHpCO0FBRUEsU0FBU1ksUUFBUUYsTUFBMkI7SUFDMUMsT0FBT0EsT0FBT1EsR0FBRyxLQUFLUyxhQUFhakIsT0FBT2EsUUFBUSxLQUFLSSxhQUFhakIsT0FBT1csS0FBSyxLQUFLTTtBQUN2RjtBQUVBLFNBQVNMLDJCQUEyQk0sQ0FBUyxFQUFFTCxRQUFxQztJQUNsRixJQUFJQSxhQUFhLE1BQU07UUFDckIsMkNBQTJDO1FBQzNDLElBQUlLLEVBQUV2QixNQUFNLEdBQUcsS0FBS3VCLENBQUMsQ0FBQyxFQUFFLEtBQUssT0FBT0EsQ0FBQyxDQUFDQSxFQUFFdkIsTUFBTSxHQUFHLEVBQUUsS0FBSyxLQUFLO1lBQzNEdUIsSUFBSSxDQUFDLENBQUMsRUFBRUEsRUFBRSxDQUFDLENBQUM7UUFDZDtRQUVBLE9BQU9BLEVBQUV0QixPQUFPLENBQUMsTUFBTTtJQUN6QixPQUFPO1FBQ0wsT0FBTyxDQUFDLEdBQUcsRUFBRXNCLEVBQUUsR0FBRyxDQUFDO0lBQ3JCO0FBQ0Y7QUFFQSxTQUFTSCxvQ0FBb0NGLFFBQXFDO0lBQ2hGLElBQUlBLGFBQWEsTUFBTTtRQUNyQixPQUFPO0lBQ1Q7SUFDQSxJQUFJQSxhQUFhLE1BQU07UUFDckIsT0FBTztJQUNUO0lBQ0EsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vZGF0YS9hZEhvY0ZpbHRlci50cz80ZjU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFRhYmxlIH0gZnJvbSAnLi9hc3QnO1xuXG5leHBvcnQgY2xhc3MgQWRIb2NGaWx0ZXIge1xuICBwcml2YXRlIF90YXJnZXRUYWJsZSA9ICcnO1xuXG4gIHNldFRhcmdldFRhYmxlRnJvbVF1ZXJ5KHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICB0aGlzLl90YXJnZXRUYWJsZSA9IGdldFRhYmxlKHF1ZXJ5KTtcbiAgICBpZiAodGhpcy5fdGFyZ2V0VGFibGUgPT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgdGFibGUgZnJvbSBhZGhvYyBxdWVyeS4nKTtcbiAgICB9XG4gIH1cblxuICBhcHBseShzcWw6IHN0cmluZywgYWRIb2NGaWx0ZXJzOiBBZEhvY1ZhcmlhYmxlRmlsdGVyW10pOiBzdHJpbmcge1xuICAgIGlmIChzcWwgPT09ICcnIHx8ICFhZEhvY0ZpbHRlcnMgfHwgYWRIb2NGaWx0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHNxbDtcbiAgICB9XG5cbiAgICAvLyBzcWwgY2FuIGNvbnRhaW4gYSBxdWVyeSB3aXRoIGRvdWJsZSBxdW90ZXMgYXJvdW5kIHRoZSBkYXRhYmFzZSBhbmQgdGFibGUgbmFtZSwgZS5nLiBcImRlZmF1bHRcIi5cInRhYmxlXCIsIHNvIHdlIHJlbW92ZSB0aG9zZVxuICAgIGlmICh0aGlzLl90YXJnZXRUYWJsZSAhPT0gJycgJiYgIXNxbC5yZXBsYWNlKC9cIi9nLCAnJykubWF0Y2gobmV3IFJlZ0V4cChgLipcXFxcYiR7dGhpcy5fdGFyZ2V0VGFibGV9XFxcXGIuKmAsICdnaScpKSkge1xuICAgICAgcmV0dXJuIHNxbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGFyZ2V0VGFibGUgPT09ICcnKSB7XG4gICAgICB0aGlzLl90YXJnZXRUYWJsZSA9IGdldFRhYmxlKHNxbCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RhcmdldFRhYmxlID09PSAnJykge1xuICAgICAgcmV0dXJuIHNxbDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJzID0gYWRIb2NGaWx0ZXJzXG4gICAgICAuZmlsdGVyKChmaWx0ZXI6IEFkSG9jVmFyaWFibGVGaWx0ZXIpID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBpc1ZhbGlkKGZpbHRlcik7XG4gICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgYWRob2MgZmlsdGVyIHdpbGwgYmUgaWdub3JlZDonLCBmaWx0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgIH0pXG4gICAgICAubWFwKChmLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGYua2V5LmluY2x1ZGVzKCcuJykgPyBmLmtleS5zcGxpdCgnLicpWzFdIDogZi5rZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZXNjYXBlVmFsdWVCYXNlZE9uT3BlcmF0b3IoZi52YWx1ZSwgZi5vcGVyYXRvcik7XG4gICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGkgIT09IGFkSG9jRmlsdGVycy5sZW5ndGggLSAxID8gKGYuY29uZGl0aW9uID8gZi5jb25kaXRpb24gOiAnQU5EJykgOiAnJztcbiAgICAgICAgY29uc3Qgb3BlcmF0b3IgPSBjb252ZXJ0T3BlcmF0b3JUb0NsaWNrSG91c2VPcGVyYXRvcihmLm9wZXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIGAgJHtrZXl9ICR7b3BlcmF0b3J9ICR7dmFsdWV9ICR7Y29uZGl0aW9ufWA7XG4gICAgICB9KVxuICAgICAgLmpvaW4oJycpO1xuXG4gICAgaWYgKGZpbHRlcnMgPT09ICcnKSB7XG4gICAgICByZXR1cm4gc3FsO1xuICAgIH1cbiAgICAvLyBTZW1pY29sb25zIGFyZSBub3QgcmVxdWlyZWQgYW5kIGNhdXNlIHByb2JsZW1zIHdoZW4gYnVpbGRpbmcgdGhlIFNRTFxuICAgIHNxbCA9IHNxbC5yZXBsYWNlKCc7JywgJycpO1xuICAgIHJldHVybiBgJHtzcWx9IHNldHRpbmdzIGFkZGl0aW9uYWxfdGFibGVfZmlsdGVycz17JyR7dGhpcy5fdGFyZ2V0VGFibGV9JyA6ICcke2ZpbHRlcnN9J31gO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQoZmlsdGVyOiBBZEhvY1ZhcmlhYmxlRmlsdGVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBmaWx0ZXIua2V5ICE9PSB1bmRlZmluZWQgJiYgZmlsdGVyLm9wZXJhdG9yICE9PSB1bmRlZmluZWQgJiYgZmlsdGVyLnZhbHVlICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVZhbHVlQmFzZWRPbk9wZXJhdG9yKHM6IHN0cmluZywgb3BlcmF0b3I6IEFkSG9jVmFyaWFibGVGaWx0ZXJPcGVyYXRvcik6IHN0cmluZyB7XG4gIGlmIChvcGVyYXRvciA9PT0gJ0lOJykge1xuICAgIC8vIEFsbG93IGxpc3Qgb2YgdmFsdWVzIHdpdGhvdXQgcGFyZW50aGVzZXNcbiAgICBpZiAocy5sZW5ndGggPiAyICYmIHNbMF0gIT09ICcoJyAmJiBzW3MubGVuZ3RoIC0gMV0gIT09ICcpJykge1xuICAgICAgcyA9IGAoJHtzfSlgXG4gICAgfVxuXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgXFxcXCcke3N9XFxcXCdgO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRPcGVyYXRvclRvQ2xpY2tIb3VzZU9wZXJhdG9yKG9wZXJhdG9yOiBBZEhvY1ZhcmlhYmxlRmlsdGVyT3BlcmF0b3IpOiBzdHJpbmcge1xuICBpZiAob3BlcmF0b3IgPT09ICc9ficpIHtcbiAgICByZXR1cm4gJ0lMSUtFJztcbiAgfVxuICBpZiAob3BlcmF0b3IgPT09ICchficpIHtcbiAgICByZXR1cm4gJ05PVCBJTElLRSc7XG4gIH1cbiAgcmV0dXJuIG9wZXJhdG9yO1xufVxuXG50eXBlIEFkSG9jVmFyaWFibGVGaWx0ZXJPcGVyYXRvciA9ICc+JyB8ICc8JyB8ICc9JyB8ICchPScgfCAnPX4nIHwgJyF+JyB8ICdJTic7XG5cbmV4cG9ydCB0eXBlIEFkSG9jVmFyaWFibGVGaWx0ZXIgPSB7XG4gIGtleTogc3RyaW5nO1xuICBvcGVyYXRvcjogQWRIb2NWYXJpYWJsZUZpbHRlck9wZXJhdG9yO1xuICB2YWx1ZTogc3RyaW5nO1xuICBjb25kaXRpb24/OiBzdHJpbmc7XG59O1xuIl0sIm5hbWVzIjpbImdldFRhYmxlIiwiQWRIb2NGaWx0ZXIiLCJzZXRUYXJnZXRUYWJsZUZyb21RdWVyeSIsInF1ZXJ5IiwiX3RhcmdldFRhYmxlIiwiRXJyb3IiLCJhcHBseSIsInNxbCIsImFkSG9jRmlsdGVycyIsImxlbmd0aCIsInJlcGxhY2UiLCJtYXRjaCIsIlJlZ0V4cCIsImZpbHRlcnMiLCJmaWx0ZXIiLCJ2YWxpZCIsImlzVmFsaWQiLCJjb25zb2xlIiwid2FybiIsIm1hcCIsImYiLCJpIiwia2V5IiwiaW5jbHVkZXMiLCJzcGxpdCIsInZhbHVlIiwiZXNjYXBlVmFsdWVCYXNlZE9uT3BlcmF0b3IiLCJvcGVyYXRvciIsImNvbmRpdGlvbiIsImNvbnZlcnRPcGVyYXRvclRvQ2xpY2tIb3VzZU9wZXJhdG9yIiwiam9pbiIsInVuZGVmaW5lZCIsInMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./data/adHocFilter.ts\n");

/***/ }),

/***/ "./data/ast.ts":
/*!*********************!*\
  !*** ./data/ast.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFields: () => (/* binding */ getFields),\n/* harmony export */   getTable: () => (/* binding */ getTable),\n/* harmony export */   sqlToStatement: () => (/* binding */ sqlToStatement)\n/* harmony export */ });\n/* harmony import */ var pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pgsql-ast-parser */ \"../node_modules/pgsql-ast-parser/index.js\");\n/* harmony import */ var pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__);\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\nfunction getReplacementKey(isVariable) {\n    const prefix = isVariable ? 'v' : 'f';\n    return prefix + (Math.random() + 1).toString(36).substring(7);\n}\n/**\n * Replaces macro functions and keywords such as $__timeFilter() and \"default\"\n */ function replaceMacroFunctions(sql) {\n    const replaceFuncs = [];\n    // default is a keyword in this grammar, but it can be used in CH\n    const keywordRegex = /(\\$__|\\$|default|settings)/gi;\n    let regExpArray;\n    while((regExpArray = keywordRegex.exec(sql)) !== null){\n        replaceFuncs.push({\n            startIndex: regExpArray.index,\n            name: regExpArray[0],\n            replacementName: ''\n        });\n    }\n    // need to process in reverse so starting positions aren't affected by replacing other things\n    for(let i = replaceFuncs.length - 1; i >= 0; i--){\n        const si = replaceFuncs[i].startIndex;\n        const replacementName = getReplacementKey(false);\n        replaceFuncs[i].replacementName = replacementName;\n        // settings do not parse and we do not need information from them so we will remove them\n        if (replaceFuncs[i].name.toLowerCase() === 'settings') {\n            sql = sql.substring(0, si);\n            continue;\n        }\n        sql = sql.substring(0, si) + replacementName + sql.substring(si + replaceFuncs[i].name.length);\n    }\n    return [\n        replaceFuncs,\n        sql\n    ];\n}\n/**\n * Replaces Grafana variables such as ${var} ${var.key} ${var.key:singlequote}\n * https://grafana.com/docs/grafana/latest/dashboards/variables\n */ function replaceMacroVariables(sql) {\n    const replaceVariables = [];\n    const variableRegex = /\\${[a-zA-Z0-9_:.\\w]+}/g;\n    let regExpArray;\n    while((regExpArray = variableRegex.exec(sql)) !== null){\n        replaceVariables.push({\n            startIndex: regExpArray.index,\n            name: regExpArray[0],\n            replacementName: ''\n        });\n    }\n    // need to process in reverse so starting positions aren't affected by replacing other things\n    for(let i = replaceVariables.length - 1; i >= 0; i--){\n        const si = replaceVariables[i].startIndex;\n        const replacementName = getReplacementKey(true);\n        replaceVariables[i].replacementName = replacementName;\n        sql = sql.substring(0, si) + replacementName + sql.substring(si + replaceVariables[i].name.length);\n    }\n    return [\n        replaceVariables,\n        sql\n    ];\n}\n// TODO: support query parameters: https://clickhouse.com/docs/en/interfaces/cli#cli-queries-with-parameters\nfunction sqlToStatement(rawSql) {\n    const [replaceVars, variableSql] = replaceMacroVariables(rawSql);\n    const [replaceFuncs, sql] = replaceMacroFunctions(variableSql);\n    const replaceParts = replaceVars.concat(replaceFuncs);\n    let ast;\n    try {\n        ast = (0,pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__.parseFirst)(sql);\n    } catch (err) {\n        console.error(`Failed to parse SQL statement into an AST: ${err}`);\n        return {};\n    }\n    const mapper = (0,pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__.astMapper)((map)=>({\n            tableRef: (t)=>{\n                const rfs = replaceParts.find((x)=>x.replacementName === t.schema);\n                if (rfs) {\n                    var _t_schema;\n                    return _object_spread_props(_object_spread({}, t), {\n                        schema: (_t_schema = t.schema) === null || _t_schema === void 0 ? void 0 : _t_schema.replace(rfs.replacementName, rfs.name)\n                    });\n                }\n                const rft = replaceParts.find((x)=>x.replacementName === t.name);\n                if (rft) {\n                    return _object_spread_props(_object_spread({}, t), {\n                        name: t.name.replace(rft.replacementName, rft.name)\n                    });\n                }\n                return map.super().tableRef(t);\n            },\n            ref: (r)=>{\n                const rf = replaceParts.find((x)=>r.name.startsWith(x.replacementName));\n                if (rf) {\n                    const d = r.name.replace(rf.replacementName, rf.name);\n                    return _object_spread_props(_object_spread({}, r), {\n                        name: d\n                    });\n                }\n                return map.super().ref(r);\n            },\n            expr: (e)=>{\n                if (!e || e.type !== 'string') {\n                    return map.super().expr(e);\n                }\n                const rf = replaceParts.find((x)=>e.value.startsWith(x.replacementName));\n                if (rf) {\n                    const d = e.value.replace(rf.replacementName, rf.name);\n                    return _object_spread_props(_object_spread({}, e), {\n                        value: d\n                    });\n                }\n                return map.super().expr(e);\n            },\n            call: (c)=>{\n                const rf = replaceParts.find((x)=>c.function.name.startsWith(x.replacementName));\n                if (rf) {\n                    return _object_spread_props(_object_spread({}, c), {\n                        function: _object_spread_props(_object_spread({}, c.function), {\n                            name: c.function.name.replace(rf.replacementName, rf.name)\n                        })\n                    });\n                }\n                return map.super().call(c);\n            }\n        }));\n    return mapper.statement(ast);\n}\nfunction getTable(sql) {\n    var _stm_from, _stm_from1;\n    const stm = sqlToStatement(sql);\n    if (stm.type !== 'select' || !((_stm_from = stm.from) === null || _stm_from === void 0 ? void 0 : _stm_from.length) || ((_stm_from1 = stm.from) === null || _stm_from1 === void 0 ? void 0 : _stm_from1.length) <= 0) {\n        return '';\n    }\n    switch(stm.from[0].type){\n        case 'table':\n            {\n                const table = stm.from[0];\n                const tableName = `${table.name.schema ? `${table.name.schema}.` : ''}${table.name.name}`;\n                // clickhouse table names are case-sensitive and pgsql parser removes casing,\n                // so we need to get the casing from the raw sql\n                const s = new RegExp(`\\\\b${tableName}\\\\b`, 'gi').exec(sql);\n                return s ? s[0] : tableName;\n            }\n        case 'statement':\n            {\n                const table = stm.from[0];\n                return getTable(pgsql_ast_parser__WEBPACK_IMPORTED_MODULE_0__.toSql.statement(table.statement));\n            }\n    }\n    return '';\n}\nfunction getFields(sql) {\n    var _stm_columns, _stm_columns1;\n    const stm = sqlToStatement(sql);\n    if (stm.type !== 'select' || !((_stm_columns = stm.columns) === null || _stm_columns === void 0 ? void 0 : _stm_columns.length) || ((_stm_columns1 = stm.columns) === null || _stm_columns1 === void 0 ? void 0 : _stm_columns1.length) <= 0) {\n        return [];\n    }\n    return stm.columns.map((x)=>{\n        const exprName = x.expr.name;\n        if (x.alias !== undefined) {\n            var _x_alias;\n            return `${exprName} as ${(_x_alias = x.alias) === null || _x_alias === void 0 ? void 0 : _x_alias.name}`;\n        } else {\n            return `${exprName}`;\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./data/ast.ts\n");

/***/ }),

/***/ "./data/columnFilters.ts":
/*!*******************************!*\
  !*** ./data/columnFilters.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   columnFilterDateTime: () => (/* binding */ columnFilterDateTime),\n/* harmony export */   columnFilterOr: () => (/* binding */ columnFilterOr),\n/* harmony export */   columnFilterString: () => (/* binding */ columnFilterString)\n/* harmony export */ });\nconst columnFilterDateTime = (s)=>(s.type || '').toLowerCase().includes('date');\nconst columnFilterString = (s)=>(s.type || '').toLowerCase().includes('string') || (s.type || '').toLowerCase().includes('enum');\nconst columnFilterOr = (s, ...filterFuncs)=>{\n    for (let filterFn of filterFuncs){\n        if (filterFn(s)) {\n            return true;\n        }\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kYXRhL2NvbHVtbkZpbHRlcnMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBR08sTUFBTUEsdUJBQXVCLENBQUNDLElBQStCLENBQUNBLEVBQUVDLElBQUksSUFBSSxFQUFDLEVBQUdDLFdBQVcsR0FBR0MsUUFBUSxDQUFDLFFBQVE7QUFDM0csTUFBTUMscUJBQXFCLENBQUNKLElBQStCLENBQUNBLEVBQUVDLElBQUksSUFBSSxFQUFDLEVBQUdDLFdBQVcsR0FBR0MsUUFBUSxDQUFDLGFBQWEsQ0FBQ0gsRUFBRUMsSUFBSSxJQUFJLEVBQUMsRUFBR0MsV0FBVyxHQUFHQyxRQUFRLENBQUMsUUFBUTtBQUM1SixNQUFNRSxpQkFBaUIsQ0FBQ0wsR0FBbUIsR0FBR007SUFDbkQsS0FBSyxJQUFJQyxZQUFZRCxZQUFhO1FBQ2hDLElBQUlDLFNBQVNQLElBQUk7WUFDZixPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9kYXRhL2NvbHVtbkZpbHRlcnMudHM/NTYwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWxlY3RlZENvbHVtbiB9IGZyb20gXCJ0eXBlcy9xdWVyeUJ1aWxkZXJcIjtcblxuXG5leHBvcnQgY29uc3QgY29sdW1uRmlsdGVyRGF0ZVRpbWUgPSAoczogU2VsZWN0ZWRDb2x1bW4pOiBib29sZWFuID0+IChzLnR5cGUgfHwgJycpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2RhdGUnKTtcbmV4cG9ydCBjb25zdCBjb2x1bW5GaWx0ZXJTdHJpbmcgPSAoczogU2VsZWN0ZWRDb2x1bW4pOiBib29sZWFuID0+IChzLnR5cGUgfHwgJycpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3N0cmluZycpIHx8IChzLnR5cGUgfHwgJycpLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2VudW0nKTtcbmV4cG9ydCBjb25zdCBjb2x1bW5GaWx0ZXJPciA9IChzOiBTZWxlY3RlZENvbHVtbiwgLi4uZmlsdGVyRnVuY3M6IFJlYWRvbmx5QXJyYXk8KHM6IFNlbGVjdGVkQ29sdW1uKSA9PiBib29sZWFuPik6IGJvb2xlYW4gPT4ge1xuICBmb3IgKGxldCBmaWx0ZXJGbiBvZiBmaWx0ZXJGdW5jcykge1xuICAgIGlmIChmaWx0ZXJGbihzKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdLCJuYW1lcyI6WyJjb2x1bW5GaWx0ZXJEYXRlVGltZSIsInMiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImNvbHVtbkZpbHRlclN0cmluZyIsImNvbHVtbkZpbHRlck9yIiwiZmlsdGVyRnVuY3MiLCJmaWx0ZXJGbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./data/columnFilters.ts\n");

/***/ }),

/***/ "./data/logs.ts":
/*!**********************!*\
  !*** ./data/logs.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_LOGS_ALIAS: () => (/* binding */ DEFAULT_LOGS_ALIAS),\n/* harmony export */   LOG_LEVEL_TO_IN_CLAUSE: () => (/* binding */ LOG_LEVEL_TO_IN_CLAUSE),\n/* harmony export */   TIME_FIELD_ALIAS: () => (/* binding */ TIME_FIELD_ALIAS),\n/* harmony export */   aggregateRawLogsVolume: () => (/* binding */ aggregateRawLogsVolume),\n/* harmony export */   allLogLevels: () => (/* binding */ allLogLevels),\n/* harmony export */   getIntervalInfo: () => (/* binding */ getIntervalInfo),\n/* harmony export */   getTimeFieldRoundingClause: () => (/* binding */ getTimeFieldRoundingClause),\n/* harmony export */   queryLogsVolume: () => (/* binding */ queryLogsVolume)\n/* harmony export */ });\n/* harmony import */ var _grafana_schema__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @grafana/schema */ \"../node_modules/@grafana/schema/dist/esm/common/common.gen.js\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/data */ \"@grafana/data\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_data__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ \"rxjs\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nconst MILLISECOND = 1;\nconst SECOND = 1000 * MILLISECOND;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst LogLevelColor = {\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.critical]: _grafana_ui__WEBPACK_IMPORTED_MODULE_3__.colors[7],\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.warning]: _grafana_ui__WEBPACK_IMPORTED_MODULE_3__.colors[1],\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.error]: _grafana_ui__WEBPACK_IMPORTED_MODULE_3__.colors[4],\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.info]: _grafana_ui__WEBPACK_IMPORTED_MODULE_3__.colors[0],\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.debug]: _grafana_ui__WEBPACK_IMPORTED_MODULE_3__.colors[5],\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.trace]: _grafana_ui__WEBPACK_IMPORTED_MODULE_3__.colors[2],\n    [_grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.unknown]: getThemeColor('#8e8e8e', '#bdc4cd')\n};\nfunction getThemeColor(dark, light) {\n    return _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.bootData.user.lightTheme ? light : dark;\n}\n/**\n * Creates an observable, which makes requests to get logs volume and aggregates results.\n */ function queryLogsVolume(datasource, logsVolumeRequest, options) {\n    return new rxjs__WEBPACK_IMPORTED_MODULE_1__.Observable((observer)=>{\n        let rawLogsVolume = [];\n        observer.next({\n            state: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LoadingState.Loading,\n            error: undefined,\n            data: []\n        });\n        const queryResponse = datasource.query(logsVolumeRequest);\n        const queryObservable = (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.isObservable)(queryResponse) ? queryResponse : (0,rxjs__WEBPACK_IMPORTED_MODULE_1__.from)(queryResponse);\n        const subscription = queryObservable.subscribe({\n            complete: ()=>{\n                const aggregatedLogsVolume = aggregateRawLogsVolume(rawLogsVolume);\n                if (aggregatedLogsVolume[0]) {\n                    aggregatedLogsVolume[0].meta = {\n                        custom: {\n                            targets: options.targets,\n                            absoluteRange: {\n                                from: options.range.from.valueOf(),\n                                to: options.range.to.valueOf()\n                            }\n                        }\n                    };\n                }\n                observer.next({\n                    state: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LoadingState.Done,\n                    error: undefined,\n                    data: aggregatedLogsVolume\n                });\n                observer.complete();\n            },\n            next: (dataQueryResponse)=>{\n                const { error } = dataQueryResponse;\n                if (error !== undefined) {\n                    observer.next({\n                        state: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LoadingState.Error,\n                        error,\n                        data: []\n                    });\n                    observer.error(error);\n                } else {\n                    rawLogsVolume = rawLogsVolume.concat(dataQueryResponse.data.map(_grafana_data__WEBPACK_IMPORTED_MODULE_0__.toDataFrame));\n                }\n            },\n            error: (error)=>{\n                observer.next({\n                    state: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LoadingState.Error,\n                    error: error,\n                    data: []\n                });\n                observer.error(error);\n            }\n        });\n        return ()=>{\n            subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n        };\n    });\n}\n/**\n * Take multiple data frames, sum up values and group by level.\n * Return a list of data frames, each representing single level.\n */ function aggregateRawLogsVolume(rawLogsVolume) {\n    if (rawLogsVolume.length !== 1) {\n        return []; // we always expect a single DataFrame with all the aggregations from ClickHouse\n    }\n    const [[timeField], levelFields] = (0,lodash__WEBPACK_IMPORTED_MODULE_4__.partition)(rawLogsVolume[0].fields, (f)=>f.name === TIME_FIELD_ALIAS);\n    if (timeField === undefined) {\n        return []; // should never happen if we have a DataFrame available\n    }\n    const oneLevelDetected = levelFields.length === 1 && levelFields[0].name === DEFAULT_LOGS_ALIAS;\n    if (oneLevelDetected) {\n        levelFields[0].name = 'logs';\n    }\n    const totalLength = timeField.values.length;\n    return levelFields.map((field)=>{\n        const logLevel = _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel[field.name] || _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.unknown;\n        const df = new _grafana_data__WEBPACK_IMPORTED_MODULE_0__.MutableDataFrame();\n        df.addField({\n            name: 'Time',\n            type: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.FieldType.time,\n            values: timeField.values\n        }, totalLength);\n        df.addField({\n            name: 'Value',\n            type: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.FieldType.number,\n            config: getLogVolumeFieldConfig(logLevel, oneLevelDetected),\n            values: field.values\n        });\n        return df;\n    });\n}\n/**\n * Returns field configuration used to render logs volume bars\n */ function getLogVolumeFieldConfig(level, oneLevelDetected) {\n    const name = oneLevelDetected && level === _grafana_data__WEBPACK_IMPORTED_MODULE_0__.LogLevel.unknown ? 'logs' : level;\n    const color = LogLevelColor[level];\n    return {\n        displayNameFromDS: name,\n        color: {\n            mode: _grafana_data__WEBPACK_IMPORTED_MODULE_0__.FieldColorModeId.Fixed,\n            fixedColor: color\n        },\n        custom: {\n            drawStyle: _grafana_schema__WEBPACK_IMPORTED_MODULE_5__.GraphDrawStyle.Bars,\n            barAlignment: _grafana_schema__WEBPACK_IMPORTED_MODULE_5__.BarAlignment.Center,\n            lineColor: color,\n            pointColor: color,\n            fillColor: color,\n            lineWidth: 1,\n            fillOpacity: 100,\n            stacking: {\n                mode: _grafana_schema__WEBPACK_IMPORTED_MODULE_5__.StackingMode.Normal,\n                group: 'A'\n            }\n        }\n    };\n}\nfunction getIntervalInfo(scopedVars) {\n    if (scopedVars.__interval_ms) {\n        let intervalMs = scopedVars.__interval_ms.value;\n        let interval;\n        if (intervalMs > HOUR) {\n            intervalMs = DAY;\n            interval = '1d';\n        } else if (intervalMs > MINUTE) {\n            intervalMs = HOUR;\n            interval = '1h';\n        } else if (intervalMs > SECOND) {\n            intervalMs = MINUTE;\n            interval = '1m';\n        } else {\n            intervalMs = SECOND;\n            interval = '1s';\n        }\n        return {\n            interval,\n            intervalMs\n        };\n    } else {\n        return {\n            interval: '$__interval'\n        };\n    }\n}\nfunction getTimeFieldRoundingClause(scopedVars, timeField) {\n    // NB: slight discrepancy with getIntervalInfo here\n    // it returns { interval: '$__interval' } when the interval from the ScopedVars is undefined,\n    // but we fall back to DAY here\n    let interval = 'DAY';\n    if (scopedVars.__interval_ms) {\n        let intervalMs = scopedVars.__interval_ms.value;\n        if (intervalMs > HOUR) {\n            interval = 'DAY';\n        } else if (intervalMs > MINUTE) {\n            interval = 'HOUR';\n        } else if (intervalMs > SECOND) {\n            interval = 'MINUTE';\n        } else {\n            interval = 'SECOND';\n        }\n    }\n    return `toStartOfInterval(\"${timeField}\", INTERVAL 1 ${interval})`;\n}\nconst TIME_FIELD_ALIAS = 'time';\nconst DEFAULT_LOGS_ALIAS = 'logs';\nconst LOG_LEVEL_TO_IN_CLAUSE = (()=>{\n    const levels = {\n        critical: [\n            'critical',\n            'fatal',\n            'crit',\n            'alert',\n            'emerg'\n        ],\n        error: [\n            'error',\n            'err',\n            'eror'\n        ],\n        warn: [\n            'warn',\n            'warning'\n        ],\n        info: [\n            'info',\n            'information',\n            'informational'\n        ],\n        debug: [\n            'debug',\n            'dbug'\n        ],\n        trace: [\n            'trace'\n        ],\n        unknown: [\n            'unknown'\n        ]\n    };\n    return Object.keys(levels).reduce((allLevels, level)=>{\n        allLevels[level] = `${[\n            ...levels[level].map((l)=>`'${l}'`),\n            ...levels[level].map((l)=>`'${l.toUpperCase()}'`),\n            ...levels[level].map((l)=>`'${l.charAt(0).toUpperCase() + l.slice(1)}'`)\n        ].join(',')}`;\n        return allLevels;\n    }, {});\n})();\nconst allLogLevels = [\n    'critical',\n    'fatal',\n    'crit',\n    'alert',\n    'emerg',\n    'error',\n    'err',\n    'eror',\n    'warn',\n    'warning',\n    'info',\n    'information',\n    'informational',\n    'debug',\n    'dbug',\n    'trace',\n    'unknown'\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./data/logs.ts\n");

/***/ }),

/***/ "./data/migration.ts":
/*!***************************!*\
  !*** ./data/migration.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   migrateCHQuery: () => (/* binding */ migrateCHQuery)\n/* harmony export */ });\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./data/utils.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n/**\n * Takes a CHQuery and transforms it to the latest interface.\n */ const migrateCHQuery = (savedQuery)=>{\n    const isGrafanaDefaultQuery = savedQuery.rawSql === undefined;\n    if (isGrafanaDefaultQuery) {\n        return savedQuery;\n    }\n    if (isV3CHQuery(savedQuery)) {\n        return migrateV3CHQuery(savedQuery);\n    }\n    return savedQuery;\n};\n/**\n * Takes v3 CHQuery and returns a version compatible with the latest editor.\n */ const migrateV3CHQuery = (savedQuery)=>{\n    // Builder Query\n    if (savedQuery['queryType'] === 'builder') {\n        var _savedQuery_meta;\n        const builderQuery = _object_spread_props(_object_spread({}, savedQuery), {\n            pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_2__.pluginVersion,\n            editorType: _types_sql__WEBPACK_IMPORTED_MODULE_1__.EditorType.Builder,\n            builderOptions: migrateV3QueryBuilderOptions(savedQuery['builderOptions'] || {}),\n            rawSql: savedQuery.rawSql || '',\n            refId: savedQuery.refId || '',\n            format: savedQuery.format\n        });\n        if (savedQuery === null || savedQuery === void 0 ? void 0 : (_savedQuery_meta = savedQuery.meta) === null || _savedQuery_meta === void 0 ? void 0 : _savedQuery_meta.timezone) {\n            builderQuery.meta = {\n                timezone: savedQuery.meta.timezone\n            };\n        }\n        // delete unwanted properties from v3\n        delete builderQuery['queryType'];\n        delete builderQuery['selectedFormat'];\n        return builderQuery;\n    }\n    // Raw SQL Query\n    const rawSqlQuery = _object_spread_props(_object_spread({}, savedQuery), {\n        pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_2__.pluginVersion,\n        editorType: _types_sql__WEBPACK_IMPORTED_MODULE_1__.EditorType.SQL,\n        rawSql: savedQuery.rawSql || '',\n        refId: savedQuery.refId || '',\n        format: savedQuery.format,\n        queryType: (0,_utils__WEBPACK_IMPORTED_MODULE_3__.mapGrafanaFormatToQueryType)(savedQuery.format),\n        meta: {}\n    });\n    if (savedQuery.expand) {\n        rawSqlQuery.expand = savedQuery.expand;\n    }\n    if (savedQuery.meta) {\n        const meta = savedQuery.meta;\n        if (meta.timezone) {\n            rawSqlQuery.meta.timezone = meta.timezone;\n        }\n        if (meta.builderOptions) {\n            // When changing from builder to raw editor, the builder options are saved and also require migration\n            rawSqlQuery.meta.builderOptions = migrateV3QueryBuilderOptions(meta.builderOptions);\n        }\n    }\n    // delete unwanted properties from v3\n    delete rawSqlQuery['builderOptions'];\n    delete rawSqlQuery['selectedFormat'];\n    return rawSqlQuery;\n};\n/**\n * Takes v3 options and returns a version compatible with the latest builder.\n */ const migrateV3QueryBuilderOptions = (savedOptions)=>{\n    const mapped = {\n        database: savedOptions.database || '',\n        table: savedOptions.table || '',\n        queryType: getV3QueryType(savedOptions),\n        columns: []\n    };\n    if (savedOptions.mode) {\n        mapped.mode = savedOptions.mode;\n    }\n    if (savedOptions['fields'] || Array.isArray(savedOptions['fields'])) {\n        const oldColumns = savedOptions['fields'];\n        mapped.columns = oldColumns.map((name)=>({\n                name\n            }));\n    }\n    const timeField = savedOptions['timeField'];\n    const timeFieldType = savedOptions['timeFieldType'];\n    if (timeField) {\n        const timeColumn = {\n            name: timeField,\n            type: timeFieldType,\n            hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time\n        };\n        mapped.columns.push(timeColumn);\n    }\n    const logLevelField = savedOptions['logLevelField'];\n    if (logLevelField) {\n        const logLevelColumn = {\n            name: logLevelField,\n            hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel\n        };\n        mapped.columns.push(logLevelColumn);\n    }\n    if (savedOptions['metrics'] || Array.isArray(savedOptions['metrics'])) {\n        const oldAggregates = savedOptions['metrics'];\n        mapped.aggregates = oldAggregates.map((agg)=>({\n                aggregateType: agg['aggregation'],\n                column: agg['field'],\n                alias: agg['alias']\n            }));\n    }\n    if (savedOptions.filters || Array.isArray(savedOptions.filters)) {\n        const oldFilters = savedOptions.filters;\n        mapped.filters = oldFilters.map((filter)=>{\n            const result = _object_spread({}, filter);\n            if (filter.key === timeField) {\n                result.hint = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time;\n            } else if (filter.key === logLevelField) {\n                result.hint = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel;\n            }\n            return result;\n        });\n    }\n    if (savedOptions.groupBy || Array.isArray(savedOptions.groupBy)) {\n        mapped.groupBy = savedOptions.groupBy;\n    }\n    if (savedOptions.orderBy || Array.isArray(savedOptions.orderBy)) {\n        mapped.orderBy = savedOptions.orderBy;\n    }\n    if (savedOptions.limit !== undefined && savedOptions.limit >= 0) {\n        mapped.limit = savedOptions.limit;\n    }\n    return mapped;\n};\n/**\n * Checks if CHQuery is from <= v3 options.\n */ const isV3CHQuery = (savedQuery)=>{\n    // pluginVersion was added in v4\n    const oldPluginVersion = !savedQuery['pluginVersion'] || !(0,_utils_version__WEBPACK_IMPORTED_MODULE_2__.isVersionGtOrEq)(savedQuery.pluginVersion, '4.0.0');\n    const oldQueryType = savedQuery['queryType'] === 'sql' || savedQuery['queryType'] === 'builder';\n    return oldPluginVersion || oldQueryType;\n};\n/**\n * Takes v3 options and returns the optimal QueryType. Defaults to QueryType.Table.\n */ const getV3QueryType = (savedOptions)=>{\n    if (savedOptions['timeField']) {\n        return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.TimeSeries;\n    } else if (savedOptions['logLevelField']) {\n        return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Logs;\n    }\n    return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Table;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./data/migration.ts\n");

/***/ }),

/***/ "./data/sqlGenerator.ts":
/*!******************************!*\
  !*** ./data/sqlGenerator.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _testExports: () => (/* binding */ _testExports),\n/* harmony export */   generateSql: () => (/* binding */ generateSql),\n/* harmony export */   getColumnByHint: () => (/* binding */ getColumnByHint),\n/* harmony export */   getColumnIndexByHint: () => (/* binding */ getColumnIndexByHint),\n/* harmony export */   getColumnsByHints: () => (/* binding */ getColumnsByHints),\n/* harmony export */   isAggregateQuery: () => (/* binding */ isAggregateQuery),\n/* harmony export */   logAliasToColumnHints: () => (/* binding */ logAliasToColumnHints),\n/* harmony export */   logColumnHintsToAlias: () => (/* binding */ logColumnHintsToAlias)\n/* harmony export */ });\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../otel */ \"./otel.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n/**\n * Generates a SQL string for the given QueryBuilderOptions\n */ const generateSql = (options)=>{\n    var _options_meta, _options_meta1;\n    const hasTraceIdFilter = ((_options_meta = options.meta) === null || _options_meta === void 0 ? void 0 : _options_meta.isTraceIdMode) && ((_options_meta1 = options.meta) === null || _options_meta1 === void 0 ? void 0 : _options_meta1.traceId);\n    if (options.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Traces && hasTraceIdFilter) {\n        return generateTraceIdQuery(options);\n    } else if (options.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Traces) {\n        return generateTraceSearchQuery(options);\n    } else if (options.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Logs) {\n        return generateLogsQuery(options);\n    } else if (options.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.TimeSeries && options.mode !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.BuilderMode.Trend) {\n        return generateSimpleTimeSeriesQuery(options);\n    } else if (options.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.TimeSeries && options.mode === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.BuilderMode.Trend) {\n        return generateAggregateTimeSeriesQuery(options);\n    } else if (options.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Table) {\n        return generateTableQuery(options);\n    }\n    return '';\n};\n/**\n * Generates trace search query.\n */ const generateTraceSearchQuery = (options)=>{\n    const { database, table } = options;\n    const queryParts = [];\n    // TODO: these columns could be a map or some other convenience function\n    const selectParts = [];\n    const traceId = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId);\n    if (traceId !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceId.name)} as traceID`);\n    }\n    const traceServiceName = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceName);\n    if (traceServiceName !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceServiceName.name)} as serviceName`);\n    }\n    const traceOperationName = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceOperationName);\n    if (traceOperationName !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceOperationName.name)} as operationName`);\n    }\n    const traceStartTime = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n    if (traceStartTime !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceStartTime.name)} as startTime`);\n    }\n    const traceDurationTime = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceDurationTime);\n    if (traceDurationTime !== undefined) {\n        var _options_meta;\n        const timeUnit = (_options_meta = options.meta) === null || _options_meta === void 0 ? void 0 : _options_meta.traceDurationUnit;\n        selectParts.push(getTraceDurationSelectSql(escapeIdentifier(traceDurationTime.name), timeUnit));\n    }\n    const selectPartsSql = selectParts.join(', ');\n    queryParts.push('SELECT');\n    queryParts.push(selectPartsSql);\n    queryParts.push('FROM');\n    queryParts.push(getTableIdentifier(database, table));\n    const filterParts = getFilters(options);\n    if (filterParts) {\n        queryParts.push('WHERE');\n        queryParts.push(filterParts);\n    }\n    const orderBy = getOrderBy(options);\n    if (orderBy) {\n        queryParts.push('ORDER BY');\n        queryParts.push(orderBy);\n    }\n    const limit = getLimit(options.limit);\n    if (limit !== '') {\n        queryParts.push(limit);\n    }\n    return concatQueryParts(queryParts);\n};\n/**\n * Generates trace query with columns that fit Grafana's Trace panel\n * Column aliases follow this structure:\n * https://grafana.com/docs/grafana/latest/explore/trace-integration/#data-frame-structure\n */ const generateTraceIdQuery = (options)=>{\n    var _options_meta, _options_meta1, _options_meta2, _options_meta3;\n    const { database, table } = options;\n    const queryParts = [];\n    // TODO: these columns could be a map or some other convenience function\n    const selectParts = [];\n    const traceId = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId);\n    if (traceId !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceId.name)} as traceID`);\n    }\n    const traceSpanId = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceSpanId);\n    if (traceSpanId !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceSpanId.name)} as spanID`);\n    }\n    const traceParentSpanId = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceParentSpanId);\n    if (traceParentSpanId !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceParentSpanId.name)} as parentSpanID`);\n    }\n    const traceServiceName = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceName);\n    if (traceServiceName !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceServiceName.name)} as serviceName`);\n    }\n    const traceOperationName = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceOperationName);\n    if (traceOperationName !== undefined) {\n        selectParts.push(`${escapeIdentifier(traceOperationName.name)} as operationName`);\n    }\n    const traceStartTime = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n    if (traceStartTime !== undefined) {\n        selectParts.push(`${convertTimeFieldToMilliseconds(escapeIdentifier(traceStartTime.name))} as startTime`);\n    }\n    const traceDurationTime = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceDurationTime);\n    if (traceDurationTime !== undefined) {\n        var _options_meta4;\n        const timeUnit = (_options_meta4 = options.meta) === null || _options_meta4 === void 0 ? void 0 : _options_meta4.traceDurationUnit;\n        selectParts.push(getTraceDurationSelectSql(escapeIdentifier(traceDurationTime.name), timeUnit));\n    }\n    // TODO: for tags and serviceTags, consider the column type. They might not require mapping, they could already be JSON.\n    const traceTags = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceTags);\n    if (traceTags !== undefined) {\n        selectParts.push(`arrayMap(key -> map('key', key, 'value',${escapeIdentifier(traceTags.name)}[key]), mapKeys(${escapeIdentifier(traceTags.name)})) as tags`);\n    }\n    const traceServiceTags = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceTags);\n    if (traceServiceTags !== undefined) {\n        selectParts.push(`arrayMap(key -> map('key', key, 'value',${escapeIdentifier(traceServiceTags.name)}[key]), mapKeys(${escapeIdentifier(traceServiceTags.name)})) as serviceTags`);\n    }\n    const traceStatusCode = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceStatusCode);\n    if (traceStatusCode !== undefined) {\n        selectParts.push(`if(${escapeIdentifier(traceStatusCode.name)} IN ('Error', 'STATUS_CODE_ERROR'), 2, 0) as statusCode`);\n    }\n    const selectPartsSql = selectParts.join(', ');\n    // Optimize trace ID filtering for OTel enabled trace lookups\n    const hasTraceIdFilter = ((_options_meta = options.meta) === null || _options_meta === void 0 ? void 0 : _options_meta.isTraceIdMode) && ((_options_meta1 = options.meta) === null || _options_meta1 === void 0 ? void 0 : _options_meta1.traceId);\n    const otelVersion = _otel__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getVersion((_options_meta2 = options.meta) === null || _options_meta2 === void 0 ? void 0 : _options_meta2.otelVersion);\n    const applyTraceIdOptimization = hasTraceIdFilter && traceStartTime !== undefined && ((_options_meta3 = options.meta) === null || _options_meta3 === void 0 ? void 0 : _options_meta3.otelEnabled) && otelVersion;\n    if (applyTraceIdOptimization) {\n        const traceId = options.meta.traceId;\n        const timestampTable = getTableIdentifier(database, table + _otel__WEBPACK_IMPORTED_MODULE_1__[\"default\"].traceTimestampTableSuffix);\n        queryParts.push('WITH');\n        queryParts.push(`'${traceId}' as trace_id,`);\n        queryParts.push(`(SELECT min(Start) FROM ${timestampTable} WHERE TraceId = trace_id) as trace_start,`);\n        queryParts.push(`(SELECT max(End) + 1 FROM ${timestampTable} WHERE TraceId = trace_id) as trace_end`);\n    }\n    queryParts.push('SELECT');\n    queryParts.push(selectPartsSql);\n    queryParts.push('FROM');\n    queryParts.push(getTableIdentifier(database, table));\n    const filterParts = getFilters(options);\n    if (hasTraceIdFilter || filterParts) {\n        queryParts.push('WHERE');\n    }\n    if (applyTraceIdOptimization) {\n        queryParts.push('traceID = trace_id');\n        queryParts.push('AND');\n        queryParts.push(`${escapeIdentifier(traceStartTime.name)} >= trace_start`);\n        queryParts.push('AND');\n        queryParts.push(`${escapeIdentifier(traceStartTime.name)} <= trace_end`);\n    } else if (hasTraceIdFilter) {\n        const traceId = options.meta.traceId;\n        queryParts.push(`traceID = '${traceId}'`);\n    }\n    if (filterParts) {\n        if (hasTraceIdFilter) {\n            queryParts.push('AND');\n        }\n        queryParts.push(filterParts);\n    }\n    const orderBy = getOrderBy(options);\n    if (orderBy) {\n        queryParts.push('ORDER BY');\n        queryParts.push(orderBy);\n    }\n    const limit = getLimit(options.limit);\n    if (limit !== '') {\n        queryParts.push(limit);\n    }\n    return concatQueryParts(queryParts);\n};\n/**\n * Generates logs query with columns that fit Grafana's Logs panel\n * Column aliases follow this structure:\n * https://grafana.com/developers/plugin-tools/tutorials/build-a-logs-data-source-plugin#logs-data-frame-format\n *\n * note: column order seems to matter as well as alias name\n */ const generateLogsQuery = (_options)=>{\n    var _options_columns, _options_columns1, _options_meta;\n    // Copy columns so column aliases can be safely mutated\n    const options = _object_spread_props(_object_spread({}, _options), {\n        columns: (_options_columns = _options.columns) === null || _options_columns === void 0 ? void 0 : _options_columns.map((c)=>_object_spread({}, c))\n    });\n    const { database, table } = options;\n    const queryParts = [];\n    // TODO: these columns could be a map or some other convenience function\n    const selectParts = [];\n    const logTime = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n    if (logTime !== undefined) {\n        // Must be first column in list.\n        logTime.alias = logColumnHintsToAlias.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n        selectParts.push(getColumnIdentifier(logTime));\n    }\n    const logMessage = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogMessage);\n    if (logMessage !== undefined) {\n        // Must be second column in list.\n        logMessage.alias = logColumnHintsToAlias.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogMessage);\n        selectParts.push(getColumnIdentifier(logMessage));\n    }\n    const logLevel = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel);\n    if (logLevel !== undefined) {\n        // TODO: \"severity\" should be a number, but \"level\" can be a string? Perhaps we can check the column type here?\n        logLevel.alias = logColumnHintsToAlias.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel);\n        selectParts.push(getColumnIdentifier(logLevel));\n    }\n    const logLabels = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLabels);\n    if (logLabels !== undefined) {\n        logLabels.alias = logColumnHintsToAlias.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLabels);\n        selectParts.push(getColumnIdentifier(logLabels));\n    }\n    const traceId = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId);\n    if (traceId !== undefined) {\n        traceId.alias = logColumnHintsToAlias.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId);\n        selectParts.push(getColumnIdentifier(traceId));\n    }\n    (_options_columns1 = options.columns) === null || _options_columns1 === void 0 ? void 0 : _options_columns1.filter((c)=>c.hint === undefined).forEach((c)=>selectParts.push(getColumnIdentifier(c)));\n    const selectPartsSql = selectParts.join(', ');\n    queryParts.push('SELECT');\n    queryParts.push(selectPartsSql);\n    queryParts.push('FROM');\n    queryParts.push(getTableIdentifier(database, table));\n    const filterParts = getFilters(options);\n    const hasLogMessageFilter = logMessage && ((_options_meta = options.meta) === null || _options_meta === void 0 ? void 0 : _options_meta.logMessageLike);\n    if (filterParts || hasLogMessageFilter) {\n        queryParts.push('WHERE');\n    }\n    if (filterParts) {\n        queryParts.push(filterParts);\n    }\n    if (hasLogMessageFilter) {\n        if (filterParts) {\n            queryParts.push('AND');\n        }\n        queryParts.push(`(${logMessage.alias || logMessage.name} LIKE '%${options.meta.logMessageLike}%')`);\n    }\n    const orderBy = getOrderBy(options);\n    if (orderBy) {\n        queryParts.push('ORDER BY');\n        queryParts.push(orderBy);\n    }\n    const limit = getLimit(options.limit);\n    if (limit !== '') {\n        queryParts.push(limit);\n    }\n    return concatQueryParts(queryParts);\n};\n/**\n * Generates a simple time series query. Includes user selected columns.\n */ const generateSimpleTimeSeriesQuery = (_options)=>{\n    var _options_columns, _options_columns1, _options_aggregates, _options_groupBy, _options_aggregates1, _options_groupBy1, _options_groupBy2;\n    // Copy columns so column aliases can be safely mutated\n    const options = _object_spread_props(_object_spread({}, _options), {\n        columns: (_options_columns = _options.columns) === null || _options_columns === void 0 ? void 0 : _options_columns.map((c)=>_object_spread({}, c))\n    });\n    const { database, table } = options;\n    const queryParts = [];\n    const selectParts = [];\n    const selectNames = new Set();\n    const timeColumn = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n    if (timeColumn !== undefined) {\n        timeColumn.alias = 'time';\n        selectParts.push(getColumnIdentifier(timeColumn));\n        selectNames.add(timeColumn.alias);\n    }\n    const columnsExcludingTimeColumn = (_options_columns1 = options.columns) === null || _options_columns1 === void 0 ? void 0 : _options_columns1.filter((c)=>c.hint !== _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n    columnsExcludingTimeColumn === null || columnsExcludingTimeColumn === void 0 ? void 0 : columnsExcludingTimeColumn.forEach((c)=>{\n        selectParts.push(getColumnIdentifier(c));\n        selectNames.add(c.alias || c.name);\n    });\n    const aggregateSelectParts = [];\n    (_options_aggregates = options.aggregates) === null || _options_aggregates === void 0 ? void 0 : _options_aggregates.forEach((agg)=>{\n        const alias = agg.alias ? ` as ${agg.alias.replace(/ /g, '_')}` : '';\n        const name = `${agg.aggregateType}(${agg.column})`;\n        aggregateSelectParts.push(`${name}${alias}`);\n        selectNames.add(alias ? alias.substring(4) : name);\n    });\n    (_options_groupBy = options.groupBy) === null || _options_groupBy === void 0 ? void 0 : _options_groupBy.forEach((g)=>{\n        if (selectNames.has(g)) {\n            // don't add if already selected\n            return;\n        }\n        selectParts.push(g);\n    });\n    // (v3) aggregate selections go AFTER group by\n    aggregateSelectParts.forEach((a)=>selectParts.push(a));\n    const selectPartsSql = selectParts.join(', ');\n    queryParts.push('SELECT');\n    queryParts.push(selectPartsSql);\n    queryParts.push('FROM');\n    queryParts.push(getTableIdentifier(database, table));\n    const filterParts = getFilters(options);\n    if (filterParts) {\n        queryParts.push('WHERE');\n        queryParts.push(filterParts);\n    }\n    const hasAggregates = ((_options_aggregates1 = options.aggregates) === null || _options_aggregates1 === void 0 ? void 0 : _options_aggregates1.length) || 0 > 0;\n    const hasGroupBy = ((_options_groupBy1 = options.groupBy) === null || _options_groupBy1 === void 0 ? void 0 : _options_groupBy1.length) || 0 > 0;\n    if (hasAggregates || hasGroupBy) {\n        queryParts.push('GROUP BY');\n    }\n    if ((((_options_groupBy2 = options.groupBy) === null || _options_groupBy2 === void 0 ? void 0 : _options_groupBy2.length) || 0) > 0) {\n        const groupByTime = timeColumn !== undefined ? `, ${timeColumn.alias}` : '';\n        queryParts.push(`${options.groupBy.join(', ')}${groupByTime}`);\n    } else if (hasAggregates && timeColumn) {\n        queryParts.push(timeColumn.alias);\n    }\n    const orderBy = getOrderBy(options);\n    if (orderBy) {\n        queryParts.push('ORDER BY');\n        queryParts.push(orderBy);\n    }\n    const limit = getLimit(options.limit);\n    if (limit !== '') {\n        queryParts.push(limit);\n    }\n    return concatQueryParts(queryParts);\n};\n/**\n * Generates an aggregate time series query.\n */ const generateAggregateTimeSeriesQuery = (_options)=>{\n    var _options_columns, _options_groupBy, _options_aggregates, _options_groupBy1;\n    // Copy columns so column aliases can be safely mutated\n    const options = _object_spread_props(_object_spread({}, _options), {\n        columns: (_options_columns = _options.columns) === null || _options_columns === void 0 ? void 0 : _options_columns.map((c)=>_object_spread({}, c))\n    });\n    const { database, table } = options;\n    const queryParts = [];\n    const selectParts = [];\n    const timeColumn = getColumnByHint(options, _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time);\n    if (timeColumn !== undefined) {\n        timeColumn.name = `$__timeInterval(${timeColumn.name})`;\n        timeColumn.alias = 'time';\n        selectParts.push(getColumnIdentifier(timeColumn));\n    }\n    (_options_groupBy = options.groupBy) === null || _options_groupBy === void 0 ? void 0 : _options_groupBy.forEach((g)=>selectParts.push(g));\n    (_options_aggregates = options.aggregates) === null || _options_aggregates === void 0 ? void 0 : _options_aggregates.forEach((agg)=>{\n        const alias = agg.alias ? ` as ${agg.alias.replace(/ /g, '_')}` : '';\n        const name = `${agg.aggregateType}(${agg.column})`;\n        selectParts.push(`${name}${alias}`);\n    });\n    const selectPartsSql = selectParts.join(', ');\n    queryParts.push('SELECT');\n    queryParts.push(selectPartsSql);\n    queryParts.push('FROM');\n    queryParts.push(getTableIdentifier(database, table));\n    const filterParts = getFilters(options);\n    if (filterParts) {\n        queryParts.push('WHERE');\n        queryParts.push(filterParts);\n    }\n    queryParts.push('GROUP BY');\n    if ((((_options_groupBy1 = options.groupBy) === null || _options_groupBy1 === void 0 ? void 0 : _options_groupBy1.length) || 0) > 0) {\n        const groupByTime = timeColumn !== undefined ? `, ${timeColumn.alias}` : '';\n        queryParts.push(`${options.groupBy.join(', ')}${groupByTime}`);\n    } else if (timeColumn) {\n        queryParts.push(timeColumn.alias);\n    }\n    const orderBy = getOrderBy(options);\n    if (orderBy) {\n        queryParts.push('ORDER BY');\n        queryParts.push(orderBy);\n    }\n    const limit = getLimit(options.limit);\n    if (limit !== '') {\n        queryParts.push(limit);\n    }\n    return concatQueryParts(queryParts);\n};\n/**\n * Generates a table query.\n */ const generateTableQuery = (options)=>{\n    var _options_columns, _options_groupBy;\n    const { database, table } = options;\n    const isAggregateMode = options.mode === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.BuilderMode.Aggregate;\n    const queryParts = [];\n    const selectParts = [];\n    const selectNames = new Set();\n    (_options_columns = options.columns) === null || _options_columns === void 0 ? void 0 : _options_columns.forEach((c)=>{\n        selectParts.push(getColumnIdentifier(c));\n        selectNames.add(c.alias || c.name);\n    });\n    if (isAggregateMode) {\n        var _options_aggregates, _options_groupBy1;\n        (_options_aggregates = options.aggregates) === null || _options_aggregates === void 0 ? void 0 : _options_aggregates.forEach((agg)=>{\n            const alias = agg.alias ? ` as ${agg.alias.replace(/ /g, '_')}` : '';\n            const name = `${agg.aggregateType}(${agg.column})`;\n            selectParts.push(`${name}${alias}`);\n            selectNames.add(alias ? alias.substring(4) : name);\n        });\n        (_options_groupBy1 = options.groupBy) === null || _options_groupBy1 === void 0 ? void 0 : _options_groupBy1.forEach((g)=>{\n            if (selectNames.has(g)) {\n                // don't add if already selected\n                return;\n            }\n        // user must manually select groupBys, for flexibility\n        // selectParts.push(g)\n        });\n    }\n    const selectPartsSql = selectParts.join(', ');\n    queryParts.push('SELECT');\n    queryParts.push(selectPartsSql);\n    queryParts.push('FROM');\n    queryParts.push(getTableIdentifier(database, table));\n    const filterParts = getFilters(options);\n    if (filterParts) {\n        queryParts.push('WHERE');\n        queryParts.push(filterParts);\n    }\n    if (isAggregateMode && (((_options_groupBy = options.groupBy) === null || _options_groupBy === void 0 ? void 0 : _options_groupBy.length) || 0) > 0) {\n        queryParts.push('GROUP BY');\n        queryParts.push(options.groupBy.join(', '));\n    }\n    const orderBy = getOrderBy(options);\n    if (orderBy) {\n        queryParts.push('ORDER BY');\n        queryParts.push(orderBy);\n    }\n    const limit = getLimit(options.limit);\n    if (limit !== '') {\n        queryParts.push(limit);\n    }\n    return concatQueryParts(queryParts);\n};\nconst isAggregateQuery = (builder)=>{\n    var _builder_aggregates;\n    return (((_builder_aggregates = builder.aggregates) === null || _builder_aggregates === void 0 ? void 0 : _builder_aggregates.length) || 0) > 0;\n};\nconst getColumnByHint = (options, hint)=>{\n    var _options_columns;\n    return (_options_columns = options.columns) === null || _options_columns === void 0 ? void 0 : _options_columns.find((c)=>c.hint === hint);\n};\nconst getColumnIndexByHint = (options, hint)=>(options.columns || []).findIndex((c)=>c.hint === hint);\nconst getColumnsByHints = (options, hints)=>{\n    const columns = [];\n    for (let hint of hints){\n        const col = getColumnByHint(options, hint);\n        if (col !== undefined) {\n            columns.push(col);\n        }\n    }\n    return columns;\n};\nconst getColumnIdentifier = (col)=>{\n    let colName = col.name;\n    // allow for functions like count()\n    if (colName.includes('(') || colName.includes(')') || colName.includes('\"') || colName.includes('\"') || colName.includes(' as ')) {\n        colName = col.name;\n    } else if (colName.includes(' ')) {\n        colName = escapeIdentifier(col.name);\n    }\n    if (col.alias && col.alias !== col.name && escapeIdentifier(col.alias) !== colName) {\n        return `${colName} as \"${col.alias}\"`;\n    }\n    return colName;\n};\nconst getTableIdentifier = (database, table)=>{\n    const sep = !database || !table ? '' : '.';\n    return `${escapeIdentifier(database)}${sep}${escapeIdentifier(table)}`;\n};\nconst escapeIdentifier = (id)=>{\n    return id ? `\"${id}\"` : '';\n};\nconst escapeValue = (value)=>{\n    if (value.includes('$') || value.includes('(') || value.includes(')') || value.includes('\\'') || value.includes('\"')) {\n        return value;\n    }\n    return `'${value}'`;\n};\n/**\n * Returns the SELECT column for trace duration.\n * Time unit is used to convert the value to milliseconds, as is required by Grafana's Trace panel.\n */ const getTraceDurationSelectSql = (columnIdentifier, timeUnit)=>{\n    const alias = 'duration';\n    switch(timeUnit){\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.TimeUnit.Seconds:\n            return `multiply(${columnIdentifier}, 1000) as ${alias}`;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.TimeUnit.Milliseconds:\n            return `${columnIdentifier} as ${alias}`;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.TimeUnit.Microseconds:\n            return `multiply(${columnIdentifier}, 0.001) as ${alias}`;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.TimeUnit.Nanoseconds:\n            return `multiply(${columnIdentifier}, 0.000001) as ${alias}`;\n        default:\n            return `${columnIdentifier} as ${alias}`;\n    }\n};\n/** Returns the input time field converted to a Unix timestamp in nanoseconds and then adjusted to milliseconds. */ const convertTimeFieldToMilliseconds = (columnIdentifier)=>`multiply(toUnixTimestamp64Nano(${columnIdentifier}), 0.000001)`;\n/**\n * Concatenates query parts with no empty spaces.\n */ const concatQueryParts = (parts)=>{\n    let query = '';\n    for(let i = 0; i < parts.length; i++){\n        const p = parts[i];\n        if (!p) {\n            continue;\n        }\n        query += p;\n        if (i !== parts.length - 1) {\n            query += ' ';\n        }\n    }\n    return query;\n};\n/**\n * Returns the order by list, excluding the \"ORDER BY\" keyword.\n */ const getOrderBy = (options)=>{\n    var _options_orderBy;\n    const orderByParts = [];\n    if ((((_options_orderBy = options.orderBy) === null || _options_orderBy === void 0 ? void 0 : _options_orderBy.length) || 0) > 0) {\n        var _options_orderBy1;\n        (_options_orderBy1 = options.orderBy) === null || _options_orderBy1 === void 0 ? void 0 : _options_orderBy1.forEach((o)=>{\n            let colName = o.name;\n            const hintedColumn = o.hint && getColumnByHint(options, o.hint);\n            if (hintedColumn) {\n                colName = hintedColumn.alias || hintedColumn.name;\n            }\n            if (!colName) {\n                return;\n            }\n            orderByParts.push(`${colName} ${o.dir}`);\n        });\n    }\n    return orderByParts.join(', ');\n};\n/**\n * Returns the limit clause including the \"LIMIT\" keyword\n */ const getLimit = (limit)=>{\n    limit = Math.max(0, limit || 0);\n    if (limit > 0) {\n        return 'LIMIT ' + limit;\n    }\n    return '';\n};\n/**\n * Returns the filters in the WHERE clause, excluding the \"WHERE\" keyword\n */ const getFilters = (options)=>{\n    const filters = options.filters || [];\n    const builtFilters = [];\n    for (const filter of filters){\n        if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsAnything) {\n            continue;\n        }\n        const filterParts = [];\n        let column = filter.key;\n        let type = filter.type;\n        const hintedColumn = filter.hint && getColumnByHint(options, filter.hint);\n        if (hintedColumn) {\n            column = hintedColumn.alias || hintedColumn.name;\n            type = hintedColumn.type || type;\n        }\n        if (!column) {\n            continue;\n        }\n        if (filter.mapKey) {\n            column += `['${filter.mapKey}']`;\n        }\n        filterParts.push(column);\n        let operator = filter.operator;\n        let negate = false;\n        if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsEmpty || filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsNotEmpty) {\n            operator = '';\n        } else if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.NotLike) {\n            operator = 'LIKE';\n            negate = true;\n        } else if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.OutsideGrafanaTimeRange) {\n            operator = '';\n            negate = true;\n        } else if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.WithInGrafanaTimeRange) {\n            operator = '';\n        }\n        if (operator) {\n            filterParts.push(operator);\n        }\n        if (isNullFilter(filter.operator)) {\n        // empty\n        } else if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsEmpty) {\n            filterParts.push(`= ''`);\n        } else if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsNotEmpty) {\n            filterParts.push(`!= ''`);\n        } else if (isBooleanFilter(type)) {\n            filterParts.push(String(filter.value));\n        } else if (isNumberFilter(type)) {\n            filterParts.push(String(filter.value || '0'));\n        } else if (isDateFilter(type)) {\n            if (isDateFilterWithoutValue(type, filter.operator)) {\n                if (isDateType(type)) {\n                    filterParts.push('>=', '\\$__fromTime', 'AND', column, '<=', '\\$__toTime');\n                }\n            } else {\n                switch(filter.value){\n                    case 'GRAFANA_START_TIME':\n                        if (isDateType(type)) {\n                            filterParts.push('\\$__fromTime');\n                        }\n                        break;\n                    case 'GRAFANA_END_TIME':\n                        if (isDateType(type)) {\n                            filterParts.push('\\$__toTime');\n                        }\n                        break;\n                    default:\n                        filterParts.push(escapeValue(String(filter.value || 'TODAY')));\n                }\n            }\n        } else if (isStringFilter(type, filter.operator)) {\n            if (filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.Like || filter.operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.NotLike) {\n                filterParts.push(`'%${filter.value || ''}%'`);\n            } else {\n                filterParts.push(escapeValue(filter.value || ''));\n            }\n        } else if (isMultiFilter(type, filter.operator)) {\n            var _filter_value;\n            filterParts.push(`(${(_filter_value = filter.value) === null || _filter_value === void 0 ? void 0 : _filter_value.map((v)=>escapeValue(v.trim())).join(', ')})`);\n        } else {\n            filterParts.push(escapeValue(filter.value || ''));\n        }\n        if (negate) {\n            filterParts.unshift('NOT', '(');\n            filterParts.push(')');\n        }\n        filterParts.unshift('(');\n        if (builtFilters.length > 0) {\n            filterParts.unshift(filter.condition);\n        }\n        filterParts.push(')');\n        const builtFilter = concatQueryParts(filterParts);\n        builtFilters.push(builtFilter);\n    }\n    return concatQueryParts(builtFilters);\n};\nconst stripTypeModifiers = (type)=>{\n    return type.toLowerCase().replace(/\\(/g, '').replace(/\\)/g, '').replace(/nullable/g, '').replace(/lowcardinality/g, '');\n};\nconst isBooleanType = (type)=>type === null || type === void 0 ? void 0 : type.toLowerCase().startsWith('boolean');\nconst numberTypes = [\n    'int',\n    'float',\n    'decimal'\n];\nconst isNumberType = (type)=>numberTypes.some((t)=>type === null || type === void 0 ? void 0 : type.toLowerCase().includes(t));\nconst isDateType = (type)=>(type === null || type === void 0 ? void 0 : type.toLowerCase().startsWith('date')) || (type === null || type === void 0 ? void 0 : type.toLowerCase().startsWith('nullable(date'));\n// const isDateTimeType = (type: string): boolean => type?.toLowerCase().startsWith('datetime') || type?.toLowerCase().startsWith('nullable(datetime');\nconst isStringType = (type)=>{\n    type = stripTypeModifiers(type.toLowerCase());\n    return (type === 'string' || type.startsWith('fixedstring')) && !(isBooleanType(type) || isNumberType(type) || isDateType(type));\n};\nconst isNullFilter = (operator)=>operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsNull || operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.IsNotNull;\nconst isBooleanFilter = (type)=>isBooleanType(type);\nconst isNumberFilter = (type)=>isNumberType(type);\nconst isDateFilterWithoutValue = (type, operator)=>isDateType(type) && (operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.WithInGrafanaTimeRange || operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.OutsideGrafanaTimeRange);\nconst isDateFilter = (type)=>isDateType(type);\nconst isStringFilter = (type, operator)=>isStringType(type) && !(operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.In || operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.NotIn);\nconst isMultiFilter = (type, operator)=>isStringType(type) && (operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.In || operator === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.FilterOperator.NotIn);\n/**\n * When filtering in the logs panel in explore view, we need a way to\n * map from the SQL generator's aliases back to the original column hints\n * so that filters can be added properly.\n */ const logAliasToColumnHintsEntries = [\n    [\n        'timestamp',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time\n    ],\n    [\n        'body',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogMessage\n    ],\n    [\n        'level',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel\n    ],\n    [\n        'labels',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLabels\n    ],\n    [\n        'traceID',\n        _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId\n    ]\n];\nconst logAliasToColumnHints = new Map(logAliasToColumnHintsEntries);\nconst logColumnHintsToAlias = new Map(logAliasToColumnHintsEntries.map((e)=>[\n        e[1],\n        e[0]\n    ]));\nconst _testExports = {\n    getColumnIdentifier,\n    getTableIdentifier,\n    escapeIdentifier,\n    escapeValue,\n    concatQueryParts,\n    getOrderBy,\n    getLimit,\n    getFilters,\n    isStringType\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./data/sqlGenerator.ts\n");

/***/ }),

/***/ "./data/utils.ts":
/*!***********************!*\
  !*** ./data/utils.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   columnLabelToPlaceholder: () => (/* binding */ columnLabelToPlaceholder),\n/* harmony export */   dataFrameHasLogLabelWithName: () => (/* binding */ dataFrameHasLogLabelWithName),\n/* harmony export */   isBuilderOptionsRunnable: () => (/* binding */ isBuilderOptionsRunnable),\n/* harmony export */   mapGrafanaFormatToQueryType: () => (/* binding */ mapGrafanaFormatToQueryType),\n/* harmony export */   mapQueryBuilderOptionsToGrafanaFormat: () => (/* binding */ mapQueryBuilderOptionsToGrafanaFormat),\n/* harmony export */   mapQueryTypeToGrafanaFormat: () => (/* binding */ mapQueryTypeToGrafanaFormat),\n/* harmony export */   transformQueryResponseWithTraceAndLogLinks: () => (/* binding */ transformQueryResponseWithTraceAndLogLinks),\n/* harmony export */   tryApplyColumnHints: () => (/* binding */ tryApplyColumnHints)\n/* harmony export */ });\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/data */ \"@grafana/data\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_data__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\n/* harmony import */ var _sqlGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sqlGenerator */ \"./data/sqlGenerator.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n/**\n * Returns true if the builder options contain enough information to start showing a query\n */ const isBuilderOptionsRunnable = (builderOptions)=>{\n    var _builderOptions_columns, _builderOptions_filters, _builderOptions_orderBy, _builderOptions_aggregates, _builderOptions_groupBy;\n    return (((_builderOptions_columns = builderOptions.columns) === null || _builderOptions_columns === void 0 ? void 0 : _builderOptions_columns.length) || 0) > 0 || (((_builderOptions_filters = builderOptions.filters) === null || _builderOptions_filters === void 0 ? void 0 : _builderOptions_filters.length) || 0) > 0 || (((_builderOptions_orderBy = builderOptions.orderBy) === null || _builderOptions_orderBy === void 0 ? void 0 : _builderOptions_orderBy.length) || 0) > 0 || (((_builderOptions_aggregates = builderOptions.aggregates) === null || _builderOptions_aggregates === void 0 ? void 0 : _builderOptions_aggregates.length) || 0) > 0 || (((_builderOptions_groupBy = builderOptions.groupBy) === null || _builderOptions_groupBy === void 0 ? void 0 : _builderOptions_groupBy.length) || 0) > 0;\n};\n/**\n * Converts QueryBuilderOptions to Grafana format\n * src: https://github.com/grafana/sqlds/blob/main/query.go#L20\n */ const mapQueryBuilderOptionsToGrafanaFormat = (t)=>{\n    switch(t === null || t === void 0 ? void 0 : t.queryType){\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Table:\n            return 1;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs:\n            return 2;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.TimeSeries:\n            return 0;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces:\n            var _t_meta;\n            return ((_t_meta = t.meta) === null || _t_meta === void 0 ? void 0 : _t_meta.isTraceIdMode) ? 3 : 1;\n        default:\n            return 1 << 8; // an unused u32, defaults to timeseries/graph on plugin backend.\n    }\n};\n/**\n * Converts QueryType to Grafana format\n * src: https://github.com/grafana/sqlds/blob/main/query.go#L20\n */ const mapQueryTypeToGrafanaFormat = (t)=>{\n    switch(t){\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Table:\n            return 1;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs:\n            return 2;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.TimeSeries:\n            return 0;\n        case _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces:\n            return 3;\n        default:\n            return 1 << 8; // an unused u32, defaults to timeseries/graph on plugin backend.\n    }\n};\n/**\n * Converts Grafana format to builder QueryType\n * src: https://github.com/grafana/sqlds/blob/main/query.go#L20\n */ const mapGrafanaFormatToQueryType = (f)=>{\n    switch(f){\n        case 0:\n            return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.TimeSeries;\n        case 1:\n            return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Table;\n        case 2:\n            return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs;\n        case 3:\n            return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces;\n        default:\n            return _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Table;\n    }\n};\n/**\n * Manipulates column array in-place to include column hints, loosely matched by the provided column hint map.\n */ const tryApplyColumnHints = (columns, hintsToColumns)=>{\n    const columnsToHints = new Map();\n    if (hintsToColumns) {\n        hintsToColumns.forEach((name, hint)=>{\n            columnsToHints.set(name.toLowerCase().trim(), hint);\n        });\n    }\n    for (const column of columns){\n        var _column_alias;\n        if (column.hint) {\n            continue;\n        }\n        const name = column.name.toLowerCase().trim();\n        const alias = ((_column_alias = column.alias) === null || _column_alias === void 0 ? void 0 : _column_alias.toLowerCase().trim()) || '';\n        const hint = columnsToHints.get(name) || columnsToHints.get(alias);\n        if (hint) {\n            column.hint = hint;\n            continue;\n        }\n        if (name.includes('time')) {\n            column.hint = _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.Time;\n        }\n    }\n};\n/**\n * Converts label into sql-style column name.\n * Example: \"Test Column\" -> \"test_column\"\n */ const columnLabelToPlaceholder = (label)=>label.toLowerCase().replace(/ /g, '_');\n/**\n * Mutates the DataQueryResponse to include trace/log links on the traceID field.\n * The link will open a second query editor in split view\n * on the explore page with the selected trace ID.\n * \n * Requires defaults to be configured when crossing query types.\n */ const transformQueryResponseWithTraceAndLogLinks = (datasource, req, res)=>{\n    res.data.forEach((frame)=>{\n        var _traceIdQuery_datasource, _traceIdQuery_datasource1, _traceLogsQuery_datasource, _traceLogsQuery_datasource1;\n        const originalQuery = req.targets.find((t)=>t.refId === frame.refId);\n        if (!originalQuery) {\n            return;\n        }\n        const traceField = frame.fields.find((field)=>field.name.toLowerCase() === 'traceid' || field.name.toLowerCase() === 'trace_id');\n        if (!traceField) {\n            return;\n        }\n        const traceIdQuery = {\n            editorType: _types_sql__WEBPACK_IMPORTED_MODULE_2__.EditorType.Builder,\n            /**\n       * Evil bug:\n       * The rawSql value might contain time filters such as $__fromTime and $__toTime.\n       * Grafana sees these time range filters as data links and will refuse to enable the traceID link if these are present.\n       * Set rawSql to empty since it gets regenerated when the panel renders anyway.\n       */ rawSql: '',\n            builderOptions: {},\n            pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_3__.pluginVersion,\n            refId: 'Trace ID'\n        };\n        if (originalQuery.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_2__.EditorType.Builder && originalQuery.builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces) {\n            // Copy fields directly from trace search\n            traceIdQuery.builderOptions = _object_spread_props(_object_spread({}, originalQuery.builderOptions), {\n                filters: [],\n                orderBy: [],\n                meta: _object_spread_props(_object_spread({}, originalQuery.builderOptions.meta), {\n                    minimized: true,\n                    isTraceIdMode: true,\n                    traceId: '${__value.raw}'\n                })\n            });\n        } else {\n            // Create new query based on trace defaults\n            const otelVersion = datasource.getTraceOtelVersion();\n            const options = {\n                database: datasource.getDefaultTraceDatabase() || traceIdQuery.builderOptions.database || datasource.getDefaultDatabase(),\n                table: datasource.getDefaultTraceTable() || datasource.getDefaultTable() || traceIdQuery.builderOptions.table,\n                queryType: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Traces,\n                columns: [],\n                filters: [],\n                orderBy: [],\n                meta: {\n                    minimized: true,\n                    isTraceIdMode: true,\n                    traceId: '${__value.raw}',\n                    traceDurationUnit: datasource.getDefaultTraceDurationUnit(),\n                    otelEnabled: Boolean(otelVersion),\n                    otelVersion: otelVersion\n                }\n            };\n            const defaultColumns = datasource.getDefaultTraceColumns();\n            for (let [hint, colName] of defaultColumns){\n                options.columns.push({\n                    name: colName,\n                    hint\n                });\n            }\n            traceIdQuery.builderOptions = options;\n        }\n        const traceLogsQuery = {\n            editorType: _types_sql__WEBPACK_IMPORTED_MODULE_2__.EditorType.Builder,\n            rawSql: '',\n            builderOptions: {},\n            pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_3__.pluginVersion,\n            refId: 'Trace Logs'\n        };\n        if (originalQuery.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_2__.EditorType.Builder && originalQuery.builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs) {\n            // Copy fields directly from log search\n            traceLogsQuery.builderOptions = _object_spread_props(_object_spread({}, originalQuery.builderOptions), {\n                filters: [\n                    {\n                        type: 'string',\n                        operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.FilterOperator.Equals,\n                        filterType: 'custom',\n                        key: '',\n                        hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceId,\n                        condition: 'AND',\n                        value: '${__value.raw}'\n                    }\n                ],\n                orderBy: [\n                    {\n                        name: '',\n                        hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.Time,\n                        dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.OrderByDirection.ASC\n                    }\n                ],\n                meta: _object_spread_props(_object_spread({}, originalQuery.builderOptions.meta), {\n                    minimized: true\n                })\n            });\n        } else {\n            // Create new query based on log defaults\n            const otelVersion = datasource.getLogsOtelVersion();\n            const options = {\n                database: datasource.getDefaultLogsDatabase() || traceLogsQuery.builderOptions.database || datasource.getDefaultDatabase(),\n                table: datasource.getDefaultLogsTable() || datasource.getDefaultTable() || traceLogsQuery.builderOptions.table,\n                queryType: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.QueryType.Logs,\n                columns: [],\n                orderBy: [\n                    {\n                        name: '',\n                        hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.Time,\n                        dir: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.OrderByDirection.ASC\n                    }\n                ],\n                filters: [\n                    {\n                        type: 'string',\n                        operator: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.FilterOperator.Equals,\n                        filterType: 'custom',\n                        key: '',\n                        hint: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.TraceId,\n                        condition: 'AND',\n                        value: '${__value.raw}'\n                    }\n                ],\n                meta: {\n                    minimized: true,\n                    otelEnabled: Boolean(otelVersion),\n                    otelVersion: otelVersion\n                }\n            };\n            const defaultColumns = datasource.getDefaultLogsColumns();\n            for (let [hint, colName] of defaultColumns){\n                options.columns.push({\n                    name: colName,\n                    hint\n                });\n            }\n            traceLogsQuery.builderOptions = options;\n        }\n        const openInNewWindow = req.app !== _grafana_data__WEBPACK_IMPORTED_MODULE_0__.CoreApp.Explore;\n        traceField.config.links = [];\n        traceField.config.links.push({\n            title: 'View trace',\n            targetBlank: openInNewWindow,\n            url: '',\n            internal: {\n                query: traceIdQuery,\n                datasourceUid: (_traceIdQuery_datasource = traceIdQuery.datasource) === null || _traceIdQuery_datasource === void 0 ? void 0 : _traceIdQuery_datasource.uid,\n                datasourceName: (_traceIdQuery_datasource1 = traceIdQuery.datasource) === null || _traceIdQuery_datasource1 === void 0 ? void 0 : _traceIdQuery_datasource1.type,\n                panelsState: {\n                    trace: {\n                        spanId: '${__value.raw}'\n                    }\n                }\n            }\n        });\n        traceField.config.links.push({\n            title: 'View logs',\n            targetBlank: openInNewWindow,\n            url: '',\n            internal: {\n                query: traceLogsQuery,\n                datasourceUid: (_traceLogsQuery_datasource = traceLogsQuery.datasource) === null || _traceLogsQuery_datasource === void 0 ? void 0 : _traceLogsQuery_datasource.uid,\n                datasourceName: (_traceLogsQuery_datasource1 = traceLogsQuery.datasource) === null || _traceLogsQuery_datasource1 === void 0 ? void 0 : _traceLogsQuery_datasource1.type\n            }\n        });\n    });\n    return res;\n};\n/**\n * Returns true if the dataframe contains a log label that matches the provided name.\n * \n * This function exists for the logs panel, when clicking \"filter for value\" on a single log row.\n * A dataframe will be provided for that single row, and we need to check the labels object to see if it\n * contains a field with that name. If it does then we can create a filter using the labels column hint.\n */ const dataFrameHasLogLabelWithName = (frame, name)=>{\n    if (!frame || !frame.fields || frame.fields.length === 0) {\n        return false;\n    }\n    const logLabelsFieldName = _sqlGenerator__WEBPACK_IMPORTED_MODULE_4__.logColumnHintsToAlias.get(_types_queryBuilder__WEBPACK_IMPORTED_MODULE_1__.ColumnHint.LogLabels);\n    const field = frame.fields.find((f)=>f.name === logLabelsFieldName);\n    if (!field || !field.values || field.values.length < 1 || !field.values.get(0)) {\n        return false;\n    }\n    const labels = field.values.get(0) || {};\n    const labelKeys = Object.keys(labels);\n    return labelKeys.includes(name);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kYXRhL3V0aWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RjtBQUN1RDtBQUMvRTtBQUVsQjtBQUNTO0FBRXZEOztDQUVDLEdBQ00sTUFBTVEsMkJBQTJCLENBQUNDO1FBRXBDQSx5QkFDQUEseUJBQ0FBLHlCQUNBQSw0QkFDQUE7SUFMSCxPQUNFLENBQUNBLEVBQUFBLDBCQUFBQSxlQUFlQyxPQUFPLGNBQXRCRCw4Q0FBQUEsd0JBQXdCRSxNQUFNLEtBQUksS0FBSyxLQUN4QyxDQUFDRixFQUFBQSwwQkFBQUEsZUFBZUcsT0FBTyxjQUF0QkgsOENBQUFBLHdCQUF3QkUsTUFBTSxLQUFJLEtBQUssS0FDeEMsQ0FBQ0YsRUFBQUEsMEJBQUFBLGVBQWVJLE9BQU8sY0FBdEJKLDhDQUFBQSx3QkFBd0JFLE1BQU0sS0FBSSxLQUFLLEtBQ3hDLENBQUNGLEVBQUFBLDZCQUFBQSxlQUFlSyxVQUFVLGNBQXpCTCxpREFBQUEsMkJBQTJCRSxNQUFNLEtBQUksS0FBSyxLQUMzQyxDQUFDRixFQUFBQSwwQkFBQUEsZUFBZU0sT0FBTyxjQUF0Qk4sOENBQUFBLHdCQUF3QkUsTUFBTSxLQUFJLEtBQUs7QUFFNUMsRUFBRTtBQUVGOzs7Q0FHQyxHQUNNLE1BQU1LLHdDQUF3QyxDQUFDQztJQUNwRCxPQUFRQSxjQUFBQSx3QkFBQUEsRUFBR0MsU0FBUztRQUNsQixLQUFLZCwwREFBU0EsQ0FBQ2UsS0FBSztZQUNsQixPQUFPO1FBQ1QsS0FBS2YsMERBQVNBLENBQUNnQixJQUFJO1lBQ2pCLE9BQU87UUFDVCxLQUFLaEIsMERBQVNBLENBQUNpQixVQUFVO1lBQ3ZCLE9BQU87UUFDVCxLQUFLakIsMERBQVNBLENBQUNrQixNQUFNO2dCQUNaTDtZQUFQLE9BQU9BLEVBQUFBLFVBQUFBLEVBQUVNLElBQUksY0FBTk4sOEJBQUFBLFFBQVFPLGFBQWEsSUFBRyxJQUFJO1FBQ3JDO1lBQ0UsT0FBTyxLQUFLLEdBQUcsaUVBQWlFO0lBQ3BGO0FBQ0YsRUFBRTtBQUVGOzs7Q0FHQyxHQUNNLE1BQU1DLDhCQUE4QixDQUFDUjtJQUMxQyxPQUFRQTtRQUNOLEtBQUtiLDBEQUFTQSxDQUFDZSxLQUFLO1lBQ2xCLE9BQU87UUFDVCxLQUFLZiwwREFBU0EsQ0FBQ2dCLElBQUk7WUFDakIsT0FBTztRQUNULEtBQUtoQiwwREFBU0EsQ0FBQ2lCLFVBQVU7WUFDdkIsT0FBTztRQUNULEtBQUtqQiwwREFBU0EsQ0FBQ2tCLE1BQU07WUFDbkIsT0FBTztRQUNUO1lBQ0UsT0FBTyxLQUFLLEdBQUcsaUVBQWlFO0lBQ3BGO0FBQ0YsRUFBRTtBQUVGOzs7Q0FHQyxHQUNNLE1BQU1JLDhCQUE4QixDQUFDQztJQUMxQyxPQUFRQTtRQUNOLEtBQUs7WUFDSCxPQUFPdkIsMERBQVNBLENBQUNpQixVQUFVO1FBQzdCLEtBQUs7WUFDSCxPQUFPakIsMERBQVNBLENBQUNlLEtBQUs7UUFDeEIsS0FBSztZQUNILE9BQU9mLDBEQUFTQSxDQUFDZ0IsSUFBSTtRQUN2QixLQUFLO1lBQ0gsT0FBT2hCLDBEQUFTQSxDQUFDa0IsTUFBTTtRQUN6QjtZQUNFLE9BQU9sQiwwREFBU0EsQ0FBQ2UsS0FBSztJQUMxQjtBQUNGLEVBQUU7QUFFRjs7Q0FFQyxHQUNNLE1BQU1TLHNCQUFzQixDQUFDbEIsU0FBMkJtQjtJQUM3RCxNQUFNQyxpQkFBMEMsSUFBSUM7SUFDcEQsSUFBSUYsZ0JBQWdCO1FBQ2xCQSxlQUFlRyxPQUFPLENBQUMsQ0FBQ0MsTUFBTUM7WUFDNUJKLGVBQWVLLEdBQUcsQ0FBQ0YsS0FBS0csV0FBVyxHQUFHQyxJQUFJLElBQUlIO1FBQ2hEO0lBQ0Y7SUFFQSxLQUFLLE1BQU1JLFVBQVU1QixRQUFTO1lBTWQ0QjtRQUxkLElBQUlBLE9BQU9KLElBQUksRUFBRTtZQUNmO1FBQ0Y7UUFFQSxNQUFNRCxPQUFPSyxPQUFPTCxJQUFJLENBQUNHLFdBQVcsR0FBR0MsSUFBSTtRQUMzQyxNQUFNRSxRQUFRRCxFQUFBQSxnQkFBQUEsT0FBT0MsS0FBSyxjQUFaRCxvQ0FBQUEsY0FBY0YsV0FBVyxHQUFHQyxJQUFJLE9BQU07UUFFcEQsTUFBTUgsT0FBT0osZUFBZVUsR0FBRyxDQUFDUCxTQUFTSCxlQUFlVSxHQUFHLENBQUNEO1FBQzVELElBQUlMLE1BQU07WUFDUkksT0FBT0osSUFBSSxHQUFHQTtZQUNkO1FBQ0Y7UUFFQSxJQUFJRCxLQUFLUSxRQUFRLENBQUMsU0FBUztZQUN6QkgsT0FBT0osSUFBSSxHQUFHakMsMkRBQVVBLENBQUN5QyxJQUFJO1FBQy9CO0lBQ0Y7QUFDRixFQUFFO0FBRUY7OztDQUdDLEdBQ00sTUFBTUMsMkJBQTJCLENBQUNDLFFBQWtCQSxNQUFNUixXQUFXLEdBQUdTLE9BQU8sQ0FBQyxNQUFNLEtBQUs7QUFFbEc7Ozs7OztDQU1DLEdBQ00sTUFBTUMsNkNBQTZDLENBQUNDLFlBQXdCQyxLQUFnQ0M7SUFDakhBLElBQUlDLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQyxDQUFDbUI7WUE2SUdDLDBCQUNDQSwyQkFjREMsNEJBQ0NBO1FBNUpwQixNQUFNQyxnQkFBZ0JOLElBQUlPLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDdkMsQ0FBQUEsSUFBS0EsRUFBRXdDLEtBQUssS0FBS04sTUFBTU0sS0FBSztRQUNuRSxJQUFJLENBQUNILGVBQWU7WUFDbEI7UUFDRjtRQUVBLE1BQU1JLGFBQWFQLE1BQU1RLE1BQU0sQ0FBQ0gsSUFBSSxDQUFDSSxDQUFBQSxRQUFTQSxNQUFNM0IsSUFBSSxDQUFDRyxXQUFXLE9BQU8sYUFBYXdCLE1BQU0zQixJQUFJLENBQUNHLFdBQVcsT0FBTztRQUNySCxJQUFJLENBQUNzQixZQUFZO1lBQ2Y7UUFDRjtRQUVBLE1BQU1OLGVBQStCO1lBQ25DUyxZQUFZeEQsa0RBQVVBLENBQUN5RCxPQUFPO1lBQzlCOzs7OztPQUtDLEdBQ0RDLFFBQVE7WUFDUnRELGdCQUFnQixDQUFDO1lBQ2pCSCxhQUFhQSwyREFBQUE7WUFDYm1ELE9BQU87UUFDVDtRQUVBLElBQUlILGNBQWNPLFVBQVUsS0FBS3hELGtEQUFVQSxDQUFDeUQsT0FBTyxJQUFJUixjQUFjN0MsY0FBYyxDQUFDUyxTQUFTLEtBQUtkLDBEQUFTQSxDQUFDa0IsTUFBTSxFQUFFO1lBQ2xILHlDQUF5QztZQUV6QzhCLGFBQWEzQyxjQUFjLEdBQUcsd0NBQ3pCNkMsY0FBYzdDLGNBQWM7Z0JBQy9CRyxTQUFTLEVBQUU7Z0JBQ1hDLFNBQVMsRUFBRTtnQkFDWFUsTUFBTSx3Q0FDRCtCLGNBQWM3QyxjQUFjLENBQUNjLElBQUk7b0JBQ3BDeUMsV0FBVztvQkFDWHhDLGVBQWU7b0JBQ2Z5QyxTQUFTOzs7UUFHZixPQUFPO1lBQ0wsMkNBQTJDO1lBRTNDLE1BQU1DLGNBQWNuQixXQUFXb0IsbUJBQW1CO1lBQ2xELE1BQU1DLFVBQStCO2dCQUNuQ0MsVUFBVXRCLFdBQVd1Qix1QkFBdUIsTUFBTWxCLGFBQWEzQyxjQUFjLENBQUM0RCxRQUFRLElBQUl0QixXQUFXd0Isa0JBQWtCO2dCQUN2SEMsT0FBT3pCLFdBQVcwQixvQkFBb0IsTUFBTTFCLFdBQVcyQixlQUFlLE1BQU10QixhQUFhM0MsY0FBYyxDQUFDK0QsS0FBSztnQkFDN0d0RCxXQUFXZCwwREFBU0EsQ0FBQ2tCLE1BQU07Z0JBQzNCWixTQUFTLEVBQUU7Z0JBQ1hFLFNBQVMsRUFBRTtnQkFDWEMsU0FBUyxFQUFFO2dCQUNYVSxNQUFNO29CQUNKeUMsV0FBVztvQkFDWHhDLGVBQWU7b0JBQ2Z5QyxTQUFTO29CQUNUVSxtQkFBbUI1QixXQUFXNkIsMkJBQTJCO29CQUN6REMsYUFBYUMsUUFBUVo7b0JBQ3JCQSxhQUFhQTtnQkFDZjtZQUNGO1lBRUEsTUFBTWEsaUJBQWlCaEMsV0FBV2lDLHNCQUFzQjtZQUN4RCxLQUFLLElBQUksQ0FBQzlDLE1BQU0rQyxRQUFRLElBQUlGLGVBQWdCO2dCQUMxQ1gsUUFBUTFELE9BQU8sQ0FBRXdFLElBQUksQ0FBQztvQkFBRWpELE1BQU1nRDtvQkFBUy9DO2dCQUFLO1lBQzlDO1lBRUFrQixhQUFhM0MsY0FBYyxHQUFHMkQ7UUFDaEM7UUFFQSxNQUFNZixpQkFBaUM7WUFDckNRLFlBQVl4RCxrREFBVUEsQ0FBQ3lELE9BQU87WUFDOUJDLFFBQVE7WUFDUnRELGdCQUFnQixDQUFDO1lBQ2pCSCxhQUFhQSwyREFBQUE7WUFDYm1ELE9BQU87UUFDVDtRQUVBLElBQUlILGNBQWNPLFVBQVUsS0FBS3hELGtEQUFVQSxDQUFDeUQsT0FBTyxJQUFJUixjQUFjN0MsY0FBYyxDQUFDUyxTQUFTLEtBQUtkLDBEQUFTQSxDQUFDZ0IsSUFBSSxFQUFFO1lBQ2hILHVDQUF1QztZQUN2Q2lDLGVBQWU1QyxjQUFjLEdBQUcsd0NBQzNCNkMsY0FBYzdDLGNBQWM7Z0JBQy9CRyxTQUFTO29CQUNQO3dCQUNFdUUsTUFBTTt3QkFDTkMsVUFBVWxGLCtEQUFjQSxDQUFDbUYsTUFBTTt3QkFDL0JDLFlBQVk7d0JBQ1pDLEtBQUs7d0JBQ0xyRCxNQUFNakMsMkRBQVVBLENBQUN1RixPQUFPO3dCQUN4QkMsV0FBVzt3QkFDWEMsT0FBTztvQkFDVDtpQkFDRDtnQkFDRDdFLFNBQVM7b0JBQUM7d0JBQUVvQixNQUFNO3dCQUFJQyxNQUFNakMsMkRBQVVBLENBQUN5QyxJQUFJO3dCQUFFaUQsS0FBS3hGLGlFQUFnQkEsQ0FBQ3lGLEdBQUc7b0JBQUM7aUJBQUU7Z0JBQ3pFckUsTUFBTSx3Q0FDRCtCLGNBQWM3QyxjQUFjLENBQUNjLElBQUk7b0JBQ3BDeUMsV0FBVzs7O1FBR2pCLE9BQU87WUFDTCx5Q0FBeUM7WUFFekMsTUFBTUUsY0FBY25CLFdBQVc4QyxrQkFBa0I7WUFDakQsTUFBTXpCLFVBQStCO2dCQUNuQ0MsVUFBVXRCLFdBQVcrQyxzQkFBc0IsTUFBTXpDLGVBQWU1QyxjQUFjLENBQUM0RCxRQUFRLElBQUl0QixXQUFXd0Isa0JBQWtCO2dCQUN4SEMsT0FBT3pCLFdBQVdnRCxtQkFBbUIsTUFBTWhELFdBQVcyQixlQUFlLE1BQU1yQixlQUFlNUMsY0FBYyxDQUFDK0QsS0FBSztnQkFDOUd0RCxXQUFXZCwwREFBU0EsQ0FBQ2dCLElBQUk7Z0JBQ3pCVixTQUFTLEVBQUU7Z0JBQ1hHLFNBQVM7b0JBQUM7d0JBQUVvQixNQUFNO3dCQUFJQyxNQUFNakMsMkRBQVVBLENBQUN5QyxJQUFJO3dCQUFFaUQsS0FBS3hGLGlFQUFnQkEsQ0FBQ3lGLEdBQUc7b0JBQUM7aUJBQUU7Z0JBQ3pFaEYsU0FBUztvQkFDUDt3QkFDRXVFLE1BQU07d0JBQ05DLFVBQVVsRiwrREFBY0EsQ0FBQ21GLE1BQU07d0JBQy9CQyxZQUFZO3dCQUNaQyxLQUFLO3dCQUNMckQsTUFBTWpDLDJEQUFVQSxDQUFDdUYsT0FBTzt3QkFDeEJDLFdBQVc7d0JBQ1hDLE9BQU87b0JBQ1Q7aUJBQ0Q7Z0JBQ0RuRSxNQUFNO29CQUNKeUMsV0FBVztvQkFDWGEsYUFBYUMsUUFBUVo7b0JBQ3JCQSxhQUFhQTtnQkFDZjtZQUNGO1lBRUEsTUFBTWEsaUJBQWlCaEMsV0FBV2lELHFCQUFxQjtZQUN2RCxLQUFLLElBQUksQ0FBQzlELE1BQU0rQyxRQUFRLElBQUlGLGVBQWdCO2dCQUMxQ1gsUUFBUTFELE9BQU8sQ0FBRXdFLElBQUksQ0FBQztvQkFBRWpELE1BQU1nRDtvQkFBUy9DO2dCQUFLO1lBQzlDO1lBRUFtQixlQUFlNUMsY0FBYyxHQUFHMkQ7UUFDbEM7UUFFQSxNQUFNNkIsa0JBQWtCakQsSUFBSWtELEdBQUcsS0FBS2xHLGtEQUFPQSxDQUFDbUcsT0FBTztRQUNuRHpDLFdBQVcwQyxNQUFNLENBQUNDLEtBQUssR0FBRyxFQUFFO1FBQzVCM0MsV0FBVzBDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFFbkIsSUFBSSxDQUFDO1lBQzVCb0IsT0FBTztZQUNQQyxhQUFhTjtZQUNiTyxLQUFLO1lBQ0xDLFVBQVU7Z0JBQ1JDLE9BQU90RDtnQkFDUHVELGFBQWEsR0FBRXZELDJCQUFBQSxhQUFhTCxVQUFVLGNBQXZCSywrQ0FBQUEseUJBQXlCd0QsR0FBRztnQkFDM0NDLGNBQWMsR0FBRXpELDRCQUFBQSxhQUFhTCxVQUFVLGNBQXZCSyxnREFBQUEsMEJBQXlCK0IsSUFBSTtnQkFDN0MyQixhQUFhO29CQUNYQyxPQUFPO3dCQUNMQyxRQUFRO29CQUNWO2dCQUNGO1lBQ0Y7UUFDRjtRQUNBdEQsV0FBVzBDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFFbkIsSUFBSSxDQUFDO1lBQzVCb0IsT0FBTztZQUNQQyxhQUFhTjtZQUNiTyxLQUFLO1lBQ0xDLFVBQVU7Z0JBQ1JDLE9BQU9yRDtnQkFDUHNELGFBQWEsR0FBRXRELDZCQUFBQSxlQUFlTixVQUFVLGNBQXpCTSxpREFBQUEsMkJBQTJCdUQsR0FBRztnQkFDN0NDLGNBQWMsR0FBRXhELDhCQUFBQSxlQUFlTixVQUFVLGNBQXpCTSxrREFBQUEsNEJBQTJCOEIsSUFBSTtZQUNqRDtRQUNGO0lBQ0Y7SUFFQSxPQUFPbEM7QUFDVCxFQUFFO0FBR0Y7Ozs7OztDQU1DLEdBQ00sTUFBTWdFLCtCQUErQixDQUFDOUQsT0FBOEJsQjtJQUN6RSxJQUFJLENBQUNrQixTQUFTLENBQUNBLE1BQU1RLE1BQU0sSUFBSVIsTUFBTVEsTUFBTSxDQUFDaEQsTUFBTSxLQUFLLEdBQUc7UUFDeEQsT0FBTztJQUNUO0lBRUEsTUFBTXVHLHFCQUFxQjNHLGdFQUFxQkEsQ0FBQ2lDLEdBQUcsQ0FBQ3ZDLDJEQUFVQSxDQUFDa0gsU0FBUztJQUN6RSxNQUFNdkQsUUFBUVQsTUFBTVEsTUFBTSxDQUFDSCxJQUFJLENBQUM3QixDQUFBQSxJQUFLQSxFQUFFTSxJQUFJLEtBQUtpRjtJQUNoRCxJQUFJLENBQUN0RCxTQUFTLENBQUNBLE1BQU13RCxNQUFNLElBQUl4RCxNQUFNd0QsTUFBTSxDQUFDekcsTUFBTSxHQUFHLEtBQUssQ0FBQ2lELE1BQU13RCxNQUFNLENBQUM1RSxHQUFHLENBQUMsSUFBSTtRQUM5RSxPQUFPO0lBQ1Q7SUFFQSxNQUFNNkUsU0FBVXpELE1BQU13RCxNQUFNLENBQUM1RSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3hDLE1BQU04RSxZQUFZQyxPQUFPQyxJQUFJLENBQUNIO0lBRTlCLE9BQU9DLFVBQVU3RSxRQUFRLENBQUNSO0FBQzVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL2RhdGEvdXRpbHMudHM/ZTc2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3JlQXBwLCBEYXRhRnJhbWUsIERhdGFRdWVyeVJlcXVlc3QsIERhdGFRdWVyeVJlc3BvbnNlIH0gZnJvbSBcIkBncmFmYW5hL2RhdGFcIjtcbmltcG9ydCB7IENvbHVtbkhpbnQsIEZpbHRlck9wZXJhdG9yLCBPcmRlckJ5RGlyZWN0aW9uLCBRdWVyeUJ1aWxkZXJPcHRpb25zLCBRdWVyeVR5cGUsIFNlbGVjdGVkQ29sdW1uLCBTdHJpbmdGaWx0ZXIgfSBmcm9tIFwidHlwZXMvcXVlcnlCdWlsZGVyXCJcbmltcG9ydCB7IENIQnVpbGRlclF1ZXJ5LCBDSFF1ZXJ5LCBFZGl0b3JUeXBlIH0gZnJvbSBcInR5cGVzL3NxbFwiO1xuaW1wb3J0IHsgRGF0YXNvdXJjZSB9IGZyb20gXCIuL0NIRGF0YXNvdXJjZVwiO1xuaW1wb3J0IHsgcGx1Z2luVmVyc2lvbiB9IGZyb20gXCJ1dGlscy92ZXJzaW9uXCI7XG5pbXBvcnQgeyBsb2dDb2x1bW5IaW50c1RvQWxpYXMgfSBmcm9tIFwiLi9zcWxHZW5lcmF0b3JcIjtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGJ1aWxkZXIgb3B0aW9ucyBjb250YWluIGVub3VnaCBpbmZvcm1hdGlvbiB0byBzdGFydCBzaG93aW5nIGEgcXVlcnlcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQnVpbGRlck9wdGlvbnNSdW5uYWJsZSA9IChidWlsZGVyT3B0aW9uczogUXVlcnlCdWlsZGVyT3B0aW9ucyk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gKFxuICAgIChidWlsZGVyT3B0aW9ucy5jb2x1bW5zPy5sZW5ndGggfHwgMCkgPiAwIHx8XG4gICAgKGJ1aWxkZXJPcHRpb25zLmZpbHRlcnM/Lmxlbmd0aCB8fCAwKSA+IDAgfHxcbiAgICAoYnVpbGRlck9wdGlvbnMub3JkZXJCeT8ubGVuZ3RoIHx8IDApID4gMCB8fFxuICAgIChidWlsZGVyT3B0aW9ucy5hZ2dyZWdhdGVzPy5sZW5ndGggfHwgMCkgPiAwIHx8XG4gICAgKGJ1aWxkZXJPcHRpb25zLmdyb3VwQnk/Lmxlbmd0aCB8fCAwKSA+IDBcbiAgKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgUXVlcnlCdWlsZGVyT3B0aW9ucyB0byBHcmFmYW5hIGZvcm1hdFxuICogc3JjOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhZmFuYS9zcWxkcy9ibG9iL21haW4vcXVlcnkuZ28jTDIwXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBRdWVyeUJ1aWxkZXJPcHRpb25zVG9HcmFmYW5hRm9ybWF0ID0gKHQ/OiBRdWVyeUJ1aWxkZXJPcHRpb25zKTogbnVtYmVyID0+IHtcbiAgc3dpdGNoICh0Py5xdWVyeVR5cGUpIHtcbiAgICBjYXNlIFF1ZXJ5VHlwZS5UYWJsZTpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgUXVlcnlUeXBlLkxvZ3M6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIFF1ZXJ5VHlwZS5UaW1lU2VyaWVzOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSBRdWVyeVR5cGUuVHJhY2VzOlxuICAgICAgcmV0dXJuIHQubWV0YT8uaXNUcmFjZUlkTW9kZSA/IDMgOiAxO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMSA8PCA4OyAvLyBhbiB1bnVzZWQgdTMyLCBkZWZhdWx0cyB0byB0aW1lc2VyaWVzL2dyYXBoIG9uIHBsdWdpbiBiYWNrZW5kLlxuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIFF1ZXJ5VHlwZSB0byBHcmFmYW5hIGZvcm1hdFxuICogc3JjOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhZmFuYS9zcWxkcy9ibG9iL21haW4vcXVlcnkuZ28jTDIwXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBRdWVyeVR5cGVUb0dyYWZhbmFGb3JtYXQgPSAodD86IFF1ZXJ5VHlwZSk6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAodCkge1xuICAgIGNhc2UgUXVlcnlUeXBlLlRhYmxlOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSBRdWVyeVR5cGUuTG9nczpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgUXVlcnlUeXBlLlRpbWVTZXJpZXM6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIFF1ZXJ5VHlwZS5UcmFjZXM6XG4gICAgICByZXR1cm4gMztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDEgPDwgODsgLy8gYW4gdW51c2VkIHUzMiwgZGVmYXVsdHMgdG8gdGltZXNlcmllcy9ncmFwaCBvbiBwbHVnaW4gYmFja2VuZC5cbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBHcmFmYW5hIGZvcm1hdCB0byBidWlsZGVyIFF1ZXJ5VHlwZVxuICogc3JjOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhZmFuYS9zcWxkcy9ibG9iL21haW4vcXVlcnkuZ28jTDIwXG4gKi9cbmV4cG9ydCBjb25zdCBtYXBHcmFmYW5hRm9ybWF0VG9RdWVyeVR5cGUgPSAoZj86IG51bWJlcik6IFF1ZXJ5VHlwZSA9PiB7XG4gIHN3aXRjaCAoZikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBRdWVyeVR5cGUuVGltZVNlcmllcztcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gUXVlcnlUeXBlLlRhYmxlO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBRdWVyeVR5cGUuTG9ncztcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gUXVlcnlUeXBlLlRyYWNlcztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFF1ZXJ5VHlwZS5UYWJsZTtcbiAgfVxufTtcblxuLyoqXG4gKiBNYW5pcHVsYXRlcyBjb2x1bW4gYXJyYXkgaW4tcGxhY2UgdG8gaW5jbHVkZSBjb2x1bW4gaGludHMsIGxvb3NlbHkgbWF0Y2hlZCBieSB0aGUgcHJvdmlkZWQgY29sdW1uIGhpbnQgbWFwLlxuICovXG5leHBvcnQgY29uc3QgdHJ5QXBwbHlDb2x1bW5IaW50cyA9IChjb2x1bW5zOiBTZWxlY3RlZENvbHVtbltdLCBoaW50c1RvQ29sdW1ucz86IE1hcDxDb2x1bW5IaW50LCBzdHJpbmc+KSA9PiB7XG4gIGNvbnN0IGNvbHVtbnNUb0hpbnRzOiBNYXA8c3RyaW5nLCBDb2x1bW5IaW50PiA9IG5ldyBNYXAoKTtcbiAgaWYgKGhpbnRzVG9Db2x1bW5zKSB7XG4gICAgaGludHNUb0NvbHVtbnMuZm9yRWFjaCgobmFtZSwgaGludCkgPT4ge1xuICAgICAgY29sdW1uc1RvSGludHMuc2V0KG5hbWUudG9Mb3dlckNhc2UoKS50cmltKCksIGhpbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgZm9yIChjb25zdCBjb2x1bW4gb2YgY29sdW1ucykge1xuICAgIGlmIChjb2x1bW4uaGludCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZSA9IGNvbHVtbi5uYW1lLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIGNvbnN0IGFsaWFzID0gY29sdW1uLmFsaWFzPy50b0xvd2VyQ2FzZSgpLnRyaW0oKSB8fCAnJztcblxuICAgIGNvbnN0IGhpbnQgPSBjb2x1bW5zVG9IaW50cy5nZXQobmFtZSkgfHwgY29sdW1uc1RvSGludHMuZ2V0KGFsaWFzKTtcbiAgICBpZiAoaGludCkge1xuICAgICAgY29sdW1uLmhpbnQgPSBoaW50O1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJ3RpbWUnKSkge1xuICAgICAgY29sdW1uLmhpbnQgPSBDb2x1bW5IaW50LlRpbWU7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGxhYmVsIGludG8gc3FsLXN0eWxlIGNvbHVtbiBuYW1lLlxuICogRXhhbXBsZTogXCJUZXN0IENvbHVtblwiIC0+IFwidGVzdF9jb2x1bW5cIlxuICovXG5leHBvcnQgY29uc3QgY29sdW1uTGFiZWxUb1BsYWNlaG9sZGVyID0gKGxhYmVsOiBzdHJpbmcpID0+IGxhYmVsLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCAnXycpO1xuXG4vKipcbiAqIE11dGF0ZXMgdGhlIERhdGFRdWVyeVJlc3BvbnNlIHRvIGluY2x1ZGUgdHJhY2UvbG9nIGxpbmtzIG9uIHRoZSB0cmFjZUlEIGZpZWxkLlxuICogVGhlIGxpbmsgd2lsbCBvcGVuIGEgc2Vjb25kIHF1ZXJ5IGVkaXRvciBpbiBzcGxpdCB2aWV3XG4gKiBvbiB0aGUgZXhwbG9yZSBwYWdlIHdpdGggdGhlIHNlbGVjdGVkIHRyYWNlIElELlxuICogXG4gKiBSZXF1aXJlcyBkZWZhdWx0cyB0byBiZSBjb25maWd1cmVkIHdoZW4gY3Jvc3NpbmcgcXVlcnkgdHlwZXMuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1RdWVyeVJlc3BvbnNlV2l0aFRyYWNlQW5kTG9nTGlua3MgPSAoZGF0YXNvdXJjZTogRGF0YXNvdXJjZSwgcmVxOiBEYXRhUXVlcnlSZXF1ZXN0PENIUXVlcnk+LCByZXM6IERhdGFRdWVyeVJlc3BvbnNlKTogRGF0YVF1ZXJ5UmVzcG9uc2UgPT4ge1xuICByZXMuZGF0YS5mb3JFYWNoKChmcmFtZTogRGF0YUZyYW1lKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxRdWVyeSA9IHJlcS50YXJnZXRzLmZpbmQodCA9PiB0LnJlZklkID09PSBmcmFtZS5yZWZJZCkgYXMgQ0hCdWlsZGVyUXVlcnk7XG4gICAgaWYgKCFvcmlnaW5hbFF1ZXJ5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdHJhY2VGaWVsZCA9IGZyYW1lLmZpZWxkcy5maW5kKGZpZWxkID0+IGZpZWxkLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RyYWNlaWQnIHx8IGZpZWxkLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RyYWNlX2lkJyk7XG4gICAgaWYgKCF0cmFjZUZpZWxkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdHJhY2VJZFF1ZXJ5OiBDSEJ1aWxkZXJRdWVyeSA9IHtcbiAgICAgIGVkaXRvclR5cGU6IEVkaXRvclR5cGUuQnVpbGRlcixcbiAgICAgIC8qKlxuICAgICAgICogRXZpbCBidWc6XG4gICAgICAgKiBUaGUgcmF3U3FsIHZhbHVlIG1pZ2h0IGNvbnRhaW4gdGltZSBmaWx0ZXJzIHN1Y2ggYXMgJF9fZnJvbVRpbWUgYW5kICRfX3RvVGltZS5cbiAgICAgICAqIEdyYWZhbmEgc2VlcyB0aGVzZSB0aW1lIHJhbmdlIGZpbHRlcnMgYXMgZGF0YSBsaW5rcyBhbmQgd2lsbCByZWZ1c2UgdG8gZW5hYmxlIHRoZSB0cmFjZUlEIGxpbmsgaWYgdGhlc2UgYXJlIHByZXNlbnQuXG4gICAgICAgKiBTZXQgcmF3U3FsIHRvIGVtcHR5IHNpbmNlIGl0IGdldHMgcmVnZW5lcmF0ZWQgd2hlbiB0aGUgcGFuZWwgcmVuZGVycyBhbnl3YXkuXG4gICAgICAgKi9cbiAgICAgIHJhd1NxbDogJycsXG4gICAgICBidWlsZGVyT3B0aW9uczoge30gYXMgUXVlcnlCdWlsZGVyT3B0aW9ucyxcbiAgICAgIHBsdWdpblZlcnNpb24sXG4gICAgICByZWZJZDogJ1RyYWNlIElEJ1xuICAgIH07XG5cbiAgICBpZiAob3JpZ2luYWxRdWVyeS5lZGl0b3JUeXBlID09PSBFZGl0b3JUeXBlLkJ1aWxkZXIgJiYgb3JpZ2luYWxRdWVyeS5idWlsZGVyT3B0aW9ucy5xdWVyeVR5cGUgPT09IFF1ZXJ5VHlwZS5UcmFjZXMpIHtcbiAgICAgIC8vIENvcHkgZmllbGRzIGRpcmVjdGx5IGZyb20gdHJhY2Ugc2VhcmNoXG5cbiAgICAgIHRyYWNlSWRRdWVyeS5idWlsZGVyT3B0aW9ucyA9IHtcbiAgICAgICAgLi4ub3JpZ2luYWxRdWVyeS5idWlsZGVyT3B0aW9ucyxcbiAgICAgICAgZmlsdGVyczogW10sIC8vIENsZWFyIGZpbHRlcnMgYW5kIG9yZGVyQnkgc2luY2UgaXQncyBhbiBleGFjdCBJRCBsb29rdXBcbiAgICAgICAgb3JkZXJCeTogW10sXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAuLi5vcmlnaW5hbFF1ZXJ5LmJ1aWxkZXJPcHRpb25zLm1ldGEsXG4gICAgICAgICAgbWluaW1pemVkOiB0cnVlLFxuICAgICAgICAgIGlzVHJhY2VJZE1vZGU6IHRydWUsXG4gICAgICAgICAgdHJhY2VJZDogJyR7X192YWx1ZS5yYXd9J1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgbmV3IHF1ZXJ5IGJhc2VkIG9uIHRyYWNlIGRlZmF1bHRzXG5cbiAgICAgIGNvbnN0IG90ZWxWZXJzaW9uID0gZGF0YXNvdXJjZS5nZXRUcmFjZU90ZWxWZXJzaW9uKCk7XG4gICAgICBjb25zdCBvcHRpb25zOiBRdWVyeUJ1aWxkZXJPcHRpb25zID0ge1xuICAgICAgICBkYXRhYmFzZTogZGF0YXNvdXJjZS5nZXREZWZhdWx0VHJhY2VEYXRhYmFzZSgpIHx8IHRyYWNlSWRRdWVyeS5idWlsZGVyT3B0aW9ucy5kYXRhYmFzZSB8fCBkYXRhc291cmNlLmdldERlZmF1bHREYXRhYmFzZSgpLFxuICAgICAgICB0YWJsZTogZGF0YXNvdXJjZS5nZXREZWZhdWx0VHJhY2VUYWJsZSgpIHx8IGRhdGFzb3VyY2UuZ2V0RGVmYXVsdFRhYmxlKCkgfHwgdHJhY2VJZFF1ZXJ5LmJ1aWxkZXJPcHRpb25zLnRhYmxlLFxuICAgICAgICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZS5UcmFjZXMsXG4gICAgICAgIGNvbHVtbnM6IFtdLFxuICAgICAgICBmaWx0ZXJzOiBbXSxcbiAgICAgICAgb3JkZXJCeTogW10sXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICBtaW5pbWl6ZWQ6IHRydWUsXG4gICAgICAgICAgaXNUcmFjZUlkTW9kZTogdHJ1ZSxcbiAgICAgICAgICB0cmFjZUlkOiAnJHtfX3ZhbHVlLnJhd30nLFxuICAgICAgICAgIHRyYWNlRHVyYXRpb25Vbml0OiBkYXRhc291cmNlLmdldERlZmF1bHRUcmFjZUR1cmF0aW9uVW5pdCgpLFxuICAgICAgICAgIG90ZWxFbmFibGVkOiBCb29sZWFuKG90ZWxWZXJzaW9uKSxcbiAgICAgICAgICBvdGVsVmVyc2lvbjogb3RlbFZlcnNpb24sXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGRlZmF1bHRDb2x1bW5zID0gZGF0YXNvdXJjZS5nZXREZWZhdWx0VHJhY2VDb2x1bW5zKCk7XG4gICAgICBmb3IgKGxldCBbaGludCwgY29sTmFtZV0gb2YgZGVmYXVsdENvbHVtbnMpIHtcbiAgICAgICAgb3B0aW9ucy5jb2x1bW5zIS5wdXNoKHsgbmFtZTogY29sTmFtZSwgaGludCB9KTtcbiAgICAgIH1cblxuICAgICAgdHJhY2VJZFF1ZXJ5LmJ1aWxkZXJPcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBjb25zdCB0cmFjZUxvZ3NRdWVyeTogQ0hCdWlsZGVyUXVlcnkgPSB7XG4gICAgICBlZGl0b3JUeXBlOiBFZGl0b3JUeXBlLkJ1aWxkZXIsXG4gICAgICByYXdTcWw6ICcnLFxuICAgICAgYnVpbGRlck9wdGlvbnM6IHt9IGFzIFF1ZXJ5QnVpbGRlck9wdGlvbnMsXG4gICAgICBwbHVnaW5WZXJzaW9uLFxuICAgICAgcmVmSWQ6ICdUcmFjZSBMb2dzJ1xuICAgIH07XG5cbiAgICBpZiAob3JpZ2luYWxRdWVyeS5lZGl0b3JUeXBlID09PSBFZGl0b3JUeXBlLkJ1aWxkZXIgJiYgb3JpZ2luYWxRdWVyeS5idWlsZGVyT3B0aW9ucy5xdWVyeVR5cGUgPT09IFF1ZXJ5VHlwZS5Mb2dzKSB7XG4gICAgICAvLyBDb3B5IGZpZWxkcyBkaXJlY3RseSBmcm9tIGxvZyBzZWFyY2hcbiAgICAgIHRyYWNlTG9nc1F1ZXJ5LmJ1aWxkZXJPcHRpb25zID0ge1xuICAgICAgICAuLi5vcmlnaW5hbFF1ZXJ5LmJ1aWxkZXJPcHRpb25zLFxuICAgICAgICBmaWx0ZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBvcGVyYXRvcjogRmlsdGVyT3BlcmF0b3IuRXF1YWxzLFxuICAgICAgICAgICAgZmlsdGVyVHlwZTogJ2N1c3RvbScsXG4gICAgICAgICAgICBrZXk6ICcnLFxuICAgICAgICAgICAgaGludDogQ29sdW1uSGludC5UcmFjZUlkLFxuICAgICAgICAgICAgY29uZGl0aW9uOiAnQU5EJyxcbiAgICAgICAgICAgIHZhbHVlOiAnJHtfX3ZhbHVlLnJhd30nXG4gICAgICAgICAgfSBhcyBTdHJpbmdGaWx0ZXJcbiAgICAgICAgXSxcbiAgICAgICAgb3JkZXJCeTogW3sgbmFtZTogJycsIGhpbnQ6IENvbHVtbkhpbnQuVGltZSwgZGlyOiBPcmRlckJ5RGlyZWN0aW9uLkFTQyB9XSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIC4uLm9yaWdpbmFsUXVlcnkuYnVpbGRlck9wdGlvbnMubWV0YSxcbiAgICAgICAgICBtaW5pbWl6ZWQ6IHRydWUsXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENyZWF0ZSBuZXcgcXVlcnkgYmFzZWQgb24gbG9nIGRlZmF1bHRzXG5cbiAgICAgIGNvbnN0IG90ZWxWZXJzaW9uID0gZGF0YXNvdXJjZS5nZXRMb2dzT3RlbFZlcnNpb24oKTtcbiAgICAgIGNvbnN0IG9wdGlvbnM6IFF1ZXJ5QnVpbGRlck9wdGlvbnMgPSB7XG4gICAgICAgIGRhdGFiYXNlOiBkYXRhc291cmNlLmdldERlZmF1bHRMb2dzRGF0YWJhc2UoKSB8fCB0cmFjZUxvZ3NRdWVyeS5idWlsZGVyT3B0aW9ucy5kYXRhYmFzZSB8fCBkYXRhc291cmNlLmdldERlZmF1bHREYXRhYmFzZSgpLFxuICAgICAgICB0YWJsZTogZGF0YXNvdXJjZS5nZXREZWZhdWx0TG9nc1RhYmxlKCkgfHwgZGF0YXNvdXJjZS5nZXREZWZhdWx0VGFibGUoKSB8fCB0cmFjZUxvZ3NRdWVyeS5idWlsZGVyT3B0aW9ucy50YWJsZSxcbiAgICAgICAgcXVlcnlUeXBlOiBRdWVyeVR5cGUuTG9ncyxcbiAgICAgICAgY29sdW1uczogW10sXG4gICAgICAgIG9yZGVyQnk6IFt7IG5hbWU6ICcnLCBoaW50OiBDb2x1bW5IaW50LlRpbWUsIGRpcjogT3JkZXJCeURpcmVjdGlvbi5BU0MgfV0sXG4gICAgICAgIGZpbHRlcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBGaWx0ZXJPcGVyYXRvci5FcXVhbHMsXG4gICAgICAgICAgICBmaWx0ZXJUeXBlOiAnY3VzdG9tJyxcbiAgICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgICBoaW50OiBDb2x1bW5IaW50LlRyYWNlSWQsXG4gICAgICAgICAgICBjb25kaXRpb246ICdBTkQnLFxuICAgICAgICAgICAgdmFsdWU6ICcke19fdmFsdWUucmF3fSdcbiAgICAgICAgICB9IGFzIFN0cmluZ0ZpbHRlclxuICAgICAgICBdLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgbWluaW1pemVkOiB0cnVlLFxuICAgICAgICAgIG90ZWxFbmFibGVkOiBCb29sZWFuKG90ZWxWZXJzaW9uKSxcbiAgICAgICAgICBvdGVsVmVyc2lvbjogb3RlbFZlcnNpb24sXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGRlZmF1bHRDb2x1bW5zID0gZGF0YXNvdXJjZS5nZXREZWZhdWx0TG9nc0NvbHVtbnMoKTtcbiAgICAgIGZvciAobGV0IFtoaW50LCBjb2xOYW1lXSBvZiBkZWZhdWx0Q29sdW1ucykge1xuICAgICAgICBvcHRpb25zLmNvbHVtbnMhLnB1c2goeyBuYW1lOiBjb2xOYW1lLCBoaW50IH0pO1xuICAgICAgfVxuXG4gICAgICB0cmFjZUxvZ3NRdWVyeS5idWlsZGVyT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3Qgb3BlbkluTmV3V2luZG93ID0gcmVxLmFwcCAhPT0gQ29yZUFwcC5FeHBsb3JlO1xuICAgIHRyYWNlRmllbGQuY29uZmlnLmxpbmtzID0gW107XG4gICAgdHJhY2VGaWVsZC5jb25maWcubGlua3MhLnB1c2goe1xuICAgICAgdGl0bGU6ICdWaWV3IHRyYWNlJyxcbiAgICAgIHRhcmdldEJsYW5rOiBvcGVuSW5OZXdXaW5kb3csXG4gICAgICB1cmw6ICcnLFxuICAgICAgaW50ZXJuYWw6IHtcbiAgICAgICAgcXVlcnk6IHRyYWNlSWRRdWVyeSxcbiAgICAgICAgZGF0YXNvdXJjZVVpZDogdHJhY2VJZFF1ZXJ5LmRhdGFzb3VyY2U/LnVpZCEsXG4gICAgICAgIGRhdGFzb3VyY2VOYW1lOiB0cmFjZUlkUXVlcnkuZGF0YXNvdXJjZT8udHlwZSEsXG4gICAgICAgIHBhbmVsc1N0YXRlOiB7XG4gICAgICAgICAgdHJhY2U6IHtcbiAgICAgICAgICAgIHNwYW5JZDogJyR7X192YWx1ZS5yYXd9J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRyYWNlRmllbGQuY29uZmlnLmxpbmtzIS5wdXNoKHtcbiAgICAgIHRpdGxlOiAnVmlldyBsb2dzJyxcbiAgICAgIHRhcmdldEJsYW5rOiBvcGVuSW5OZXdXaW5kb3csXG4gICAgICB1cmw6ICcnLFxuICAgICAgaW50ZXJuYWw6IHtcbiAgICAgICAgcXVlcnk6IHRyYWNlTG9nc1F1ZXJ5LFxuICAgICAgICBkYXRhc291cmNlVWlkOiB0cmFjZUxvZ3NRdWVyeS5kYXRhc291cmNlPy51aWQhLFxuICAgICAgICBkYXRhc291cmNlTmFtZTogdHJhY2VMb2dzUXVlcnkuZGF0YXNvdXJjZT8udHlwZSEsXG4gICAgICB9XG4gICAgfSk7IFxuICB9KTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZGF0YWZyYW1lIGNvbnRhaW5zIGEgbG9nIGxhYmVsIHRoYXQgbWF0Y2hlcyB0aGUgcHJvdmlkZWQgbmFtZS5cbiAqIFxuICogVGhpcyBmdW5jdGlvbiBleGlzdHMgZm9yIHRoZSBsb2dzIHBhbmVsLCB3aGVuIGNsaWNraW5nIFwiZmlsdGVyIGZvciB2YWx1ZVwiIG9uIGEgc2luZ2xlIGxvZyByb3cuXG4gKiBBIGRhdGFmcmFtZSB3aWxsIGJlIHByb3ZpZGVkIGZvciB0aGF0IHNpbmdsZSByb3csIGFuZCB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBsYWJlbHMgb2JqZWN0IHRvIHNlZSBpZiBpdFxuICogY29udGFpbnMgYSBmaWVsZCB3aXRoIHRoYXQgbmFtZS4gSWYgaXQgZG9lcyB0aGVuIHdlIGNhbiBjcmVhdGUgYSBmaWx0ZXIgdXNpbmcgdGhlIGxhYmVscyBjb2x1bW4gaGludC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFGcmFtZUhhc0xvZ0xhYmVsV2l0aE5hbWUgPSAoZnJhbWU6IERhdGFGcmFtZSB8IHVuZGVmaW5lZCwgbmFtZTogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIGlmICghZnJhbWUgfHwgIWZyYW1lLmZpZWxkcyB8fCBmcmFtZS5maWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgbG9nTGFiZWxzRmllbGROYW1lID0gbG9nQ29sdW1uSGludHNUb0FsaWFzLmdldChDb2x1bW5IaW50LkxvZ0xhYmVscyk7XG4gIGNvbnN0IGZpZWxkID0gZnJhbWUuZmllbGRzLmZpbmQoZiA9PiBmLm5hbWUgPT09IGxvZ0xhYmVsc0ZpZWxkTmFtZSk7XG4gIGlmICghZmllbGQgfHwgIWZpZWxkLnZhbHVlcyB8fCBmaWVsZC52YWx1ZXMubGVuZ3RoIDwgMSB8fCAhZmllbGQudmFsdWVzLmdldCgwKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGxhYmVscyA9IChmaWVsZC52YWx1ZXMuZ2V0KDApIHx8IHt9KSBhcyBvYmplY3Q7XG4gIGNvbnN0IGxhYmVsS2V5cyA9IE9iamVjdC5rZXlzKGxhYmVscyk7XG5cbiAgcmV0dXJuIGxhYmVsS2V5cy5pbmNsdWRlcyhuYW1lKTtcbn1cbiJdLCJuYW1lcyI6WyJDb3JlQXBwIiwiQ29sdW1uSGludCIsIkZpbHRlck9wZXJhdG9yIiwiT3JkZXJCeURpcmVjdGlvbiIsIlF1ZXJ5VHlwZSIsIkVkaXRvclR5cGUiLCJwbHVnaW5WZXJzaW9uIiwibG9nQ29sdW1uSGludHNUb0FsaWFzIiwiaXNCdWlsZGVyT3B0aW9uc1J1bm5hYmxlIiwiYnVpbGRlck9wdGlvbnMiLCJjb2x1bW5zIiwibGVuZ3RoIiwiZmlsdGVycyIsIm9yZGVyQnkiLCJhZ2dyZWdhdGVzIiwiZ3JvdXBCeSIsIm1hcFF1ZXJ5QnVpbGRlck9wdGlvbnNUb0dyYWZhbmFGb3JtYXQiLCJ0IiwicXVlcnlUeXBlIiwiVGFibGUiLCJMb2dzIiwiVGltZVNlcmllcyIsIlRyYWNlcyIsIm1ldGEiLCJpc1RyYWNlSWRNb2RlIiwibWFwUXVlcnlUeXBlVG9HcmFmYW5hRm9ybWF0IiwibWFwR3JhZmFuYUZvcm1hdFRvUXVlcnlUeXBlIiwiZiIsInRyeUFwcGx5Q29sdW1uSGludHMiLCJoaW50c1RvQ29sdW1ucyIsImNvbHVtbnNUb0hpbnRzIiwiTWFwIiwiZm9yRWFjaCIsIm5hbWUiLCJoaW50Iiwic2V0IiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiY29sdW1uIiwiYWxpYXMiLCJnZXQiLCJpbmNsdWRlcyIsIlRpbWUiLCJjb2x1bW5MYWJlbFRvUGxhY2Vob2xkZXIiLCJsYWJlbCIsInJlcGxhY2UiLCJ0cmFuc2Zvcm1RdWVyeVJlc3BvbnNlV2l0aFRyYWNlQW5kTG9nTGlua3MiLCJkYXRhc291cmNlIiwicmVxIiwicmVzIiwiZGF0YSIsImZyYW1lIiwidHJhY2VJZFF1ZXJ5IiwidHJhY2VMb2dzUXVlcnkiLCJvcmlnaW5hbFF1ZXJ5IiwidGFyZ2V0cyIsImZpbmQiLCJyZWZJZCIsInRyYWNlRmllbGQiLCJmaWVsZHMiLCJmaWVsZCIsImVkaXRvclR5cGUiLCJCdWlsZGVyIiwicmF3U3FsIiwibWluaW1pemVkIiwidHJhY2VJZCIsIm90ZWxWZXJzaW9uIiwiZ2V0VHJhY2VPdGVsVmVyc2lvbiIsIm9wdGlvbnMiLCJkYXRhYmFzZSIsImdldERlZmF1bHRUcmFjZURhdGFiYXNlIiwiZ2V0RGVmYXVsdERhdGFiYXNlIiwidGFibGUiLCJnZXREZWZhdWx0VHJhY2VUYWJsZSIsImdldERlZmF1bHRUYWJsZSIsInRyYWNlRHVyYXRpb25Vbml0IiwiZ2V0RGVmYXVsdFRyYWNlRHVyYXRpb25Vbml0Iiwib3RlbEVuYWJsZWQiLCJCb29sZWFuIiwiZGVmYXVsdENvbHVtbnMiLCJnZXREZWZhdWx0VHJhY2VDb2x1bW5zIiwiY29sTmFtZSIsInB1c2giLCJ0eXBlIiwib3BlcmF0b3IiLCJFcXVhbHMiLCJmaWx0ZXJUeXBlIiwia2V5IiwiVHJhY2VJZCIsImNvbmRpdGlvbiIsInZhbHVlIiwiZGlyIiwiQVNDIiwiZ2V0TG9nc090ZWxWZXJzaW9uIiwiZ2V0RGVmYXVsdExvZ3NEYXRhYmFzZSIsImdldERlZmF1bHRMb2dzVGFibGUiLCJnZXREZWZhdWx0TG9nc0NvbHVtbnMiLCJvcGVuSW5OZXdXaW5kb3ciLCJhcHAiLCJFeHBsb3JlIiwiY29uZmlnIiwibGlua3MiLCJ0aXRsZSIsInRhcmdldEJsYW5rIiwidXJsIiwiaW50ZXJuYWwiLCJxdWVyeSIsImRhdGFzb3VyY2VVaWQiLCJ1aWQiLCJkYXRhc291cmNlTmFtZSIsInBhbmVsc1N0YXRlIiwidHJhY2UiLCJzcGFuSWQiLCJkYXRhRnJhbWVIYXNMb2dMYWJlbFdpdGhOYW1lIiwibG9nTGFiZWxzRmllbGROYW1lIiwiTG9nTGFiZWxzIiwidmFsdWVzIiwibGFiZWxzIiwibGFiZWxLZXlzIiwiT2JqZWN0Iiwia2V5cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./data/utils.ts\n");

/***/ }),

/***/ "./data/validate.ts":
/*!**************************!*\
  !*** ./data/validate.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var js_sql_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sql-parser */ \"../node_modules/js-sql-parser/dist/parser/sqlParser.js\");\n/* harmony import */ var js_sql_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sql_parser__WEBPACK_IMPORTED_MODULE_0__);\n\n// the sql parser only handles generic syntax, allow any clickhouse specific syntax\nconst allow = [\n    'INTERVAL'\n];\nfunction validate(sql) {\n    try {\n        js_sql_parser__WEBPACK_IMPORTED_MODULE_0__.parse(sql);\n        return {\n            valid: true\n        };\n    } catch (e) {\n        const err = e;\n        const parts = err.message.split('\\n');\n        const loc = err.hash.loc;\n        const lines = sql.split('\\n');\n        const line = lines[loc.first_line - 1];\n        const bad = line.substring(loc.first_column, loc.last_column);\n        if (allow.includes(bad.toUpperCase())) {\n            return {\n                valid: true\n            };\n        }\n        if (line.trim() === bad) {\n            // issue is on next line\n            const nextLine = lines[loc.first_line];\n            if (nextLine === null || nextLine === void 0 ? void 0 : nextLine.trim().startsWith('$')) {\n                return {\n                    valid: true\n                };\n            }\n        }\n        const badSection = line.substring(loc.last_column + 1);\n        if (badSection.trim().startsWith('$')) {\n            return {\n                valid: true\n            };\n        }\n        return {\n            valid: false,\n            error: {\n                startLine: loc.first_line,\n                endLine: loc.last_line,\n                startCol: loc.first_column + 1,\n                endCol: loc.last_column + 1,\n                message: e.message,\n                expected: parts[3]\n            }\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9kYXRhL3ZhbGlkYXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3QztBQTZCeEMsbUZBQW1GO0FBQ25GLE1BQU1DLFFBQVE7SUFBQztDQUFXO0FBRW5CLFNBQVNDLFNBQVNDLEdBQVc7SUFDbEMsSUFBSTtRQUNGSCxnREFBWSxDQUFDRztRQUNiLE9BQU87WUFBRUUsT0FBTztRQUFLO0lBQ3ZCLEVBQUUsT0FBT0MsR0FBUTtRQUNmLE1BQU1DLE1BQU1EO1FBQ1osTUFBTUUsUUFBUUQsSUFBSUUsT0FBTyxDQUFDQyxLQUFLLENBQUM7UUFDaEMsTUFBTUMsTUFBTUosSUFBSUssSUFBSSxDQUFDRCxHQUFHO1FBQ3hCLE1BQU1FLFFBQVFWLElBQUlPLEtBQUssQ0FBQztRQUN4QixNQUFNSSxPQUFPRCxLQUFLLENBQUNGLElBQUlJLFVBQVUsR0FBRyxFQUFFO1FBQ3RDLE1BQU1DLE1BQU1GLEtBQUtHLFNBQVMsQ0FBQ04sSUFBSU8sWUFBWSxFQUFFUCxJQUFJUSxXQUFXO1FBQzVELElBQUlsQixNQUFNbUIsUUFBUSxDQUFDSixJQUFJSyxXQUFXLEtBQUs7WUFDckMsT0FBTztnQkFBRWhCLE9BQU87WUFBSztRQUN2QjtRQUVBLElBQUlTLEtBQUtRLElBQUksT0FBT04sS0FBSztZQUN2Qix3QkFBd0I7WUFDeEIsTUFBTU8sV0FBV1YsS0FBSyxDQUFDRixJQUFJSSxVQUFVLENBQUM7WUFDdEMsSUFBSVEscUJBQUFBLCtCQUFBQSxTQUFVRCxJQUFJLEdBQUdFLFVBQVUsQ0FBQyxNQUFNO2dCQUNwQyxPQUFPO29CQUFFbkIsT0FBTztnQkFBSztZQUN2QjtRQUNGO1FBRUEsTUFBTW9CLGFBQWFYLEtBQUtHLFNBQVMsQ0FBQ04sSUFBSVEsV0FBVyxHQUFHO1FBQ3BELElBQUlNLFdBQVdILElBQUksR0FBR0UsVUFBVSxDQUFDLE1BQU07WUFDckMsT0FBTztnQkFBRW5CLE9BQU87WUFBSztRQUN2QjtRQUVBLE9BQU87WUFDTEEsT0FBTztZQUNQcUIsT0FBTztnQkFDTEMsV0FBV2hCLElBQUlJLFVBQVU7Z0JBQ3pCYSxTQUFTakIsSUFBSWtCLFNBQVM7Z0JBQ3RCQyxVQUFVbkIsSUFBSU8sWUFBWSxHQUFHO2dCQUM3QmEsUUFBUXBCLElBQUlRLFdBQVcsR0FBRztnQkFDMUJWLFNBQVNILEVBQUVHLE9BQU87Z0JBQ2xCdUIsVUFBVXhCLEtBQUssQ0FBQyxFQUFFO1lBQ3BCO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9kYXRhL3ZhbGlkYXRlLnRzPzU0ZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGFyc2VyIGZyb20gJ2pzLXNxbC1wYXJzZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yIHtcbiAgc3RhcnRMaW5lOiBudW1iZXI7XG4gIGVuZExpbmU6IG51bWJlcjtcbiAgc3RhcnRDb2w6IG51bWJlcjtcbiAgZW5kQ29sOiBudW1iZXI7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZXhwZWN0ZWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uIHtcbiAgdmFsaWQ6IGJvb2xlYW47XG4gIGVycm9yPzogRXJyb3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgaGFzaDoge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBsb2M6IHtcbiAgICAgIGZpcnN0X2xpbmU6IG51bWJlcjtcbiAgICAgIGxhc3RfbGluZTogbnVtYmVyO1xuICAgICAgZmlyc3RfY29sdW1uOiBudW1iZXI7XG4gICAgICBsYXN0X2NvbHVtbjogbnVtYmVyO1xuICAgIH07XG4gIH07XG59XG5cbi8vIHRoZSBzcWwgcGFyc2VyIG9ubHkgaGFuZGxlcyBnZW5lcmljIHN5bnRheCwgYWxsb3cgYW55IGNsaWNraG91c2Ugc3BlY2lmaWMgc3ludGF4XG5jb25zdCBhbGxvdyA9IFsnSU5URVJWQUwnXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKHNxbDogc3RyaW5nKTogVmFsaWRhdGlvbiB7XG4gIHRyeSB7XG4gICAgcGFyc2VyLnBhcnNlKHNxbCk7XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbiAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgY29uc3QgZXJyID0gZSBhcyBQYXJzZUVycm9yO1xuICAgIGNvbnN0IHBhcnRzID0gZXJyLm1lc3NhZ2Uuc3BsaXQoJ1xcbicpO1xuICAgIGNvbnN0IGxvYyA9IGVyci5oYXNoLmxvYztcbiAgICBjb25zdCBsaW5lcyA9IHNxbC5zcGxpdCgnXFxuJyk7XG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2xvYy5maXJzdF9saW5lIC0gMV07XG4gICAgY29uc3QgYmFkID0gbGluZS5zdWJzdHJpbmcobG9jLmZpcnN0X2NvbHVtbiwgbG9jLmxhc3RfY29sdW1uKTtcbiAgICBpZiAoYWxsb3cuaW5jbHVkZXMoYmFkLnRvVXBwZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIGlmIChsaW5lLnRyaW0oKSA9PT0gYmFkKSB7XG4gICAgICAvLyBpc3N1ZSBpcyBvbiBuZXh0IGxpbmVcbiAgICAgIGNvbnN0IG5leHRMaW5lID0gbGluZXNbbG9jLmZpcnN0X2xpbmVdO1xuICAgICAgaWYgKG5leHRMaW5lPy50cmltKCkuc3RhcnRzV2l0aCgnJCcpKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYmFkU2VjdGlvbiA9IGxpbmUuc3Vic3RyaW5nKGxvYy5sYXN0X2NvbHVtbiArIDEpO1xuICAgIGlmIChiYWRTZWN0aW9uLnRyaW0oKS5zdGFydHNXaXRoKCckJykpIHtcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgIGVycm9yOiB7XG4gICAgICAgIHN0YXJ0TGluZTogbG9jLmZpcnN0X2xpbmUsXG4gICAgICAgIGVuZExpbmU6IGxvYy5sYXN0X2xpbmUsXG4gICAgICAgIHN0YXJ0Q29sOiBsb2MuZmlyc3RfY29sdW1uICsgMSxcbiAgICAgICAgZW5kQ29sOiBsb2MubGFzdF9jb2x1bW4gKyAxLFxuICAgICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UsXG4gICAgICAgIGV4cGVjdGVkOiBwYXJ0c1szXSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInBhcnNlciIsImFsbG93IiwidmFsaWRhdGUiLCJzcWwiLCJwYXJzZSIsInZhbGlkIiwiZSIsImVyciIsInBhcnRzIiwibWVzc2FnZSIsInNwbGl0IiwibG9jIiwiaGFzaCIsImxpbmVzIiwibGluZSIsImZpcnN0X2xpbmUiLCJiYWQiLCJzdWJzdHJpbmciLCJmaXJzdF9jb2x1bW4iLCJsYXN0X2NvbHVtbiIsImluY2x1ZGVzIiwidG9VcHBlckNhc2UiLCJ0cmltIiwibmV4dExpbmUiLCJzdGFydHNXaXRoIiwiYmFkU2VjdGlvbiIsImVycm9yIiwic3RhcnRMaW5lIiwiZW5kTGluZSIsImxhc3RfbGluZSIsInN0YXJ0Q29sIiwiZW5kQ29sIiwiZXhwZWN0ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./data/validate.ts\n");

/***/ }),

/***/ "./hooks/useBuilderOptionChanges.ts":
/*!******************************************!*\
  !*** ./hooks/useBuilderOptionChanges.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBuilderOptionChanges: () => (/* binding */ useBuilderOptionChanges)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n/**\n * Returns a function that can apply changes with an object or a specific key in an object. When called\n * will run another function with the changes applied.\n * \n * Does not deep clone the object. This is used for top level fields on the QueryBuilderOptions type.\n * \n * @param onChange a function that receives the updated state from the change function\n * @param prevState the current (previous) state object\n * @returns a function used to apply changes to individual fields\n */ function useBuilderOptionChanges(onChange, prevState) {\n    return (key)=>(nextValue)=>{\n            const nextState = _object_spread_props(_object_spread({}, prevState), {\n                [key]: nextValue\n            });\n            onChange(nextState);\n        };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VCdWlsZGVyT3B0aW9uQ2hhbmdlcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBCO0FBSTFCOzs7Ozs7Ozs7Q0FTQyxHQUNNLFNBQVNDLHdCQUEyQkMsUUFBZ0MsRUFBRUMsU0FBWTtJQUN2RixPQUFPLENBQUNDLE1BQ04sQ0FBQ0M7WUFDRCxNQUFNQyxZQUFlLHdDQUNoQkg7Z0JBQ0gsQ0FBQ0MsSUFBSSxFQUFFQzs7WUFHVEgsU0FBU0k7UUFDWDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9ob29rcy91c2VCdWlsZGVyT3B0aW9uQ2hhbmdlcy50cz9lYjNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgb25PcHRpb25DaGFuZ2VGbjxUPiA9IChrZXk6IGtleW9mIFQpID0+IChuZXh0VmFsdWU6IFJlYWN0LlNldFN0YXRlQWN0aW9uPGFueT4pID0+IHZvaWQ7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGFwcGx5IGNoYW5nZXMgd2l0aCBhbiBvYmplY3Qgb3IgYSBzcGVjaWZpYyBrZXkgaW4gYW4gb2JqZWN0LiBXaGVuIGNhbGxlZFxuICogd2lsbCBydW4gYW5vdGhlciBmdW5jdGlvbiB3aXRoIHRoZSBjaGFuZ2VzIGFwcGxpZWQuXG4gKiBcbiAqIERvZXMgbm90IGRlZXAgY2xvbmUgdGhlIG9iamVjdC4gVGhpcyBpcyB1c2VkIGZvciB0b3AgbGV2ZWwgZmllbGRzIG9uIHRoZSBRdWVyeUJ1aWxkZXJPcHRpb25zIHR5cGUuXG4gKiBcbiAqIEBwYXJhbSBvbkNoYW5nZSBhIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIHVwZGF0ZWQgc3RhdGUgZnJvbSB0aGUgY2hhbmdlIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcHJldlN0YXRlIHRoZSBjdXJyZW50IChwcmV2aW91cykgc3RhdGUgb2JqZWN0XG4gKiBAcmV0dXJucyBhIGZ1bmN0aW9uIHVzZWQgdG8gYXBwbHkgY2hhbmdlcyB0byBpbmRpdmlkdWFsIGZpZWxkc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQnVpbGRlck9wdGlvbkNoYW5nZXM8VD4ob25DaGFuZ2U6IChuZXh0U3RhdGU6IFQpID0+IHZvaWQsIHByZXZTdGF0ZTogVCk6IG9uT3B0aW9uQ2hhbmdlRm48VD4ge1xuICByZXR1cm4gKGtleToga2V5b2YgVCkgPT5cbiAgICAobmV4dFZhbHVlOiBSZWFjdC5TZXRTdGF0ZUFjdGlvbjxhbnk+KSA9PiB7XG4gICAgY29uc3QgbmV4dFN0YXRlOiBUID0ge1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgW2tleV06IG5leHRWYWx1ZVxuICAgIH07XG4gICAgXG4gICAgb25DaGFuZ2UobmV4dFN0YXRlKTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUJ1aWxkZXJPcHRpb25DaGFuZ2VzIiwib25DaGFuZ2UiLCJwcmV2U3RhdGUiLCJrZXkiLCJuZXh0VmFsdWUiLCJuZXh0U3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./hooks/useBuilderOptionChanges.ts\n");

/***/ }),

/***/ "./hooks/useBuilderOptionsState.ts":
/*!*****************************************!*\
  !*** ./hooks/useBuilderOptionsState.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setAllOptions: () => (/* binding */ setAllOptions),\n/* harmony export */   setBuilderMinimized: () => (/* binding */ setBuilderMinimized),\n/* harmony export */   setColumnByHint: () => (/* binding */ setColumnByHint),\n/* harmony export */   setDatabase: () => (/* binding */ setDatabase),\n/* harmony export */   setOptions: () => (/* binding */ setOptions),\n/* harmony export */   setOtelEnabled: () => (/* binding */ setOtelEnabled),\n/* harmony export */   setOtelVersion: () => (/* binding */ setOtelVersion),\n/* harmony export */   setQueryType: () => (/* binding */ setQueryType),\n/* harmony export */   setTable: () => (/* binding */ setTable),\n/* harmony export */   testFuncs: () => (/* binding */ testFuncs),\n/* harmony export */   useBuilderOptionsState: () => (/* binding */ useBuilderOptionsState)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/sql */ \"./types/sql.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\nvar BuilderOptionsActionType;\n(function(BuilderOptionsActionType) {\n    BuilderOptionsActionType[\"SetOptions\"] = \"set_options\";\n    BuilderOptionsActionType[\"SetAllOptions\"] = \"set_all_options\";\n    BuilderOptionsActionType[\"SetQueryType\"] = \"set_query_type\";\n    BuilderOptionsActionType[\"SetDatabase\"] = \"set_database\";\n    BuilderOptionsActionType[\"SetTable\"] = \"set_table\";\n    BuilderOptionsActionType[\"SetOtelEnabled\"] = \"set_otel_enabled\";\n    BuilderOptionsActionType[\"SetOtelVersion\"] = \"set_otel_version\";\n    BuilderOptionsActionType[\"SetColumnByHint\"] = \"set_column_by_hint\";\n    BuilderOptionsActionType[\"SetBuilderMinimized\"] = \"set_builder_minimized\";\n})(BuilderOptionsActionType || (BuilderOptionsActionType = {}));\nconst createAction = (type, payload)=>({\n        type,\n        payload\n    });\nconst createGenericAction = (type, payload)=>({\n        type,\n        payload\n    });\nconst setOptions = (options)=>createAction(\"set_options\", options);\nconst setAllOptions = (options)=>createAction(\"set_all_options\", options);\nconst setQueryType = (queryType)=>createAction(\"set_query_type\", {\n        queryType\n    });\nconst setDatabase = (database)=>createAction(\"set_database\", {\n        database\n    });\nconst setTable = (table)=>createAction(\"set_table\", {\n        table\n    });\nconst setOtelEnabled = (otelEnabled)=>createAction(\"set_otel_enabled\", {\n        meta: {\n            otelEnabled\n        }\n    });\nconst setOtelVersion = (otelVersion)=>createAction(\"set_otel_version\", {\n        meta: {\n            otelVersion\n        }\n    });\nconst setColumnByHint = (column)=>createGenericAction(\"set_column_by_hint\", {\n        column\n    });\nconst setBuilderMinimized = (minimized)=>createGenericAction(\"set_builder_minimized\", {\n        minimized\n    });\nconst reducer = (state, action)=>{\n    const actionFn = actions.get(action.type);\n    if (!actionFn) {\n        throw Error('missing function for BuilderOptionsActionType: ' + action.type);\n    }\n    const nextState = actionFn(state, action);\n    // console.log('ACTION:', action.type, 'PAYLOAD:', action.payload, 'PREV STATE:', state, 'NEXT STATE:', nextState);\n    return nextState;\n};\n/**\n * A mapping between action type and reducer function, used in reducer to apply action changes.\n */ const actions = new Map([\n    [\n        \"set_options\",\n        (state, action)=>{\n            // A catch-all action for applying option changes.\n            const nextOptions = action.payload;\n            return mergeBuilderOptionsState(state, nextOptions);\n        }\n    ],\n    [\n        \"set_all_options\",\n        (state, action)=>{\n            // Resets existing state with provided options.\n            const nextOptions = action.payload;\n            return buildInitialState(nextOptions);\n        }\n    ],\n    [\n        \"set_query_type\",\n        (state, action)=>{\n            // If switching query type, reset the editor.\n            const nextQueryType = action.payload.queryType;\n            if (state.queryType !== nextQueryType) {\n                return buildInitialState({\n                    database: state.database,\n                    table: state.table,\n                    queryType: nextQueryType\n                });\n            }\n            return state;\n        }\n    ],\n    [\n        \"set_database\",\n        (state, action)=>{\n            // Clear table and reset editor when database changes\n            return buildInitialState({\n                database: action.payload.database,\n                table: '',\n                queryType: state.queryType\n            });\n        }\n    ],\n    [\n        \"set_table\",\n        (state, action)=>{\n            // Reset editor when table changes\n            return buildInitialState({\n                database: state.database,\n                table: action.payload.table,\n                queryType: state.queryType\n            });\n        }\n    ],\n    [\n        \"set_otel_enabled\",\n        (state, action)=>{\n            var _action_payload_meta;\n            return mergeBuilderOptionsState(state, {\n                meta: {\n                    otelEnabled: Boolean((_action_payload_meta = action.payload.meta) === null || _action_payload_meta === void 0 ? void 0 : _action_payload_meta.otelEnabled)\n                }\n            });\n        }\n    ],\n    [\n        \"set_otel_version\",\n        (state, action)=>{\n            var _action_payload_meta;\n            return mergeBuilderOptionsState(state, {\n                meta: {\n                    otelVersion: (_action_payload_meta = action.payload.meta) === null || _action_payload_meta === void 0 ? void 0 : _action_payload_meta.otelVersion\n                }\n            });\n        }\n    ],\n    [\n        \"set_column_by_hint\",\n        (state, action)=>{\n            const col = action.payload.column;\n            const nextColumns = (state.columns || []).filter((c)=>c.hint !== col.hint);\n            nextColumns.push(col);\n            return mergeBuilderOptionsState(state, {\n                columns: nextColumns\n            });\n        }\n    ],\n    [\n        \"set_builder_minimized\",\n        (state, action)=>{\n            const minimized = action.payload.minimized;\n            return mergeBuilderOptionsState(state, {\n                meta: {\n                    minimized\n                }\n            });\n        }\n    ]\n]);\nconst buildInitialState = (savedOptions)=>{\n    const defaultOptions = _types_sql__WEBPACK_IMPORTED_MODULE_1__.defaultCHBuilderQuery.builderOptions;\n    const initialState = _object_spread_props(_object_spread({}, defaultOptions, savedOptions), {\n        meta: _object_spread({}, defaultOptions.meta, savedOptions === null || savedOptions === void 0 ? void 0 : savedOptions.meta)\n    });\n    return initialState;\n};\nconst mergeBuilderOptionsState = (prevState, nextState)=>{\n    return _object_spread_props(_object_spread({}, prevState, nextState), {\n        meta: _object_spread({}, prevState.meta, nextState.meta)\n    });\n};\nconst useBuilderOptionsState = (savedOptions)=>{\n    const [state, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(reducer, savedOptions, buildInitialState);\n    return [\n        state,\n        dispatch\n    ];\n};\nconst testFuncs = {\n    reducer,\n    buildInitialState\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useBuilderOptionsState.ts\n");

/***/ }),

/***/ "./hooks/useColumns.ts":
/*!*****************************!*\
  !*** ./hooks/useColumns.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((datasource, database, table)=>{\n    const [columns, setColumns] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!datasource || !database || !table) {\n            return;\n        }\n        let ignore = false;\n        datasource.fetchColumns(database, table).then((columns)=>{\n            if (ignore) {\n                return;\n            }\n            setColumns(columns);\n        }).catch((ex)=>{\n            console.error(ex);\n        });\n        return ()=>{\n            ignore = true;\n        };\n    }, [\n        datasource,\n        database,\n        table\n    ]);\n    // Immediately return empty array on change so columns aren't stale\n    const lastDbTable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    const dbTable = database + table;\n    if (dbTable !== lastDbTable.current) {\n        lastDbTable.current = dbTable;\n        setColumns([]);\n        return [];\n    }\n    return columns;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VDb2x1bW5zLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUlwRCxpRUFBZSxDQUFDRyxZQUF3QkMsVUFBa0JDO0lBQ3hELE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxHQUFHUCwrQ0FBUUEsQ0FBeUIsRUFBRTtJQUVqRUMsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNFLGNBQWMsQ0FBQ0MsWUFBWSxDQUFDQyxPQUFPO1lBQ3RDO1FBQ0Y7UUFFQSxJQUFJRyxTQUFTO1FBQ2JMLFdBQVdNLFlBQVksQ0FBQ0wsVUFBVUMsT0FBT0ssSUFBSSxDQUFDSixDQUFBQTtZQUMxQyxJQUFJRSxRQUFRO2dCQUNWO1lBQ0Y7WUFDQUQsV0FBV0Q7UUFDYixHQUNDSyxLQUFLLENBQUMsQ0FBQ0M7WUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtRQUNoQjtRQUVGLE9BQU87WUFDTEosU0FBUztRQUNYO0lBQ0YsR0FBRztRQUFDTDtRQUFZQztRQUFVQztLQUFNO0lBRWhDLG1FQUFtRTtJQUNuRSxNQUFNVSxjQUFjYiw2Q0FBTUEsQ0FBUztJQUNuQyxNQUFNYyxVQUFVWixXQUFXQztJQUMzQixJQUFJVyxZQUFZRCxZQUFZRSxPQUFPLEVBQUU7UUFDbkNGLFlBQVlFLE9BQU8sR0FBR0Q7UUFDdEJULFdBQVcsRUFBRTtRQUNiLE9BQU8sRUFBRTtJQUNYO0lBRUEsT0FBT0Q7QUFDVCxHQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9ob29rcy91c2VDb2x1bW5zLnRzPzg2ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGFibGVDb2x1bW4gfSBmcm9tICd0eXBlcy9xdWVyeUJ1aWxkZXInO1xuaW1wb3J0IHsgRGF0YXNvdXJjZSB9IGZyb20gJ2RhdGEvQ0hEYXRhc291cmNlJztcblxuZXhwb3J0IGRlZmF1bHQgKGRhdGFzb3VyY2U6IERhdGFzb3VyY2UsIGRhdGFiYXNlOiBzdHJpbmcsIHRhYmxlOiBzdHJpbmcpOiByZWFkb25seSBUYWJsZUNvbHVtbltdID0+IHtcbiAgY29uc3QgW2NvbHVtbnMsIHNldENvbHVtbnNdID0gdXNlU3RhdGU8cmVhZG9ubHkgVGFibGVDb2x1bW5bXT4oW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkYXRhc291cmNlIHx8ICFkYXRhYmFzZSB8fCAhdGFibGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgaWdub3JlID0gZmFsc2U7XG4gICAgZGF0YXNvdXJjZS5mZXRjaENvbHVtbnMoZGF0YWJhc2UsIHRhYmxlKS50aGVuKGNvbHVtbnMgPT4ge1xuICAgICAgICBpZiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldENvbHVtbnMoY29sdW1ucyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChleDogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWdub3JlID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbZGF0YXNvdXJjZSwgZGF0YWJhc2UsIHRhYmxlXSk7XG5cbiAgLy8gSW1tZWRpYXRlbHkgcmV0dXJuIGVtcHR5IGFycmF5IG9uIGNoYW5nZSBzbyBjb2x1bW5zIGFyZW4ndCBzdGFsZVxuICBjb25zdCBsYXN0RGJUYWJsZSA9IHVzZVJlZjxzdHJpbmc+KCcnKTtcbiAgY29uc3QgZGJUYWJsZSA9IGRhdGFiYXNlICsgdGFibGU7XG4gIGlmIChkYlRhYmxlICE9PSBsYXN0RGJUYWJsZS5jdXJyZW50KSB7XG4gICAgbGFzdERiVGFibGUuY3VycmVudCA9IGRiVGFibGU7XG4gICAgc2V0Q29sdW1ucyhbXSk7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59O1xuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlUmVmIiwiZGF0YXNvdXJjZSIsImRhdGFiYXNlIiwidGFibGUiLCJjb2x1bW5zIiwic2V0Q29sdW1ucyIsImlnbm9yZSIsImZldGNoQ29sdW1ucyIsInRoZW4iLCJjYXRjaCIsImV4IiwiY29uc29sZSIsImVycm9yIiwibGFzdERiVGFibGUiLCJkYlRhYmxlIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/useColumns.ts\n");

/***/ }),

/***/ "./hooks/useDatabases.ts":
/*!*******************************!*\
  !*** ./hooks/useDatabases.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((datasource)=>{\n    const [databases, setDatabases] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!datasource) {\n            return;\n        }\n        datasource.fetchDatabases().then((databases)=>setDatabases(databases)).catch((ex)=>{\n            console.error('Failed to fetch databases', ex);\n        });\n    }, [\n        datasource\n    ]);\n    return databases;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VEYXRhYmFzZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBRzVDLGlFQUFlLENBQUNFO0lBQ2QsTUFBTSxDQUFDQyxXQUFXQyxhQUFhLEdBQUdKLCtDQUFRQSxDQUFXLEVBQUU7SUFFdkRDLGdEQUFTQSxDQUFDO1FBQ1IsSUFBSSxDQUFDQyxZQUFZO1lBQ2Y7UUFDRjtRQUVBQSxXQUNFRyxjQUFjLEdBQ2RDLElBQUksQ0FBQ0gsQ0FBQUEsWUFBYUMsYUFBYUQsWUFDL0JJLEtBQUssQ0FBQyxDQUFDQztZQUNMQyxRQUFRQyxLQUFLLENBQUMsNkJBQTZCRjtRQUM3QztJQUNGLEdBQUc7UUFBQ047S0FBVztJQUVmLE9BQU9DO0FBQ1gsR0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vaG9va3MvdXNlRGF0YWJhc2VzLnRzP2Y1ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERhdGFzb3VyY2UgfSBmcm9tICdkYXRhL0NIRGF0YXNvdXJjZSc7XG5cbmV4cG9ydCBkZWZhdWx0IChkYXRhc291cmNlOiBEYXRhc291cmNlKTogcmVhZG9ubHkgc3RyaW5nW10gPT4ge1xuICBjb25zdCBbZGF0YWJhc2VzLCBzZXREYXRhYmFzZXNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTsgXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWRhdGFzb3VyY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkYXRhc291cmNlLlxuICAgICAgZmV0Y2hEYXRhYmFzZXMoKS5cbiAgICAgIHRoZW4oZGF0YWJhc2VzID0+IHNldERhdGFiYXNlcyhkYXRhYmFzZXMpKS5cbiAgICAgIGNhdGNoKChleDogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBkYXRhYmFzZXMnLCBleCk7XG4gICAgICB9KTtcbiAgICB9LCBbZGF0YXNvdXJjZV0pO1xuICAgIFxuICAgIHJldHVybiBkYXRhYmFzZXM7XG59XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJkYXRhc291cmNlIiwiZGF0YWJhc2VzIiwic2V0RGF0YWJhc2VzIiwiZmV0Y2hEYXRhYmFzZXMiLCJ0aGVuIiwiY2F0Y2giLCJleCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/useDatabases.ts\n");

/***/ }),

/***/ "./hooks/useIsNewQuery.ts":
/*!********************************!*\
  !*** ./hooks/useIsNewQuery.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/utils */ \"./data/utils.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * Returns true if the initial builderOptions represent a new query.\n * Returns false if the query was loaded from a saved URL or dashboard.\n * \n * Does not update on re-renders\n */ /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((builderOptions)=>{\n    const isNewQuery = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!(0,_data_utils__WEBPACK_IMPORTED_MODULE_0__.isBuilderOptionsRunnable)(builderOptions));\n    return isNewQuery.current;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VJc05ld1F1ZXJ5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBc0Q7QUFDeEI7QUFHOUI7Ozs7O0NBS0MsR0FDRCxpRUFBZSxDQUFDRTtJQUNkLE1BQU1DLGFBQWFGLDZDQUFNQSxDQUFVLENBQUNELHFFQUF3QkEsQ0FBQ0U7SUFDN0QsT0FBT0MsV0FBV0MsT0FBTztBQUMzQixHQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9ob29rcy91c2VJc05ld1F1ZXJ5LnRzPzNkNmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCdWlsZGVyT3B0aW9uc1J1bm5hYmxlIH0gZnJvbSBcImRhdGEvdXRpbHNcIjtcbmltcG9ydCB7IHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBRdWVyeUJ1aWxkZXJPcHRpb25zIH0gZnJvbSBcInR5cGVzL3F1ZXJ5QnVpbGRlclwiO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgaW5pdGlhbCBidWlsZGVyT3B0aW9ucyByZXByZXNlbnQgYSBuZXcgcXVlcnkuXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHRoZSBxdWVyeSB3YXMgbG9hZGVkIGZyb20gYSBzYXZlZCBVUkwgb3IgZGFzaGJvYXJkLlxuICogXG4gKiBEb2VzIG5vdCB1cGRhdGUgb24gcmUtcmVuZGVyc1xuICovXG5leHBvcnQgZGVmYXVsdCAoYnVpbGRlck9wdGlvbnM6IFF1ZXJ5QnVpbGRlck9wdGlvbnMpOiBib29sZWFuID0+IHtcbiAgY29uc3QgaXNOZXdRdWVyeSA9IHVzZVJlZjxib29sZWFuPighaXNCdWlsZGVyT3B0aW9uc1J1bm5hYmxlKGJ1aWxkZXJPcHRpb25zKSk7XG4gIHJldHVybiBpc05ld1F1ZXJ5LmN1cnJlbnQ7XG59XG4iXSwibmFtZXMiOlsiaXNCdWlsZGVyT3B0aW9uc1J1bm5hYmxlIiwidXNlUmVmIiwiYnVpbGRlck9wdGlvbnMiLCJpc05ld1F1ZXJ5IiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/useIsNewQuery.ts\n");

/***/ }),

/***/ "./hooks/useTables.ts":
/*!****************************!*\
  !*** ./hooks/useTables.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((datasource, database)=>{\n    const [tables, setTables] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!datasource || !database) {\n            return;\n        }\n        let ignore = false;\n        datasource.fetchTables(database).then((tables)=>{\n            if (ignore) {\n                return;\n            }\n            setTables(tables);\n        }).catch((ex)=>{\n            console.error('Failed to fetch tables for database:', database, ex);\n        });\n        return ()=>{\n            ignore = true;\n        };\n    }, [\n        datasource,\n        database\n    ]);\n    // Immediately return empty array on change so tables aren't stale\n    const lastDatabase = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    if (database !== lastDatabase.current) {\n        lastDatabase.current = database;\n        setTables([]);\n        return [];\n    }\n    return tables;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VUYWJsZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW9EO0FBR3BELGlFQUFlLENBQUNHLFlBQXdCQztJQUN0QyxNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR04sK0NBQVFBLENBQVcsRUFBRTtJQUVqREMsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNFLGNBQWMsQ0FBQ0MsVUFBVTtZQUM1QjtRQUNGO1FBRUEsSUFBSUcsU0FBUztRQUNiSixXQUNFSyxXQUFXLENBQUNKLFVBQ1pLLElBQUksQ0FBQ0osQ0FBQUE7WUFDSCxJQUFJRSxRQUFRO2dCQUNWO1lBQ0Y7WUFDQUQsVUFBVUQ7UUFDWixHQUNBSyxLQUFLLENBQUMsQ0FBQ0M7WUFDTEMsUUFBUUMsS0FBSyxDQUFDLHdDQUF3Q1QsVUFBVU87UUFDbEU7UUFFRixPQUFPO1lBQ0xKLFNBQVM7UUFDWDtJQUNGLEdBQUc7UUFBQ0o7UUFBWUM7S0FBUztJQUV6QixrRUFBa0U7SUFDbEUsTUFBTVUsZUFBZVosNkNBQU1BLENBQVM7SUFDcEMsSUFBSUUsYUFBYVUsYUFBYUMsT0FBTyxFQUFFO1FBQ3JDRCxhQUFhQyxPQUFPLEdBQUdYO1FBQ3ZCRSxVQUFVLEVBQUU7UUFDWixPQUFPLEVBQUU7SUFDWDtJQUVBLE9BQU9EO0FBQ1QsR0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vaG9va3MvdXNlVGFibGVzLnRzP2YyZDYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGF0YXNvdXJjZSB9IGZyb20gJ2RhdGEvQ0hEYXRhc291cmNlJztcblxuZXhwb3J0IGRlZmF1bHQgKGRhdGFzb3VyY2U6IERhdGFzb3VyY2UsIGRhdGFiYXNlOiBzdHJpbmcpOiByZWFkb25seSBzdHJpbmdbXSA9PiB7XG4gIGNvbnN0IFt0YWJsZXMsIHNldFRhYmxlc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pOyBcbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkYXRhc291cmNlIHx8ICFkYXRhYmFzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBpZ25vcmUgPSBmYWxzZTtcbiAgICBkYXRhc291cmNlLlxuICAgICAgZmV0Y2hUYWJsZXMoZGF0YWJhc2UpLlxuICAgICAgdGhlbih0YWJsZXMgPT4ge1xuICAgICAgICBpZiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldFRhYmxlcyh0YWJsZXMpO1xuICAgICAgfSkuXG4gICAgICBjYXRjaCgoZXg6IGFueSkgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggdGFibGVzIGZvciBkYXRhYmFzZTonLCBkYXRhYmFzZSwgZXgpO1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWdub3JlID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbZGF0YXNvdXJjZSwgZGF0YWJhc2VdKTtcblxuICAvLyBJbW1lZGlhdGVseSByZXR1cm4gZW1wdHkgYXJyYXkgb24gY2hhbmdlIHNvIHRhYmxlcyBhcmVuJ3Qgc3RhbGVcbiAgY29uc3QgbGFzdERhdGFiYXNlID0gdXNlUmVmPHN0cmluZz4oJycpO1xuICBpZiAoZGF0YWJhc2UgIT09IGxhc3REYXRhYmFzZS5jdXJyZW50KSB7XG4gICAgbGFzdERhdGFiYXNlLmN1cnJlbnQgPSBkYXRhYmFzZTtcbiAgICBzZXRUYWJsZXMoW10pO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiB0YWJsZXM7XG59XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJkYXRhc291cmNlIiwiZGF0YWJhc2UiLCJ0YWJsZXMiLCJzZXRUYWJsZXMiLCJpZ25vcmUiLCJmZXRjaFRhYmxlcyIsInRoZW4iLCJjYXRjaCIsImV4IiwiY29uc29sZSIsImVycm9yIiwibGFzdERhdGFiYXNlIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/useTables.ts\n");

/***/ }),

/***/ "./hooks/useUniqueMapKeys.ts":
/*!***********************************!*\
  !*** ./hooks/useUniqueMapKeys.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((datasource, mapColumn, database, table)=>{\n    const [keys, setKeys] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!datasource || !mapColumn || !database || !table) {\n            return;\n        }\n        let ignore = false;\n        datasource.fetchUniqueMapKeys(mapColumn, database, table).then((tables)=>{\n            if (ignore) {\n                return;\n            }\n            setKeys(tables);\n        }).catch((ex)=>{\n            console.error('Failed to fetch map keys for column:', mapColumn, database, table, ex);\n        });\n        return ()=>{\n            ignore = true;\n        };\n    }, [\n        datasource,\n        mapColumn,\n        database,\n        table\n    ]);\n    // Immediately return empty array on change so keys aren't stale\n    const lastDatabase = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    const lastTable = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)('');\n    if (database !== lastDatabase.current || table !== lastTable.current) {\n        lastDatabase.current = database;\n        lastTable.current = table;\n        setKeys([]);\n        return [];\n    }\n    return keys;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob29rcy91c2VVbmlxdWVNYXBLZXlzLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUdwRCxpRUFBZSxDQUFDRyxZQUF3QkMsV0FBbUJDLFVBQWtCQztJQUMzRSxNQUFNLENBQUNDLE1BQU1DLFFBQVEsR0FBR1IsK0NBQVFBLENBQVcsRUFBRTtJQUU3Q0MsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNFLGNBQWMsQ0FBQ0MsYUFBYSxDQUFDQyxZQUFZLENBQUNDLE9BQU87WUFDcEQ7UUFDRjtRQUVBLElBQUlHLFNBQVM7UUFDYk4sV0FDRU8sa0JBQWtCLENBQUNOLFdBQVdDLFVBQVVDLE9BQ3hDSyxJQUFJLENBQUNDLENBQUFBO1lBQ0gsSUFBSUgsUUFBUTtnQkFDVjtZQUNGO1lBQ0FELFFBQVFJO1FBQ1YsR0FDQUMsS0FBSyxDQUFDLENBQUNDO1lBQ0xDLFFBQVFDLEtBQUssQ0FBQyx3Q0FBd0NaLFdBQVdDLFVBQVVDLE9BQU9RO1FBQ3BGO1FBRUYsT0FBTztZQUNMTCxTQUFTO1FBQ1g7SUFDRixHQUFHO1FBQUNOO1FBQVlDO1FBQVdDO1FBQVVDO0tBQU07SUFFM0MsZ0VBQWdFO0lBQ2hFLE1BQU1XLGVBQWVmLDZDQUFNQSxDQUFTO0lBQ3BDLE1BQU1nQixZQUFZaEIsNkNBQU1BLENBQVM7SUFDakMsSUFBSUcsYUFBYVksYUFBYUUsT0FBTyxJQUFJYixVQUFVWSxVQUFVQyxPQUFPLEVBQUU7UUFDcEVGLGFBQWFFLE9BQU8sR0FBR2Q7UUFDdkJhLFVBQVVDLE9BQU8sR0FBR2I7UUFDcEJFLFFBQVEsRUFBRTtRQUNWLE9BQU8sRUFBRTtJQUNYO0lBRUEsT0FBT0Q7QUFDVCxHQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi9ob29rcy91c2VVbmlxdWVNYXBLZXlzLnRzPzA3N2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGF0YXNvdXJjZSB9IGZyb20gJ2RhdGEvQ0hEYXRhc291cmNlJztcblxuZXhwb3J0IGRlZmF1bHQgKGRhdGFzb3VyY2U6IERhdGFzb3VyY2UsIG1hcENvbHVtbjogc3RyaW5nLCBkYXRhYmFzZTogc3RyaW5nLCB0YWJsZTogc3RyaW5nKTogcmVhZG9ubHkgc3RyaW5nW10gPT4ge1xuICBjb25zdCBba2V5cywgc2V0S2V5c10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pOyBcbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFkYXRhc291cmNlIHx8ICFtYXBDb2x1bW4gfHwgIWRhdGFiYXNlIHx8ICF0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBpZ25vcmUgPSBmYWxzZTtcbiAgICBkYXRhc291cmNlLlxuICAgICAgZmV0Y2hVbmlxdWVNYXBLZXlzKG1hcENvbHVtbiwgZGF0YWJhc2UsIHRhYmxlKS5cbiAgICAgIHRoZW4odGFibGVzID0+IHtcbiAgICAgICAgaWYgKGlnbm9yZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXRLZXlzKHRhYmxlcyk7XG4gICAgICB9KS5cbiAgICAgIGNhdGNoKChleDogYW55KSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBtYXAga2V5cyBmb3IgY29sdW1uOicsIG1hcENvbHVtbiwgZGF0YWJhc2UsIHRhYmxlLCBleCk7XG4gICAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZ25vcmUgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtkYXRhc291cmNlLCBtYXBDb2x1bW4sIGRhdGFiYXNlLCB0YWJsZV0pO1xuXG4gIC8vIEltbWVkaWF0ZWx5IHJldHVybiBlbXB0eSBhcnJheSBvbiBjaGFuZ2Ugc28ga2V5cyBhcmVuJ3Qgc3RhbGVcbiAgY29uc3QgbGFzdERhdGFiYXNlID0gdXNlUmVmPHN0cmluZz4oJycpO1xuICBjb25zdCBsYXN0VGFibGUgPSB1c2VSZWY8c3RyaW5nPignJyk7XG4gIGlmIChkYXRhYmFzZSAhPT0gbGFzdERhdGFiYXNlLmN1cnJlbnQgfHwgdGFibGUgIT09IGxhc3RUYWJsZS5jdXJyZW50KSB7XG4gICAgbGFzdERhdGFiYXNlLmN1cnJlbnQgPSBkYXRhYmFzZTtcbiAgICBsYXN0VGFibGUuY3VycmVudCA9IHRhYmxlO1xuICAgIHNldEtleXMoW10pO1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlUmVmIiwiZGF0YXNvdXJjZSIsIm1hcENvbHVtbiIsImRhdGFiYXNlIiwidGFibGUiLCJrZXlzIiwic2V0S2V5cyIsImlnbm9yZSIsImZldGNoVW5pcXVlTWFwS2V5cyIsInRoZW4iLCJ0YWJsZXMiLCJjYXRjaCIsImV4IiwiY29uc29sZSIsImVycm9yIiwibGFzdERhdGFiYXNlIiwibGFzdFRhYmxlIiwiY3VycmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./hooks/useUniqueMapKeys.ts\n");

/***/ }),

/***/ "./labels.ts":
/*!*******************!*\
  !*** ./labels.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/queryBuilder */ \"./types/queryBuilder.ts\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    components: {\n        Config: {\n            ConfigEditor: {\n                serverAddress: {\n                    label: 'Server address',\n                    placeholder: 'Server address',\n                    tooltip: 'ClickHouse host address',\n                    error: 'Server address required'\n                },\n                serverPort: {\n                    label: 'Server port',\n                    insecureNativePort: '9000',\n                    insecureHttpPort: '8123',\n                    secureNativePort: '9440',\n                    secureHttpPort: '8443',\n                    tooltip: 'ClickHouse server port',\n                    error: 'Port is required'\n                },\n                path: {\n                    label: 'HTTP URL Path',\n                    tooltip: 'Additional URL path for HTTP requests',\n                    placeholder: 'additional-path'\n                },\n                protocol: {\n                    label: 'Protocol',\n                    tooltip: 'Native or HTTP for server protocol'\n                },\n                username: {\n                    label: 'Username',\n                    placeholder: 'default',\n                    tooltip: 'ClickHouse username'\n                },\n                password: {\n                    label: 'Password',\n                    placeholder: 'password',\n                    tooltip: 'ClickHouse password'\n                },\n                tlsSkipVerify: {\n                    label: 'Skip TLS Verify',\n                    tooltip: 'Skip TLS Verify'\n                },\n                tlsClientAuth: {\n                    label: 'TLS Client Auth',\n                    tooltip: 'TLS Client Auth'\n                },\n                tlsAuthWithCACert: {\n                    label: 'With CA Cert',\n                    tooltip: 'Needed for verifying self-signed TLS Certs'\n                },\n                tlsCACert: {\n                    label: 'CA Cert',\n                    placeholder: 'CA Cert. Begins with -----BEGIN CERTIFICATE-----'\n                },\n                tlsClientCert: {\n                    label: 'Client Cert',\n                    placeholder: 'Client Cert. Begins with -----BEGIN CERTIFICATE-----'\n                },\n                tlsClientKey: {\n                    label: 'Client Key',\n                    placeholder: 'Client Key. Begins with -----BEGIN RSA PRIVATE KEY-----'\n                },\n                secure: {\n                    label: 'Secure Connection',\n                    tooltip: 'Toggle on if the connection is secure'\n                },\n                secureSocksProxy: {\n                    label: 'Enable Secure Socks Proxy',\n                    tooltip: 'Enable proxying the datasource connection through the secure socks proxy to a different network.'\n                }\n            },\n            HttpHeadersConfig: {\n                title: 'HTTP Headers',\n                label: 'Custom HTTP Headers',\n                description: 'Add Custom HTTP headers when querying the database',\n                headerNameLabel: 'Header Name',\n                headerNamePlaceholder: 'X-Custom-Header',\n                insecureHeaderValueLabel: 'Header Value',\n                secureHeaderValueLabel: 'Secure Header Value',\n                secureLabel: 'Secure',\n                addHeaderLabel: 'Add Header',\n                forwardGrafanaHeaders: {\n                    label: 'Forward Grafana HTTP Headers',\n                    tooltip: 'Forward Grafana HTTP Headers to datasource.'\n                }\n            },\n            AliasTableConfig: {\n                title: 'Column Alias Tables',\n                descriptionParts: [\n                    'Provide alias tables with a',\n                    '(`alias` String, `select` String, `type` String)',\n                    'schema to use as a source for column selection.'\n                ],\n                addTableLabel: 'Add Table',\n                targetDatabaseLabel: 'Target Database',\n                targetDatabasePlaceholder: '(optional)',\n                targetTableLabel: 'Target Table',\n                aliasDatabaseLabel: 'Alias Database',\n                aliasDatabasePlaceholder: '(optional)',\n                aliasTableLabel: 'Alias Table'\n            },\n            DefaultDatabaseTableConfig: {\n                title: 'Default DB and table',\n                database: {\n                    label: 'Default database',\n                    description: 'the default database used by the query builder',\n                    name: 'defaultDatabase',\n                    placeholder: 'default'\n                },\n                table: {\n                    label: 'Default table',\n                    description: 'the default table used by the query builder',\n                    name: 'defaultTable',\n                    placeholder: 'table'\n                }\n            },\n            QuerySettingsConfig: {\n                title: 'Query settings',\n                dialTimeout: {\n                    label: 'Dial Timeout (seconds)',\n                    tooltip: 'Timeout in seconds for connection',\n                    name: 'dialTimeout',\n                    placeholder: '10'\n                },\n                queryTimeout: {\n                    label: 'Query Timeout (seconds)',\n                    tooltip: 'Timeout in seconds for read queries',\n                    name: 'queryTimeout',\n                    placeholder: '60'\n                },\n                validateSql: {\n                    label: 'Validate SQL',\n                    tooltip: 'Validate SQL in the editor.'\n                }\n            },\n            TracesConfig: {\n                title: 'Traces configuration',\n                description: '(Optional) Default settings for trace queries',\n                defaultDatabase: {\n                    label: 'Default trace database',\n                    description: 'the default database used by the trace query builder',\n                    name: 'defaultDatabase',\n                    placeholder: 'default'\n                },\n                defaultTable: {\n                    label: 'Default trace table',\n                    description: 'the default table used by the trace query builder',\n                    name: 'defaultTable'\n                },\n                columns: {\n                    title: 'Default columns',\n                    description: 'Default columns for trace queries. Leave empty to disable.',\n                    traceId: {\n                        label: 'Trace ID column',\n                        tooltip: 'Column for the trace ID'\n                    },\n                    spanId: {\n                        label: 'Span ID column',\n                        tooltip: 'Column for the span ID'\n                    },\n                    parentSpanId: {\n                        label: 'Parent Span ID column',\n                        tooltip: 'Column for the parent span ID'\n                    },\n                    serviceName: {\n                        label: 'Service Name column',\n                        tooltip: 'Column for the service name'\n                    },\n                    operationName: {\n                        label: 'Operation Name column',\n                        tooltip: 'Column for the operation name'\n                    },\n                    startTime: {\n                        label: 'Start Time column',\n                        tooltip: 'Column for the start time'\n                    },\n                    durationTime: {\n                        label: 'Duration Time column',\n                        tooltip: 'Column for the duration time'\n                    },\n                    tags: {\n                        label: 'Tags column',\n                        tooltip: 'Column for the trace tags'\n                    },\n                    serviceTags: {\n                        label: 'Service Tags column',\n                        tooltip: 'Column for the service tags'\n                    }\n                }\n            },\n            LogsConfig: {\n                title: 'Logs configuration',\n                description: '(Optional) default settings for log queries',\n                defaultDatabase: {\n                    label: 'Default log database',\n                    description: 'the default database used by the logs query builder',\n                    name: 'defaultDatabase',\n                    placeholder: 'default'\n                },\n                defaultTable: {\n                    label: 'Default log table',\n                    description: 'the default table used by the logs query builder',\n                    name: 'defaultTable'\n                },\n                columns: {\n                    title: 'Default columns',\n                    description: 'Default columns for log queries. Leave empty to disable.',\n                    time: {\n                        label: 'Time column',\n                        tooltip: 'Column for the log timestamp'\n                    },\n                    level: {\n                        label: 'Log Level column',\n                        tooltip: 'Column for the log level'\n                    },\n                    message: {\n                        label: 'Log Message column',\n                        tooltip: 'Column for log message'\n                    }\n                },\n                contextColumns: {\n                    title: 'Context columns',\n                    description: 'These columns are used to narrow down a single log row to its original service/container/pod source. At least one is required for the log context feature to work.',\n                    selectContextColumns: {\n                        label: 'Auto-Select Columns',\n                        tooltip: 'When enabled, will always include context columns in log queries'\n                    },\n                    columns: {\n                        label: 'Context Columns',\n                        tooltip: 'Comma separated list of column names to use for identifying a log\\'s source',\n                        placeholder: 'Column name (enter key to add)'\n                    }\n                }\n            }\n        },\n        EditorTypeSwitcher: {\n            label: 'Editor Type',\n            tooltip: 'Switches between the raw SQL Editor and the Query Builder.',\n            switcher: {\n                title: 'Are you sure?',\n                body: 'Queries that are too complex for the Query Builder will be altered.',\n                confirmText: 'Continue',\n                dismissText: 'Cancel'\n            },\n            cannotConvert: {\n                title: 'Cannot convert',\n                message: 'Do you want to delete your current query and use the query builder?',\n                confirmText: 'Yes'\n            }\n        },\n        expandBuilderButton: {\n            label: 'Show full query',\n            tooltip: 'Shows the full query builder'\n        },\n        QueryTypeSwitcher: {\n            label: 'Query Type',\n            tooltip: 'Sets the layout for the query builder',\n            sqlTooltip: 'Sets the panel type for explore view'\n        },\n        DatabaseSelect: {\n            label: 'Database',\n            tooltip: 'ClickHouse database to query from',\n            empty: '<select database>'\n        },\n        TableSelect: {\n            label: 'Table',\n            tooltip: 'ClickHouse table to query from',\n            empty: '<select table>'\n        },\n        ColumnsEditor: {\n            label: 'Columns',\n            tooltip: 'A list of columns to include in the query'\n        },\n        OtelVersionSelect: {\n            label: 'Use OTel',\n            tooltip: 'Enables Open Telemetry schema versioning'\n        },\n        LimitEditor: {\n            label: 'Limit',\n            tooltip: 'Limits the number of rows returned by the query'\n        },\n        SqlPreview: {\n            label: 'SQL Preview',\n            tooltip: 'Preview of the generated SQL. You can safely switch to SQL Editor to customize the generated query'\n        },\n        AggregatesEditor: {\n            label: 'Aggregates',\n            tooltip: 'Aggregate functions to use',\n            aliasLabel: 'as',\n            aliasTooltip: 'alias for this aggregate function',\n            addLabel: 'Aggregate'\n        },\n        OrderByEditor: {\n            label: 'Order By',\n            tooltip: 'Order by column',\n            addLabel: 'Order By'\n        },\n        FilterEditor: {\n            label: 'Filters',\n            tooltip: `List of filters`,\n            addLabel: 'Filter',\n            mapKeyPlaceholder: 'map key'\n        },\n        GroupByEditor: {\n            label: 'Group By',\n            tooltip: 'Group the results by specific column'\n        },\n        LogsQueryBuilder: {\n            logTimeColumn: {\n                label: 'Time',\n                tooltip: 'Column that contains the log timestamp'\n            },\n            logLevelColumn: {\n                label: 'Log Level',\n                tooltip: 'Column that contains the log level'\n            },\n            logMessageColumn: {\n                label: 'Message',\n                tooltip: 'Column that contains the log message'\n            },\n            logLabelsColumn: {\n                label: 'Labels',\n                tooltip: 'A column with a key/value structure for log labels'\n            },\n            liveView: {\n                label: 'Live View',\n                tooltip: 'Enable to update logs in real time'\n            },\n            logMessageFilter: {\n                label: 'Message Filter',\n                tooltip: 'Applies a LIKE filter to the log message body',\n                clearButton: 'Clear'\n            },\n            logLevelFilter: {\n                label: 'Level Filter',\n                tooltip: 'Applies a filter to the log level'\n            }\n        },\n        TimeSeriesQueryBuilder: {\n            simpleQueryModeLabel: 'Simple',\n            aggregateQueryModeLabel: 'Aggregate',\n            builderModeLabel: 'Builder Mode',\n            builderModeTooltip: 'Switches the query builder between the simple and aggregate modes',\n            timeColumn: {\n                label: 'Time',\n                tooltip: 'Column to use for the time series'\n            }\n        },\n        TableQueryBuilder: {\n            simpleQueryModeLabel: 'Simple',\n            aggregateQueryModeLabel: 'Aggregate',\n            builderModeLabel: 'Builder Mode',\n            builderModeTooltip: 'Switches the query builder between the simple and aggregate modes'\n        },\n        TraceQueryBuilder: {\n            traceIdModeLabel: 'Trace ID',\n            traceSearchModeLabel: 'Trace Search',\n            traceModeLabel: 'Trace Mode',\n            traceModeTooltip: 'Switches between trace ID and trace search mode',\n            columnsSection: 'Columns',\n            filtersSection: 'Filters',\n            columns: {\n                traceId: {\n                    label: 'Trace ID Column',\n                    tooltip: 'Column that contains the trace ID'\n                },\n                spanId: {\n                    label: 'Span ID Column',\n                    tooltip: 'Column that contains the span ID'\n                },\n                parentSpanId: {\n                    label: 'Parent Span ID Column',\n                    tooltip: 'Column that contains the parent span ID'\n                },\n                serviceName: {\n                    label: 'Service Name Column',\n                    tooltip: 'Column that contains the service name'\n                },\n                operationName: {\n                    label: 'Operation Name Column',\n                    tooltip: 'Column that contains the operation name'\n                },\n                startTime: {\n                    label: 'Start Time Column',\n                    tooltip: 'Column that contains the start time'\n                },\n                durationTime: {\n                    label: 'Duration Time Column',\n                    tooltip: 'Column that contains the duration time'\n                },\n                durationUnit: {\n                    label: 'Duration Unit',\n                    tooltip: 'The unit of time used for the duration time'\n                },\n                tags: {\n                    label: 'Tags Column',\n                    tooltip: 'Column that contains the trace tags'\n                },\n                serviceTags: {\n                    label: 'Service Tags Column',\n                    tooltip: 'Column that contains the service tags'\n                },\n                traceIdFilter: {\n                    label: 'Trace ID',\n                    tooltip: 'filter by a specific trace ID'\n                }\n            }\n        }\n    },\n    types: {\n        EditorType: {\n            sql: 'SQL Editor',\n            builder: 'Query Builder'\n        },\n        QueryType: {\n            table: 'Table',\n            logs: 'Logs',\n            timeseries: 'Time Series',\n            traces: 'Traces'\n        },\n        ColumnHint: {\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time]: 'Time',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel]: 'Level',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogMessage]: 'Message',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLabels]: 'Labels',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId]: 'Trace ID',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceSpanId]: 'Span ID',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceParentSpanId]: 'Parent Span ID',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceName]: 'Service Name',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceOperationName]: 'Operation Name',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceDurationTime]: 'Duration Time',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceTags]: 'Tags',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceTags]: 'Service Tags',\n            [_types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceStatusCode]: 'Status Code'\n        }\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./labels.ts\n");

/***/ }),

/***/ "./otel.ts":
/*!*****************!*\
  !*** ./otel.ts ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultLogsTable: () => (/* binding */ defaultLogsTable),\n/* harmony export */   defaultTraceTable: () => (/* binding */ defaultTraceTable),\n/* harmony export */   getLatestVersion: () => (/* binding */ getLatestVersion),\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   traceTimestampTableSuffix: () => (/* binding */ traceTimestampTableSuffix),\n/* harmony export */   versions: () => (/* binding */ versions)\n/* harmony export */ });\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types/queryBuilder */ \"./types/queryBuilder.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\nconst defaultLogsTable = 'otel_logs';\nconst defaultTraceTable = 'otel_traces';\nconst traceTimestampTableSuffix = '_trace_id_ts';\nconst otel129 = {\n    name: '1.2.9',\n    version: '1.29.0',\n    specUrl: 'https://opentelemetry.io/docs/specs/otel',\n    logsTable: defaultLogsTable,\n    logColumnMap: new Map([\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time,\n            'Timestamp'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogMessage,\n            'Body'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLevel,\n            'SeverityText'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.LogLabels,\n            'LogAttributes'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId,\n            'TraceId'\n        ]\n    ]),\n    logLevels: [\n        'TRACE',\n        'DEBUG',\n        'INFO',\n        'WARN',\n        'ERROR',\n        'FATAL'\n    ],\n    traceTable: defaultTraceTable,\n    traceColumnMap: new Map([\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.Time,\n            'Timestamp'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceId,\n            'TraceId'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceSpanId,\n            'SpanId'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceParentSpanId,\n            'ParentSpanId'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceName,\n            'ServiceName'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceOperationName,\n            'SpanName'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceDurationTime,\n            'Duration'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceTags,\n            'SpanAttributes'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceServiceTags,\n            'ResourceAttributes'\n        ],\n        [\n            _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.ColumnHint.TraceStatusCode,\n            'StatusCode'\n        ]\n    ]),\n    traceDurationUnit: _types_queryBuilder__WEBPACK_IMPORTED_MODULE_0__.TimeUnit.Nanoseconds\n};\nconst versions = [\n    // When selected, will always keep OTEL config up to date as new versions are added\n    _object_spread_props(_object_spread({}, otel129), {\n        name: `latest (${otel129.name})`,\n        version: 'latest'\n    }),\n    otel129\n];\nconst getLatestVersion = ()=>versions[0];\nconst getVersion = (version)=>{\n    if (!version) {\n        return;\n    }\n    return versions.find((v)=>v.version === version);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    traceTimestampTableSuffix,\n    versions,\n    getLatestVersion,\n    getVersion\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9vdGVsLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwRDtBQUVuRCxNQUFNRSxtQkFBbUIsWUFBWTtBQUNyQyxNQUFNQyxvQkFBb0IsY0FBYztBQUV4QyxNQUFNQyw0QkFBNEIsZUFBZTtBQWN4RCxNQUFNQyxVQUF1QjtJQUMzQkMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsV0FBV1A7SUFDWFEsY0FBYyxJQUFJQyxJQUF3QjtRQUN4QztZQUFDWCwyREFBVUEsQ0FBQ1ksSUFBSTtZQUFFO1NBQVk7UUFDOUI7WUFBQ1osMkRBQVVBLENBQUNhLFVBQVU7WUFBRTtTQUFPO1FBQy9CO1lBQUNiLDJEQUFVQSxDQUFDYyxRQUFRO1lBQUU7U0FBZTtRQUNyQztZQUFDZCwyREFBVUEsQ0FBQ2UsU0FBUztZQUFFO1NBQWdCO1FBQ3ZDO1lBQUNmLDJEQUFVQSxDQUFDZ0IsT0FBTztZQUFFO1NBQVU7S0FDaEM7SUFDREMsV0FBVztRQUNUO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0RDLFlBQVlmO0lBQ1pnQixnQkFBZ0IsSUFBSVIsSUFBd0I7UUFDMUM7WUFBQ1gsMkRBQVVBLENBQUNZLElBQUk7WUFBRTtTQUFZO1FBQzlCO1lBQUNaLDJEQUFVQSxDQUFDZ0IsT0FBTztZQUFFO1NBQVU7UUFDL0I7WUFBQ2hCLDJEQUFVQSxDQUFDb0IsV0FBVztZQUFFO1NBQVM7UUFDbEM7WUFBQ3BCLDJEQUFVQSxDQUFDcUIsaUJBQWlCO1lBQUU7U0FBZTtRQUM5QztZQUFDckIsMkRBQVVBLENBQUNzQixnQkFBZ0I7WUFBRTtTQUFjO1FBQzVDO1lBQUN0QiwyREFBVUEsQ0FBQ3VCLGtCQUFrQjtZQUFFO1NBQVc7UUFDM0M7WUFBQ3ZCLDJEQUFVQSxDQUFDd0IsaUJBQWlCO1lBQUU7U0FBVztRQUMxQztZQUFDeEIsMkRBQVVBLENBQUN5QixTQUFTO1lBQUU7U0FBaUI7UUFDeEM7WUFBQ3pCLDJEQUFVQSxDQUFDMEIsZ0JBQWdCO1lBQUU7U0FBcUI7UUFDbkQ7WUFBQzFCLDJEQUFVQSxDQUFDMkIsZUFBZTtZQUFFO1NBQWE7S0FDM0M7SUFDREMsbUJBQW1CM0IseURBQVFBLENBQUM0QixXQUFXO0FBQ3pDO0FBRU8sTUFBTUMsV0FBbUM7SUFDOUMsbUZBQW1GO0lBQ25GLHdDQUFLekI7UUFBU0MsTUFBTSxDQUFDLFFBQVEsRUFBRUQsUUFBUUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFFQyxTQUFTOztJQUN6REY7Q0FDRCxDQUFDO0FBRUssTUFBTTBCLG1CQUFtQixJQUFtQkQsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUN4RCxNQUFNRSxhQUFhLENBQUN6QjtJQUN6QixJQUFJLENBQUNBLFNBQVM7UUFDWjtJQUNGO0lBRUEsT0FBT3VCLFNBQVNHLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRTNCLE9BQU8sS0FBS0E7QUFDMUMsRUFBRTtBQUVGLGlFQUFlO0lBQ2JIO0lBQ0EwQjtJQUNBQztJQUNBQztBQUNGLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vb3RlbC50cz9mYWY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbkhpbnQsIFRpbWVVbml0IH0gZnJvbSBcInR5cGVzL3F1ZXJ5QnVpbGRlclwiO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdExvZ3NUYWJsZSA9ICdvdGVsX2xvZ3MnO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRUcmFjZVRhYmxlID0gJ290ZWxfdHJhY2VzJztcblxuZXhwb3J0IGNvbnN0IHRyYWNlVGltZXN0YW1wVGFibGVTdWZmaXggPSAnX3RyYWNlX2lkX3RzJztcblxuZXhwb3J0IGludGVyZmFjZSBPdGVsVmVyc2lvbiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuICBzcGVjVXJsPzogc3RyaW5nO1xuICBsb2dzVGFibGU6IHN0cmluZztcbiAgbG9nQ29sdW1uTWFwOiBNYXA8Q29sdW1uSGludCwgc3RyaW5nPjtcbiAgbG9nTGV2ZWxzOiBzdHJpbmdbXTtcbiAgdHJhY2VUYWJsZTogc3RyaW5nO1xuICB0cmFjZUNvbHVtbk1hcDogTWFwPENvbHVtbkhpbnQsIHN0cmluZz47XG4gIHRyYWNlRHVyYXRpb25Vbml0OiBUaW1lVW5pdC5OYW5vc2Vjb25kcztcbn1cblxuY29uc3Qgb3RlbDEyOTogT3RlbFZlcnNpb24gPSB7XG4gIG5hbWU6ICcxLjIuOScsXG4gIHZlcnNpb246ICcxLjI5LjAnLFxuICBzcGVjVXJsOiAnaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvb3RlbCcsXG4gIGxvZ3NUYWJsZTogZGVmYXVsdExvZ3NUYWJsZSxcbiAgbG9nQ29sdW1uTWFwOiBuZXcgTWFwPENvbHVtbkhpbnQsIHN0cmluZz4oW1xuICAgIFtDb2x1bW5IaW50LlRpbWUsICdUaW1lc3RhbXAnXSxcbiAgICBbQ29sdW1uSGludC5Mb2dNZXNzYWdlLCAnQm9keSddLFxuICAgIFtDb2x1bW5IaW50LkxvZ0xldmVsLCAnU2V2ZXJpdHlUZXh0J10sXG4gICAgW0NvbHVtbkhpbnQuTG9nTGFiZWxzLCAnTG9nQXR0cmlidXRlcyddLFxuICAgIFtDb2x1bW5IaW50LlRyYWNlSWQsICdUcmFjZUlkJ10sXG4gIF0pLFxuICBsb2dMZXZlbHM6IFtcbiAgICAnVFJBQ0UnLFxuICAgICdERUJVRycsXG4gICAgJ0lORk8nLFxuICAgICdXQVJOJyxcbiAgICAnRVJST1InLFxuICAgICdGQVRBTCdcbiAgXSxcbiAgdHJhY2VUYWJsZTogZGVmYXVsdFRyYWNlVGFibGUsXG4gIHRyYWNlQ29sdW1uTWFwOiBuZXcgTWFwPENvbHVtbkhpbnQsIHN0cmluZz4oW1xuICAgIFtDb2x1bW5IaW50LlRpbWUsICdUaW1lc3RhbXAnXSxcbiAgICBbQ29sdW1uSGludC5UcmFjZUlkLCAnVHJhY2VJZCddLFxuICAgIFtDb2x1bW5IaW50LlRyYWNlU3BhbklkLCAnU3BhbklkJ10sXG4gICAgW0NvbHVtbkhpbnQuVHJhY2VQYXJlbnRTcGFuSWQsICdQYXJlbnRTcGFuSWQnXSxcbiAgICBbQ29sdW1uSGludC5UcmFjZVNlcnZpY2VOYW1lLCAnU2VydmljZU5hbWUnXSxcbiAgICBbQ29sdW1uSGludC5UcmFjZU9wZXJhdGlvbk5hbWUsICdTcGFuTmFtZSddLFxuICAgIFtDb2x1bW5IaW50LlRyYWNlRHVyYXRpb25UaW1lLCAnRHVyYXRpb24nXSxcbiAgICBbQ29sdW1uSGludC5UcmFjZVRhZ3MsICdTcGFuQXR0cmlidXRlcyddLFxuICAgIFtDb2x1bW5IaW50LlRyYWNlU2VydmljZVRhZ3MsICdSZXNvdXJjZUF0dHJpYnV0ZXMnXSxcbiAgICBbQ29sdW1uSGludC5UcmFjZVN0YXR1c0NvZGUsICdTdGF0dXNDb2RlJ10sXG4gIF0pLFxuICB0cmFjZUR1cmF0aW9uVW5pdDogVGltZVVuaXQuTmFub3NlY29uZHMsXG59O1xuXG5leHBvcnQgY29uc3QgdmVyc2lvbnM6IHJlYWRvbmx5IE90ZWxWZXJzaW9uW10gPSBbXG4gIC8vIFdoZW4gc2VsZWN0ZWQsIHdpbGwgYWx3YXlzIGtlZXAgT1RFTCBjb25maWcgdXAgdG8gZGF0ZSBhcyBuZXcgdmVyc2lvbnMgYXJlIGFkZGVkXG4gIHsgLi4ub3RlbDEyOSwgbmFtZTogYGxhdGVzdCAoJHtvdGVsMTI5Lm5hbWV9KWAsIHZlcnNpb246ICdsYXRlc3QnIH0sXG4gIG90ZWwxMjksXG5dO1xuXG5leHBvcnQgY29uc3QgZ2V0TGF0ZXN0VmVyc2lvbiA9ICgpOiBPdGVsVmVyc2lvbiA9PiB2ZXJzaW9uc1swXTtcbmV4cG9ydCBjb25zdCBnZXRWZXJzaW9uID0gKHZlcnNpb246IHN0cmluZyB8IHVuZGVmaW5lZCk6IE90ZWxWZXJzaW9uIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKCF2ZXJzaW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHZlcnNpb25zLmZpbmQodiA9PiB2LnZlcnNpb24gPT09IHZlcnNpb24pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICB0cmFjZVRpbWVzdGFtcFRhYmxlU3VmZml4LFxuICB2ZXJzaW9ucyxcbiAgZ2V0TGF0ZXN0VmVyc2lvbixcbiAgZ2V0VmVyc2lvblxufTtcbiJdLCJuYW1lcyI6WyJDb2x1bW5IaW50IiwiVGltZVVuaXQiLCJkZWZhdWx0TG9nc1RhYmxlIiwiZGVmYXVsdFRyYWNlVGFibGUiLCJ0cmFjZVRpbWVzdGFtcFRhYmxlU3VmZml4Iiwib3RlbDEyOSIsIm5hbWUiLCJ2ZXJzaW9uIiwic3BlY1VybCIsImxvZ3NUYWJsZSIsImxvZ0NvbHVtbk1hcCIsIk1hcCIsIlRpbWUiLCJMb2dNZXNzYWdlIiwiTG9nTGV2ZWwiLCJMb2dMYWJlbHMiLCJUcmFjZUlkIiwibG9nTGV2ZWxzIiwidHJhY2VUYWJsZSIsInRyYWNlQ29sdW1uTWFwIiwiVHJhY2VTcGFuSWQiLCJUcmFjZVBhcmVudFNwYW5JZCIsIlRyYWNlU2VydmljZU5hbWUiLCJUcmFjZU9wZXJhdGlvbk5hbWUiLCJUcmFjZUR1cmF0aW9uVGltZSIsIlRyYWNlVGFncyIsIlRyYWNlU2VydmljZVRhZ3MiLCJUcmFjZVN0YXR1c0NvZGUiLCJ0cmFjZUR1cmF0aW9uVW5pdCIsIk5hbm9zZWNvbmRzIiwidmVyc2lvbnMiLCJnZXRMYXRlc3RWZXJzaW9uIiwiZ2V0VmVyc2lvbiIsImZpbmQiLCJ2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./otel.ts\n");

/***/ }),

/***/ "./selectors.ts":
/*!**********************!*\
  !*** ./selectors.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Components: () => (/* binding */ Components),\n/* harmony export */   selectors: () => (/* binding */ selectors)\n/* harmony export */ });\nconst Components = {\n    QueryEditor: {\n        CodeEditor: {\n            input: ()=>'.monaco-editor textarea',\n            container: 'data-testid-code-editor-container',\n            Expand: 'data-testid-code-editor-expand-button'\n        },\n        Format: {\n            label: 'Format',\n            tooltip: 'Query Type',\n            options: {\n                AUTO: 'Auto',\n                TABLE: 'Table',\n                TIME_SERIES: 'Time Series',\n                LOGS: 'Logs',\n                TRACE: 'Trace'\n            }\n        },\n        Types: {\n            label: 'Query Type',\n            tooltip: 'Query Type',\n            options: {\n                SQLEditor: 'SQL Editor',\n                QueryBuilder: 'Query Builder'\n            },\n            switcher: {\n                title: 'Are you sure?',\n                body: 'Queries that are too complex for the Query Builder will be altered.',\n                confirmText: 'Continue',\n                dismissText: 'Cancel'\n            },\n            cannotConvert: {\n                title: 'Cannot convert',\n                confirmText: 'Yes'\n            }\n        },\n        QueryBuilder: {\n            TYPES: {\n                label: 'Show as',\n                tooltip: 'Show as',\n                options: {\n                    LIST: 'Table',\n                    AGGREGATE: 'Aggregate',\n                    TREND: 'Time Series'\n                }\n            },\n            DATABASE: {\n                label: 'Database',\n                tooltip: 'Clickhouse database to query from'\n            },\n            FROM: {\n                label: 'Table',\n                tooltip: 'Clickhouse table to query from'\n            },\n            SELECT: {\n                label: 'Fields',\n                tooltipTable: 'List of fields to show',\n                tooltipAggregate: `List of metrics to show. Use any of the given aggregation along with the field`,\n                ALIAS: {\n                    label: 'as',\n                    tooltip: 'alias'\n                },\n                AddLabel: 'Field',\n                RemoveLabel: ''\n            },\n            AGGREGATES: {\n                label: 'Aggregates',\n                tooltipTable: 'Aggregate functions to use',\n                tooltipAggregate: `Aggregate functions to use`,\n                ALIAS: {\n                    label: 'as',\n                    tooltip: 'alias'\n                },\n                AddLabel: 'Aggregate',\n                RemoveLabel: ''\n            },\n            WHERE: {\n                label: 'Filters',\n                tooltip: `List of filters`,\n                AddLabel: 'Filter',\n                RemoveLabel: ''\n            },\n            GROUP_BY: {\n                label: 'Group by',\n                tooltip: 'Group the results by specific field'\n            },\n            ORDER_BY: {\n                label: 'Order by',\n                tooltip: 'Order by field',\n                AddLabel: 'Order by',\n                RemoveLabel: ''\n            },\n            LIMIT: {\n                label: 'Limit',\n                tooltip: 'Number of records/results to show.'\n            },\n            TIME_FIELD: {\n                label: 'Time field',\n                tooltip: 'Select the time field for trending over time'\n            },\n            LOGS_VOLUME_TIME_FIELD: {\n                label: 'Time field',\n                tooltip: 'Select the time field for logs volume histogram. If not selected, the histogram will not be shown'\n            },\n            LOG_LEVEL_FIELD: {\n                label: 'Log level field',\n                tooltip: 'Select the field to extract log level information from'\n            },\n            PREVIEW: {\n                label: 'SQL Preview',\n                tooltip: 'SQL Preview. You can safely switch to SQL Editor to customize the generated query'\n            }\n        }\n    },\n    Config: {\n        HttpHeaderConfig: {\n            headerEditor: 'config__http-header-config__header-editor',\n            addHeaderButton: 'config__http-header-config__add-header-button',\n            removeHeaderButton: 'config__http-header-config__remove-header-button',\n            headerSecureSwitch: 'config__http-header-config__header-secure-switch',\n            headerNameInput: 'config__http-header-config__header-name-input',\n            headerValueInput: 'config__http-header-config__header-value-input',\n            forwardGrafanaHeadersSwitch: 'config__http-header-config__forward-grafana-headers-switch'\n        },\n        AliasTableConfig: {\n            aliasEditor: 'config__alias-table-config__alias-editor',\n            addEntryButton: 'config__alias-table-config__add-entry-button',\n            removeEntryButton: 'config__alias-table-config__remove-entry-button',\n            targetDatabaseInput: 'config__alias-table-config__target-database-input',\n            targetTableInput: 'config__alias-table-config__target-table-input',\n            aliasDatabaseInput: 'config__alias-table-config__alias-database-input',\n            aliasTableInput: 'config__alias-table-config__alias-table-input'\n        }\n    },\n    LogsContextPanel: {\n        alert: 'logs-context-panel__alert',\n        LogsContextKey: 'logs-context-panel__logs-context-key'\n    },\n    QueryBuilder: {\n        expandBuilderButton: 'query-builder__expand-builder-button',\n        LogsQueryBuilder: {\n            LogMessageLikeInput: {\n                input: 'query-builder__logs-query-builder__log-message-like-input__input'\n            }\n        },\n        AggregateEditor: {\n            sectionLabel: 'query-builder__aggregate-editor__section-label',\n            itemWrapper: 'query-builder__aggregate-editor__item-wrapper',\n            itemRemoveButton: 'query-builder__aggregate-editor-item-remove-button',\n            addButton: 'query-builder__aggregate-editor__add-button'\n        },\n        ColumnsEditor: {\n            multiSelectWrapper: 'query-builder__columns-editor__multi-select-wrapper'\n        },\n        GroupByEditor: {\n            multiSelectWrapper: 'query-builder__group-by__multi-select-wrapper'\n        },\n        LimitEditor: {\n            input: 'query-builder__limit-editor__input'\n        },\n        TraceIdInput: {\n            input: 'query-builder__trace-id-input__input'\n        }\n    }\n};\nconst selectors = {\n    components: Components\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./selectors.ts\n");

/***/ }),

/***/ "./styles.ts":
/*!*******************!*\
  !*** ./styles.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   styles: () => (/* binding */ styles)\n/* harmony export */ });\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/css */ \"@emotion/css\");\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_emotion_css__WEBPACK_IMPORTED_MODULE_0__);\n\nconst styles = {\n    Common: {\n        check: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      margin-top: 5px;\n    `,\n        wrapper: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      position: relative;\n      width: 100%;\n    `,\n        smallBtn: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      margin-top: 5px;\n      margin-inline: 5px;\n    `,\n        selectWrapper: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      width: 100%;\n    `,\n        inlineSelect: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      margin-right: 5px;\n    `,\n        firstLabel: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      margin-right: 5px;\n    `,\n        expand: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      position: absolute;\n      top: 2px;\n      left: 6px;\n      z-index: 100;\n      color: gray;\n    `\n    },\n    ConfigEditor: {\n        container: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      justify-content: space-between;\n      h5 {\n        line-height: 34px;\n        margin-bottom: 5px;\n      }\n      button {\n        margin-right: 5px;\n      }\n    `,\n        wide: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      width: 75%;\n    `,\n        subHeader: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      padding: 5px 0 5px 0;\n    `\n    },\n    QueryEditor: {\n        queryType: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      justify-content: space-between;\n      span {\n        display: flex;\n      }\n    `,\n        inlineField: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      margin-left: 7px;\n    `\n    },\n    FormatSelector: {\n        formatSelector: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)`\n      display: flex;\n    `\n    },\n    VariablesEditor: {}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DO0FBRTVCLE1BQU1DLFNBQVM7SUFDcEJDLFFBQVE7UUFDTkMsT0FBT0gsaURBQUcsQ0FBQzs7SUFFWCxDQUFDO1FBQ0RJLFNBQVNKLGlEQUFHLENBQUM7OztJQUdiLENBQUM7UUFDREssVUFBVUwsaURBQUcsQ0FBQzs7O0lBR2QsQ0FBQztRQUNETSxlQUFlTixpREFBRyxDQUFDOztJQUVuQixDQUFDO1FBQ0RPLGNBQWNQLGlEQUFHLENBQUM7O0lBRWxCLENBQUM7UUFDRFEsWUFBWVIsaURBQUcsQ0FBQzs7SUFFaEIsQ0FBQztRQUNEUyxRQUFRVCxpREFBRyxDQUFDOzs7Ozs7SUFNWixDQUFDO0lBQ0g7SUFDQVUsY0FBYztRQUNaQyxXQUFXWCxpREFBRyxDQUFDOzs7Ozs7Ozs7SUFTZixDQUFDO1FBQ0RZLE1BQU1aLGlEQUFHLENBQUM7O0lBRVYsQ0FBQztRQUNEYSxXQUFXYixpREFBRyxDQUFDOztJQUVmLENBQUM7SUFDSDtJQUNBYyxhQUFhO1FBQ1hDLFdBQVdmLGlEQUFHLENBQUM7Ozs7O0lBS2YsQ0FBQztRQUNEZ0IsYUFBYWhCLGlEQUFHLENBQUM7O0lBRWpCLENBQUM7SUFDSDtJQUNBaUIsZ0JBQWdCO1FBQ2RDLGdCQUFnQmxCLGlEQUFHLENBQUM7O0lBRXBCLENBQUM7SUFDSDtJQUNBbUIsaUJBQWlCLENBQUM7QUFDcEIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vc3R5bGVzLnRzPzdiM2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcblxuZXhwb3J0IGNvbnN0IHN0eWxlcyA9IHtcbiAgQ29tbW9uOiB7XG4gICAgY2hlY2s6IGNzc2BcbiAgICAgIG1hcmdpbi10b3A6IDVweDtcbiAgICBgLFxuICAgIHdyYXBwZXI6IGNzc2BcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIGAsXG4gICAgc21hbGxCdG46IGNzc2BcbiAgICAgIG1hcmdpbi10b3A6IDVweDtcbiAgICAgIG1hcmdpbi1pbmxpbmU6IDVweDtcbiAgICBgLFxuICAgIHNlbGVjdFdyYXBwZXI6IGNzc2BcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIGAsXG4gICAgaW5saW5lU2VsZWN0OiBjc3NgXG4gICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICBgLFxuICAgIGZpcnN0TGFiZWw6IGNzc2BcbiAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgIGAsXG4gICAgZXhwYW5kOiBjc3NgXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDJweDtcbiAgICAgIGxlZnQ6IDZweDtcbiAgICAgIHotaW5kZXg6IDEwMDtcbiAgICAgIGNvbG9yOiBncmF5O1xuICAgIGAsXG4gIH0sXG4gIENvbmZpZ0VkaXRvcjoge1xuICAgIGNvbnRhaW5lcjogY3NzYFxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgaDUge1xuICAgICAgICBsaW5lLWhlaWdodDogMzRweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgICAgfVxuICAgICAgYnV0dG9uIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICB9XG4gICAgYCxcbiAgICB3aWRlOiBjc3NgXG4gICAgICB3aWR0aDogNzUlO1xuICAgIGAsXG4gICAgc3ViSGVhZGVyOiBjc3NgXG4gICAgICBwYWRkaW5nOiA1cHggMCA1cHggMDtcbiAgICBgLFxuICB9LFxuICBRdWVyeUVkaXRvcjoge1xuICAgIHF1ZXJ5VHlwZTogY3NzYFxuICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgc3BhbiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICB9XG4gICAgYCxcbiAgICBpbmxpbmVGaWVsZDogY3NzYFxuICAgICAgbWFyZ2luLWxlZnQ6IDdweDtcbiAgICBgXG4gIH0sXG4gIEZvcm1hdFNlbGVjdG9yOiB7XG4gICAgZm9ybWF0U2VsZWN0b3I6IGNzc2BcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYCxcbiAgfSxcbiAgVmFyaWFibGVzRWRpdG9yOiB7fSxcbn07XG4iXSwibmFtZXMiOlsiY3NzIiwic3R5bGVzIiwiQ29tbW9uIiwiY2hlY2siLCJ3cmFwcGVyIiwic21hbGxCdG4iLCJzZWxlY3RXcmFwcGVyIiwiaW5saW5lU2VsZWN0IiwiZmlyc3RMYWJlbCIsImV4cGFuZCIsIkNvbmZpZ0VkaXRvciIsImNvbnRhaW5lciIsIndpZGUiLCJzdWJIZWFkZXIiLCJRdWVyeUVkaXRvciIsInF1ZXJ5VHlwZSIsImlubGluZUZpZWxkIiwiRm9ybWF0U2VsZWN0b3IiLCJmb3JtYXRTZWxlY3RvciIsIlZhcmlhYmxlc0VkaXRvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./styles.ts\n");

/***/ }),

/***/ "./tracking.ts":
/*!*********************!*\
  !*** ./tracking.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeQueries: () => (/* binding */ analyzeQueries),\n/* harmony export */   trackClickhouseDashboardLoaded: () => (/* binding */ trackClickhouseDashboardLoaded)\n/* harmony export */ });\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/queryBuilder */ \"./types/queryBuilder.ts\");\n\n\n\nconst trackClickhouseDashboardLoaded = (props)=>{\n    (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.reportInteraction)('grafana_ds_clickhouse_dashboard_loaded', props);\n};\nconst analyzeQueries = (queries)=>{\n    const c = {\n        sql_queries: 0,\n        sql_query_type_table: 0,\n        sql_query_type_logs: 0,\n        sql_query_type_timeseries: 0,\n        sql_query_type_traces: 0,\n        builder_queries: 0,\n        builder_query_type_table: 0,\n        builder_query_type_table_simple: 0,\n        builder_query_type_table_aggregate: 0,\n        builder_query_type_logs: 0,\n        builder_query_type_timeseries: 0,\n        builder_query_type_timeseries_simple: 0,\n        builder_query_type_timeseries_aggregate: 0,\n        builder_query_type_traces: 0,\n        builder_query_type_traces_search: 0,\n        builder_query_type_traces_id: 0,\n        builder_minimized_queries: 0,\n        builder_otel_queries: 0\n    };\n    queries.forEach((q)=>{\n        if (q.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_1__.EditorType.SQL) {\n            c.sql_queries++;\n            if (q.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Table) {\n                c.sql_query_type_table++;\n            } else if (q.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Logs) {\n                c.sql_query_type_logs++;\n            } else if (q.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.TimeSeries) {\n                c.sql_query_type_timeseries++;\n            } else if (q.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Traces) {\n                c.sql_query_type_traces++;\n            }\n        } else if (q.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_1__.EditorType.Builder) {\n            var _q_builderOptions_meta, _q_builderOptions_meta1;\n            c.builder_queries++;\n            if (!q.builderOptions) {\n                return;\n            }\n            if (q.builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Table) {\n                c.builder_query_type_table++;\n                if (q.builderOptions.mode === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Aggregate) {\n                    c.builder_query_type_table_aggregate++;\n                } else {\n                    c.builder_query_type_table_simple++;\n                }\n            } else if (q.builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Logs) {\n                c.builder_query_type_logs++;\n            } else if (q.builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.TimeSeries) {\n                c.builder_query_type_timeseries++;\n                if (q.builderOptions.mode === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.BuilderMode.Trend) {\n                    c.builder_query_type_timeseries_aggregate++;\n                } else {\n                    c.builder_query_type_timeseries_simple++;\n                }\n            } else if (q.builderOptions.queryType === _types_queryBuilder__WEBPACK_IMPORTED_MODULE_2__.QueryType.Traces) {\n                var _q_builderOptions_meta2;\n                c.builder_query_type_traces++;\n                if ((_q_builderOptions_meta2 = q.builderOptions.meta) === null || _q_builderOptions_meta2 === void 0 ? void 0 : _q_builderOptions_meta2.isTraceIdMode) {\n                    c.builder_query_type_traces_id++;\n                } else {\n                    c.builder_query_type_traces_search++;\n                }\n            }\n            if ((_q_builderOptions_meta = q.builderOptions.meta) === null || _q_builderOptions_meta === void 0 ? void 0 : _q_builderOptions_meta.minimized) {\n                c.builder_minimized_queries++;\n            }\n            if ((_q_builderOptions_meta1 = q.builderOptions.meta) === null || _q_builderOptions_meta1 === void 0 ? void 0 : _q_builderOptions_meta1.otelEnabled) {\n                c.builder_otel_queries++;\n            }\n        }\n    });\n    return c;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./tracking.ts\n");

/***/ }),

/***/ "./types/config.ts":
/*!*************************!*\
  !*** ./types/config.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Protocol: () => (/* binding */ Protocol)\n/* harmony export */ });\nvar Protocol;\n(function(Protocol) {\n    Protocol[\"Native\"] = \"native\";\n    Protocol[\"Http\"] = \"http\";\n})(Protocol || (Protocol = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90eXBlcy9jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7VUFzR1lBOzs7R0FBQUEsYUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncmFmYW5hLWNsaWNraG91c2UtZGF0YXNvdXJjZS8uL3R5cGVzL2NvbmZpZy50cz9mMjVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2VKc29uRGF0YSwgS2V5VmFsdWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBDSENvbmZpZyBleHRlbmRzIERhdGFTb3VyY2VKc29uRGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgcGx1Z2luIHRoaXMgY29uZmlnIHdhcyBzYXZlZCB3aXRoXG4gICAqL1xuICB2ZXJzaW9uOiBzdHJpbmc7XG5cbiAgaG9zdDogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG4gIHByb3RvY29sOiBQcm90b2NvbDtcbiAgc2VjdXJlPzogYm9vbGVhbjtcbiAgcGF0aD86IHN0cmluZztcbiAgb2F1dGhQYXNzVGhydTogYm9vbGVhbjtcblxuICB0bHNTa2lwVmVyaWZ5PzogYm9vbGVhbjtcbiAgdGxzQXV0aD86IGJvb2xlYW47XG4gIHRsc0F1dGhXaXRoQ0FDZXJ0PzogYm9vbGVhbjtcblxuICB1c2VybmFtZTogc3RyaW5nO1xuXG4gIGRlZmF1bHREYXRhYmFzZT86IHN0cmluZztcbiAgZGVmYXVsdFRhYmxlPzogc3RyaW5nO1xuXG4gIGRpYWxUaW1lb3V0Pzogc3RyaW5nO1xuICBxdWVyeVRpbWVvdXQ/OiBzdHJpbmc7XG4gIHZhbGlkYXRlU3FsPzogYm9vbGVhbjtcblxuICBsb2dzPzogQ0hMb2dzQ29uZmlnO1xuICB0cmFjZXM/OiBDSFRyYWNlc0NvbmZpZztcblxuICBhbGlhc1RhYmxlcz86IEFsaWFzVGFibGVFbnRyeVtdO1xuXG4gIGh0dHBIZWFkZXJzPzogQ0hIdHRwSGVhZGVyW107XG4gIGZvcndhcmRHcmFmYW5hSGVhZGVycz86IGJvb2xlYW47XG4gIFxuICBjdXN0b21TZXR0aW5ncz86IENIQ3VzdG9tU2V0dGluZ1tdO1xuICBlbmFibGVTZWN1cmVTb2Nrc1Byb3h5PzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIENIU2VjdXJlQ29uZmlnUHJvcGVydGllcyB7XG4gIHBhc3N3b3JkPzogc3RyaW5nO1xuXG4gIHRsc0NBQ2VydD86IHN0cmluZztcbiAgdGxzQ2xpZW50Q2VydD86IHN0cmluZztcbiAgdGxzQ2xpZW50S2V5Pzogc3RyaW5nO1xufVxuZXhwb3J0IHR5cGUgQ0hTZWN1cmVDb25maWcgPSBDSFNlY3VyZUNvbmZpZ1Byb3BlcnRpZXMgfCBLZXlWYWx1ZTxzdHJpbmc+O1xuXG5leHBvcnQgaW50ZXJmYWNlIENISHR0cEhlYWRlciB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgc2VjdXJlOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENIQ3VzdG9tU2V0dGluZyB7XG4gIHNldHRpbmc6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIENITG9nc0NvbmZpZyB7XG4gIGRlZmF1bHREYXRhYmFzZT86IHN0cmluZztcbiAgZGVmYXVsdFRhYmxlPzogc3RyaW5nO1xuXG4gIG90ZWxFbmFibGVkPzogYm9vbGVhbjtcbiAgb3RlbFZlcnNpb24/OiBzdHJpbmc7XG5cbiAgdGltZUNvbHVtbj86IHN0cmluZztcbiAgbGV2ZWxDb2x1bW4/OiBzdHJpbmc7XG4gIG1lc3NhZ2VDb2x1bW4/OiBzdHJpbmc7XG5cbiAgc2VsZWN0Q29udGV4dENvbHVtbnM/OiBib29sZWFuO1xuICBjb250ZXh0Q29sdW1ucz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENIVHJhY2VzQ29uZmlnIHtcbiAgZGVmYXVsdERhdGFiYXNlPzogc3RyaW5nO1xuICBkZWZhdWx0VGFibGU/OiBzdHJpbmc7XG5cbiAgb3RlbEVuYWJsZWQ/OiBib29sZWFuO1xuICBvdGVsVmVyc2lvbj86IHN0cmluZztcblxuICB0cmFjZUlkQ29sdW1uPzogc3RyaW5nO1xuICBzcGFuSWRDb2x1bW4/OiBzdHJpbmc7XG4gIG9wZXJhdGlvbk5hbWVDb2x1bW4/OiBzdHJpbmc7XG4gIHBhcmVudFNwYW5JZENvbHVtbj86IHN0cmluZztcbiAgc2VydmljZU5hbWVDb2x1bW4/OiBzdHJpbmc7XG4gIGR1cmF0aW9uQ29sdW1uPzogc3RyaW5nO1xuICBkdXJhdGlvblVuaXQ/OiBzdHJpbmc7XG4gIHN0YXJ0VGltZUNvbHVtbj86IHN0cmluZztcbiAgdGFnc0NvbHVtbj86IHN0cmluZztcbiAgc2VydmljZVRhZ3NDb2x1bW4/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWxpYXNUYWJsZUVudHJ5IHtcbiAgdGFyZ2V0RGF0YWJhc2U6IHN0cmluZztcbiAgdGFyZ2V0VGFibGU6IHN0cmluZztcbiAgYWxpYXNEYXRhYmFzZTogc3RyaW5nO1xuICBhbGlhc1RhYmxlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFByb3RvY29sIHtcbiAgTmF0aXZlID0gJ25hdGl2ZScsXG4gIEh0dHAgPSAnaHR0cCcsXG59XG4iXSwibmFtZXMiOlsiUHJvdG9jb2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./types/config.ts\n");

/***/ }),

/***/ "./types/queryBuilder.ts":
/*!*******************************!*\
  !*** ./types/queryBuilder.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AggregateType: () => (/* binding */ AggregateType),\n/* harmony export */   BuilderMode: () => (/* binding */ BuilderMode),\n/* harmony export */   ColumnHint: () => (/* binding */ ColumnHint),\n/* harmony export */   FilterOperator: () => (/* binding */ FilterOperator),\n/* harmony export */   OrderByDirection: () => (/* binding */ OrderByDirection),\n/* harmony export */   QueryType: () => (/* binding */ QueryType),\n/* harmony export */   TimeUnit: () => (/* binding */ TimeUnit)\n/* harmony export */ });\nvar BuilderMode;\n(function(BuilderMode) {\n    BuilderMode[\"List\"] = \"list\";\n    BuilderMode[\"Aggregate\"] = \"aggregate\";\n    BuilderMode[\"Trend\"] = \"trend\";\n})(BuilderMode || (BuilderMode = {}));\nvar QueryType;\n(function(QueryType) {\n    QueryType[\"Table\"] = \"table\";\n    QueryType[\"Logs\"] = \"logs\";\n    QueryType[\"TimeSeries\"] = \"timeseries\";\n    QueryType[\"Traces\"] = \"traces\";\n})(QueryType || (QueryType = {}));\nvar AggregateType;\n(function(AggregateType) {\n    AggregateType[\"Sum\"] = \"sum\";\n    AggregateType[\"Average\"] = \"avg\";\n    AggregateType[\"Min\"] = \"min\";\n    AggregateType[\"Max\"] = \"max\";\n    AggregateType[\"Count\"] = \"count\";\n    AggregateType[\"Any\"] = \"any\";\n})(AggregateType || (AggregateType = {}));\nvar ColumnHint;\n(function(ColumnHint) {\n    ColumnHint[\"Time\"] = \"time\";\n    ColumnHint[\"LogLevel\"] = \"log_level\";\n    ColumnHint[\"LogMessage\"] = \"log_message\";\n    ColumnHint[\"LogLabels\"] = \"log_labels\";\n    ColumnHint[\"TraceId\"] = \"trace_id\";\n    ColumnHint[\"TraceSpanId\"] = \"trace_span_id\";\n    ColumnHint[\"TraceParentSpanId\"] = \"trace_parent_span_id\";\n    ColumnHint[\"TraceServiceName\"] = \"trace_service_name\";\n    ColumnHint[\"TraceOperationName\"] = \"trace_operation_name\";\n    ColumnHint[\"TraceDurationTime\"] = \"trace_duration_time\";\n    ColumnHint[\"TraceTags\"] = \"trace_tags\";\n    ColumnHint[\"TraceServiceTags\"] = \"trace_service_tags\";\n    ColumnHint[\"TraceStatusCode\"] = \"trace_status_code\";\n})(ColumnHint || (ColumnHint = {}));\nvar TimeUnit;\n(function(TimeUnit) {\n    TimeUnit[\"Seconds\"] = \"seconds\";\n    TimeUnit[\"Milliseconds\"] = \"milliseconds\";\n    TimeUnit[\"Microseconds\"] = \"microseconds\";\n    TimeUnit[\"Nanoseconds\"] = \"nanoseconds\";\n})(TimeUnit || (TimeUnit = {}));\nvar OrderByDirection;\n(function(OrderByDirection) {\n    OrderByDirection[\"ASC\"] = \"ASC\";\n    OrderByDirection[\"DESC\"] = \"DESC\";\n})(OrderByDirection || (OrderByDirection = {}));\nvar FilterOperator;\n(function(FilterOperator) {\n    /**\n   * A placeholder filter that gets excluded from SQL generation\n   */ FilterOperator[\"IsAnything\"] = \"IS ANYTHING\";\n    /**\n   * Compares to an empty string\n   */ FilterOperator[\"IsEmpty\"] = \"IS EMPTY\";\n    FilterOperator[\"IsNotEmpty\"] = \"IS NOT EMPTY\";\n    FilterOperator[\"IsNull\"] = \"IS NULL\";\n    FilterOperator[\"IsNotNull\"] = \"IS NOT NULL\";\n    FilterOperator[\"Equals\"] = \"=\";\n    FilterOperator[\"NotEquals\"] = \"!=\";\n    FilterOperator[\"LessThan\"] = \"<\";\n    FilterOperator[\"LessThanOrEqual\"] = \"<=\";\n    FilterOperator[\"GreaterThan\"] = \">\";\n    FilterOperator[\"GreaterThanOrEqual\"] = \">=\";\n    FilterOperator[\"Like\"] = \"LIKE\";\n    FilterOperator[\"NotLike\"] = \"NOT LIKE\";\n    FilterOperator[\"In\"] = \"IN\";\n    FilterOperator[\"NotIn\"] = \"NOT IN\";\n    FilterOperator[\"WithInGrafanaTimeRange\"] = \"WITH IN DASHBOARD TIME RANGE\";\n    FilterOperator[\"OutsideGrafanaTimeRange\"] = \"OUTSIDE DASHBOARD TIME RANGE\";\n})(FilterOperator || (FilterOperator = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./types/queryBuilder.ts\n");

/***/ }),

/***/ "./types/sql.ts":
/*!**********************!*\
  !*** ./types/sql.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorType: () => (/* binding */ EditorType),\n/* harmony export */   defaultCHBuilderQuery: () => (/* binding */ defaultCHBuilderQuery),\n/* harmony export */   defaultCHSqlQuery: () => (/* binding */ defaultCHSqlQuery),\n/* harmony export */   defaultEditorType: () => (/* binding */ defaultEditorType)\n/* harmony export */ });\n/* harmony import */ var _queryBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queryBuilder */ \"./types/queryBuilder.ts\");\n\nvar EditorType;\n(function(EditorType) {\n    EditorType[\"SQL\"] = \"sql\";\n    EditorType[\"Builder\"] = \"builder\";\n})(EditorType || (EditorType = {}));\n// TODO: these aren't really types\nconst defaultEditorType = \"builder\";\nconst defaultCHBuilderQuery = {\n    pluginVersion: '',\n    editorType: \"builder\",\n    rawSql: '',\n    builderOptions: {\n        database: '',\n        table: '',\n        queryType: _queryBuilder__WEBPACK_IMPORTED_MODULE_0__.QueryType.Table,\n        mode: _queryBuilder__WEBPACK_IMPORTED_MODULE_0__.BuilderMode.List,\n        columns: [],\n        meta: {},\n        limit: 1000\n    }\n};\nconst defaultCHSqlQuery = {\n    pluginVersion: '',\n    editorType: \"sql\",\n    rawSql: '',\n    expand: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90eXBlcy9zcWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDNkU7O1VBS2pFRTs7O0dBQUFBLGVBQUFBO0FBdUNaLGtDQUFrQztBQUMzQixNQUFNQyw4QkFBbUQ7QUFDekQsTUFBTUMsd0JBQXVEO0lBQ2xFQyxlQUFlO0lBQ2ZDLFVBQVU7SUFDVkMsUUFBUTtJQUNSQyxnQkFBZ0I7UUFDZEMsVUFBVTtRQUNWQyxPQUFPO1FBQ1BDLFdBQVdWLG9EQUFTQSxDQUFDVyxLQUFLO1FBQzFCQyxNQUFNYixzREFBV0EsQ0FBQ2MsSUFBSTtRQUN0QkMsU0FBUyxFQUFFO1FBQ1hDLE1BQU0sQ0FBQztRQUNQQyxPQUFPO0lBQ1Q7QUFDRixFQUFFO0FBQ0ssTUFBTUMsb0JBQStDO0lBQzFEYixlQUFlO0lBQ2ZDLFVBQVU7SUFDVkMsUUFBUTtJQUNSWSxRQUFRO0FBQ1YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vdHlwZXMvc3FsLnRzP2Y5YTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVF1ZXJ5IH0gZnJvbSAnQGdyYWZhbmEvc2NoZW1hJztcbmltcG9ydCB7IEJ1aWxkZXJNb2RlLCBRdWVyeVR5cGUsIFF1ZXJ5QnVpbGRlck9wdGlvbnMgfSBmcm9tICcuL3F1ZXJ5QnVpbGRlcic7XG5cbi8qKlxuICogRWRpdG9yVHlwZSBkZXRlcm1pbmVzIHRoZSBxdWVyeSBlZGl0b3IgdHlwZS5cbiAqL1xuZXhwb3J0IGVudW0gRWRpdG9yVHlwZSB7XG4gIFNRTCA9ICdzcWwnLFxuICBCdWlsZGVyID0gJ2J1aWxkZXInLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENIUXVlcnlCYXNlIGV4dGVuZHMgRGF0YVF1ZXJ5IHtcbiAgcGx1Z2luVmVyc2lvbjogc3RyaW5nLFxuICBlZGl0b3JUeXBlOiBFZGl0b3JUeXBlO1xuICByYXdTcWw6IHN0cmluZztcblxuICAvKipcbiAgICogUkVRVUlSRUQgYnkgYmFja2VuZCBmb3IgYXV0byBzZWxlY3RpbmcgcHJlZmVycmVkVmlzdWFsaXphdGlvblR5cGUuXG4gICAqIE9ubHkgdXNlZCBpbiBleHBsb3JlIHZpZXcuXG4gICAqIHNyYzogaHR0cHM6Ly9naXRodWIuY29tL2dyYWZhbmEvc3FsZHMvYmxvYi9kZGEyZGMwYTU0YjEyODk2MWZjOWY3ODg1YmFhYmY1NTVmM2RkZmRjL3F1ZXJ5LmdvI0wzNlxuICAgKi9cbiAgZm9ybWF0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENIU3FsUXVlcnkgZXh0ZW5kcyBDSFF1ZXJ5QmFzZSB7XG4gIGVkaXRvclR5cGU6IEVkaXRvclR5cGUuU1FMO1xuICBxdWVyeVR5cGU/OiBRdWVyeVR5cGU7IC8vIG9ubHkgdXNlZCBpbiBleHBsb3JlIHZpZXdcbiAgbWV0YT86IHtcbiAgICB0aW1lem9uZT86IHN0cmluZztcbiAgICAvLyBtZXRhIGZpZWxkcyB0byBiZSB1c2VkIGp1c3QgZm9yIGJ1aWxkaW5nIGJ1aWxkZXIgb3B0aW9ucyB3aGVuIG1pZ3JhdGluZyBiYWNrIHRvIEVkaXRvclR5cGUuQnVpbGRlclxuICAgIGJ1aWxkZXJPcHRpb25zPzogUXVlcnlCdWlsZGVyT3B0aW9ucztcbiAgfTtcbiAgZXhwYW5kPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDSEJ1aWxkZXJRdWVyeSBleHRlbmRzIENIUXVlcnlCYXNlIHtcbiAgZWRpdG9yVHlwZTogRWRpdG9yVHlwZS5CdWlsZGVyO1xuICBidWlsZGVyT3B0aW9uczogUXVlcnlCdWlsZGVyT3B0aW9ucztcbiAgbWV0YT86IHtcbiAgICB0aW1lem9uZT86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgQ0hRdWVyeSA9IENIU3FsUXVlcnkgfCBDSEJ1aWxkZXJRdWVyeTtcblxuLy8gVE9ETzogdGhlc2UgYXJlbid0IHJlYWxseSB0eXBlc1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRFZGl0b3JUeXBlOiBFZGl0b3JUeXBlID0gRWRpdG9yVHlwZS5CdWlsZGVyO1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDSEJ1aWxkZXJRdWVyeTogT21pdDxDSEJ1aWxkZXJRdWVyeSwgJ3JlZklkJz4gPSB7XG4gIHBsdWdpblZlcnNpb246ICcnLFxuICBlZGl0b3JUeXBlOiBFZGl0b3JUeXBlLkJ1aWxkZXIsXG4gIHJhd1NxbDogJycsXG4gIGJ1aWxkZXJPcHRpb25zOiB7XG4gICAgZGF0YWJhc2U6ICcnLFxuICAgIHRhYmxlOiAnJyxcbiAgICBxdWVyeVR5cGU6IFF1ZXJ5VHlwZS5UYWJsZSxcbiAgICBtb2RlOiBCdWlsZGVyTW9kZS5MaXN0LFxuICAgIGNvbHVtbnM6IFtdLFxuICAgIG1ldGE6IHt9LFxuICAgIGxpbWl0OiAxMDAwXG4gIH0sXG59O1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDSFNxbFF1ZXJ5OiBPbWl0PENIU3FsUXVlcnksICdyZWZJZCc+ID0ge1xuICBwbHVnaW5WZXJzaW9uOiAnJyxcbiAgZWRpdG9yVHlwZTogRWRpdG9yVHlwZS5TUUwsXG4gIHJhd1NxbDogJycsXG4gIGV4cGFuZDogZmFsc2UsXG59O1xuIl0sIm5hbWVzIjpbIkJ1aWxkZXJNb2RlIiwiUXVlcnlUeXBlIiwiRWRpdG9yVHlwZSIsImRlZmF1bHRFZGl0b3JUeXBlIiwiZGVmYXVsdENIQnVpbGRlclF1ZXJ5IiwicGx1Z2luVmVyc2lvbiIsImVkaXRvclR5cGUiLCJyYXdTcWwiLCJidWlsZGVyT3B0aW9ucyIsImRhdGFiYXNlIiwidGFibGUiLCJxdWVyeVR5cGUiLCJUYWJsZSIsIm1vZGUiLCJMaXN0IiwiY29sdW1ucyIsIm1ldGEiLCJsaW1pdCIsImRlZmF1bHRDSFNxbFF1ZXJ5IiwiZXhwYW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./types/sql.ts\n");

/***/ }),

/***/ "./utils/version.ts":
/*!**************************!*\
  !*** ./utils/version.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SemVersion: () => (/* binding */ SemVersion),\n/* harmony export */   isVersionGtOrEq: () => (/* binding */ isVersionGtOrEq),\n/* harmony export */   pluginVersion: () => (/* binding */ pluginVersion)\n/* harmony export */ });\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../package.json */ \"../package.json\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ \"lodash\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n\n\nconst pluginVersion = _package_json__WEBPACK_IMPORTED_MODULE_0__.version;\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\nclass SemVersion {\n    isGtOrEq(version) {\n        const compared = new SemVersion(version);\n        for(let i = 0; i < this.comparable.length; ++i){\n            if (this.comparable[i] > compared.comparable[i]) {\n                return true;\n            }\n            if (this.comparable[i] < compared.comparable[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    isValid() {\n        return (0,lodash__WEBPACK_IMPORTED_MODULE_1__.isNumber)(this.major);\n    }\n    get comparable() {\n        return [\n            this.major,\n            this.minor,\n            this.patch\n        ];\n    }\n    constructor(version){\n        _define_property(this, \"major\", void 0);\n        _define_property(this, \"minor\", void 0);\n        _define_property(this, \"patch\", void 0);\n        _define_property(this, \"meta\", void 0);\n        this.major = 0;\n        this.minor = 0;\n        this.patch = 0;\n        this.meta = '';\n        const match = versionPattern.exec(version);\n        if (match) {\n            this.major = Number(match[1]);\n            this.minor = Number(match[2] || 0);\n            this.patch = Number(match[3] || 0);\n            this.meta = match[4];\n        }\n    }\n}\nfunction isVersionGtOrEq(a, b) {\n    const aSemver = new SemVersion(a);\n    return aSemver.isGtOrEq(b);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy92ZXJzaW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0M7QUFDYjtBQUUzQixNQUFNRSxnQkFBZ0JGLGtEQUFxQixDQUFDO0FBRW5ELE1BQU1JLGlCQUFpQjtBQUVoQixNQUFNQztJQXFCWEMsU0FBU0gsT0FBZSxFQUFXO1FBQ2pDLE1BQU1JLFdBQVcsSUFBSUYsV0FBV0Y7UUFFaEMsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUksSUFBSSxDQUFDQyxVQUFVLENBQUNDLE1BQU0sRUFBRSxFQUFFRixFQUFHO1lBQy9DLElBQUksSUFBSSxDQUFDQyxVQUFVLENBQUNELEVBQUUsR0FBR0QsU0FBU0UsVUFBVSxDQUFDRCxFQUFFLEVBQUU7Z0JBQy9DLE9BQU87WUFDVDtZQUNBLElBQUksSUFBSSxDQUFDQyxVQUFVLENBQUNELEVBQUUsR0FBR0QsU0FBU0UsVUFBVSxDQUFDRCxFQUFFLEVBQUU7Z0JBQy9DLE9BQU87WUFDVDtRQUNGO1FBQ0EsT0FBTztJQUNUO0lBRUFHLFVBQW1CO1FBQ2pCLE9BQU9WLGdEQUFRQSxDQUFDLElBQUksQ0FBQ1csS0FBSztJQUM1QjtJQUVBLElBQUlILGFBQWE7UUFDZixPQUFPO1lBQUMsSUFBSSxDQUFDRyxLQUFLO1lBQUUsSUFBSSxDQUFDQyxLQUFLO1lBQUUsSUFBSSxDQUFDQyxLQUFLO1NBQUM7SUFDN0M7SUFuQ0FDLFlBQVlaLE9BQWUsQ0FBRTtRQUw3QlMsdUJBQUFBLFNBQUFBLEtBQUFBO1FBQ0FDLHVCQUFBQSxTQUFBQSxLQUFBQTtRQUNBQyx1QkFBQUEsU0FBQUEsS0FBQUE7UUFDQUUsdUJBQUFBLFFBQUFBLEtBQUFBO1FBR0UsSUFBSSxDQUFDSixLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNDLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0MsS0FBSyxHQUFHO1FBQ2IsSUFBSSxDQUFDRSxJQUFJLEdBQUc7UUFFWixNQUFNQyxRQUFRYixlQUFlYyxJQUFJLENBQUNmO1FBQ2xDLElBQUljLE9BQU87WUFDVCxJQUFJLENBQUNMLEtBQUssR0FBR08sT0FBT0YsS0FBSyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDSixLQUFLLEdBQUdNLE9BQU9GLEtBQUssQ0FBQyxFQUFFLElBQUk7WUFDaEMsSUFBSSxDQUFDSCxLQUFLLEdBQUdLLE9BQU9GLEtBQUssQ0FBQyxFQUFFLElBQUk7WUFDaEMsSUFBSSxDQUFDRCxJQUFJLEdBQUdDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCO0lBQ0Y7QUF1QkY7QUFFTyxTQUFTRyxnQkFBZ0JDLENBQVMsRUFBRUMsQ0FBUztJQUNsRCxNQUFNQyxVQUFVLElBQUlsQixXQUFXZ0I7SUFDL0IsT0FBT0UsUUFBUWpCLFFBQVEsQ0FBQ2dCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS1jbGlja2hvdXNlLWRhdGFzb3VyY2UvLi91dGlscy92ZXJzaW9uLnRzPzU2ZTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBsdWdpblBhY2thZ2UgZnJvbSAnLi4vLi4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7IGlzTnVtYmVyIH0gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGNvbnN0IHBsdWdpblZlcnNpb24gPSBwbHVnaW5QYWNrYWdlLnZlcnNpb247XG5cbmNvbnN0IHZlcnNpb25QYXR0ZXJuID0gL14oXFxkKykoPzpcXC4oXFxkKykpPyg/OlxcLihcXGQrKSk/KD86LShbMC05QS1aYS16XFwuXSspKT8vO1xuXG5leHBvcnQgY2xhc3MgU2VtVmVyc2lvbiB7XG4gIG1ham9yOiBudW1iZXI7XG4gIG1pbm9yOiBudW1iZXI7XG4gIHBhdGNoOiBudW1iZXI7XG4gIG1ldGE6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcih2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLm1ham9yID0gMDtcbiAgICB0aGlzLm1pbm9yID0gMDtcbiAgICB0aGlzLnBhdGNoID0gMDtcbiAgICB0aGlzLm1ldGEgPSAnJztcblxuICAgIGNvbnN0IG1hdGNoID0gdmVyc2lvblBhdHRlcm4uZXhlYyh2ZXJzaW9uKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHRoaXMubWFqb3IgPSBOdW1iZXIobWF0Y2hbMV0pO1xuICAgICAgdGhpcy5taW5vciA9IE51bWJlcihtYXRjaFsyXSB8fCAwKTtcbiAgICAgIHRoaXMucGF0Y2ggPSBOdW1iZXIobWF0Y2hbM10gfHwgMCk7XG4gICAgICB0aGlzLm1ldGEgPSBtYXRjaFs0XTtcbiAgICB9XG4gIH1cblxuICBpc0d0T3JFcSh2ZXJzaW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBjb21wYXJlZCA9IG5ldyBTZW1WZXJzaW9uKHZlcnNpb24pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbXBhcmFibGUubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBhcmFibGVbaV0gPiBjb21wYXJlZC5jb21wYXJhYmxlW2ldKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29tcGFyYWJsZVtpXSA8IGNvbXBhcmVkLmNvbXBhcmFibGVbaV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlzVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHRoaXMubWFqb3IpO1xuICB9XG5cbiAgZ2V0IGNvbXBhcmFibGUoKSB7XG4gICAgcmV0dXJuIFt0aGlzLm1ham9yLCB0aGlzLm1pbm9yLCB0aGlzLnBhdGNoXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWZXJzaW9uR3RPckVxKGE6IHN0cmluZywgYjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGFTZW12ZXIgPSBuZXcgU2VtVmVyc2lvbihhKTtcbiAgcmV0dXJuIGFTZW12ZXIuaXNHdE9yRXEoYik7XG59XG4iXSwibmFtZXMiOlsicGx1Z2luUGFja2FnZSIsImlzTnVtYmVyIiwicGx1Z2luVmVyc2lvbiIsInZlcnNpb24iLCJ2ZXJzaW9uUGF0dGVybiIsIlNlbVZlcnNpb24iLCJpc0d0T3JFcSIsImNvbXBhcmVkIiwiaSIsImNvbXBhcmFibGUiLCJsZW5ndGgiLCJpc1ZhbGlkIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwiY29uc3RydWN0b3IiLCJtZXRhIiwibWF0Y2giLCJleGVjIiwiTnVtYmVyIiwiaXNWZXJzaW9uR3RPckVxIiwiYSIsImIiLCJhU2VtdmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/version.ts\n");

/***/ }),

/***/ "./views/CHConfigEditor.tsx":
/*!**********************************!*\
  !*** ./views/CHConfigEditor.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigEditor: () => (/* binding */ ConfigEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/data */ \"@grafana/data\");\n/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_data__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_ui_CertificationKey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/ui/CertificationKey */ \"./components/ui/CertificationKey.tsx\");\n/* harmony import */ var _types_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/config */ \"./types/config.ts\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! semver */ \"../node_modules/semver/index.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/experimental/ConfigSection */ \"./components/experimental/ConfigSection/index.ts\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @grafana/runtime */ \"@grafana/runtime\");\n/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_grafana_runtime__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _components_Divider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/Divider */ \"./components/Divider.tsx\");\n/* harmony import */ var _types_queryBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../types/queryBuilder */ \"./types/queryBuilder.ts\");\n/* harmony import */ var _components_configEditor_DefaultDatabaseTableConfig__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/configEditor/DefaultDatabaseTableConfig */ \"./components/configEditor/DefaultDatabaseTableConfig.tsx\");\n/* harmony import */ var _components_configEditor_QuerySettingsConfig__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/configEditor/QuerySettingsConfig */ \"./components/configEditor/QuerySettingsConfig.tsx\");\n/* harmony import */ var _components_configEditor_LogsConfig__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/configEditor/LogsConfig */ \"./components/configEditor/LogsConfig.tsx\");\n/* harmony import */ var _components_configEditor_TracesConfig__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/configEditor/TracesConfig */ \"./components/configEditor/TracesConfig.tsx\");\n/* harmony import */ var _components_configEditor_HttpHeadersConfig__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/configEditor/HttpHeadersConfig */ \"./components/configEditor/HttpHeadersConfig.tsx\");\n/* harmony import */ var _labels__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../labels */ \"./labels.ts\");\n/* harmony import */ var _CHConfigEditorHooks__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./CHConfigEditorHooks */ \"./views/CHConfigEditorHooks.ts\");\n/* harmony import */ var _components_configEditor_AliasTableConfig__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../components/configEditor/AliasTableConfig */ \"./components/configEditor/AliasTableConfig.tsx\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ConfigEditor = (props)=>{\n    const { options, onOptionsChange } = props;\n    const { jsonData, secureJsonFields } = options;\n    const labels = _labels__WEBPACK_IMPORTED_MODULE_15__[\"default\"].components.Config.ConfigEditor;\n    const secureJsonData = options.secureJsonData || {};\n    const hasTLSCACert = secureJsonFields && secureJsonFields.tlsCACert;\n    const hasTLSClientCert = secureJsonFields && secureJsonFields.tlsClientCert;\n    const hasTLSClientKey = secureJsonFields && secureJsonFields.tlsClientKey;\n    const protocolOptions = [\n        {\n            label: 'Native',\n            value: _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Native\n        },\n        {\n            label: 'HTTP',\n            value: _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Http\n        }\n    ];\n    jsonData.oauthPassThru = true;\n    (0,_CHConfigEditorHooks__WEBPACK_IMPORTED_MODULE_16__.useConfigDefaults)(options, onOptionsChange);\n    const onPortChange = (port)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                port: +port\n            })\n        }));\n    };\n    const onTLSSettingsChange = (key, value)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                [key]: value\n            })\n        }));\n    };\n    const onSwitchToggle = (key, value)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                [key]: value\n            })\n        }));\n    };\n    const onProtocolToggle = (protocol)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                protocol: protocol\n            })\n        }));\n    };\n    const onCertificateChangeFactory = (key, value)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            secureJsonData: _object_spread_props(_object_spread({}, secureJsonData), {\n                [key]: value\n            })\n        }));\n    };\n    const onResetClickFactory = (key)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            secureJsonFields: _object_spread_props(_object_spread({}, secureJsonFields), {\n                [key]: false\n            }),\n            secureJsonData: _object_spread_props(_object_spread({}, secureJsonData), {\n                [key]: ''\n            })\n        }));\n    };\n    const onResetPassword = ()=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            secureJsonFields: _object_spread_props(_object_spread({}, options.secureJsonFields), {\n                password: false\n            }),\n            secureJsonData: _object_spread_props(_object_spread({}, options.secureJsonData), {\n                password: ''\n            })\n        }));\n    };\n    const onCustomSettingsChange = (customSettings)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                customSettings: customSettings.filter((s)=>!!s.setting && !!s.value)\n            })\n        }));\n    };\n    const onLogsConfigChange = (key, value)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                logs: _object_spread_props(_object_spread({}, options.jsonData.logs), {\n                    [key]: value\n                })\n            })\n        }));\n    };\n    const onTracesConfigChange = (key, value)=>{\n        var _options_jsonData_traces;\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                traces: _object_spread_props(_object_spread({}, options.jsonData.traces), {\n                    durationUnit: ((_options_jsonData_traces = options.jsonData.traces) === null || _options_jsonData_traces === void 0 ? void 0 : _options_jsonData_traces.durationUnit) || _types_queryBuilder__WEBPACK_IMPORTED_MODULE_9__.TimeUnit.Nanoseconds,\n                    [key]: value\n                })\n            })\n        }));\n    };\n    const onAliasTableConfigChange = (aliasTables)=>{\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n                aliasTables\n            })\n        }));\n    };\n    const [customSettings, setCustomSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(jsonData.customSettings || []);\n    const hasAdditionalSettings = Boolean(window.location.hash || // if trying to link to section on page, open all settings (React breaks this?)\n    options.jsonData.defaultDatabase || options.jsonData.defaultTable || options.jsonData.dialTimeout || options.jsonData.queryTimeout || options.jsonData.validateSql || options.jsonData.enableSecureSocksProxy || options.jsonData.customSettings || options.jsonData.logs || options.jsonData.traces);\n    const defaultPort = jsonData.secure ? jsonData.protocol === _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Native ? labels.serverPort.secureNativePort : labels.serverPort.secureHttpPort : jsonData.protocol === _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Native ? labels.serverPort.insecureNativePort : labels.serverPort.insecureHttpPort;\n    const portDescription = `${labels.serverPort.tooltip} (default for ${jsonData.secure ? 'secure' : ''} ${jsonData.protocol}: ${defaultPort})`;\n    const uidWarning = !options.uid && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Alert, {\n        title: \"\",\n        severity: \"warning\",\n        buttonContent: \"Close\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.VerticalGroup, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, 'This datasource is missing the', /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"code\", null, \"uid\"), 'field in its configuration. If your datasource is ', /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n        style: {\n            textDecoration: 'underline'\n        },\n        href: \"https://grafana.com/docs/grafana/latest/administration/provisioning/#data-sources\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, \"provisioned via YAML\"), ', please verify the UID is set. This is required to enable data linking between logs and traces.')));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, uidWarning, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__.DataSourceDescription, {\n        dataSourceName: \"Clickhouse\",\n        docsLink: \"https://grafana.com/grafana/plugins/grafana-clickhouse-datasource/\",\n        hasRequiredFields: true\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__.ConfigSection, {\n        title: \"Server\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        required: true,\n        label: labels.serverAddress.label,\n        description: labels.serverAddress.tooltip,\n        invalid: !jsonData.host,\n        error: labels.serverAddress.error\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: \"host\",\n        width: 80,\n        value: jsonData.host || '',\n        onChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'host'),\n        label: labels.serverAddress.label,\n        \"aria-label\": labels.serverAddress.label,\n        placeholder: labels.serverAddress.placeholder\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        required: true,\n        label: labels.serverPort.label,\n        description: portDescription,\n        invalid: !jsonData.port,\n        error: labels.serverPort.error\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: \"port\",\n        width: 40,\n        type: \"number\",\n        value: jsonData.port || '',\n        onChange: (e)=>onPortChange(e.currentTarget.value),\n        label: labels.serverPort.label,\n        \"aria-label\": labels.serverPort.label,\n        placeholder: defaultPort\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.protocol.label,\n        description: labels.protocol.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.RadioButtonGroup, {\n        options: protocolOptions,\n        disabledOptions: [],\n        value: jsonData.protocol || _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Native,\n        onChange: (e)=>onProtocolToggle(e)\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.secure.label,\n        description: labels.secure.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        id: \"secure\",\n        className: \"gf-form\",\n        value: jsonData.secure || false,\n        onChange: (e)=>onSwitchToggle('secure', e.currentTarget.checked)\n    })), jsonData.protocol === _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Http && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.path.label,\n        description: labels.path.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        value: jsonData.path || '',\n        name: \"path\",\n        width: 80,\n        onChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'path'),\n        label: labels.path.label,\n        \"aria-label\": labels.path.label,\n        placeholder: labels.path.placeholder\n    }))), jsonData.protocol === _types_config__WEBPACK_IMPORTED_MODULE_4__.Protocol.Http && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_configEditor_HttpHeadersConfig__WEBPACK_IMPORTED_MODULE_14__.HttpHeadersConfig, {\n        headers: options.jsonData.httpHeaders,\n        forwardGrafanaHeaders: options.jsonData.forwardGrafanaHeaders,\n        secureFields: options.secureJsonFields,\n        onHttpHeadersChange: (headers)=>(0,_CHConfigEditorHooks__WEBPACK_IMPORTED_MODULE_16__.onHttpHeadersChange)(headers, options, onOptionsChange),\n        onForwardGrafanaHeadersChange: (forwardGrafanaHeaders)=>onSwitchToggle('forwardGrafanaHeaders', forwardGrafanaHeaders)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__.ConfigSection, {\n        title: \"TLS / SSL Settings\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.tlsSkipVerify.label,\n        description: labels.tlsSkipVerify.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        className: \"gf-form\",\n        value: jsonData.tlsSkipVerify || false,\n        onChange: (e)=>onTLSSettingsChange('tlsSkipVerify', e.currentTarget.checked)\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.tlsClientAuth.label,\n        description: labels.tlsClientAuth.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        className: \"gf-form\",\n        value: jsonData.tlsAuth || false,\n        onChange: (e)=>onTLSSettingsChange('tlsAuth', e.currentTarget.checked)\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.tlsAuthWithCACert.label,\n        description: labels.tlsAuthWithCACert.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        className: \"gf-form\",\n        value: jsonData.tlsAuthWithCACert || false,\n        onChange: (e)=>onTLSSettingsChange('tlsAuthWithCACert', e.currentTarget.checked)\n    })), jsonData.tlsAuthWithCACert && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ui_CertificationKey__WEBPACK_IMPORTED_MODULE_3__.CertificationKey, {\n        hasCert: !!hasTLSCACert,\n        onChange: (e)=>onCertificateChangeFactory('tlsCACert', e.currentTarget.value),\n        placeholder: labels.tlsCACert.placeholder,\n        label: labels.tlsCACert.label,\n        onClick: ()=>onResetClickFactory('tlsCACert')\n    }), jsonData.tlsAuth && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ui_CertificationKey__WEBPACK_IMPORTED_MODULE_3__.CertificationKey, {\n        hasCert: !!hasTLSClientCert,\n        onChange: (e)=>onCertificateChangeFactory('tlsClientCert', e.currentTarget.value),\n        placeholder: labels.tlsClientCert.placeholder,\n        label: labels.tlsClientCert.label,\n        onClick: ()=>onResetClickFactory('tlsClientCert')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_ui_CertificationKey__WEBPACK_IMPORTED_MODULE_3__.CertificationKey, {\n        hasCert: !!hasTLSClientKey,\n        placeholder: labels.tlsClientKey.placeholder,\n        label: labels.tlsClientKey.label,\n        onChange: (e)=>onCertificateChangeFactory('tlsClientKey', e.currentTarget.value),\n        onClick: ()=>onResetClickFactory('tlsClientKey')\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__.ConfigSection, {\n        title: \"Credentials\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.username.label,\n        description: labels.username.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n        name: \"user\",\n        width: 40,\n        value: jsonData.username || '',\n        onChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'username'),\n        label: labels.username.label,\n        \"aria-label\": labels.username.label,\n        placeholder: labels.username.placeholder\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.password.label,\n        description: labels.password.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.SecretInput, {\n        name: \"pwd\",\n        width: 40,\n        label: labels.password.label,\n        \"aria-label\": labels.password.label,\n        placeholder: labels.password.placeholder,\n        value: secureJsonData.password || '',\n        isConfigured: secureJsonFields && secureJsonFields.password,\n        onReset: onResetPassword,\n        onChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceSecureJsonDataOption)(props, 'password')\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__.ConfigSection, {\n        title: \"Additional settings\",\n        description: \"Additional settings are optional settings that can be configured for more control over your data source. This includes the default database, dial and query timeouts, SQL validation, and custom ClickHouse settings.\",\n        isCollapsible: true,\n        isInitiallyOpen: hasAdditionalSettings\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_configEditor_DefaultDatabaseTableConfig__WEBPACK_IMPORTED_MODULE_10__.DefaultDatabaseTableConfig, {\n        defaultDatabase: jsonData.defaultDatabase,\n        defaultTable: jsonData.defaultTable,\n        onDefaultDatabaseChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'defaultDatabase'),\n        onDefaultTableChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'defaultTable')\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_configEditor_QuerySettingsConfig__WEBPACK_IMPORTED_MODULE_11__.QuerySettingsConfig, {\n        dialTimeout: jsonData.dialTimeout,\n        queryTimeout: jsonData.queryTimeout,\n        validateSql: jsonData.validateSql,\n        onDialTimeoutChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'dialTimeout'),\n        onQueryTimeoutChange: (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.onUpdateDatasourceJsonDataOption)(props, 'queryTimeout'),\n        onValidateSqlChange: (e)=>onSwitchToggle('validateSql', e.currentTarget.checked)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_configEditor_LogsConfig__WEBPACK_IMPORTED_MODULE_12__.LogsConfig, {\n        logsConfig: jsonData.logs,\n        onDefaultDatabaseChange: (db)=>onLogsConfigChange('defaultDatabase', db),\n        onDefaultTableChange: (table)=>onLogsConfigChange('defaultTable', table),\n        onOtelEnabledChange: (v)=>onLogsConfigChange('otelEnabled', v),\n        onOtelVersionChange: (v)=>onLogsConfigChange('otelVersion', v),\n        onTimeColumnChange: (c)=>onLogsConfigChange('timeColumn', c),\n        onLevelColumnChange: (c)=>onLogsConfigChange('levelColumn', c),\n        onMessageColumnChange: (c)=>onLogsConfigChange('messageColumn', c),\n        onSelectContextColumnsChange: (c)=>onLogsConfigChange('selectContextColumns', c),\n        onContextColumnsChange: (c)=>onLogsConfigChange('contextColumns', c)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_configEditor_TracesConfig__WEBPACK_IMPORTED_MODULE_13__.TracesConfig, {\n        tracesConfig: jsonData.traces,\n        onDefaultDatabaseChange: (db)=>onTracesConfigChange('defaultDatabase', db),\n        onDefaultTableChange: (table)=>onTracesConfigChange('defaultTable', table),\n        onOtelEnabledChange: (v)=>onTracesConfigChange('otelEnabled', v),\n        onOtelVersionChange: (v)=>onTracesConfigChange('otelVersion', v),\n        onTraceIdColumnChange: (c)=>onTracesConfigChange('traceIdColumn', c),\n        onSpanIdColumnChange: (c)=>onTracesConfigChange('spanIdColumn', c),\n        onOperationNameColumnChange: (c)=>onTracesConfigChange('operationNameColumn', c),\n        onParentSpanIdColumnChange: (c)=>onTracesConfigChange('parentSpanIdColumn', c),\n        onServiceNameColumnChange: (c)=>onTracesConfigChange('serviceNameColumn', c),\n        onDurationColumnChange: (c)=>onTracesConfigChange('durationColumn', c),\n        onDurationUnitChange: (c)=>onTracesConfigChange('durationUnit', c),\n        onStartTimeColumnChange: (c)=>onTracesConfigChange('startTimeColumn', c),\n        onTagsColumnChange: (c)=>onTracesConfigChange('tagsColumn', c),\n        onServiceTagsColumnChange: (c)=>onTracesConfigChange('serviceTagsColumn', c)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_configEditor_AliasTableConfig__WEBPACK_IMPORTED_MODULE_17__.AliasTableConfig, {\n        aliasTables: jsonData.aliasTables,\n        onAliasTablesChange: onAliasTableConfigChange\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_Divider__WEBPACK_IMPORTED_MODULE_8__.Divider, null), _grafana_runtime__WEBPACK_IMPORTED_MODULE_7__.config.secureSocksDSProxyEnabled && (0,semver__WEBPACK_IMPORTED_MODULE_5__.gte)(_grafana_runtime__WEBPACK_IMPORTED_MODULE_7__.config.buildInfo.version, '10.0.0') && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n        label: labels.secureSocksProxy.label,\n        description: labels.secureSocksProxy.tooltip\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Switch, {\n        className: \"gf-form\",\n        value: jsonData.enableSecureSocksProxy || false,\n        onChange: (e)=>onSwitchToggle('enableSecureSocksProxy', e.currentTarget.checked)\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_experimental_ConfigSection__WEBPACK_IMPORTED_MODULE_6__.ConfigSubSection, {\n        title: \"Custom Settings\"\n    }, customSettings.map(({ setting, value }, i)=>{\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.HorizontalGroup, {\n            key: i\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n            label: `Setting`,\n            \"aria-label\": `Setting`\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n            value: setting,\n            placeholder: 'Setting',\n            onChange: (changeEvent)=>{\n                let newSettings = customSettings.concat();\n                newSettings[i] = {\n                    setting: changeEvent.target.value,\n                    value\n                };\n                setCustomSettings(newSettings);\n            },\n            onBlur: ()=>{\n                onCustomSettingsChange(customSettings);\n            }\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Field, {\n            label: 'Value',\n            \"aria-label\": `Value`\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {\n            value: value,\n            placeholder: 'Value',\n            onChange: (changeEvent)=>{\n                let newSettings = customSettings.concat();\n                newSettings[i] = {\n                    setting,\n                    value: changeEvent.target.value\n                };\n                setCustomSettings(newSettings);\n            },\n            onBlur: ()=>{\n                onCustomSettingsChange(customSettings);\n            }\n        })));\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {\n        variant: \"secondary\",\n        icon: \"plus\",\n        type: \"button\",\n        onClick: ()=>{\n            setCustomSettings([\n                ...customSettings,\n                {\n                    setting: '',\n                    value: ''\n                }\n            ]);\n        }\n    }, \"Add custom setting\"))));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./views/CHConfigEditor.tsx\n");

/***/ }),

/***/ "./views/CHConfigEditorHooks.ts":
/*!**************************************!*\
  !*** ./views/CHConfigEditorHooks.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onHttpHeadersChange: () => (/* binding */ onHttpHeadersChange),\n/* harmony export */   useConfigDefaults: () => (/* binding */ useConfigDefaults)\n/* harmony export */ });\n/* harmony import */ var _otel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../otel */ \"./otel.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/config */ \"./types/config.ts\");\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n/**\n * Handles saving HTTP headers to Grafana config.\n * \n * All header keys go to the unsecure config.\n * If the header is marked as secure, its value goes to the\n * secure json config where it is hidden.\n */ const onHttpHeadersChange = (headers, options, onOptionsChange)=>{\n    const httpHeaders = [];\n    const secureHttpHeaderKeys = {};\n    const secureHttpHeaderValues = {};\n    for (let header of headers){\n        if (!header.name) {\n            continue;\n        }\n        if (header.secure) {\n            const key = `secureHttpHeaders.${header.name}`;\n            secureHttpHeaderKeys[key] = true;\n            if (header.value) {\n                secureHttpHeaderValues[key] = header.value;\n                header.value = '';\n            }\n        }\n        httpHeaders.push(header);\n    }\n    const currentSecureJsonFields = _object_spread({}, options.secureJsonFields);\n    for(let key in currentSecureJsonFields){\n        if (!secureHttpHeaderKeys[key] && key.startsWith('secureHttpHeaders.')) {\n            // Remove key from secureJsonData when it is no longer present in header config\n            secureHttpHeaderKeys[key] = false;\n            secureHttpHeaderValues[key] = '';\n        }\n    }\n    onOptionsChange(_object_spread_props(_object_spread({}, options), {\n        jsonData: _object_spread_props(_object_spread({}, options.jsonData), {\n            httpHeaders\n        }),\n        secureJsonFields: _object_spread({}, options.secureJsonFields, secureHttpHeaderKeys),\n        secureJsonData: _object_spread({}, options.secureJsonData, secureHttpHeaderValues)\n    }));\n};\n/**\n * Applies default settings and migrations to config options.\n */ const useConfigDefaults = (options, onOptionsChange)=>{\n    const appliedDefaults = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (appliedDefaults.current) {\n            return;\n        }\n        const jsonData = _object_spread({}, options.jsonData);\n        jsonData.version = _utils_version__WEBPACK_IMPORTED_MODULE_3__.pluginVersion; // Always overwrite version\n        // v3 Migration\n        const v3ServerField = jsonData['server'];\n        if (v3ServerField && !jsonData.host) {\n            jsonData.host = v3ServerField;\n        }\n        delete jsonData['server'];\n        const v3TimeoutField = jsonData['timeout'];\n        if (v3TimeoutField && !jsonData.dialTimeout) {\n            jsonData.dialTimeout = v3TimeoutField;\n        }\n        delete jsonData['timeout'];\n        // Defaults\n        if (!jsonData.protocol) {\n            jsonData.protocol = _types_config__WEBPACK_IMPORTED_MODULE_2__.Protocol.Native;\n        }\n        if (!jsonData.logs || jsonData.logs.defaultTable === undefined) {\n            jsonData.logs = _object_spread_props(_object_spread({}, jsonData.logs), {\n                defaultTable: _otel__WEBPACK_IMPORTED_MODULE_0__.defaultLogsTable,\n                selectContextColumns: true,\n                contextColumns: []\n            });\n        }\n        if (!jsonData.traces || jsonData.traces.defaultTable === undefined) {\n            jsonData.traces = _object_spread_props(_object_spread({}, jsonData.traces), {\n                defaultTable: _otel__WEBPACK_IMPORTED_MODULE_0__.defaultTraceTable\n            });\n        }\n        onOptionsChange(_object_spread_props(_object_spread({}, options), {\n            jsonData\n        }));\n        appliedDefaults.current = true;\n    }, [\n        options,\n        onOptionsChange\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./views/CHConfigEditorHooks.ts\n");

/***/ }),

/***/ "./views/CHQueryEditor.tsx":
/*!*********************************!*\
  !*** ./views/CHQueryEditor.tsx ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHQueryEditor: () => (/* binding */ CHQueryEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_queryBuilder_EditorTypeSwitcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/queryBuilder/EditorTypeSwitcher */ \"./components/queryBuilder/EditorTypeSwitcher.tsx\");\n/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../styles */ \"./styles.ts\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @grafana/ui */ \"@grafana/ui\");\n/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _types_sql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/sql */ \"./types/sql.ts\");\n/* harmony import */ var _components_queryBuilder_QueryBuilder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/queryBuilder/QueryBuilder */ \"./components/queryBuilder/QueryBuilder.tsx\");\n/* harmony import */ var _data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/sqlGenerator */ \"./data/sqlGenerator.ts\");\n/* harmony import */ var _components_SqlEditor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/SqlEditor */ \"./components/SqlEditor.tsx\");\n/* harmony import */ var _data_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../data/utils */ \"./data/utils.ts\");\n/* harmony import */ var _hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../hooks/useBuilderOptionsState */ \"./hooks/useBuilderOptionsState.ts\");\n/* harmony import */ var _utils_version__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/version */ \"./utils/version.ts\");\n/* harmony import */ var _data_migration__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../data/migration */ \"./data/migration.ts\");\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _object_spread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _define_property(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _object_spread_props(target, source) {\n    source = source != null ? source : {};\n    if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n        ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Top level query editor component\n */ const CHQueryEditor = (props)=>{\n    const { datasource, query: savedQuery, onRunQuery } = props;\n    const query = (0,_data_migration__WEBPACK_IMPORTED_MODULE_11__.migrateCHQuery)(savedQuery);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: 'gf-form ' + _styles__WEBPACK_IMPORTED_MODULE_2__.styles.QueryEditor.queryType\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_queryBuilder_EditorTypeSwitcher__WEBPACK_IMPORTED_MODULE_1__.EditorTypeSwitcher, _object_spread_props(_object_spread({}, props), {\n        query: query,\n        datasource: datasource\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Button, {\n        onClick: ()=>onRunQuery()\n    }, \"Run Query\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(CHEditorByType, _object_spread_props(_object_spread({}, props), {\n        query: query\n    })));\n};\nconst CHEditorByType = (props)=>{\n    const { query, onChange, app } = props;\n    const [builderOptions, builderOptionsDispatch] = (0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_9__.useBuilderOptionsState)(query.builderOptions);\n    /**\n   * Grafana will sometimes replace the builder options directly, so we need to sync in both directions.\n   * For example, selecting an entry from the query history will cause the local state to fall out of sync.\n   * The \"key\" property is present on these historical entries.\n   */ const queryKey = query.key || '';\n    const lastKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(queryKey);\n    if (queryKey !== lastKey.current && query.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_4__.EditorType.Builder) {\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_9__.setAllOptions)(query.builderOptions || {}));\n        lastKey.current = queryKey;\n    }\n    /**\n   * Sync builder options when switching from SQL Editor to Query Builder\n   */ const lastEditorType = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (query.editorType !== lastEditorType.current && query.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_4__.EditorType.Builder) {\n        builderOptionsDispatch((0,_hooks_useBuilderOptionsState__WEBPACK_IMPORTED_MODULE_9__.setAllOptions)(query.builderOptions || {}));\n        lastEditorType.current = query.editorType;\n    }\n    // Prevent trying to run empty query on load\n    const shouldSkipChanges = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    if ((0,_data_utils__WEBPACK_IMPORTED_MODULE_8__.isBuilderOptionsRunnable)(builderOptions)) {\n        shouldSkipChanges.current = false;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (shouldSkipChanges.current || query.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_4__.EditorType.SQL) {\n            return;\n        }\n        onChange(_object_spread_props(_object_spread({}, query), {\n            pluginVersion: _utils_version__WEBPACK_IMPORTED_MODULE_10__.pluginVersion,\n            editorType: _types_sql__WEBPACK_IMPORTED_MODULE_4__.EditorType.Builder,\n            rawSql: (0,_data_sqlGenerator__WEBPACK_IMPORTED_MODULE_6__.generateSql)(builderOptions),\n            builderOptions,\n            format: (0,_data_utils__WEBPACK_IMPORTED_MODULE_8__.mapQueryBuilderOptionsToGrafanaFormat)(builderOptions)\n        }));\n    // TODO: fix dependency warning with \"useEffectEvent\" once added to stable version of react\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        builderOptions\n    ]);\n    if (query.editorType === _types_sql__WEBPACK_IMPORTED_MODULE_4__.EditorType.SQL) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            \"data-testid\": \"query-editor-section-sql\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_SqlEditor__WEBPACK_IMPORTED_MODULE_7__.SqlEditor, props));\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components_queryBuilder_QueryBuilder__WEBPACK_IMPORTED_MODULE_5__.QueryBuilder, {\n        datasource: props.datasource,\n        builderOptions: builderOptions,\n        builderOptionsDispatch: builderOptionsDispatch,\n        generatedSql: query.rawSql,\n        app: app\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./views/CHQueryEditor.tsx\n");

/***/ }),

/***/ "./node_modules/grafana-public-path.js":
/*!*********************************************!*\
  !*** ./node_modules/grafana-public-path.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var amd_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! amd-module */ \"amd-module\");\n/* harmony import */ var amd_module__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(amd_module__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n__webpack_require__.p =\n  (amd_module__WEBPACK_IMPORTED_MODULE_0___default()) && (amd_module__WEBPACK_IMPORTED_MODULE_0___default().uri)\n    ? amd_module__WEBPACK_IMPORTED_MODULE_0___default().uri.slice(0, amd_module__WEBPACK_IMPORTED_MODULE_0___default().uri.lastIndexOf('/') + 1)\n    : 'public/plugins/grafana-clickhouse-datasource/';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ3JhZmFuYS1wdWJsaWMtcGF0aC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQ3VDOztBQUV2QyxxQkFBdUI7QUFDdkIsRUFBRSxtREFBYSxJQUFJLHVEQUFpQjtBQUNwQyxNQUFNLHFEQUFpQixVQUFVLHFEQUFpQjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLy4vbm9kZV9tb2R1bGVzL2dyYWZhbmEtcHVibGljLXBhdGguanM/OTNlMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBhbWRNZXRhTW9kdWxlIGZyb20gJ2FtZC1tb2R1bGUnO1xuXG5fX3dlYnBhY2tfcHVibGljX3BhdGhfXyA9XG4gIGFtZE1ldGFNb2R1bGUgJiYgYW1kTWV0YU1vZHVsZS51cmlcbiAgICA/IGFtZE1ldGFNb2R1bGUudXJpLnNsaWNlKDAsIGFtZE1ldGFNb2R1bGUudXJpLmxhc3RJbmRleE9mKCcvJykgKyAxKVxuICAgIDogJ3B1YmxpYy9wbHVnaW5zL2dyYWZhbmEtY2xpY2tob3VzZS1kYXRhc291cmNlLyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/grafana-public-path.js\n");

/***/ }),

/***/ "@emotion/css":
/*!*******************************!*\
  !*** external "@emotion/css" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__emotion_css__;

/***/ }),

/***/ "@grafana/data":
/*!********************************!*\
  !*** external "@grafana/data" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_data__;

/***/ }),

/***/ "@grafana/runtime":
/*!***********************************!*\
  !*** external "@grafana/runtime" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_runtime__;

/***/ }),

/***/ "@grafana/ui":
/*!******************************!*\
  !*** external "@grafana/ui" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_ui__;

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;

/***/ }),

/***/ "amd-module":
/*!*************************!*\
  !*** external "module" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_amd_module__;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ }),

/***/ "rxjs":
/*!***********************!*\
  !*** external "rxjs" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs__;

/***/ }),

/***/ "../package.json":
/*!***********************!*\
  !*** ../package.json ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"clickhouse-datasource","version":"4.5.1","description":"Clickhouse Datasource","engines":{"node":">=20"},"scripts":{"build":"webpack -c ./.config/webpack/webpack.config.ts --env production","dev":"webpack -w -c ./.config/webpack/webpack.config.ts --env development","e2e:report":"yarn playwright show-report","e2e:ui":"yarn playwright test --ui","e2e":"playwright test","gen-dashboards":"node ./gen-db-dashboards","lint:fix":"yarn run lint --fix","lint":"eslint --cache --ignore-path ./.gitignore --ext .js,.jsx,.ts,.tsx .","server":"docker compose up --build","sign":"npx --yes @grafana/sign-plugin@latest","spellcheck":"cspell -c cspell.config.json \\"**/*.{ts,tsx,js,go,md,mdx,yml,yaml,json,scss,css}\\"","test:ci":"jest --passWithNoTests --maxWorkers 4","test":"jest --watch --onlyChanged","typecheck":"tsc --noEmit"},"author":"Grafana Labs","license":"Apache-2.0","devDependencies":{"@babel/core":"^7.25.7","@grafana/eslint-config":"^7.0.0","@grafana/plugin-e2e":"^1.12.3","@grafana/tsconfig":"^2.0.0","@playwright/test":"^1.49.1","@swc/core":"^1.7.26","@swc/helpers":"^0.5.13","@swc/jest":"^0.2.36","@testing-library/dom":"^10.4.0","@testing-library/jest-dom":"6.5.0","@testing-library/react":"^16.0.1","@testing-library/user-event":"^14.5.2","@types/glob":"^8.1.0","@types/jest":"^29.5.13","@types/lodash":"^4.17.10","@types/node":"^22.7.4","@types/react-router-dom":"^5.3.3","@types/webpack-livereload-plugin":"^2.3.6","copy-webpack-plugin":"^12.0.2","cspell":"^8.16.1","css-loader":"^7.1.2","eslint-plugin-deprecation":"^3.0.0","eslint-webpack-plugin":"^4.2.0","fork-ts-checker-webpack-plugin":"^9.0.2","glob":"^11.0.0","identity-obj-proxy":"3.0.0","imports-loader":"^5.0.0","jest":"^29.7.0","jest-environment-jsdom":"^29.7.0","prettier":"^3.3.3","replace-in-file-webpack-plugin":"^1.0.6","sass":"1.79.4","sass-loader":"16.0.2","style-loader":"4.0.0","swc-loader":"^0.2.6","terser-webpack-plugin":"^5.3.10","ts-node":"^10.9.2","tsconfig-paths":"^4.2.0","typescript":"5.6.2","webpack":"^5.95.0","webpack-cli":"^5.1.4","webpack-livereload-plugin":"^3.0.2","webpack-subresource-integrity":"^5.1.0","webpack-virtual-modules":"^0.6.2"},"resolutions":{"rxjs":"^7.5.6"},"dependencies":{"@emotion/css":"11.13.4","@grafana/data":"^11.3.1","@grafana/runtime":"^11.3.1","@grafana/schema":"^11.2.2","@grafana/ui":"^11.2.2","js-sql-parser":"^1.6.0","pgsql-ast-parser":"^12.0.1","react":"18.3.1","react-dom":"18.3.1","react-router-dom":"5.3.4","semver":"7.6.3","tslib":"2.7.0"},"packageManager":"yarn@1.22.22","volta":{"node":"20.18.0","yarn":"1.22.22"}}');

/***/ }),

/***/ "./plugin.json":
/*!*********************!*\
  !*** ./plugin.json ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"$schema":"https://raw.githubusercontent.com/grafana/grafana/main/docs/sources/developers/plugins/plugin.schema.json","type":"datasource","name":"ClickHouse","id":"grafana-clickhouse-datasource","metrics":true,"backend":true,"logs":true,"tracing":true,"alerting":true,"annotations":true,"executable":"gpx_clickhouse","includes":[{"type":"dashboard","name":"Query Analysis","path":"dashboards/query-analysis.json"},{"type":"dashboard","name":"Data Analysis","path":"dashboards/data-analysis.json"},{"type":"dashboard","name":"Cluster Analysis","path":"dashboards/cluster-analysis.json"},{"type":"dashboard","name":"ClickHouse OTel Dashboard","path":"dashboards/opentelemetry-clickhouse.json"},{"type":"dashboard","name":"ClickHouse System Dashboards","path":"dashboards/system-dashboards.json"}],"category":"sql","info":{"description":"ClickHouse datasource plugin for Grafana","author":{"name":"Grafana Labs"},"keywords":["Simple"],"logos":{"small":"img/logo.svg","large":"img/logo.svg"},"links":[{"name":"Website","url":"https://github.com/grafana/clickhouse-datasource"},{"name":"License","url":"https://github.com/grafana/clickhouse-datasource/blob/master/LICENSE"}],"screenshots":[],"version":"%VERSION%","updated":"%TODAY%"},"dependencies":{"grafanaDependency":">=9.5.0","plugins":[]}}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "public/plugins/grafana-clickhouse-datasource/";
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./module.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});;